# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetOkmsServiceKeyResult',
    'AwaitableGetOkmsServiceKeyResult',
    'get_okms_service_key',
    'get_okms_service_key_output',
]

@pulumi.output_type
class GetOkmsServiceKeyResult:
    """
    A collection of values returned by getOkmsServiceKey.
    """
    def __init__(__self__, created_at=None, curve=None, iam=None, id=None, name=None, okms_id=None, operations=None, size=None, state=None, type=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if curve and not isinstance(curve, str):
            raise TypeError("Expected argument 'curve' to be a str")
        pulumi.set(__self__, "curve", curve)
        if iam and not isinstance(iam, dict):
            raise TypeError("Expected argument 'iam' to be a dict")
        pulumi.set(__self__, "iam", iam)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if okms_id and not isinstance(okms_id, str):
            raise TypeError("Expected argument 'okms_id' to be a str")
        pulumi.set(__self__, "okms_id", okms_id)
        if operations and not isinstance(operations, list):
            raise TypeError("Expected argument 'operations' to be a list")
        pulumi.set(__self__, "operations", operations)
        if size and not isinstance(size, float):
            raise TypeError("Expected argument 'size' to be a float")
        pulumi.set(__self__, "size", size)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def curve(self) -> str:
        return pulumi.get(self, "curve")

    @property
    @pulumi.getter
    def iam(self) -> 'outputs.GetOkmsServiceKeyIamResult':
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="okmsId")
    def okms_id(self) -> str:
        return pulumi.get(self, "okms_id")

    @property
    @pulumi.getter
    def operations(self) -> Sequence[str]:
        return pulumi.get(self, "operations")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetOkmsServiceKeyResult(GetOkmsServiceKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOkmsServiceKeyResult(
            created_at=self.created_at,
            curve=self.curve,
            iam=self.iam,
            id=self.id,
            name=self.name,
            okms_id=self.okms_id,
            operations=self.operations,
            size=self.size,
            state=self.state,
            type=self.type)


def get_okms_service_key(id: Optional[str] = None,
                         okms_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOkmsServiceKeyResult:
    """
    Use this data source to retrieve information about a KMS service key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    key_info = ovh.Okms.get_okms_service_key(id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        okms_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
    ```


    :param str id: ID of the service key
    :param str okms_id: ID of the KMS
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['okmsId'] = okms_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:Okms/getOkmsServiceKey:getOkmsServiceKey', __args__, opts=opts, typ=GetOkmsServiceKeyResult).value

    return AwaitableGetOkmsServiceKeyResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        curve=pulumi.get(__ret__, 'curve'),
        iam=pulumi.get(__ret__, 'iam'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        okms_id=pulumi.get(__ret__, 'okms_id'),
        operations=pulumi.get(__ret__, 'operations'),
        size=pulumi.get(__ret__, 'size'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'))
def get_okms_service_key_output(id: Optional[pulumi.Input[str]] = None,
                                okms_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOkmsServiceKeyResult]:
    """
    Use this data source to retrieve information about a KMS service key.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    key_info = ovh.Okms.get_okms_service_key(id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
        okms_id="xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
    ```


    :param str id: ID of the service key
    :param str okms_id: ID of the KMS
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['okmsId'] = okms_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ovh:Okms/getOkmsServiceKey:getOkmsServiceKey', __args__, opts=opts, typ=GetOkmsServiceKeyResult)
    return __ret__.apply(lambda __response__: GetOkmsServiceKeyResult(
        created_at=pulumi.get(__response__, 'created_at'),
        curve=pulumi.get(__response__, 'curve'),
        iam=pulumi.get(__response__, 'iam'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        okms_id=pulumi.get(__response__, 'okms_id'),
        operations=pulumi.get(__response__, 'operations'),
        size=pulumi.get(__response__, 'size'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type')))
