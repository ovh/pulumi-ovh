# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetOvhcloudConnectConfigPopDatacenterExtrasResult',
    'AwaitableGetOvhcloudConnectConfigPopDatacenterExtrasResult',
    'get_ovhcloud_connect_config_pop_datacenter_extras',
    'get_ovhcloud_connect_config_pop_datacenter_extras_output',
]

@pulumi.output_type
class GetOvhcloudConnectConfigPopDatacenterExtrasResult:
    """
    A collection of values returned by getOvhcloudConnectConfigPopDatacenterExtras.
    """
    def __init__(__self__, config_datacenter_id=None, config_pop_id=None, extra_configs=None, id=None, service_name=None):
        if config_datacenter_id and not isinstance(config_datacenter_id, float):
            raise TypeError("Expected argument 'config_datacenter_id' to be a float")
        pulumi.set(__self__, "config_datacenter_id", config_datacenter_id)
        if config_pop_id and not isinstance(config_pop_id, float):
            raise TypeError("Expected argument 'config_pop_id' to be a float")
        pulumi.set(__self__, "config_pop_id", config_pop_id)
        if extra_configs and not isinstance(extra_configs, list):
            raise TypeError("Expected argument 'extra_configs' to be a list")
        pulumi.set(__self__, "extra_configs", extra_configs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="configDatacenterId")
    def config_datacenter_id(self) -> builtins.float:
        """
        ID of the Datacenter Configuration
        """
        return pulumi.get(self, "config_datacenter_id")

    @property
    @pulumi.getter(name="configPopId")
    def config_pop_id(self) -> builtins.float:
        """
        ID of the Pop Configuration
        """
        return pulumi.get(self, "config_pop_id")

    @property
    @pulumi.getter(name="extraConfigs")
    def extra_configs(self) -> Sequence['outputs.GetOvhcloudConnectConfigPopDatacenterExtrasExtraConfigResult']:
        return pulumi.get(self, "extra_configs")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        """
        Service name
        """
        return pulumi.get(self, "service_name")


class AwaitableGetOvhcloudConnectConfigPopDatacenterExtrasResult(GetOvhcloudConnectConfigPopDatacenterExtrasResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOvhcloudConnectConfigPopDatacenterExtrasResult(
            config_datacenter_id=self.config_datacenter_id,
            config_pop_id=self.config_pop_id,
            extra_configs=self.extra_configs,
            id=self.id,
            service_name=self.service_name)


def get_ovhcloud_connect_config_pop_datacenter_extras(config_datacenter_id: Optional[builtins.float] = None,
                                                      config_pop_id: Optional[builtins.float] = None,
                                                      service_name: Optional[builtins.str] = None,
                                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOvhcloudConnectConfigPopDatacenterExtrasResult:
    """
    Use this data source to retrieve information about an Ovhcloud Connect Datacenter Extra configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    extra_cfgs = ovh.get_ovhcloud_connect_config_pop_datacenter_extras(service_name="XXX",
        config_pop_id="YYY",
        config_datacenter_id="ZZZ")
    ```


    :param builtins.float config_datacenter_id: ID of the Datacenter Configuration
    :param builtins.float config_pop_id: ID of the Pop Configuration
    :param builtins.str service_name: Service name
    """
    __args__ = dict()
    __args__['configDatacenterId'] = config_datacenter_id
    __args__['configPopId'] = config_pop_id
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:index/getOvhcloudConnectConfigPopDatacenterExtras:getOvhcloudConnectConfigPopDatacenterExtras', __args__, opts=opts, typ=GetOvhcloudConnectConfigPopDatacenterExtrasResult).value

    return AwaitableGetOvhcloudConnectConfigPopDatacenterExtrasResult(
        config_datacenter_id=pulumi.get(__ret__, 'config_datacenter_id'),
        config_pop_id=pulumi.get(__ret__, 'config_pop_id'),
        extra_configs=pulumi.get(__ret__, 'extra_configs'),
        id=pulumi.get(__ret__, 'id'),
        service_name=pulumi.get(__ret__, 'service_name'))
def get_ovhcloud_connect_config_pop_datacenter_extras_output(config_datacenter_id: Optional[pulumi.Input[builtins.float]] = None,
                                                             config_pop_id: Optional[pulumi.Input[builtins.float]] = None,
                                                             service_name: Optional[pulumi.Input[builtins.str]] = None,
                                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOvhcloudConnectConfigPopDatacenterExtrasResult]:
    """
    Use this data source to retrieve information about an Ovhcloud Connect Datacenter Extra configuration

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    extra_cfgs = ovh.get_ovhcloud_connect_config_pop_datacenter_extras(service_name="XXX",
        config_pop_id="YYY",
        config_datacenter_id="ZZZ")
    ```


    :param builtins.float config_datacenter_id: ID of the Datacenter Configuration
    :param builtins.float config_pop_id: ID of the Pop Configuration
    :param builtins.str service_name: Service name
    """
    __args__ = dict()
    __args__['configDatacenterId'] = config_datacenter_id
    __args__['configPopId'] = config_pop_id
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ovh:index/getOvhcloudConnectConfigPopDatacenterExtras:getOvhcloudConnectConfigPopDatacenterExtras', __args__, opts=opts, typ=GetOvhcloudConnectConfigPopDatacenterExtrasResult)
    return __ret__.apply(lambda __response__: GetOvhcloudConnectConfigPopDatacenterExtrasResult(
        config_datacenter_id=pulumi.get(__response__, 'config_datacenter_id'),
        config_pop_id=pulumi.get(__response__, 'config_pop_id'),
        extra_configs=pulumi.get(__response__, 'extra_configs'),
        id=pulumi.get(__response__, 'id'),
        service_name=pulumi.get(__response__, 'service_name')))
