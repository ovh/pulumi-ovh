# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDedicatedServerOrderableBandwidthResult',
    'AwaitableGetDedicatedServerOrderableBandwidthResult',
    'get_dedicated_server_orderable_bandwidth',
    'get_dedicated_server_orderable_bandwidth_output',
]

@pulumi.output_type
class GetDedicatedServerOrderableBandwidthResult:
    """
    A collection of values returned by getDedicatedServerOrderableBandwidth.
    """
    def __init__(__self__, id=None, orderable=None, platinia=None, premia=None, service_name=None, ultimates=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if orderable and not isinstance(orderable, bool):
            raise TypeError("Expected argument 'orderable' to be a bool")
        pulumi.set(__self__, "orderable", orderable)
        if platinia and not isinstance(platinia, list):
            raise TypeError("Expected argument 'platinia' to be a list")
        pulumi.set(__self__, "platinia", platinia)
        if premia and not isinstance(premia, list):
            raise TypeError("Expected argument 'premia' to be a list")
        pulumi.set(__self__, "premia", premia)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if ultimates and not isinstance(ultimates, list):
            raise TypeError("Expected argument 'ultimates' to be a list")
        pulumi.set(__self__, "ultimates", ultimates)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def orderable(self) -> _builtins.bool:
        """
        Wether or not additional bandwidth is orderable.
        """
        return pulumi.get(self, "orderable")

    @_builtins.property
    @pulumi.getter
    def platinia(self) -> Sequence[_builtins.int]:
        """
        The list of orderable platinimum bandwidth in mbps.
        """
        return pulumi.get(self, "platinia")

    @_builtins.property
    @pulumi.getter
    def premia(self) -> Sequence[_builtins.int]:
        """
        The list of orderable premium bandwidth in mbps.
        """
        return pulumi.get(self, "premia")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter
    def ultimates(self) -> Sequence[_builtins.int]:
        """
        The list of orderable ultimate bandwidth in mbps.
        """
        return pulumi.get(self, "ultimates")


class AwaitableGetDedicatedServerOrderableBandwidthResult(GetDedicatedServerOrderableBandwidthResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDedicatedServerOrderableBandwidthResult(
            id=self.id,
            orderable=self.orderable,
            platinia=self.platinia,
            premia=self.premia,
            service_name=self.service_name,
            ultimates=self.ultimates)


def get_dedicated_server_orderable_bandwidth(service_name: Optional[_builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDedicatedServerOrderableBandwidthResult:
    """
    Use this data source to get the list of orderable additional bandwidth for a dedicated server associated with your OVHcloud Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    bp = ovh.get_dedicated_server_orderable_bandwidth(service_name="myserver")
    ```


    :param _builtins.str service_name: The internal name of your dedicated server.
    """
    __args__ = dict()
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:index/getDedicatedServerOrderableBandwidth:getDedicatedServerOrderableBandwidth', __args__, opts=opts, typ=GetDedicatedServerOrderableBandwidthResult).value

    return AwaitableGetDedicatedServerOrderableBandwidthResult(
        id=pulumi.get(__ret__, 'id'),
        orderable=pulumi.get(__ret__, 'orderable'),
        platinia=pulumi.get(__ret__, 'platinia'),
        premia=pulumi.get(__ret__, 'premia'),
        service_name=pulumi.get(__ret__, 'service_name'),
        ultimates=pulumi.get(__ret__, 'ultimates'))
def get_dedicated_server_orderable_bandwidth_output(service_name: Optional[pulumi.Input[_builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDedicatedServerOrderableBandwidthResult]:
    """
    Use this data source to get the list of orderable additional bandwidth for a dedicated server associated with your OVHcloud Account.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    bp = ovh.get_dedicated_server_orderable_bandwidth(service_name="myserver")
    ```


    :param _builtins.str service_name: The internal name of your dedicated server.
    """
    __args__ = dict()
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ovh:index/getDedicatedServerOrderableBandwidth:getDedicatedServerOrderableBandwidth', __args__, opts=opts, typ=GetDedicatedServerOrderableBandwidthResult)
    return __ret__.apply(lambda __response__: GetDedicatedServerOrderableBandwidthResult(
        id=pulumi.get(__response__, 'id'),
        orderable=pulumi.get(__response__, 'orderable'),
        platinia=pulumi.get(__response__, 'platinia'),
        premia=pulumi.get(__response__, 'premia'),
        service_name=pulumi.get(__response__, 'service_name'),
        ultimates=pulumi.get(__response__, 'ultimates')))
