# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'OpensearchUserAclArgs',
    'OpensearchUserAclArgsDict',
    'PrometheusTargetArgs',
    'PrometheusTargetArgsDict',
]

MYPY = False

if not MYPY:
    class OpensearchUserAclArgsDict(TypedDict):
        pattern: pulumi.Input[builtins.str]
        """
        Pattern of the ACL.
        """
        permission: pulumi.Input[builtins.str]
        """
        Permission of the ACL Available permission:
        """
elif False:
    OpensearchUserAclArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OpensearchUserAclArgs:
    def __init__(__self__, *,
                 pattern: pulumi.Input[builtins.str],
                 permission: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] pattern: Pattern of the ACL.
        :param pulumi.Input[builtins.str] permission: Permission of the ACL Available permission:
        """
        pulumi.set(__self__, "pattern", pattern)
        pulumi.set(__self__, "permission", permission)

    @property
    @pulumi.getter
    def pattern(self) -> pulumi.Input[builtins.str]:
        """
        Pattern of the ACL.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def permission(self) -> pulumi.Input[builtins.str]:
        """
        Permission of the ACL Available permission:
        """
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "permission", value)


if not MYPY:
    class PrometheusTargetArgsDict(TypedDict):
        host: NotRequired[pulumi.Input[builtins.str]]
        """
        Host of the endpoint
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        Connection port for the endpoint
        """
elif False:
    PrometheusTargetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PrometheusTargetArgs:
    def __init__(__self__, *,
                 host: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] host: Host of the endpoint
        :param pulumi.Input[builtins.int] port: Connection port for the endpoint
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Host of the endpoint
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Connection port for the endpoint
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)


