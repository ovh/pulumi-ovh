# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetDbaasLogsOutputGraylogStreamUrlResult',
    'AwaitableGetDbaasLogsOutputGraylogStreamUrlResult',
    'get_dbaas_logs_output_graylog_stream_url',
    'get_dbaas_logs_output_graylog_stream_url_output',
]

@pulumi.output_type
class GetDbaasLogsOutputGraylogStreamUrlResult:
    """
    A collection of values returned by getDbaasLogsOutputGraylogStreamUrl.
    """
    def __init__(__self__, id=None, service_name=None, stream_id=None, urls=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)
        if stream_id and not isinstance(stream_id, str):
            raise TypeError("Expected argument 'stream_id' to be a str")
        pulumi.set(__self__, "stream_id", stream_id)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> builtins.str:
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter(name="streamId")
    def stream_id(self) -> builtins.str:
        return pulumi.get(self, "stream_id")

    @property
    @pulumi.getter
    def urls(self) -> Sequence['outputs.GetDbaasLogsOutputGraylogStreamUrlUrlResult']:
        """
        List of URLs. Each element contains:
        """
        return pulumi.get(self, "urls")


class AwaitableGetDbaasLogsOutputGraylogStreamUrlResult(GetDbaasLogsOutputGraylogStreamUrlResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbaasLogsOutputGraylogStreamUrlResult(
            id=self.id,
            service_name=self.service_name,
            stream_id=self.stream_id,
            urls=self.urls)


def get_dbaas_logs_output_graylog_stream_url(service_name: Optional[builtins.str] = None,
                                             stream_id: Optional[builtins.str] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbaasLogsOutputGraylogStreamUrlResult:
    """
    Use this data source to retrieve the list of URLs for a DBaas logs output Graylog stream.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    urls = ovh.get_dbaas_logs_output_graylog_stream_url(service_name="ldp-xx-xxxxx",
        stream_id="STREAM_ID")
    ```


    :param builtins.str service_name: The service name. It's the ID of your Logs Data Platform instance.
    :param builtins.str stream_id: Stream ID.
    """
    __args__ = dict()
    __args__['serviceName'] = service_name
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:index/getDbaasLogsOutputGraylogStreamUrl:getDbaasLogsOutputGraylogStreamUrl', __args__, opts=opts, typ=GetDbaasLogsOutputGraylogStreamUrlResult).value

    return AwaitableGetDbaasLogsOutputGraylogStreamUrlResult(
        id=pulumi.get(__ret__, 'id'),
        service_name=pulumi.get(__ret__, 'service_name'),
        stream_id=pulumi.get(__ret__, 'stream_id'),
        urls=pulumi.get(__ret__, 'urls'))
def get_dbaas_logs_output_graylog_stream_url_output(service_name: Optional[pulumi.Input[builtins.str]] = None,
                                                    stream_id: Optional[pulumi.Input[builtins.str]] = None,
                                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDbaasLogsOutputGraylogStreamUrlResult]:
    """
    Use this data source to retrieve the list of URLs for a DBaas logs output Graylog stream.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_ovh as ovh

    urls = ovh.get_dbaas_logs_output_graylog_stream_url(service_name="ldp-xx-xxxxx",
        stream_id="STREAM_ID")
    ```


    :param builtins.str service_name: The service name. It's the ID of your Logs Data Platform instance.
    :param builtins.str stream_id: Stream ID.
    """
    __args__ = dict()
    __args__['serviceName'] = service_name
    __args__['streamId'] = stream_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ovh:index/getDbaasLogsOutputGraylogStreamUrl:getDbaasLogsOutputGraylogStreamUrl', __args__, opts=opts, typ=GetDbaasLogsOutputGraylogStreamUrlResult)
    return __ret__.apply(lambda __response__: GetDbaasLogsOutputGraylogStreamUrlResult(
        id=pulumi.get(__response__, 'id'),
        service_name=pulumi.get(__response__, 'service_name'),
        stream_id=pulumi.get(__response__, 'stream_id'),
        urls=pulumi.get(__response__, 'urls')))
