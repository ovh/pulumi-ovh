# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetFloatingIPsResult',
    'AwaitableGetFloatingIPsResult',
    'get_floating_ips',
    'get_floating_ips_output',
]

@pulumi.output_type
class GetFloatingIPsResult:
    """
    A collection of values returned by getFloatingIPs.
    """
    def __init__(__self__, cloud_project_floatingips=None, id=None, region_name=None, service_name=None):
        if cloud_project_floatingips and not isinstance(cloud_project_floatingips, list):
            raise TypeError("Expected argument 'cloud_project_floatingips' to be a list")
        pulumi.set(__self__, "cloud_project_floatingips", cloud_project_floatingips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region_name and not isinstance(region_name, str):
            raise TypeError("Expected argument 'region_name' to be a str")
        pulumi.set(__self__, "region_name", region_name)
        if service_name and not isinstance(service_name, str):
            raise TypeError("Expected argument 'service_name' to be a str")
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="cloudProjectFloatingips")
    def cloud_project_floatingips(self) -> Sequence['outputs.GetFloatingIPsCloudProjectFloatingipResult']:
        return pulumi.get(self, "cloud_project_floatingips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="regionName")
    def region_name(self) -> str:
        """
        Floating IP region
        """
        return pulumi.get(self, "region_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


class AwaitableGetFloatingIPsResult(GetFloatingIPsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFloatingIPsResult(
            cloud_project_floatingips=self.cloud_project_floatingips,
            id=self.id,
            region_name=self.region_name,
            service_name=self.service_name)


def get_floating_ips(region_name: Optional[str] = None,
                     service_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFloatingIPsResult:
    """
    Use this data source to get the floating IPs of a public cloud project.


    :param str region_name: Public cloud region name
    :param str service_name: The id of the public cloud project
    """
    __args__ = dict()
    __args__['regionName'] = region_name
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('ovh:CloudProject/getFloatingIPs:getFloatingIPs', __args__, opts=opts, typ=GetFloatingIPsResult).value

    return AwaitableGetFloatingIPsResult(
        cloud_project_floatingips=pulumi.get(__ret__, 'cloud_project_floatingips'),
        id=pulumi.get(__ret__, 'id'),
        region_name=pulumi.get(__ret__, 'region_name'),
        service_name=pulumi.get(__ret__, 'service_name'))
def get_floating_ips_output(region_name: Optional[pulumi.Input[str]] = None,
                            service_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFloatingIPsResult]:
    """
    Use this data source to get the floating IPs of a public cloud project.


    :param str region_name: Public cloud region name
    :param str service_name: The id of the public cloud project
    """
    __args__ = dict()
    __args__['regionName'] = region_name
    __args__['serviceName'] = service_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('ovh:CloudProject/getFloatingIPs:getFloatingIPs', __args__, opts=opts, typ=GetFloatingIPsResult)
    return __ret__.apply(lambda __response__: GetFloatingIPsResult(
        cloud_project_floatingips=pulumi.get(__response__, 'cloud_project_floatingips'),
        id=pulumi.get(__response__, 'id'),
        region_name=pulumi.get(__response__, 'region_name'),
        service_name=pulumi.get(__response__, 'service_name')))
