# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['KubeOidcArgs', 'KubeOidc']

@pulumi.input_type
class KubeOidcArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 issuer_url: pulumi.Input[str],
                 kube_id: pulumi.Input[str],
                 service_name: pulumi.Input[str],
                 oidc_ca_content: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
                 oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_signing_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_username_claim: Optional[pulumi.Input[str]] = None,
                 oidc_username_prefix: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a KubeOidc resource.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "issuer_url", issuer_url)
        pulumi.set(__self__, "kube_id", kube_id)
        pulumi.set(__self__, "service_name", service_name)
        if oidc_ca_content is not None:
            pulumi.set(__self__, "oidc_ca_content", oidc_ca_content)
        if oidc_groups_claims is not None:
            pulumi.set(__self__, "oidc_groups_claims", oidc_groups_claims)
        if oidc_groups_prefix is not None:
            pulumi.set(__self__, "oidc_groups_prefix", oidc_groups_prefix)
        if oidc_required_claims is not None:
            pulumi.set(__self__, "oidc_required_claims", oidc_required_claims)
        if oidc_signing_algs is not None:
            pulumi.set(__self__, "oidc_signing_algs", oidc_signing_algs)
        if oidc_username_claim is not None:
            pulumi.set(__self__, "oidc_username_claim", oidc_username_claim)
        if oidc_username_prefix is not None:
            pulumi.set(__self__, "oidc_username_prefix", oidc_username_prefix)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "issuer_url")

    @issuer_url.setter
    def issuer_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "issuer_url", value)

    @property
    @pulumi.getter(name="kubeId")
    def kube_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kube_id")

    @kube_id.setter
    def kube_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kube_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="oidcCaContent")
    def oidc_ca_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_ca_content")

    @oidc_ca_content.setter
    def oidc_ca_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_ca_content", value)

    @property
    @pulumi.getter(name="oidcGroupsClaims")
    def oidc_groups_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_groups_claims")

    @oidc_groups_claims.setter
    def oidc_groups_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_groups_claims", value)

    @property
    @pulumi.getter(name="oidcGroupsPrefix")
    def oidc_groups_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_prefix")

    @oidc_groups_prefix.setter
    def oidc_groups_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_prefix", value)

    @property
    @pulumi.getter(name="oidcRequiredClaims")
    def oidc_required_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_required_claims")

    @oidc_required_claims.setter
    def oidc_required_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_required_claims", value)

    @property
    @pulumi.getter(name="oidcSigningAlgs")
    def oidc_signing_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_signing_algs")

    @oidc_signing_algs.setter
    def oidc_signing_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_signing_algs", value)

    @property
    @pulumi.getter(name="oidcUsernameClaim")
    def oidc_username_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_claim")

    @oidc_username_claim.setter
    def oidc_username_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_claim", value)

    @property
    @pulumi.getter(name="oidcUsernamePrefix")
    def oidc_username_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_prefix")

    @oidc_username_prefix.setter
    def oidc_username_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_prefix", value)


@pulumi.input_type
class _KubeOidcState:
    def __init__(__self__, *,
                 client_id: Optional[pulumi.Input[str]] = None,
                 issuer_url: Optional[pulumi.Input[str]] = None,
                 kube_id: Optional[pulumi.Input[str]] = None,
                 oidc_ca_content: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
                 oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_signing_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_username_claim: Optional[pulumi.Input[str]] = None,
                 oidc_username_prefix: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering KubeOidc resources.
        """
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer_url is not None:
            pulumi.set(__self__, "issuer_url", issuer_url)
        if kube_id is not None:
            pulumi.set(__self__, "kube_id", kube_id)
        if oidc_ca_content is not None:
            pulumi.set(__self__, "oidc_ca_content", oidc_ca_content)
        if oidc_groups_claims is not None:
            pulumi.set(__self__, "oidc_groups_claims", oidc_groups_claims)
        if oidc_groups_prefix is not None:
            pulumi.set(__self__, "oidc_groups_prefix", oidc_groups_prefix)
        if oidc_required_claims is not None:
            pulumi.set(__self__, "oidc_required_claims", oidc_required_claims)
        if oidc_signing_algs is not None:
            pulumi.set(__self__, "oidc_signing_algs", oidc_signing_algs)
        if oidc_username_claim is not None:
            pulumi.set(__self__, "oidc_username_claim", oidc_username_claim)
        if oidc_username_prefix is not None:
            pulumi.set(__self__, "oidc_username_prefix", oidc_username_prefix)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer_url")

    @issuer_url.setter
    def issuer_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer_url", value)

    @property
    @pulumi.getter(name="kubeId")
    def kube_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kube_id")

    @kube_id.setter
    def kube_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kube_id", value)

    @property
    @pulumi.getter(name="oidcCaContent")
    def oidc_ca_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_ca_content")

    @oidc_ca_content.setter
    def oidc_ca_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_ca_content", value)

    @property
    @pulumi.getter(name="oidcGroupsClaims")
    def oidc_groups_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_groups_claims")

    @oidc_groups_claims.setter
    def oidc_groups_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_groups_claims", value)

    @property
    @pulumi.getter(name="oidcGroupsPrefix")
    def oidc_groups_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_groups_prefix")

    @oidc_groups_prefix.setter
    def oidc_groups_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_groups_prefix", value)

    @property
    @pulumi.getter(name="oidcRequiredClaims")
    def oidc_required_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_required_claims")

    @oidc_required_claims.setter
    def oidc_required_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_required_claims", value)

    @property
    @pulumi.getter(name="oidcSigningAlgs")
    def oidc_signing_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_signing_algs")

    @oidc_signing_algs.setter
    def oidc_signing_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_signing_algs", value)

    @property
    @pulumi.getter(name="oidcUsernameClaim")
    def oidc_username_claim(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_claim")

    @oidc_username_claim.setter
    def oidc_username_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_claim", value)

    @property
    @pulumi.getter(name="oidcUsernamePrefix")
    def oidc_username_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_username_prefix")

    @oidc_username_prefix.setter
    def oidc_username_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_username_prefix", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)


class KubeOidc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 issuer_url: Optional[pulumi.Input[str]] = None,
                 kube_id: Optional[pulumi.Input[str]] = None,
                 oidc_ca_content: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
                 oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_signing_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_username_claim: Optional[pulumi.Input[str]] = None,
                 oidc_username_prefix: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a KubeOidc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: KubeOidcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a KubeOidc resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param KubeOidcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(KubeOidcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 issuer_url: Optional[pulumi.Input[str]] = None,
                 kube_id: Optional[pulumi.Input[str]] = None,
                 oidc_ca_content: Optional[pulumi.Input[str]] = None,
                 oidc_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
                 oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_signing_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_username_claim: Optional[pulumi.Input[str]] = None,
                 oidc_username_prefix: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = KubeOidcArgs.__new__(KubeOidcArgs)

            if client_id is None and not opts.urn:
                raise TypeError("Missing required property 'client_id'")
            __props__.__dict__["client_id"] = client_id
            if issuer_url is None and not opts.urn:
                raise TypeError("Missing required property 'issuer_url'")
            __props__.__dict__["issuer_url"] = issuer_url
            if kube_id is None and not opts.urn:
                raise TypeError("Missing required property 'kube_id'")
            __props__.__dict__["kube_id"] = kube_id
            __props__.__dict__["oidc_ca_content"] = oidc_ca_content
            __props__.__dict__["oidc_groups_claims"] = oidc_groups_claims
            __props__.__dict__["oidc_groups_prefix"] = oidc_groups_prefix
            __props__.__dict__["oidc_required_claims"] = oidc_required_claims
            __props__.__dict__["oidc_signing_algs"] = oidc_signing_algs
            __props__.__dict__["oidc_username_claim"] = oidc_username_claim
            __props__.__dict__["oidc_username_prefix"] = oidc_username_prefix
            if service_name is None and not opts.urn:
                raise TypeError("Missing required property 'service_name'")
            __props__.__dict__["service_name"] = service_name
        super(KubeOidc, __self__).__init__(
            'ovh:CloudProject/kubeOidc:KubeOidc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            issuer_url: Optional[pulumi.Input[str]] = None,
            kube_id: Optional[pulumi.Input[str]] = None,
            oidc_ca_content: Optional[pulumi.Input[str]] = None,
            oidc_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oidc_groups_prefix: Optional[pulumi.Input[str]] = None,
            oidc_required_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oidc_signing_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oidc_username_claim: Optional[pulumi.Input[str]] = None,
            oidc_username_prefix: Optional[pulumi.Input[str]] = None,
            service_name: Optional[pulumi.Input[str]] = None) -> 'KubeOidc':
        """
        Get an existing KubeOidc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _KubeOidcState.__new__(_KubeOidcState)

        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["issuer_url"] = issuer_url
        __props__.__dict__["kube_id"] = kube_id
        __props__.__dict__["oidc_ca_content"] = oidc_ca_content
        __props__.__dict__["oidc_groups_claims"] = oidc_groups_claims
        __props__.__dict__["oidc_groups_prefix"] = oidc_groups_prefix
        __props__.__dict__["oidc_required_claims"] = oidc_required_claims
        __props__.__dict__["oidc_signing_algs"] = oidc_signing_algs
        __props__.__dict__["oidc_username_claim"] = oidc_username_claim
        __props__.__dict__["oidc_username_prefix"] = oidc_username_prefix
        __props__.__dict__["service_name"] = service_name
        return KubeOidc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="issuerUrl")
    def issuer_url(self) -> pulumi.Output[str]:
        return pulumi.get(self, "issuer_url")

    @property
    @pulumi.getter(name="kubeId")
    def kube_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "kube_id")

    @property
    @pulumi.getter(name="oidcCaContent")
    def oidc_ca_content(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_ca_content")

    @property
    @pulumi.getter(name="oidcGroupsClaims")
    def oidc_groups_claims(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "oidc_groups_claims")

    @property
    @pulumi.getter(name="oidcGroupsPrefix")
    def oidc_groups_prefix(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_groups_prefix")

    @property
    @pulumi.getter(name="oidcRequiredClaims")
    def oidc_required_claims(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "oidc_required_claims")

    @property
    @pulumi.getter(name="oidcSigningAlgs")
    def oidc_signing_algs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "oidc_signing_algs")

    @property
    @pulumi.getter(name="oidcUsernameClaim")
    def oidc_username_claim(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_username_claim")

    @property
    @pulumi.getter(name="oidcUsernamePrefix")
    def oidc_username_prefix(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_username_prefix")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_name")

