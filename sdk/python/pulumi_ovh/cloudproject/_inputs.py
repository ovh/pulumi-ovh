# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AlertingFormattedMonthlyThresholdArgs',
    'AlertingFormattedMonthlyThresholdArgsDict',
    'ContainerRegistryPlanArgs',
    'ContainerRegistryPlanArgsDict',
    'ContainerRegistryPlanFeatureArgs',
    'ContainerRegistryPlanFeatureArgsDict',
    'ContainerRegistryPlanRegistryLimitArgs',
    'ContainerRegistryPlanRegistryLimitArgsDict',
    'DatabaseEndpointArgs',
    'DatabaseEndpointArgsDict',
    'DatabaseIpRestrictionArgs',
    'DatabaseIpRestrictionArgsDict',
    'DatabaseNodeArgs',
    'DatabaseNodeArgsDict',
    'GatewayExternalInformationArgs',
    'GatewayExternalInformationArgsDict',
    'GatewayExternalInformationIpArgs',
    'GatewayExternalInformationIpArgsDict',
    'GatewayInterfaceArgs',
    'GatewayInterfaceArgsDict',
    'InstanceAddressArgs',
    'InstanceAddressArgsDict',
    'InstanceAttachedVolumeArgs',
    'InstanceAttachedVolumeArgsDict',
    'InstanceAutoBackupArgs',
    'InstanceAutoBackupArgsDict',
    'InstanceBootFromArgs',
    'InstanceBootFromArgsDict',
    'InstanceFlavorArgs',
    'InstanceFlavorArgsDict',
    'InstanceGroupArgs',
    'InstanceGroupArgsDict',
    'InstanceNetworkArgs',
    'InstanceNetworkArgsDict',
    'InstanceSshKeyArgs',
    'InstanceSshKeyArgsDict',
    'InstanceSshKeyCreateArgs',
    'InstanceSshKeyCreateArgsDict',
    'KubeCustomizationArgs',
    'KubeCustomizationArgsDict',
    'KubeCustomizationApiserverArgs',
    'KubeCustomizationApiserverArgsDict',
    'KubeCustomizationApiserverAdmissionpluginArgs',
    'KubeCustomizationApiserverAdmissionpluginArgsDict',
    'KubeCustomizationKubeProxyArgs',
    'KubeCustomizationKubeProxyArgsDict',
    'KubeCustomizationKubeProxyIptablesArgs',
    'KubeCustomizationKubeProxyIptablesArgsDict',
    'KubeCustomizationKubeProxyIpvsArgs',
    'KubeCustomizationKubeProxyIpvsArgsDict',
    'KubeKubeconfigAttributeArgs',
    'KubeKubeconfigAttributeArgsDict',
    'KubeNodePoolTemplateArgs',
    'KubeNodePoolTemplateArgsDict',
    'KubeNodePoolTemplateMetadataArgs',
    'KubeNodePoolTemplateMetadataArgsDict',
    'KubeNodePoolTemplateSpecArgs',
    'KubeNodePoolTemplateSpecArgsDict',
    'KubePrivateNetworkConfigurationArgs',
    'KubePrivateNetworkConfigurationArgsDict',
    'LoadBalancerFloatingIpArgs',
    'LoadBalancerFloatingIpArgsDict',
    'LoadBalancerListenerArgs',
    'LoadBalancerListenerArgsDict',
    'LoadBalancerListenerPoolArgs',
    'LoadBalancerListenerPoolArgsDict',
    'LoadBalancerListenerPoolHealthMonitorArgs',
    'LoadBalancerListenerPoolHealthMonitorArgsDict',
    'LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs',
    'LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgsDict',
    'LoadBalancerListenerPoolMemberArgs',
    'LoadBalancerListenerPoolMemberArgsDict',
    'LoadBalancerListenerPoolSessionPersistenceArgs',
    'LoadBalancerListenerPoolSessionPersistenceArgsDict',
    'LoadBalancerNetworkArgs',
    'LoadBalancerNetworkArgsDict',
    'LoadBalancerNetworkPrivateArgs',
    'LoadBalancerNetworkPrivateArgsDict',
    'LoadBalancerNetworkPrivateFloatingIpArgs',
    'LoadBalancerNetworkPrivateFloatingIpArgsDict',
    'LoadBalancerNetworkPrivateFloatingIpCreateArgs',
    'LoadBalancerNetworkPrivateFloatingIpCreateArgsDict',
    'LoadBalancerNetworkPrivateGatewayArgs',
    'LoadBalancerNetworkPrivateGatewayArgsDict',
    'LoadBalancerNetworkPrivateGatewayCreateArgs',
    'LoadBalancerNetworkPrivateGatewayCreateArgsDict',
    'LoadBalancerNetworkPrivateNetworkArgs',
    'LoadBalancerNetworkPrivateNetworkArgsDict',
    'NetworkPrivateRegionsAttributeArgs',
    'NetworkPrivateRegionsAttributeArgsDict',
    'NetworkPrivateRegionsStatusArgs',
    'NetworkPrivateRegionsStatusArgsDict',
    'NetworkPrivateSubnetIpPoolArgs',
    'NetworkPrivateSubnetIpPoolArgsDict',
    'NetworkPrivateSubnetV2AllocationPoolArgs',
    'NetworkPrivateSubnetV2AllocationPoolArgsDict',
    'NetworkPrivateSubnetV2HostRouteArgs',
    'NetworkPrivateSubnetV2HostRouteArgsDict',
    'ProjectOrderArgs',
    'ProjectOrderArgsDict',
    'ProjectOrderDetailArgs',
    'ProjectOrderDetailArgsDict',
    'ProjectPlanArgs',
    'ProjectPlanArgsDict',
    'ProjectPlanConfigurationArgs',
    'ProjectPlanConfigurationArgsDict',
    'ProjectPlanOptionArgs',
    'ProjectPlanOptionArgsDict',
    'ProjectPlanOptionConfigurationArgs',
    'ProjectPlanOptionConfigurationArgsDict',
    'RancherCurrentStateArgs',
    'RancherCurrentStateArgsDict',
    'RancherCurrentStateIpRestrictionArgs',
    'RancherCurrentStateIpRestrictionArgsDict',
    'RancherCurrentStateNetworkingArgs',
    'RancherCurrentStateNetworkingArgsDict',
    'RancherCurrentStateUsageArgs',
    'RancherCurrentStateUsageArgsDict',
    'RancherCurrentTaskArgs',
    'RancherCurrentTaskArgsDict',
    'RancherTargetSpecArgs',
    'RancherTargetSpecArgsDict',
    'RancherTargetSpecIpRestrictionArgs',
    'RancherTargetSpecIpRestrictionArgsDict',
    'RegionNetworkSubnetArgs',
    'RegionNetworkSubnetArgsDict',
    'RegionNetworkSubnetAllocationPoolArgs',
    'RegionNetworkSubnetAllocationPoolArgsDict',
    'RegionNetworkSubnetHostRouteArgs',
    'RegionNetworkSubnetHostRouteArgsDict',
    'StorageEncryptionArgs',
    'StorageEncryptionArgsDict',
    'StorageObjectArgs',
    'StorageObjectArgsDict',
    'StorageReplicationArgs',
    'StorageReplicationArgsDict',
    'StorageReplicationRuleArgs',
    'StorageReplicationRuleArgsDict',
    'StorageReplicationRuleDestinationArgs',
    'StorageReplicationRuleDestinationArgsDict',
    'StorageReplicationRuleFilterArgs',
    'StorageReplicationRuleFilterArgsDict',
    'StorageReplicationRuleFilterTagArgs',
    'StorageReplicationRuleFilterTagArgsDict',
    'StorageVersioningArgs',
    'StorageVersioningArgsDict',
    'UserRoleArgs',
    'UserRoleArgsDict',
    'VolumeSubOperationArgs',
    'VolumeSubOperationArgsDict',
    'GetKubeCustomizationArgs',
    'GetKubeCustomizationArgsDict',
    'GetKubeCustomizationApiserverArgs',
    'GetKubeCustomizationApiserverArgsDict',
    'GetKubeCustomizationApiserverAdmissionpluginArgs',
    'GetKubeCustomizationApiserverAdmissionpluginArgsDict',
    'GetKubeCustomizationKubeProxyArgs',
    'GetKubeCustomizationKubeProxyArgsDict',
    'GetKubeCustomizationKubeProxyIptablesArgs',
    'GetKubeCustomizationKubeProxyIptablesArgsDict',
    'GetKubeCustomizationKubeProxyIpvsArgs',
    'GetKubeCustomizationKubeProxyIpvsArgsDict',
    'GetKubeNodePoolTemplateArgs',
    'GetKubeNodePoolTemplateArgsDict',
    'GetKubeNodePoolTemplateMetadataArgs',
    'GetKubeNodePoolTemplateMetadataArgsDict',
    'GetKubeNodePoolTemplateSpecArgs',
    'GetKubeNodePoolTemplateSpecArgsDict',
]

MYPY = False

if not MYPY:
    class AlertingFormattedMonthlyThresholdArgsDict(TypedDict):
        currency_code: NotRequired[pulumi.Input[str]]
        """
        Currency of the monthly threshold
        """
        text: NotRequired[pulumi.Input[str]]
        """
        Text representation of the monthly threshold
        """
        value: NotRequired[pulumi.Input[float]]
        """
        Value of the monthly threshold
        """
elif False:
    AlertingFormattedMonthlyThresholdArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AlertingFormattedMonthlyThresholdArgs:
    def __init__(__self__, *,
                 currency_code: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] currency_code: Currency of the monthly threshold
        :param pulumi.Input[str] text: Text representation of the monthly threshold
        :param pulumi.Input[float] value: Value of the monthly threshold
        """
        if currency_code is not None:
            pulumi.set(__self__, "currency_code", currency_code)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> Optional[pulumi.Input[str]]:
        """
        Currency of the monthly threshold
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        """
        Text representation of the monthly threshold
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        """
        Value of the monthly threshold
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ContainerRegistryPlanArgsDict(TypedDict):
        code: NotRequired[pulumi.Input[str]]
        """
        Plan code from the catalog
        """
        created_at: NotRequired[pulumi.Input[str]]
        """
        Plan creation date
        """
        features: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanFeatureArgsDict']]]]
        """
        Features of the plan
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Plan ID
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Registry name
        """
        registry_limits: NotRequired[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanRegistryLimitArgsDict']]]]
        """
        Container registry limits
        """
        updated_at: NotRequired[pulumi.Input[str]]
        """
        Registry last update date
        """
elif False:
    ContainerRegistryPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerRegistryPlanArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 features: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanFeatureArgs']]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 registry_limits: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanRegistryLimitArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] code: Plan code from the catalog
        :param pulumi.Input[str] created_at: Plan creation date
        :param pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanFeatureArgs']]] features: Features of the plan
        :param pulumi.Input[str] id: Plan ID
        :param pulumi.Input[str] name: Registry name
        :param pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanRegistryLimitArgs']]] registry_limits: Container registry limits
        :param pulumi.Input[str] updated_at: Registry last update date
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if features is not None:
            pulumi.set(__self__, "features", features)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if registry_limits is not None:
            pulumi.set(__self__, "registry_limits", registry_limits)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Plan code from the catalog
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Plan creation date
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanFeatureArgs']]]]:
        """
        Features of the plan
        """
        return pulumi.get(self, "features")

    @features.setter
    def features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanFeatureArgs']]]]):
        pulumi.set(self, "features", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Plan ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Registry name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="registryLimits")
    def registry_limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanRegistryLimitArgs']]]]:
        """
        Container registry limits
        """
        return pulumi.get(self, "registry_limits")

    @registry_limits.setter
    def registry_limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerRegistryPlanRegistryLimitArgs']]]]):
        pulumi.set(self, "registry_limits", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        Registry last update date
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class ContainerRegistryPlanFeatureArgsDict(TypedDict):
        vulnerability: NotRequired[pulumi.Input[bool]]
        """
        Vulnerability scanning
        """
elif False:
    ContainerRegistryPlanFeatureArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerRegistryPlanFeatureArgs:
    def __init__(__self__, *,
                 vulnerability: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] vulnerability: Vulnerability scanning
        """
        if vulnerability is not None:
            pulumi.set(__self__, "vulnerability", vulnerability)

    @property
    @pulumi.getter
    def vulnerability(self) -> Optional[pulumi.Input[bool]]:
        """
        Vulnerability scanning
        """
        return pulumi.get(self, "vulnerability")

    @vulnerability.setter
    def vulnerability(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vulnerability", value)


if not MYPY:
    class ContainerRegistryPlanRegistryLimitArgsDict(TypedDict):
        image_storage: NotRequired[pulumi.Input[int]]
        """
        Docker image storage limits in bytes
        """
        parallel_request: NotRequired[pulumi.Input[int]]
        """
        Parallel requests on Docker image API (/v2 Docker registry API)
        """
elif False:
    ContainerRegistryPlanRegistryLimitArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerRegistryPlanRegistryLimitArgs:
    def __init__(__self__, *,
                 image_storage: Optional[pulumi.Input[int]] = None,
                 parallel_request: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] image_storage: Docker image storage limits in bytes
        :param pulumi.Input[int] parallel_request: Parallel requests on Docker image API (/v2 Docker registry API)
        """
        if image_storage is not None:
            pulumi.set(__self__, "image_storage", image_storage)
        if parallel_request is not None:
            pulumi.set(__self__, "parallel_request", parallel_request)

    @property
    @pulumi.getter(name="imageStorage")
    def image_storage(self) -> Optional[pulumi.Input[int]]:
        """
        Docker image storage limits in bytes
        """
        return pulumi.get(self, "image_storage")

    @image_storage.setter
    def image_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "image_storage", value)

    @property
    @pulumi.getter(name="parallelRequest")
    def parallel_request(self) -> Optional[pulumi.Input[int]]:
        """
        Parallel requests on Docker image API (/v2 Docker registry API)
        """
        return pulumi.get(self, "parallel_request")

    @parallel_request.setter
    def parallel_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallel_request", value)


if not MYPY:
    class DatabaseEndpointArgsDict(TypedDict):
        component: NotRequired[pulumi.Input[str]]
        """
        Type of component the URI relates to.
        """
        domain: NotRequired[pulumi.Input[str]]
        """
        Domain of the cluster.
        """
        path: NotRequired[pulumi.Input[str]]
        """
        Path of the endpoint.
        """
        port: NotRequired[pulumi.Input[int]]
        """
        Connection port for the endpoint.
        """
        scheme: NotRequired[pulumi.Input[str]]
        """
        Scheme used to generate the URI.
        """
        ssl: NotRequired[pulumi.Input[bool]]
        """
        Defines whether the endpoint uses SSL.
        """
        ssl_mode: NotRequired[pulumi.Input[str]]
        """
        SSL mode used to connect to the service if the SSL is enabled.
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        URI of the endpoint.
        """
elif False:
    DatabaseEndpointArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseEndpointArgs:
    def __init__(__self__, *,
                 component: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 scheme: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 ssl_mode: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] component: Type of component the URI relates to.
        :param pulumi.Input[str] domain: Domain of the cluster.
        :param pulumi.Input[str] path: Path of the endpoint.
        :param pulumi.Input[int] port: Connection port for the endpoint.
        :param pulumi.Input[str] scheme: Scheme used to generate the URI.
        :param pulumi.Input[bool] ssl: Defines whether the endpoint uses SSL.
        :param pulumi.Input[str] ssl_mode: SSL mode used to connect to the service if the SSL is enabled.
        :param pulumi.Input[str] uri: URI of the endpoint.
        """
        if component is not None:
            pulumi.set(__self__, "component", component)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def component(self) -> Optional[pulumi.Input[str]]:
        """
        Type of component the URI relates to.
        """
        return pulumi.get(self, "component")

    @component.setter
    def component(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain of the cluster.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the endpoint.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Connection port for the endpoint.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> Optional[pulumi.Input[str]]:
        """
        Scheme used to generate the URI.
        """
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Defines whether the endpoint uses SSL.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input[str]]:
        """
        SSL mode used to connect to the service if the SSL is enabled.
        """
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI of the endpoint.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class DatabaseIpRestrictionArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Description of the IP restriction
        """
        ip: NotRequired[pulumi.Input[str]]
        """
        Authorized IP
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Current status of the cluster.
        """
elif False:
    DatabaseIpRestrictionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseIpRestrictionArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description of the IP restriction
        :param pulumi.Input[str] ip: Authorized IP
        :param pulumi.Input[str] status: Current status of the cluster.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the IP restriction
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Authorized IP
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current status of the cluster.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class DatabaseNodeArgsDict(TypedDict):
        region: pulumi.Input[str]
        """
        Public cloud region in which the node should be deployed.
        Ex: "GRA'.
        """
        network_id: NotRequired[pulumi.Input[str]]
        """
        Private network id in which the node should be deployed. It's the regional openstackId of the private network
        """
        subnet_id: NotRequired[pulumi.Input[str]]
        """
        Private subnet ID in which the node is.
        """
elif False:
    DatabaseNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DatabaseNodeArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 network_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] region: Public cloud region in which the node should be deployed.
               Ex: "GRA'.
        :param pulumi.Input[str] network_id: Private network id in which the node should be deployed. It's the regional openstackId of the private network
        :param pulumi.Input[str] subnet_id: Private subnet ID in which the node is.
        """
        pulumi.set(__self__, "region", region)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Public cloud region in which the node should be deployed.
        Ex: "GRA'.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private network id in which the node should be deployed. It's the regional openstackId of the private network
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        Private subnet ID in which the node is.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class GatewayExternalInformationArgsDict(TypedDict):
        ips: NotRequired[pulumi.Input[Sequence[pulumi.Input['GatewayExternalInformationIpArgsDict']]]]
        """
        List of external ips of the gateway.
        """
        network_id: NotRequired[pulumi.Input[str]]
        """
        ID of the private network.
        """
elif False:
    GatewayExternalInformationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayExternalInformationArgs:
    def __init__(__self__, *,
                 ips: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayExternalInformationIpArgs']]]] = None,
                 network_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GatewayExternalInformationIpArgs']]] ips: List of external ips of the gateway.
        :param pulumi.Input[str] network_id: ID of the private network.
        """
        if ips is not None:
            pulumi.set(__self__, "ips", ips)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter
    def ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayExternalInformationIpArgs']]]]:
        """
        List of external ips of the gateway.
        """
        return pulumi.get(self, "ips")

    @ips.setter
    def ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayExternalInformationIpArgs']]]]):
        pulumi.set(self, "ips", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the private network.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)


if not MYPY:
    class GatewayExternalInformationIpArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        """
        IP of the interface.
        """
        subnet_id: NotRequired[pulumi.Input[str]]
        """
        ID of the subnet.
        """
elif False:
    GatewayExternalInformationIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayExternalInformationIpArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ip: IP of the interface.
        :param pulumi.Input[str] subnet_id: ID of the subnet.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class GatewayInterfaceArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        ID of the interface.
        """
        ip: NotRequired[pulumi.Input[str]]
        """
        IP of the interface.
        """
        network_id: NotRequired[pulumi.Input[str]]
        """
        ID of the private network.
        """
        subnet_id: NotRequired[pulumi.Input[str]]
        """
        ID of the subnet.
        """
elif False:
    GatewayInterfaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayInterfaceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the interface.
        :param pulumi.Input[str] ip: IP of the interface.
        :param pulumi.Input[str] network_id: ID of the private network.
        :param pulumi.Input[str] subnet_id: ID of the subnet.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the interface.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP of the interface.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the private network.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class InstanceAddressArgsDict(TypedDict):
        ip: NotRequired[pulumi.Input[str]]
        """
        IP address
        """
        version: NotRequired[pulumi.Input[int]]
        """
        IP version
        """
elif False:
    InstanceAddressArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceAddressArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip: IP address
        :param pulumi.Input[int] version: IP version
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP address
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        IP version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class InstanceAttachedVolumeArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Instance id
        """
elif False:
    InstanceAttachedVolumeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceAttachedVolumeArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Instance id
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance id
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class InstanceAutoBackupArgsDict(TypedDict):
        cron: pulumi.Input[str]
        """
        Unix cron pattern
        """
        rotation: pulumi.Input[int]
        """
        Number of backup to keep
        """
elif False:
    InstanceAutoBackupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceAutoBackupArgs:
    def __init__(__self__, *,
                 cron: pulumi.Input[str],
                 rotation: pulumi.Input[int]):
        """
        :param pulumi.Input[str] cron: Unix cron pattern
        :param pulumi.Input[int] rotation: Number of backup to keep
        """
        pulumi.set(__self__, "cron", cron)
        pulumi.set(__self__, "rotation", rotation)

    @property
    @pulumi.getter
    def cron(self) -> pulumi.Input[str]:
        """
        Unix cron pattern
        """
        return pulumi.get(self, "cron")

    @cron.setter
    def cron(self, value: pulumi.Input[str]):
        pulumi.set(self, "cron", value)

    @property
    @pulumi.getter
    def rotation(self) -> pulumi.Input[int]:
        """
        Number of backup to keep
        """
        return pulumi.get(self, "rotation")

    @rotation.setter
    def rotation(self, value: pulumi.Input[int]):
        pulumi.set(self, "rotation", value)


if not MYPY:
    class InstanceBootFromArgsDict(TypedDict):
        image_id: NotRequired[pulumi.Input[str]]
        """
        Instance image id. Images can be retrieved using `GET /cloud/project/{serviceName}/image`
        """
        volume_id: NotRequired[pulumi.Input[str]]
        """
        Instance volume id
        """
elif False:
    InstanceBootFromArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceBootFromArgs:
    def __init__(__self__, *,
                 image_id: Optional[pulumi.Input[str]] = None,
                 volume_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] image_id: Instance image id. Images can be retrieved using `GET /cloud/project/{serviceName}/image`
        :param pulumi.Input[str] volume_id: Instance volume id
        """
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if volume_id is not None:
            pulumi.set(__self__, "volume_id", volume_id)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance image id. Images can be retrieved using `GET /cloud/project/{serviceName}/image`
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="volumeId")
    def volume_id(self) -> Optional[pulumi.Input[str]]:
        """
        Instance volume id
        """
        return pulumi.get(self, "volume_id")

    @volume_id.setter
    def volume_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "volume_id", value)


if not MYPY:
    class InstanceFlavorArgsDict(TypedDict):
        flavor_id: pulumi.Input[str]
        """
        Flavor ID. Flavors can be retrieved using `GET /cloud/project/{serviceName}/flavor`
        """
elif False:
    InstanceFlavorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceFlavorArgs:
    def __init__(__self__, *,
                 flavor_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] flavor_id: Flavor ID. Flavors can be retrieved using `GET /cloud/project/{serviceName}/flavor`
        """
        pulumi.set(__self__, "flavor_id", flavor_id)

    @property
    @pulumi.getter(name="flavorId")
    def flavor_id(self) -> pulumi.Input[str]:
        """
        Flavor ID. Flavors can be retrieved using `GET /cloud/project/{serviceName}/flavor`
        """
        return pulumi.get(self, "flavor_id")

    @flavor_id.setter
    def flavor_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "flavor_id", value)


if not MYPY:
    class InstanceGroupArgsDict(TypedDict):
        group_id: NotRequired[pulumi.Input[str]]
        """
        Group id
        """
elif False:
    InstanceGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceGroupArgs:
    def __init__(__self__, *,
                 group_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_id: Group id
        """
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[str]]:
        """
        Group id
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_id", value)


if not MYPY:
    class InstanceNetworkArgsDict(TypedDict):
        public: NotRequired[pulumi.Input[bool]]
        """
        Set the new instance as public boolean
        """
elif False:
    InstanceNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceNetworkArgs:
    def __init__(__self__, *,
                 public: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] public: Set the new instance as public boolean
        """
        if public is not None:
            pulumi.set(__self__, "public", public)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the new instance as public boolean
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)


if not MYPY:
    class InstanceSshKeyArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        SSH Keypair name
        """
elif False:
    InstanceSshKeyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceSshKeyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: SSH Keypair name
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        SSH Keypair name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class InstanceSshKeyCreateArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        SSH Key pair name
        """
        public_key: pulumi.Input[str]
        """
        SSH Public key
        """
elif False:
    InstanceSshKeyCreateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceSshKeyCreateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 public_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: SSH Key pair name
        :param pulumi.Input[str] public_key: SSH Public key
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        SSH Key pair name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        """
        SSH Public key
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)


if not MYPY:
    class KubeCustomizationArgsDict(TypedDict):
        apiservers: NotRequired[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverArgsDict']]]]
        """
        Kubernetes API server customization
        """
elif False:
    KubeCustomizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationArgs:
    def __init__(__self__, *,
                 apiservers: Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverArgs']]] apiservers: Kubernetes API server customization
        """
        if apiservers is not None:
            warnings.warn("""Use customization_apiserver instead""", DeprecationWarning)
            pulumi.log.warn("""apiservers is deprecated: Use customization_apiserver instead""")
        if apiservers is not None:
            pulumi.set(__self__, "apiservers", apiservers)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use customization_apiserver instead""")
    def apiservers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverArgs']]]]:
        """
        Kubernetes API server customization
        """
        return pulumi.get(self, "apiservers")

    @apiservers.setter
    def apiservers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverArgs']]]]):
        pulumi.set(self, "apiservers", value)


if not MYPY:
    class KubeCustomizationApiserverArgsDict(TypedDict):
        admissionplugins: NotRequired[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverAdmissionpluginArgsDict']]]]
        """
        Kubernetes API server admission plugins customization
        """
elif False:
    KubeCustomizationApiserverArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationApiserverArgs:
    def __init__(__self__, *,
                 admissionplugins: Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverAdmissionpluginArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverAdmissionpluginArgs']]] admissionplugins: Kubernetes API server admission plugins customization
        """
        if admissionplugins is not None:
            pulumi.set(__self__, "admissionplugins", admissionplugins)

    @property
    @pulumi.getter
    def admissionplugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverAdmissionpluginArgs']]]]:
        """
        Kubernetes API server admission plugins customization
        """
        return pulumi.get(self, "admissionplugins")

    @admissionplugins.setter
    def admissionplugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KubeCustomizationApiserverAdmissionpluginArgs']]]]):
        pulumi.set(self, "admissionplugins", value)


if not MYPY:
    class KubeCustomizationApiserverAdmissionpluginArgsDict(TypedDict):
        disableds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        """
        enableds: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
elif False:
    KubeCustomizationApiserverAdmissionpluginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationApiserverAdmissionpluginArgs:
    def __init__(__self__, *,
                 disableds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enableds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disableds: Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enableds: Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
        if disableds is not None:
            pulumi.set(__self__, "disableds", disableds)
        if enableds is not None:
            pulumi.set(__self__, "enableds", enableds)

    @property
    @pulumi.getter
    def disableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        """
        return pulumi.get(self, "disableds")

    @disableds.setter
    def disableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disableds", value)

    @property
    @pulumi.getter
    def enableds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enableds", value)


if not MYPY:
    class KubeCustomizationKubeProxyArgsDict(TypedDict):
        iptables: NotRequired[pulumi.Input['KubeCustomizationKubeProxyIptablesArgsDict']]
        """
        Kubernetes cluster kube-proxy customization of iptables specific config (durations format is RFC3339 duration, e.g. `PT60S`)
        """
        ipvs: NotRequired[pulumi.Input['KubeCustomizationKubeProxyIpvsArgsDict']]
        """
        Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration, e.g. `PT60S`)
        """
elif False:
    KubeCustomizationKubeProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationKubeProxyArgs:
    def __init__(__self__, *,
                 iptables: Optional[pulumi.Input['KubeCustomizationKubeProxyIptablesArgs']] = None,
                 ipvs: Optional[pulumi.Input['KubeCustomizationKubeProxyIpvsArgs']] = None):
        """
        :param pulumi.Input['KubeCustomizationKubeProxyIptablesArgs'] iptables: Kubernetes cluster kube-proxy customization of iptables specific config (durations format is RFC3339 duration, e.g. `PT60S`)
        :param pulumi.Input['KubeCustomizationKubeProxyIpvsArgs'] ipvs: Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration, e.g. `PT60S`)
        """
        if iptables is not None:
            pulumi.set(__self__, "iptables", iptables)
        if ipvs is not None:
            pulumi.set(__self__, "ipvs", ipvs)

    @property
    @pulumi.getter
    def iptables(self) -> Optional[pulumi.Input['KubeCustomizationKubeProxyIptablesArgs']]:
        """
        Kubernetes cluster kube-proxy customization of iptables specific config (durations format is RFC3339 duration, e.g. `PT60S`)
        """
        return pulumi.get(self, "iptables")

    @iptables.setter
    def iptables(self, value: Optional[pulumi.Input['KubeCustomizationKubeProxyIptablesArgs']]):
        pulumi.set(self, "iptables", value)

    @property
    @pulumi.getter
    def ipvs(self) -> Optional[pulumi.Input['KubeCustomizationKubeProxyIpvsArgs']]:
        """
        Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration, e.g. `PT60S`)
        """
        return pulumi.get(self, "ipvs")

    @ipvs.setter
    def ipvs(self, value: Optional[pulumi.Input['KubeCustomizationKubeProxyIpvsArgs']]):
        pulumi.set(self, "ipvs", value)


if not MYPY:
    class KubeCustomizationKubeProxyIptablesArgsDict(TypedDict):
        min_sync_period: NotRequired[pulumi.Input[str]]
        """
        Period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`). Must be greater than 0.
        """
        sync_period: NotRequired[pulumi.Input[str]]
        """
        Minimum period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        """
elif False:
    KubeCustomizationKubeProxyIptablesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationKubeProxyIptablesArgs:
    def __init__(__self__, *,
                 min_sync_period: Optional[pulumi.Input[str]] = None,
                 sync_period: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] min_sync_period: Period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`). Must be greater than 0.
        :param pulumi.Input[str] sync_period: Minimum period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        """
        if min_sync_period is not None:
            pulumi.set(__self__, "min_sync_period", min_sync_period)
        if sync_period is not None:
            pulumi.set(__self__, "sync_period", sync_period)

    @property
    @pulumi.getter(name="minSyncPeriod")
    def min_sync_period(self) -> Optional[pulumi.Input[str]]:
        """
        Period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`). Must be greater than 0.
        """
        return pulumi.get(self, "min_sync_period")

    @min_sync_period.setter
    def min_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_sync_period", value)

    @property
    @pulumi.getter(name="syncPeriod")
    def sync_period(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum period that iptables rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        """
        return pulumi.get(self, "sync_period")

    @sync_period.setter
    def sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_period", value)


if not MYPY:
    class KubeCustomizationKubeProxyIpvsArgsDict(TypedDict):
        min_sync_period: NotRequired[pulumi.Input[str]]
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`).
        """
        scheduler: NotRequired[pulumi.Input[str]]
        """
        IPVS scheduler.
        """
        sync_period: NotRequired[pulumi.Input[str]]
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        """
        tcp_fin_timeout: NotRequired[pulumi.Input[str]]
        """
        Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        tcp_timeout: NotRequired[pulumi.Input[str]]
        """
        Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        udp_timeout: NotRequired[pulumi.Input[str]]
        """
        timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
elif False:
    KubeCustomizationKubeProxyIpvsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeCustomizationKubeProxyIpvsArgs:
    def __init__(__self__, *,
                 min_sync_period: Optional[pulumi.Input[str]] = None,
                 scheduler: Optional[pulumi.Input[str]] = None,
                 sync_period: Optional[pulumi.Input[str]] = None,
                 tcp_fin_timeout: Optional[pulumi.Input[str]] = None,
                 tcp_timeout: Optional[pulumi.Input[str]] = None,
                 udp_timeout: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] min_sync_period: Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`).
        :param pulumi.Input[str] scheduler: IPVS scheduler.
        :param pulumi.Input[str] sync_period: Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        :param pulumi.Input[str] tcp_fin_timeout: Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        :param pulumi.Input[str] tcp_timeout: Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        :param pulumi.Input[str] udp_timeout: timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        if min_sync_period is not None:
            pulumi.set(__self__, "min_sync_period", min_sync_period)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if sync_period is not None:
            pulumi.set(__self__, "sync_period", sync_period)
        if tcp_fin_timeout is not None:
            pulumi.set(__self__, "tcp_fin_timeout", tcp_fin_timeout)
        if tcp_timeout is not None:
            pulumi.set(__self__, "tcp_timeout", tcp_timeout)
        if udp_timeout is not None:
            pulumi.set(__self__, "udp_timeout", udp_timeout)

    @property
    @pulumi.getter(name="minSyncPeriod")
    def min_sync_period(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`).
        """
        return pulumi.get(self, "min_sync_period")

    @min_sync_period.setter
    def min_sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min_sync_period", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[str]]:
        """
        IPVS scheduler.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="syncPeriod")
    def sync_period(self) -> Optional[pulumi.Input[str]]:
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format (e.g. `PT60S`).
        """
        return pulumi.get(self, "sync_period")

    @sync_period.setter
    def sync_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_period", value)

    @property
    @pulumi.getter(name="tcpFinTimeout")
    def tcp_fin_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        return pulumi.get(self, "tcp_fin_timeout")

    @tcp_fin_timeout.setter
    def tcp_fin_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_fin_timeout", value)

    @property
    @pulumi.getter(name="tcpTimeout")
    def tcp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        return pulumi.get(self, "tcp_timeout")

    @tcp_timeout.setter
    def tcp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tcp_timeout", value)

    @property
    @pulumi.getter(name="udpTimeout")
    def udp_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration (e.g. `PT60S`). The default value is `PT0S`, which preserves the current timeout value on the system.
        """
        return pulumi.get(self, "udp_timeout")

    @udp_timeout.setter
    def udp_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udp_timeout", value)


if not MYPY:
    class KubeKubeconfigAttributeArgsDict(TypedDict):
        client_certificate: NotRequired[pulumi.Input[str]]
        """
        The kubernetes API server client certificate.
        """
        client_key: NotRequired[pulumi.Input[str]]
        """
        The kubernetes API server client key.
        """
        cluster_ca_certificate: NotRequired[pulumi.Input[str]]
        """
        The kubernetes API server CA certificate.
        """
        host: NotRequired[pulumi.Input[str]]
        """
        The kubernetes API server URL.
        """
elif False:
    KubeKubeconfigAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeKubeconfigAttributeArgs:
    def __init__(__self__, *,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 cluster_ca_certificate: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_certificate: The kubernetes API server client certificate.
        :param pulumi.Input[str] client_key: The kubernetes API server client key.
        :param pulumi.Input[str] cluster_ca_certificate: The kubernetes API server CA certificate.
        :param pulumi.Input[str] host: The kubernetes API server URL.
        """
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The kubernetes API server client certificate.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        """
        The kubernetes API server client key.
        """
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The kubernetes API server CA certificate.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @cluster_ca_certificate.setter
    def cluster_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_ca_certificate", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The kubernetes API server URL.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


if not MYPY:
    class KubeNodePoolTemplateArgsDict(TypedDict):
        metadata: pulumi.Input['KubeNodePoolTemplateMetadataArgsDict']
        """
        metadata
        """
        spec: pulumi.Input['KubeNodePoolTemplateSpecArgsDict']
        """
        spec
        """
elif False:
    KubeNodePoolTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeNodePoolTemplateArgs:
    def __init__(__self__, *,
                 metadata: pulumi.Input['KubeNodePoolTemplateMetadataArgs'],
                 spec: pulumi.Input['KubeNodePoolTemplateSpecArgs']):
        """
        :param pulumi.Input['KubeNodePoolTemplateMetadataArgs'] metadata: metadata
        :param pulumi.Input['KubeNodePoolTemplateSpecArgs'] spec: spec
        """
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Input['KubeNodePoolTemplateMetadataArgs']:
        """
        metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: pulumi.Input['KubeNodePoolTemplateMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Input['KubeNodePoolTemplateSpecArgs']:
        """
        spec
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: pulumi.Input['KubeNodePoolTemplateSpecArgs']):
        pulumi.set(self, "spec", value)


if not MYPY:
    class KubeNodePoolTemplateMetadataArgsDict(TypedDict):
        annotations: pulumi.Input[Mapping[str, pulumi.Input[str]]]
        """
        annotations
        """
        finalizers: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        finalizers
        """
        labels: pulumi.Input[Mapping[str, pulumi.Input[str]]]
        """
        labels
        """
elif False:
    KubeNodePoolTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeNodePoolTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 finalizers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 labels: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: annotations
        :param pulumi.Input[Sequence[pulumi.Input[str]]] finalizers: finalizers
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: labels
        """
        pulumi.set(__self__, "annotations", annotations)
        pulumi.set(__self__, "finalizers", finalizers)
        pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def finalizers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        finalizers
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "finalizers", value)

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class KubeNodePoolTemplateSpecArgsDict(TypedDict):
        taints: pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]
        """
        taints
        """
        unschedulable: pulumi.Input[bool]
        """
        unschedulable
        """
elif False:
    KubeNodePoolTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubeNodePoolTemplateSpecArgs:
    def __init__(__self__, *,
                 taints: pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]],
                 unschedulable: pulumi.Input[bool]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]] taints: taints
        :param pulumi.Input[bool] unschedulable: unschedulable
        """
        pulumi.set(__self__, "taints", taints)
        pulumi.set(__self__, "unschedulable", unschedulable)

    @property
    @pulumi.getter
    def taints(self) -> pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]:
        """
        taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> pulumi.Input[bool]:
        """
        unschedulable
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: pulumi.Input[bool]):
        pulumi.set(self, "unschedulable", value)


if not MYPY:
    class KubePrivateNetworkConfigurationArgsDict(TypedDict):
        default_vrack_gateway: pulumi.Input[str]
        """
        If defined, all egress traffic will be routed towards this IP address, which should belong to the private network. Empty string means disabled.
        """
        private_network_routing_as_default: pulumi.Input[bool]
        """
        Defines whether routing should default to using the nodes' private interface, instead of their public interface. Default is false.

        In order to use the gateway IP advertised by the private network subnet DHCP, the following configuration shall be used.
        ```python
        import pulumi
        ```
        """
elif False:
    KubePrivateNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KubePrivateNetworkConfigurationArgs:
    def __init__(__self__, *,
                 default_vrack_gateway: pulumi.Input[str],
                 private_network_routing_as_default: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] default_vrack_gateway: If defined, all egress traffic will be routed towards this IP address, which should belong to the private network. Empty string means disabled.
        :param pulumi.Input[bool] private_network_routing_as_default: Defines whether routing should default to using the nodes' private interface, instead of their public interface. Default is false.
               
               In order to use the gateway IP advertised by the private network subnet DHCP, the following configuration shall be used.
               ```python
               import pulumi
               ```
        """
        pulumi.set(__self__, "default_vrack_gateway", default_vrack_gateway)
        pulumi.set(__self__, "private_network_routing_as_default", private_network_routing_as_default)

    @property
    @pulumi.getter(name="defaultVrackGateway")
    def default_vrack_gateway(self) -> pulumi.Input[str]:
        """
        If defined, all egress traffic will be routed towards this IP address, which should belong to the private network. Empty string means disabled.
        """
        return pulumi.get(self, "default_vrack_gateway")

    @default_vrack_gateway.setter
    def default_vrack_gateway(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_vrack_gateway", value)

    @property
    @pulumi.getter(name="privateNetworkRoutingAsDefault")
    def private_network_routing_as_default(self) -> pulumi.Input[bool]:
        """
        Defines whether routing should default to using the nodes' private interface, instead of their public interface. Default is false.

        In order to use the gateway IP advertised by the private network subnet DHCP, the following configuration shall be used.
        ```python
        import pulumi
        ```
        """
        return pulumi.get(self, "private_network_routing_as_default")

    @private_network_routing_as_default.setter
    def private_network_routing_as_default(self, value: pulumi.Input[bool]):
        pulumi.set(self, "private_network_routing_as_default", value)


if not MYPY:
    class LoadBalancerFloatingIpArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        ID of the resource
        """
        ip: NotRequired[pulumi.Input[str]]
        """
        IP Address of the resource
        """
elif False:
    LoadBalancerFloatingIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerFloatingIpArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the resource
        :param pulumi.Input[str] ip: IP Address of the resource
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address of the resource
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)


if not MYPY:
    class LoadBalancerListenerArgsDict(TypedDict):
        port: pulumi.Input[float]
        """
        Listener port
        """
        protocol: pulumi.Input[str]
        """
        Protocol for the listener
        """
        allowed_cidrs: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The allowed CIDRs
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the listener
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the listener
        """
        pool: NotRequired[pulumi.Input['LoadBalancerListenerPoolArgsDict']]
        """
        Listener pool
        """
        secret_id: NotRequired[pulumi.Input[str]]
        """
        Secret ID to get certificate for SSL listener creation
        """
        timeout_client_data: NotRequired[pulumi.Input[float]]
        """
        Timeout client data of the listener
        """
        timeout_member_data: NotRequired[pulumi.Input[float]]
        """
        Timeout member data of the listener
        """
        tls_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        TLS versions of the listener
        """
elif False:
    LoadBalancerListenerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerArgs:
    def __init__(__self__, *,
                 port: pulumi.Input[float],
                 protocol: pulumi.Input[str],
                 allowed_cidrs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input['LoadBalancerListenerPoolArgs']] = None,
                 secret_id: Optional[pulumi.Input[str]] = None,
                 timeout_client_data: Optional[pulumi.Input[float]] = None,
                 timeout_member_data: Optional[pulumi.Input[float]] = None,
                 tls_versions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[float] port: Listener port
        :param pulumi.Input[str] protocol: Protocol for the listener
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_cidrs: The allowed CIDRs
        :param pulumi.Input[str] description: The description of the listener
        :param pulumi.Input[str] name: Name of the listener
        :param pulumi.Input['LoadBalancerListenerPoolArgs'] pool: Listener pool
        :param pulumi.Input[str] secret_id: Secret ID to get certificate for SSL listener creation
        :param pulumi.Input[float] timeout_client_data: Timeout client data of the listener
        :param pulumi.Input[float] timeout_member_data: Timeout member data of the listener
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tls_versions: TLS versions of the listener
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        if allowed_cidrs is not None:
            pulumi.set(__self__, "allowed_cidrs", allowed_cidrs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pool is not None:
            pulumi.set(__self__, "pool", pool)
        if secret_id is not None:
            pulumi.set(__self__, "secret_id", secret_id)
        if timeout_client_data is not None:
            pulumi.set(__self__, "timeout_client_data", timeout_client_data)
        if timeout_member_data is not None:
            pulumi.set(__self__, "timeout_member_data", timeout_member_data)
        if tls_versions is not None:
            pulumi.set(__self__, "tls_versions", tls_versions)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        Listener port
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol for the listener
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="allowedCidrs")
    def allowed_cidrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The allowed CIDRs
        """
        return pulumi.get(self, "allowed_cidrs")

    @allowed_cidrs.setter
    def allowed_cidrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_cidrs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the listener
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the listener
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def pool(self) -> Optional[pulumi.Input['LoadBalancerListenerPoolArgs']]:
        """
        Listener pool
        """
        return pulumi.get(self, "pool")

    @pool.setter
    def pool(self, value: Optional[pulumi.Input['LoadBalancerListenerPoolArgs']]):
        pulumi.set(self, "pool", value)

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> Optional[pulumi.Input[str]]:
        """
        Secret ID to get certificate for SSL listener creation
        """
        return pulumi.get(self, "secret_id")

    @secret_id.setter
    def secret_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_id", value)

    @property
    @pulumi.getter(name="timeoutClientData")
    def timeout_client_data(self) -> Optional[pulumi.Input[float]]:
        """
        Timeout client data of the listener
        """
        return pulumi.get(self, "timeout_client_data")

    @timeout_client_data.setter
    def timeout_client_data(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout_client_data", value)

    @property
    @pulumi.getter(name="timeoutMemberData")
    def timeout_member_data(self) -> Optional[pulumi.Input[float]]:
        """
        Timeout member data of the listener
        """
        return pulumi.get(self, "timeout_member_data")

    @timeout_member_data.setter
    def timeout_member_data(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout_member_data", value)

    @property
    @pulumi.getter(name="tlsVersions")
    def tls_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        TLS versions of the listener
        """
        return pulumi.get(self, "tls_versions")

    @tls_versions.setter
    def tls_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tls_versions", value)


if not MYPY:
    class LoadBalancerListenerPoolArgsDict(TypedDict):
        algorithm: NotRequired[pulumi.Input[str]]
        """
        Pool algorithm to split traffic between members
        """
        health_monitor: NotRequired[pulumi.Input['LoadBalancerListenerPoolHealthMonitorArgsDict']]
        """
        Pool health monitor
        """
        members: NotRequired[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerPoolMemberArgsDict']]]]
        """
        Pool members
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the pool
        """
        protocol: NotRequired[pulumi.Input[str]]
        """
        Protocol for the pool
        """
        session_persistence: NotRequired[pulumi.Input['LoadBalancerListenerPoolSessionPersistenceArgsDict']]
        """
        Pool session persistence
        """
elif False:
    LoadBalancerListenerPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerPoolArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 health_monitor: Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorArgs']] = None,
                 members: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerPoolMemberArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 session_persistence: Optional[pulumi.Input['LoadBalancerListenerPoolSessionPersistenceArgs']] = None):
        """
        :param pulumi.Input[str] algorithm: Pool algorithm to split traffic between members
        :param pulumi.Input['LoadBalancerListenerPoolHealthMonitorArgs'] health_monitor: Pool health monitor
        :param pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerPoolMemberArgs']]] members: Pool members
        :param pulumi.Input[str] name: Name of the pool
        :param pulumi.Input[str] protocol: Protocol for the pool
        :param pulumi.Input['LoadBalancerListenerPoolSessionPersistenceArgs'] session_persistence: Pool session persistence
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if health_monitor is not None:
            pulumi.set(__self__, "health_monitor", health_monitor)
        if members is not None:
            pulumi.set(__self__, "members", members)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if session_persistence is not None:
            pulumi.set(__self__, "session_persistence", session_persistence)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Pool algorithm to split traffic between members
        """
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="healthMonitor")
    def health_monitor(self) -> Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorArgs']]:
        """
        Pool health monitor
        """
        return pulumi.get(self, "health_monitor")

    @health_monitor.setter
    def health_monitor(self, value: Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorArgs']]):
        pulumi.set(self, "health_monitor", value)

    @property
    @pulumi.getter
    def members(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerPoolMemberArgs']]]]:
        """
        Pool members
        """
        return pulumi.get(self, "members")

    @members.setter
    def members(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoadBalancerListenerPoolMemberArgs']]]]):
        pulumi.set(self, "members", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the pool
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        Protocol for the pool
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="sessionPersistence")
    def session_persistence(self) -> Optional[pulumi.Input['LoadBalancerListenerPoolSessionPersistenceArgs']]:
        """
        Pool session persistence
        """
        return pulumi.get(self, "session_persistence")

    @session_persistence.setter
    def session_persistence(self, value: Optional[pulumi.Input['LoadBalancerListenerPoolSessionPersistenceArgs']]):
        pulumi.set(self, "session_persistence", value)


if not MYPY:
    class LoadBalancerListenerPoolHealthMonitorArgsDict(TypedDict):
        delay: NotRequired[pulumi.Input[float]]
        """
        Duration between sending probes to members, in seconds
        """
        http_configuration: NotRequired[pulumi.Input['LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgsDict']]
        """
        Monitor HTTP configuration
        """
        max_retries: NotRequired[pulumi.Input[float]]
        """
        Number of successful checks before changing the operating status of the member to ONLINE
        """
        max_retries_down: NotRequired[pulumi.Input[float]]
        """
        Number of allowed check failures before changing the operating status of the member to ERROR
        """
        monitor_type: NotRequired[pulumi.Input[str]]
        """
        Type of the monitor
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the resource
        """
        operating_status: NotRequired[pulumi.Input[str]]
        """
        The operating status of the resource
        """
        provisioning_status: NotRequired[pulumi.Input[str]]
        """
        The provisioning status of the resource
        """
        timeout: NotRequired[pulumi.Input[float]]
        """
        Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value
        """
elif False:
    LoadBalancerListenerPoolHealthMonitorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerPoolHealthMonitorArgs:
    def __init__(__self__, *,
                 delay: Optional[pulumi.Input[float]] = None,
                 http_configuration: Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs']] = None,
                 max_retries: Optional[pulumi.Input[float]] = None,
                 max_retries_down: Optional[pulumi.Input[float]] = None,
                 monitor_type: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 operating_status: Optional[pulumi.Input[str]] = None,
                 provisioning_status: Optional[pulumi.Input[str]] = None,
                 timeout: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] delay: Duration between sending probes to members, in seconds
        :param pulumi.Input['LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs'] http_configuration: Monitor HTTP configuration
        :param pulumi.Input[float] max_retries: Number of successful checks before changing the operating status of the member to ONLINE
        :param pulumi.Input[float] max_retries_down: Number of allowed check failures before changing the operating status of the member to ERROR
        :param pulumi.Input[str] monitor_type: Type of the monitor
        :param pulumi.Input[str] name: The name of the resource
        :param pulumi.Input[str] operating_status: The operating status of the resource
        :param pulumi.Input[str] provisioning_status: The provisioning status of the resource
        :param pulumi.Input[float] timeout: Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value
        """
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if http_configuration is not None:
            pulumi.set(__self__, "http_configuration", http_configuration)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if max_retries_down is not None:
            pulumi.set(__self__, "max_retries_down", max_retries_down)
        if monitor_type is not None:
            pulumi.set(__self__, "monitor_type", monitor_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if operating_status is not None:
            pulumi.set(__self__, "operating_status", operating_status)
        if provisioning_status is not None:
            pulumi.set(__self__, "provisioning_status", provisioning_status)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[float]]:
        """
        Duration between sending probes to members, in seconds
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="httpConfiguration")
    def http_configuration(self) -> Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs']]:
        """
        Monitor HTTP configuration
        """
        return pulumi.get(self, "http_configuration")

    @http_configuration.setter
    def http_configuration(self, value: Optional[pulumi.Input['LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs']]):
        pulumi.set(self, "http_configuration", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[float]]:
        """
        Number of successful checks before changing the operating status of the member to ONLINE
        """
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter(name="maxRetriesDown")
    def max_retries_down(self) -> Optional[pulumi.Input[float]]:
        """
        Number of allowed check failures before changing the operating status of the member to ERROR
        """
        return pulumi.get(self, "max_retries_down")

    @max_retries_down.setter
    def max_retries_down(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retries_down", value)

    @property
    @pulumi.getter(name="monitorType")
    def monitor_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the monitor
        """
        return pulumi.get(self, "monitor_type")

    @monitor_type.setter
    def monitor_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the resource
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operatingStatus")
    def operating_status(self) -> Optional[pulumi.Input[str]]:
        """
        The operating status of the resource
        """
        return pulumi.get(self, "operating_status")

    @operating_status.setter
    def operating_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operating_status", value)

    @property
    @pulumi.getter(name="provisioningStatus")
    def provisioning_status(self) -> Optional[pulumi.Input[str]]:
        """
        The provisioning status of the resource
        """
        return pulumi.get(self, "provisioning_status")

    @provisioning_status.setter
    def provisioning_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provisioning_status", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout", value)


if not MYPY:
    class LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgsDict(TypedDict):
        domain_name: NotRequired[pulumi.Input[str]]
        """
        Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check
        """
        expected_codes: NotRequired[pulumi.Input[str]]
        """
        Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204
        """
        http_method: NotRequired[pulumi.Input[str]]
        """
        HTTP method that the health monitor uses for requests
        """
        http_version: NotRequired[pulumi.Input[str]]
        """
        HTTP version that the health monitor uses for requests
        """
        url_path: NotRequired[pulumi.Input[str]]
        """
        HTTP URL path of the request sent by the monitor to test the health of a backend member
        """
elif False:
    LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerPoolHealthMonitorHttpConfigurationArgs:
    def __init__(__self__, *,
                 domain_name: Optional[pulumi.Input[str]] = None,
                 expected_codes: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_version: Optional[pulumi.Input[str]] = None,
                 url_path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] domain_name: Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check
        :param pulumi.Input[str] expected_codes: Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204
        :param pulumi.Input[str] http_method: HTTP method that the health monitor uses for requests
        :param pulumi.Input[str] http_version: HTTP version that the health monitor uses for requests
        :param pulumi.Input[str] url_path: HTTP URL path of the request sent by the monitor to test the health of a backend member
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if expected_codes is not None:
            pulumi.set(__self__, "expected_codes", expected_codes)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_version is not None:
            pulumi.set(__self__, "http_version", http_version)
        if url_path is not None:
            pulumi.set(__self__, "url_path", url_path)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="expectedCodes")
    def expected_codes(self) -> Optional[pulumi.Input[str]]:
        """
        Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204
        """
        return pulumi.get(self, "expected_codes")

    @expected_codes.setter
    def expected_codes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expected_codes", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP method that the health monitor uses for requests
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpVersion")
    def http_version(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP version that the health monitor uses for requests
        """
        return pulumi.get(self, "http_version")

    @http_version.setter
    def http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_version", value)

    @property
    @pulumi.getter(name="urlPath")
    def url_path(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP URL path of the request sent by the monitor to test the health of a backend member
        """
        return pulumi.get(self, "url_path")

    @url_path.setter
    def url_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_path", value)


if not MYPY:
    class LoadBalancerListenerPoolMemberArgsDict(TypedDict):
        address: NotRequired[pulumi.Input[str]]
        """
        IP address of the resource
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the member
        """
        protocol_port: NotRequired[pulumi.Input[float]]
        """
        Protocol port number for the resource
        """
        weight: NotRequired[pulumi.Input[float]]
        """
        Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256.
        """
elif False:
    LoadBalancerListenerPoolMemberArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerPoolMemberArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 protocol_port: Optional[pulumi.Input[float]] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] address: IP address of the resource
        :param pulumi.Input[str] name: Name of the member
        :param pulumi.Input[float] protocol_port: Protocol port number for the resource
        :param pulumi.Input[float] weight: Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol_port is not None:
            pulumi.set(__self__, "protocol_port", protocol_port)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        IP address of the resource
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the member
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolPort")
    def protocol_port(self) -> Optional[pulumi.Input[float]]:
        """
        Protocol port number for the resource
        """
        return pulumi.get(self, "protocol_port")

    @protocol_port.setter
    def protocol_port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "protocol_port", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class LoadBalancerListenerPoolSessionPersistenceArgsDict(TypedDict):
        cookie_name: NotRequired[pulumi.Input[str]]
        """
        Cookie name, only applicable to session persistence through cookie
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of session persistence
        """
elif False:
    LoadBalancerListenerPoolSessionPersistenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerListenerPoolSessionPersistenceArgs:
    def __init__(__self__, *,
                 cookie_name: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cookie_name: Cookie name, only applicable to session persistence through cookie
        :param pulumi.Input[str] type: Type of session persistence
        """
        if cookie_name is not None:
            pulumi.set(__self__, "cookie_name", cookie_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        Cookie name, only applicable to session persistence through cookie
        """
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of session persistence
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class LoadBalancerNetworkArgsDict(TypedDict):
        private: pulumi.Input['LoadBalancerNetworkPrivateArgsDict']
        """
        Information to private network
        """
elif False:
    LoadBalancerNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkArgs:
    def __init__(__self__, *,
                 private: pulumi.Input['LoadBalancerNetworkPrivateArgs']):
        """
        :param pulumi.Input['LoadBalancerNetworkPrivateArgs'] private: Information to private network
        """
        pulumi.set(__self__, "private", private)

    @property
    @pulumi.getter
    def private(self) -> pulumi.Input['LoadBalancerNetworkPrivateArgs']:
        """
        Information to private network
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: pulumi.Input['LoadBalancerNetworkPrivateArgs']):
        pulumi.set(self, "private", value)


if not MYPY:
    class LoadBalancerNetworkPrivateArgsDict(TypedDict):
        network: pulumi.Input['LoadBalancerNetworkPrivateNetworkArgsDict']
        """
        Network to associate
        """
        floating_ip: NotRequired[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpArgsDict']]
        """
        Floating IP to associate
        """
        floating_ip_create: NotRequired[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpCreateArgsDict']]
        """
        Floating IP to create
        """
        gateway: NotRequired[pulumi.Input['LoadBalancerNetworkPrivateGatewayArgsDict']]
        """
        Gateway to associate
        """
        gateway_create: NotRequired[pulumi.Input['LoadBalancerNetworkPrivateGatewayCreateArgsDict']]
        """
        Gateway to create
        """
elif False:
    LoadBalancerNetworkPrivateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateArgs:
    def __init__(__self__, *,
                 network: pulumi.Input['LoadBalancerNetworkPrivateNetworkArgs'],
                 floating_ip: Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpArgs']] = None,
                 floating_ip_create: Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpCreateArgs']] = None,
                 gateway: Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayArgs']] = None,
                 gateway_create: Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayCreateArgs']] = None):
        """
        :param pulumi.Input['LoadBalancerNetworkPrivateNetworkArgs'] network: Network to associate
        :param pulumi.Input['LoadBalancerNetworkPrivateFloatingIpArgs'] floating_ip: Floating IP to associate
        :param pulumi.Input['LoadBalancerNetworkPrivateFloatingIpCreateArgs'] floating_ip_create: Floating IP to create
        :param pulumi.Input['LoadBalancerNetworkPrivateGatewayArgs'] gateway: Gateway to associate
        :param pulumi.Input['LoadBalancerNetworkPrivateGatewayCreateArgs'] gateway_create: Gateway to create
        """
        pulumi.set(__self__, "network", network)
        if floating_ip is not None:
            pulumi.set(__self__, "floating_ip", floating_ip)
        if floating_ip_create is not None:
            pulumi.set(__self__, "floating_ip_create", floating_ip_create)
        if gateway is not None:
            pulumi.set(__self__, "gateway", gateway)
        if gateway_create is not None:
            pulumi.set(__self__, "gateway_create", gateway_create)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input['LoadBalancerNetworkPrivateNetworkArgs']:
        """
        Network to associate
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input['LoadBalancerNetworkPrivateNetworkArgs']):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter(name="floatingIp")
    def floating_ip(self) -> Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpArgs']]:
        """
        Floating IP to associate
        """
        return pulumi.get(self, "floating_ip")

    @floating_ip.setter
    def floating_ip(self, value: Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpArgs']]):
        pulumi.set(self, "floating_ip", value)

    @property
    @pulumi.getter(name="floatingIpCreate")
    def floating_ip_create(self) -> Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpCreateArgs']]:
        """
        Floating IP to create
        """
        return pulumi.get(self, "floating_ip_create")

    @floating_ip_create.setter
    def floating_ip_create(self, value: Optional[pulumi.Input['LoadBalancerNetworkPrivateFloatingIpCreateArgs']]):
        pulumi.set(self, "floating_ip_create", value)

    @property
    @pulumi.getter
    def gateway(self) -> Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayArgs']]:
        """
        Gateway to associate
        """
        return pulumi.get(self, "gateway")

    @gateway.setter
    def gateway(self, value: Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayArgs']]):
        pulumi.set(self, "gateway", value)

    @property
    @pulumi.getter(name="gatewayCreate")
    def gateway_create(self) -> Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayCreateArgs']]:
        """
        Gateway to create
        """
        return pulumi.get(self, "gateway_create")

    @gateway_create.setter
    def gateway_create(self, value: Optional[pulumi.Input['LoadBalancerNetworkPrivateGatewayCreateArgs']]):
        pulumi.set(self, "gateway_create", value)


if not MYPY:
    class LoadBalancerNetworkPrivateFloatingIpArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        ID of the floatingIp
        """
elif False:
    LoadBalancerNetworkPrivateFloatingIpArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateFloatingIpArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the floatingIp
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the floatingIp
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class LoadBalancerNetworkPrivateFloatingIpCreateArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        Description for the floatingIp
        """
elif False:
    LoadBalancerNetworkPrivateFloatingIpCreateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateFloatingIpCreateArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: Description for the floatingIp
        """
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description for the floatingIp
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class LoadBalancerNetworkPrivateGatewayArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        ID of the gateway
        """
elif False:
    LoadBalancerNetworkPrivateGatewayArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateGatewayArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the gateway
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the gateway
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class LoadBalancerNetworkPrivateGatewayCreateArgsDict(TypedDict):
        model: NotRequired[pulumi.Input[str]]
        """
        Model of the gateway
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the gateway
        """
elif False:
    LoadBalancerNetworkPrivateGatewayCreateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateGatewayCreateArgs:
    def __init__(__self__, *,
                 model: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] model: Model of the gateway
        :param pulumi.Input[str] name: Name of the gateway
        """
        if model is not None:
            pulumi.set(__self__, "model", model)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        """
        Model of the gateway
        """
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the gateway
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class LoadBalancerNetworkPrivateNetworkArgsDict(TypedDict):
        id: pulumi.Input[str]
        """
        Private network ID
        """
        subnet_id: pulumi.Input[str]
        """
        Subnet ID
        """
elif False:
    LoadBalancerNetworkPrivateNetworkArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LoadBalancerNetworkPrivateNetworkArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 subnet_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: Private network ID
        :param pulumi.Input[str] subnet_id: Subnet ID
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        Private network ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        Subnet ID
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)


if not MYPY:
    class NetworkPrivateRegionsAttributeArgsDict(TypedDict):
        status: pulumi.Input[str]
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        openstackid: NotRequired[pulumi.Input[str]]
        region: NotRequired[pulumi.Input[str]]
elif False:
    NetworkPrivateRegionsAttributeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPrivateRegionsAttributeArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 openstackid: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: the status of the network. should be normally set to 'ACTIVE'.
        """
        pulumi.set(__self__, "status", status)
        if openstackid is not None:
            pulumi.set(__self__, "openstackid", openstackid)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def openstackid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "openstackid")

    @openstackid.setter
    def openstackid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "openstackid", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class NetworkPrivateRegionsStatusArgsDict(TypedDict):
        status: pulumi.Input[str]
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        region: NotRequired[pulumi.Input[str]]
elif False:
    NetworkPrivateRegionsStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPrivateRegionsStatusArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: the status of the network. should be normally set to 'ACTIVE'.
        """
        pulumi.set(__self__, "status", status)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        the status of the network. should be normally set to 'ACTIVE'.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class NetworkPrivateSubnetIpPoolArgsDict(TypedDict):
        dhcp: NotRequired[pulumi.Input[bool]]
        """
        Enable DHCP.
        Changing this forces a new resource to be created. Defaults to false.
        """
        end: NotRequired[pulumi.Input[str]]
        """
        Last ip for this region.
        Changing this value recreates the subnet.
        """
        network: NotRequired[pulumi.Input[str]]
        """
        Global network in CIDR format.
        Changing this value recreates the subnet
        """
        region: NotRequired[pulumi.Input[str]]
        """
        The region in which the network subnet will be created.
        Ex.: "GRA1". Changing this value recreates the resource.
        """
        start: NotRequired[pulumi.Input[str]]
        """
        First ip for this region.
        Changing this value recreates the subnet.
        """
elif False:
    NetworkPrivateSubnetIpPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPrivateSubnetIpPoolArgs:
    def __init__(__self__, *,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] dhcp: Enable DHCP.
               Changing this forces a new resource to be created. Defaults to false.
        :param pulumi.Input[str] end: Last ip for this region.
               Changing this value recreates the subnet.
        :param pulumi.Input[str] network: Global network in CIDR format.
               Changing this value recreates the subnet
        :param pulumi.Input[str] region: The region in which the network subnet will be created.
               Ex.: "GRA1". Changing this value recreates the resource.
        :param pulumi.Input[str] start: First ip for this region.
               Changing this value recreates the subnet.
        """
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DHCP.
        Changing this forces a new resource to be created. Defaults to false.
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        Last ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        Global network in CIDR format.
        Changing this value recreates the subnet
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region in which the network subnet will be created.
        Ex.: "GRA1". Changing this value recreates the resource.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        First ip for this region.
        Changing this value recreates the subnet.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


if not MYPY:
    class NetworkPrivateSubnetV2AllocationPoolArgsDict(TypedDict):
        end: pulumi.Input[str]
        start: pulumi.Input[str]
elif False:
    NetworkPrivateSubnetV2AllocationPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPrivateSubnetV2AllocationPoolArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


if not MYPY:
    class NetworkPrivateSubnetV2HostRouteArgsDict(TypedDict):
        destination: pulumi.Input[str]
        nexthop: pulumi.Input[str]
elif False:
    NetworkPrivateSubnetV2HostRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NetworkPrivateSubnetV2HostRouteArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 nexthop: pulumi.Input[str]):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "nexthop", nexthop)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def nexthop(self) -> pulumi.Input[str]:
        return pulumi.get(self, "nexthop")

    @nexthop.setter
    def nexthop(self, value: pulumi.Input[str]):
        pulumi.set(self, "nexthop", value)


if not MYPY:
    class ProjectOrderArgsDict(TypedDict):
        date: NotRequired[pulumi.Input[str]]
        """
        date
        """
        details: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectOrderDetailArgsDict']]]]
        """
        Information about a Bill entry
        """
        expiration_date: NotRequired[pulumi.Input[str]]
        """
        expiration date
        """
        order_id: NotRequired[pulumi.Input[int]]
        """
        order id, the same as the `id`
        """
elif False:
    ProjectOrderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectOrderArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectOrderDetailArgs']]]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] date: date
        :param pulumi.Input[Sequence[pulumi.Input['ProjectOrderDetailArgs']]] details: Information about a Bill entry
        :param pulumi.Input[str] expiration_date: expiration date
        :param pulumi.Input[int] order_id: order id, the same as the `id`
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        """
        date
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectOrderDetailArgs']]]]:
        """
        Information about a Bill entry
        """
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectOrderDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        """
        expiration date
        """
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[int]]:
        """
        order id, the same as the `id`
        """
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order_id", value)


if not MYPY:
    class ProjectOrderDetailArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        A description associated with the user.
        """
        domain: NotRequired[pulumi.Input[str]]
        """
        expiration date
        """
        order_detail_id: NotRequired[pulumi.Input[int]]
        """
        order detail id
        """
        quantity: NotRequired[pulumi.Input[str]]
        """
        quantity
        """
elif False:
    ProjectOrderDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectOrderDetailArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 order_detail_id: Optional[pulumi.Input[int]] = None,
                 quantity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: A description associated with the user.
        :param pulumi.Input[str] domain: expiration date
        :param pulumi.Input[int] order_detail_id: order detail id
        :param pulumi.Input[str] quantity: quantity
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description associated with the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        expiration date
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[pulumi.Input[int]]:
        """
        order detail id
        """
        return pulumi.get(self, "order_detail_id")

    @order_detail_id.setter
    def order_detail_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order_detail_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[str]]:
        """
        quantity
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantity", value)


if not MYPY:
    class ProjectPlanArgsDict(TypedDict):
        duration: pulumi.Input[str]
        """
        duration
        """
        plan_code: pulumi.Input[str]
        """
        Plan code. This value must be adapted depending on your `OVH_ENDPOINT` value. It's `project.2018` for `ovh-{eu,ca}` and `project` when using `ovh-us`.
        """
        pricing_mode: pulumi.Input[str]
        """
        Pricing model identifier
        """
        catalog_name: NotRequired[pulumi.Input[str]]
        """
        Catalog name
        """
        configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectPlanConfigurationArgsDict']]]]
        """
        Representation of a configuration item for personalizing product
        """
elif False:
    ProjectPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectPlanArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 plan_code: pulumi.Input[str],
                 pricing_mode: pulumi.Input[str],
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[str] duration: duration
        :param pulumi.Input[str] plan_code: Plan code. This value must be adapted depending on your `OVH_ENDPOINT` value. It's `project.2018` for `ovh-{eu,ca}` and `project` when using `ovh-us`.
        :param pulumi.Input[str] pricing_mode: Pricing model identifier
        :param pulumi.Input[str] catalog_name: Catalog name
        :param pulumi.Input[Sequence[pulumi.Input['ProjectPlanConfigurationArgs']]] configurations: Representation of a configuration item for personalizing product
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        duration
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Input[str]:
        """
        Plan code. This value must be adapted depending on your `OVH_ENDPOINT` value. It's `project.2018` for `ovh-{eu,ca}` and `project` when using `ovh-us`.
        """
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> pulumi.Input[str]:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @pricing_mode.setter
    def pricing_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pricing_mode", value)

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanConfigurationArgs']]]]:
        """
        Representation of a configuration item for personalizing product
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)


if not MYPY:
    class ProjectPlanConfigurationArgsDict(TypedDict):
        label: pulumi.Input[str]
        """
        Identifier of the resource
        """
        value: pulumi.Input[str]
        """
        Path to the resource in API.OVH.COM
        """
elif False:
    ProjectPlanConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectPlanConfigurationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] label: Identifier of the resource
        :param pulumi.Input[str] value: Path to the resource in API.OVH.COM
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Identifier of the resource
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Path to the resource in API.OVH.COM
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ProjectPlanOptionArgsDict(TypedDict):
        duration: pulumi.Input[str]
        """
        duration
        """
        plan_code: pulumi.Input[str]
        """
        Plan code
        """
        pricing_mode: pulumi.Input[str]
        """
        Pricing model identifier
        """
        catalog_name: NotRequired[pulumi.Input[str]]
        """
        Catalog name
        """
        configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProjectPlanOptionConfigurationArgsDict']]]]
        """
        Representation of a configuration item for personalizing product
        """
elif False:
    ProjectPlanOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectPlanOptionArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 plan_code: pulumi.Input[str],
                 pricing_mode: pulumi.Input[str],
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanOptionConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[str] duration: duration
        :param pulumi.Input[str] plan_code: Plan code
        :param pulumi.Input[str] pricing_mode: Pricing model identifier
        :param pulumi.Input[str] catalog_name: Catalog name
        :param pulumi.Input[Sequence[pulumi.Input['ProjectPlanOptionConfigurationArgs']]] configurations: Representation of a configuration item for personalizing product
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        duration
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Input[str]:
        """
        Plan code
        """
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> pulumi.Input[str]:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @pricing_mode.setter
    def pricing_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pricing_mode", value)

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog name
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanOptionConfigurationArgs']]]]:
        """
        Representation of a configuration item for personalizing product
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProjectPlanOptionConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)


if not MYPY:
    class ProjectPlanOptionConfigurationArgsDict(TypedDict):
        label: pulumi.Input[str]
        """
        Identifier of the resource
        """
        value: pulumi.Input[str]
        """
        Path to the resource in API.OVH.COM
        """
elif False:
    ProjectPlanOptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectPlanOptionConfigurationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] label: Identifier of the resource
        :param pulumi.Input[str] value: Path to the resource in API.OVH.COM
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Identifier of the resource
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Path to the resource in API.OVH.COM
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RancherCurrentStateArgsDict(TypedDict):
        bootstrap_password: NotRequired[pulumi.Input[str]]
        """
        Bootstrap password of the managed Rancher service, returned only on creation
        """
        ip_restrictions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RancherCurrentStateIpRestrictionArgsDict']]]]
        """
        List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Name of the managed Rancher service
        """
        networking: NotRequired[pulumi.Input['RancherCurrentStateNetworkingArgsDict']]
        """
        Networking properties of a managed Rancher service
        """
        plan: NotRequired[pulumi.Input[str]]
        """
        Plan of the managed Rancher service
        """
        region: NotRequired[pulumi.Input[str]]
        """
        Region of the managed Rancher service
        """
        url: NotRequired[pulumi.Input[str]]
        """
        URL of the managed Rancher service
        """
        usage: NotRequired[pulumi.Input['RancherCurrentStateUsageArgsDict']]
        """
        Latest metrics regarding the usage of the managed Rancher service
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Version of the managed Rancher service
        """
elif False:
    RancherCurrentStateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherCurrentStateArgs:
    def __init__(__self__, *,
                 bootstrap_password: Optional[pulumi.Input[str]] = None,
                 ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['RancherCurrentStateIpRestrictionArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 networking: Optional[pulumi.Input['RancherCurrentStateNetworkingArgs']] = None,
                 plan: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 usage: Optional[pulumi.Input['RancherCurrentStateUsageArgs']] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bootstrap_password: Bootstrap password of the managed Rancher service, returned only on creation
        :param pulumi.Input[Sequence[pulumi.Input['RancherCurrentStateIpRestrictionArgs']]] ip_restrictions: List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        :param pulumi.Input[str] name: Name of the managed Rancher service
        :param pulumi.Input['RancherCurrentStateNetworkingArgs'] networking: Networking properties of a managed Rancher service
        :param pulumi.Input[str] plan: Plan of the managed Rancher service
        :param pulumi.Input[str] region: Region of the managed Rancher service
        :param pulumi.Input[str] url: URL of the managed Rancher service
        :param pulumi.Input['RancherCurrentStateUsageArgs'] usage: Latest metrics regarding the usage of the managed Rancher service
        :param pulumi.Input[str] version: Version of the managed Rancher service
        """
        if bootstrap_password is not None:
            pulumi.set(__self__, "bootstrap_password", bootstrap_password)
        if ip_restrictions is not None:
            pulumi.set(__self__, "ip_restrictions", ip_restrictions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if networking is not None:
            pulumi.set(__self__, "networking", networking)
        if plan is not None:
            pulumi.set(__self__, "plan", plan)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if usage is not None:
            pulumi.set(__self__, "usage", usage)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="bootstrapPassword")
    def bootstrap_password(self) -> Optional[pulumi.Input[str]]:
        """
        Bootstrap password of the managed Rancher service, returned only on creation
        """
        return pulumi.get(self, "bootstrap_password")

    @bootstrap_password.setter
    def bootstrap_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_password", value)

    @property
    @pulumi.getter(name="ipRestrictions")
    def ip_restrictions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RancherCurrentStateIpRestrictionArgs']]]]:
        """
        List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        """
        return pulumi.get(self, "ip_restrictions")

    @ip_restrictions.setter
    def ip_restrictions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RancherCurrentStateIpRestrictionArgs']]]]):
        pulumi.set(self, "ip_restrictions", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the managed Rancher service
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def networking(self) -> Optional[pulumi.Input['RancherCurrentStateNetworkingArgs']]:
        """
        Networking properties of a managed Rancher service
        """
        return pulumi.get(self, "networking")

    @networking.setter
    def networking(self, value: Optional[pulumi.Input['RancherCurrentStateNetworkingArgs']]):
        pulumi.set(self, "networking", value)

    @property
    @pulumi.getter
    def plan(self) -> Optional[pulumi.Input[str]]:
        """
        Plan of the managed Rancher service
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the managed Rancher service
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL of the managed Rancher service
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def usage(self) -> Optional[pulumi.Input['RancherCurrentStateUsageArgs']]:
        """
        Latest metrics regarding the usage of the managed Rancher service
        """
        return pulumi.get(self, "usage")

    @usage.setter
    def usage(self, value: Optional[pulumi.Input['RancherCurrentStateUsageArgs']]):
        pulumi.set(self, "usage", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the managed Rancher service
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class RancherCurrentStateIpRestrictionArgsDict(TypedDict):
        cidr_block: NotRequired[pulumi.Input[str]]
        """
        Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of the allowed CIDR block
        """
elif False:
    RancherCurrentStateIpRestrictionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherCurrentStateIpRestrictionArgs:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr_block: Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        :param pulumi.Input[str] description: Description of the allowed CIDR block
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the allowed CIDR block
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RancherCurrentStateNetworkingArgsDict(TypedDict):
        egress_cidr_blocks: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access.
        """
elif False:
    RancherCurrentStateNetworkingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherCurrentStateNetworkingArgs:
    def __init__(__self__, *,
                 egress_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] egress_cidr_blocks: Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access.
        """
        if egress_cidr_blocks is not None:
            pulumi.set(__self__, "egress_cidr_blocks", egress_cidr_blocks)

    @property
    @pulumi.getter(name="egressCidrBlocks")
    def egress_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access.
        """
        return pulumi.get(self, "egress_cidr_blocks")

    @egress_cidr_blocks.setter
    def egress_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "egress_cidr_blocks", value)


if not MYPY:
    class RancherCurrentStateUsageArgsDict(TypedDict):
        datetime: NotRequired[pulumi.Input[str]]
        """
        Date of the sample
        """
        orchestrated_vcpus: NotRequired[pulumi.Input[float]]
        """
        Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters
        """
elif False:
    RancherCurrentStateUsageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherCurrentStateUsageArgs:
    def __init__(__self__, *,
                 datetime: Optional[pulumi.Input[str]] = None,
                 orchestrated_vcpus: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] datetime: Date of the sample
        :param pulumi.Input[float] orchestrated_vcpus: Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters
        """
        if datetime is not None:
            pulumi.set(__self__, "datetime", datetime)
        if orchestrated_vcpus is not None:
            pulumi.set(__self__, "orchestrated_vcpus", orchestrated_vcpus)

    @property
    @pulumi.getter
    def datetime(self) -> Optional[pulumi.Input[str]]:
        """
        Date of the sample
        """
        return pulumi.get(self, "datetime")

    @datetime.setter
    def datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datetime", value)

    @property
    @pulumi.getter(name="orchestratedVcpus")
    def orchestrated_vcpus(self) -> Optional[pulumi.Input[float]]:
        """
        Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters
        """
        return pulumi.get(self, "orchestrated_vcpus")

    @orchestrated_vcpus.setter
    def orchestrated_vcpus(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "orchestrated_vcpus", value)


if not MYPY:
    class RancherCurrentTaskArgsDict(TypedDict):
        id: NotRequired[pulumi.Input[str]]
        """
        Identifier of the current task
        """
        link: NotRequired[pulumi.Input[str]]
        """
        Link to the task details
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Current global status of the current task
        """
        type: NotRequired[pulumi.Input[str]]
        """
        Type of the current task
        """
elif False:
    RancherCurrentTaskArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherCurrentTaskArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Identifier of the current task
        :param pulumi.Input[str] link: Link to the task details
        :param pulumi.Input[str] status: Current global status of the current task
        :param pulumi.Input[str] type: Type of the current task
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier of the current task
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        Link to the task details
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Current global status of the current task
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the current task
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class RancherTargetSpecArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Name of the managed Rancher service
        """
        plan: pulumi.Input[str]
        """
        Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan
        """
        ip_restrictions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RancherTargetSpecIpRestrictionArgsDict']]]]
        """
        List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        """
        version: NotRequired[pulumi.Input[str]]
        """
        Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version. Default is the latest version.
        """
elif False:
    RancherTargetSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherTargetSpecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 plan: pulumi.Input[str],
                 ip_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input['RancherTargetSpecIpRestrictionArgs']]]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Name of the managed Rancher service
        :param pulumi.Input[str] plan: Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan
        :param pulumi.Input[Sequence[pulumi.Input['RancherTargetSpecIpRestrictionArgs']]] ip_restrictions: List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        :param pulumi.Input[str] version: Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version. Default is the latest version.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "plan", plan)
        if ip_restrictions is not None:
            pulumi.set(__self__, "ip_restrictions", ip_restrictions)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the managed Rancher service
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def plan(self) -> pulumi.Input[str]:
        """
        Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan
        """
        return pulumi.get(self, "plan")

    @plan.setter
    def plan(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan", value)

    @property
    @pulumi.getter(name="ipRestrictions")
    def ip_restrictions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RancherTargetSpecIpRestrictionArgs']]]]:
        """
        List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
        """
        return pulumi.get(self, "ip_restrictions")

    @ip_restrictions.setter
    def ip_restrictions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RancherTargetSpecIpRestrictionArgs']]]]):
        pulumi.set(self, "ip_restrictions", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version. Default is the latest version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class RancherTargetSpecIpRestrictionArgsDict(TypedDict):
        cidr_block: NotRequired[pulumi.Input[str]]
        """
        Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        """
        description: NotRequired[pulumi.Input[str]]
        """
        Description of the allowed CIDR block
        """
elif False:
    RancherTargetSpecIpRestrictionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RancherTargetSpecIpRestrictionArgs:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cidr_block: Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        :param pulumi.Input[str] description: Description of the allowed CIDR block
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[str]]:
        """
        Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the allowed CIDR block
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


if not MYPY:
    class RegionNetworkSubnetArgsDict(TypedDict):
        cidr: pulumi.Input[str]
        """
        Subnet range in CIDR notation
        """
        enable_dhcp: pulumi.Input[bool]
        """
        Enable DHCP for the subnet
        """
        enable_gateway_ip: pulumi.Input[bool]
        """
        Set a gateway ip for the subnet
        """
        ip_version: pulumi.Input[float]
        """
        IP version
        """
        allocation_pools: NotRequired[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetAllocationPoolArgsDict']]]]
        """
        List of IP pools allocated in subnet
        """
        dns_name_servers: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        DNS nameservers
        """
        gateway_ip: NotRequired[pulumi.Input[str]]
        """
        Gateway IP
        """
        host_routes: NotRequired[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetHostRouteArgsDict']]]]
        """
        Host routes
        """
        name: NotRequired[pulumi.Input[str]]
        """
        Subnet name
        """
        use_default_public_dnsresolver: NotRequired[pulumi.Input[bool]]
        """
        Use default DNS
        """
elif False:
    RegionNetworkSubnetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionNetworkSubnetArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 enable_dhcp: pulumi.Input[bool],
                 enable_gateway_ip: pulumi.Input[bool],
                 ip_version: pulumi.Input[float],
                 allocation_pools: Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetAllocationPoolArgs']]]] = None,
                 dns_name_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gateway_ip: Optional[pulumi.Input[str]] = None,
                 host_routes: Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetHostRouteArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 use_default_public_dnsresolver: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] cidr: Subnet range in CIDR notation
        :param pulumi.Input[bool] enable_dhcp: Enable DHCP for the subnet
        :param pulumi.Input[bool] enable_gateway_ip: Set a gateway ip for the subnet
        :param pulumi.Input[float] ip_version: IP version
        :param pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetAllocationPoolArgs']]] allocation_pools: List of IP pools allocated in subnet
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_name_servers: DNS nameservers
        :param pulumi.Input[str] gateway_ip: Gateway IP
        :param pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetHostRouteArgs']]] host_routes: Host routes
        :param pulumi.Input[str] name: Subnet name
        :param pulumi.Input[bool] use_default_public_dnsresolver: Use default DNS
        """
        pulumi.set(__self__, "cidr", cidr)
        pulumi.set(__self__, "enable_dhcp", enable_dhcp)
        pulumi.set(__self__, "enable_gateway_ip", enable_gateway_ip)
        pulumi.set(__self__, "ip_version", ip_version)
        if allocation_pools is not None:
            pulumi.set(__self__, "allocation_pools", allocation_pools)
        if dns_name_servers is not None:
            pulumi.set(__self__, "dns_name_servers", dns_name_servers)
        if gateway_ip is not None:
            pulumi.set(__self__, "gateway_ip", gateway_ip)
        if host_routes is not None:
            pulumi.set(__self__, "host_routes", host_routes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if use_default_public_dnsresolver is not None:
            pulumi.set(__self__, "use_default_public_dnsresolver", use_default_public_dnsresolver)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        Subnet range in CIDR notation
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter(name="enableDhcp")
    def enable_dhcp(self) -> pulumi.Input[bool]:
        """
        Enable DHCP for the subnet
        """
        return pulumi.get(self, "enable_dhcp")

    @enable_dhcp.setter
    def enable_dhcp(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_dhcp", value)

    @property
    @pulumi.getter(name="enableGatewayIp")
    def enable_gateway_ip(self) -> pulumi.Input[bool]:
        """
        Set a gateway ip for the subnet
        """
        return pulumi.get(self, "enable_gateway_ip")

    @enable_gateway_ip.setter
    def enable_gateway_ip(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enable_gateway_ip", value)

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> pulumi.Input[float]:
        """
        IP version
        """
        return pulumi.get(self, "ip_version")

    @ip_version.setter
    def ip_version(self, value: pulumi.Input[float]):
        pulumi.set(self, "ip_version", value)

    @property
    @pulumi.getter(name="allocationPools")
    def allocation_pools(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetAllocationPoolArgs']]]]:
        """
        List of IP pools allocated in subnet
        """
        return pulumi.get(self, "allocation_pools")

    @allocation_pools.setter
    def allocation_pools(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetAllocationPoolArgs']]]]):
        pulumi.set(self, "allocation_pools", value)

    @property
    @pulumi.getter(name="dnsNameServers")
    def dns_name_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNS nameservers
        """
        return pulumi.get(self, "dns_name_servers")

    @dns_name_servers.setter
    def dns_name_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_name_servers", value)

    @property
    @pulumi.getter(name="gatewayIp")
    def gateway_ip(self) -> Optional[pulumi.Input[str]]:
        """
        Gateway IP
        """
        return pulumi.get(self, "gateway_ip")

    @gateway_ip.setter
    def gateway_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gateway_ip", value)

    @property
    @pulumi.getter(name="hostRoutes")
    def host_routes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetHostRouteArgs']]]]:
        """
        Host routes
        """
        return pulumi.get(self, "host_routes")

    @host_routes.setter
    def host_routes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RegionNetworkSubnetHostRouteArgs']]]]):
        pulumi.set(self, "host_routes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Subnet name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="useDefaultPublicDnsresolver")
    def use_default_public_dnsresolver(self) -> Optional[pulumi.Input[bool]]:
        """
        Use default DNS
        """
        return pulumi.get(self, "use_default_public_dnsresolver")

    @use_default_public_dnsresolver.setter
    def use_default_public_dnsresolver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_public_dnsresolver", value)


if not MYPY:
    class RegionNetworkSubnetAllocationPoolArgsDict(TypedDict):
        end: NotRequired[pulumi.Input[str]]
        """
        Last IP for the pool (eg: 192.168.1.24)
        """
        start: NotRequired[pulumi.Input[str]]
        """
        First IP for the pool (eg: 192.168.1.12)
        """
elif False:
    RegionNetworkSubnetAllocationPoolArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionNetworkSubnetAllocationPoolArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end: Last IP for the pool (eg: 192.168.1.24)
        :param pulumi.Input[str] start: First IP for the pool (eg: 192.168.1.12)
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        Last IP for the pool (eg: 192.168.1.24)
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        First IP for the pool (eg: 192.168.1.12)
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


if not MYPY:
    class RegionNetworkSubnetHostRouteArgsDict(TypedDict):
        destination: NotRequired[pulumi.Input[str]]
        """
        Host route destination (eg: 192.168.1.0/24)
        """
        next_hop: NotRequired[pulumi.Input[str]]
        """
        Host route next hop (eg: 192.168.1.254)
        """
elif False:
    RegionNetworkSubnetHostRouteArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RegionNetworkSubnetHostRouteArgs:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[str]] = None,
                 next_hop: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] destination: Host route destination (eg: 192.168.1.0/24)
        :param pulumi.Input[str] next_hop: Host route next hop (eg: 192.168.1.254)
        """
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if next_hop is not None:
            pulumi.set(__self__, "next_hop", next_hop)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[str]]:
        """
        Host route destination (eg: 192.168.1.0/24)
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> Optional[pulumi.Input[str]]:
        """
        Host route next hop (eg: 192.168.1.254)
        """
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_hop", value)


if not MYPY:
    class StorageEncryptionArgsDict(TypedDict):
        sse_algorithm: NotRequired[pulumi.Input[str]]
        """
        Encryption algorithm
        """
elif False:
    StorageEncryptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageEncryptionArgs:
    def __init__(__self__, *,
                 sse_algorithm: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] sse_algorithm: Encryption algorithm
        """
        if sse_algorithm is not None:
            pulumi.set(__self__, "sse_algorithm", sse_algorithm)

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Encryption algorithm
        """
        return pulumi.get(self, "sse_algorithm")

    @sse_algorithm.setter
    def sse_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_algorithm", value)


if not MYPY:
    class StorageObjectArgsDict(TypedDict):
        etag: NotRequired[pulumi.Input[str]]
        """
        ETag
        """
        is_delete_marker: NotRequired[pulumi.Input[bool]]
        """
        Whether this object is a delete marker
        """
        is_latest: NotRequired[pulumi.Input[bool]]
        """
        Whether this is the latest version of the object
        """
        key: NotRequired[pulumi.Input[str]]
        """
        Key
        """
        last_modified: NotRequired[pulumi.Input[str]]
        """
        Last modification date
        """
        size: NotRequired[pulumi.Input[float]]
        """
        Size (bytes)
        """
        storage_class: NotRequired[pulumi.Input[str]]
        """
        Storage class
        """
        version_id: NotRequired[pulumi.Input[str]]
        """
        Version ID of the object
        """
elif False:
    StorageObjectArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageObjectArgs:
    def __init__(__self__, *,
                 etag: Optional[pulumi.Input[str]] = None,
                 is_delete_marker: Optional[pulumi.Input[bool]] = None,
                 is_latest: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_modified: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 storage_class: Optional[pulumi.Input[str]] = None,
                 version_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] etag: ETag
        :param pulumi.Input[bool] is_delete_marker: Whether this object is a delete marker
        :param pulumi.Input[bool] is_latest: Whether this is the latest version of the object
        :param pulumi.Input[str] key: Key
        :param pulumi.Input[str] last_modified: Last modification date
        :param pulumi.Input[float] size: Size (bytes)
        :param pulumi.Input[str] storage_class: Storage class
        :param pulumi.Input[str] version_id: Version ID of the object
        """
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if is_delete_marker is not None:
            pulumi.set(__self__, "is_delete_marker", is_delete_marker)
        if is_latest is not None:
            pulumi.set(__self__, "is_latest", is_latest)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_modified is not None:
            pulumi.set(__self__, "last_modified", last_modified)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        ETag
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="isDeleteMarker")
    def is_delete_marker(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this object is a delete marker
        """
        return pulumi.get(self, "is_delete_marker")

    @is_delete_marker.setter
    def is_delete_marker(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_delete_marker", value)

    @property
    @pulumi.getter(name="isLatest")
    def is_latest(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this is the latest version of the object
        """
        return pulumi.get(self, "is_latest")

    @is_latest.setter
    def is_latest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_latest", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastModified")
    def last_modified(self) -> Optional[pulumi.Input[str]]:
        """
        Last modification date
        """
        return pulumi.get(self, "last_modified")

    @last_modified.setter
    def last_modified(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_modified", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        Size (bytes)
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Storage class
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[pulumi.Input[str]]:
        """
        Version ID of the object
        """
        return pulumi.get(self, "version_id")

    @version_id.setter
    def version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_id", value)


if not MYPY:
    class StorageReplicationArgsDict(TypedDict):
        rules: NotRequired[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleArgsDict']]]]
        """
        Replication rules
        """
elif False:
    StorageReplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageReplicationArgs:
    def __init__(__self__, *,
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleArgs']]] rules: Replication rules
        """
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleArgs']]]]:
        """
        Replication rules
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleArgs']]]]):
        pulumi.set(self, "rules", value)


if not MYPY:
    class StorageReplicationRuleArgsDict(TypedDict):
        delete_marker_replication: NotRequired[pulumi.Input[str]]
        """
        Delete marker replication
        """
        destination: NotRequired[pulumi.Input['StorageReplicationRuleDestinationArgsDict']]
        """
        Rule destination configuration
        """
        filter: NotRequired[pulumi.Input['StorageReplicationRuleFilterArgsDict']]
        """
        Rule filters
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Rule ID
        """
        priority: NotRequired[pulumi.Input[float]]
        """
        Rule priority
        """
        status: NotRequired[pulumi.Input[str]]
        """
        Rule status
        """
elif False:
    StorageReplicationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageReplicationRuleArgs:
    def __init__(__self__, *,
                 delete_marker_replication: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input['StorageReplicationRuleDestinationArgs']] = None,
                 filter: Optional[pulumi.Input['StorageReplicationRuleFilterArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] delete_marker_replication: Delete marker replication
        :param pulumi.Input['StorageReplicationRuleDestinationArgs'] destination: Rule destination configuration
        :param pulumi.Input['StorageReplicationRuleFilterArgs'] filter: Rule filters
        :param pulumi.Input[str] id: Rule ID
        :param pulumi.Input[float] priority: Rule priority
        :param pulumi.Input[str] status: Rule status
        """
        if delete_marker_replication is not None:
            pulumi.set(__self__, "delete_marker_replication", delete_marker_replication)
        if destination is not None:
            pulumi.set(__self__, "destination", destination)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="deleteMarkerReplication")
    def delete_marker_replication(self) -> Optional[pulumi.Input[str]]:
        """
        Delete marker replication
        """
        return pulumi.get(self, "delete_marker_replication")

    @delete_marker_replication.setter
    def delete_marker_replication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_marker_replication", value)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input['StorageReplicationRuleDestinationArgs']]:
        """
        Rule destination configuration
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input['StorageReplicationRuleDestinationArgs']]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['StorageReplicationRuleFilterArgs']]:
        """
        Rule filters
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['StorageReplicationRuleFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Rule ID
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[float]]:
        """
        Rule priority
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Rule status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class StorageReplicationRuleDestinationArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        Destination bucket name
        """
        region: pulumi.Input[str]
        """
        Destination region
        """
        storage_class: NotRequired[pulumi.Input[str]]
        """
        Destination storage class
        """
elif False:
    StorageReplicationRuleDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageReplicationRuleDestinationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 storage_class: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Destination bucket name
        :param pulumi.Input[str] region: Destination region
        :param pulumi.Input[str] storage_class: Destination storage class
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Destination bucket name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Destination region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Destination storage class
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_class", value)


if not MYPY:
    class StorageReplicationRuleFilterArgsDict(TypedDict):
        prefix: NotRequired[pulumi.Input[str]]
        """
        Prefix filter
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleFilterTagArgsDict']]]]
        """
        Tags filter
        """
elif False:
    StorageReplicationRuleFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageReplicationRuleFilterArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleFilterTagArgs']]]] = None):
        """
        :param pulumi.Input[str] prefix: Prefix filter
        :param pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleFilterTagArgs']]] tags: Tags filter
        """
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Prefix filter
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleFilterTagArgs']]]]:
        """
        Tags filter
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageReplicationRuleFilterTagArgs']]]]):
        pulumi.set(self, "tags", value)


if not MYPY:
    class StorageReplicationRuleFilterTagArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        Tag key
        """
        value: pulumi.Input[str]
        """
        Tag value
        """
elif False:
    StorageReplicationRuleFilterTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageReplicationRuleFilterTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: Tag key
        :param pulumi.Input[str] value: Tag value
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        Tag key
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Tag value
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class StorageVersioningArgsDict(TypedDict):
        status: NotRequired[pulumi.Input[str]]
        """
        Versioning status
        """
elif False:
    StorageVersioningArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StorageVersioningArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Versioning status
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Versioning status
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


if not MYPY:
    class UserRoleArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        """
        A description associated with the user.
        """
        id: NotRequired[pulumi.Input[str]]
        """
        id of the role
        """
        name: NotRequired[pulumi.Input[str]]
        """
        name of the role
        """
        permissions: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of permissions associated with the role
        """
elif False:
    UserRoleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserRoleArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] description: A description associated with the user.
        :param pulumi.Input[str] id: id of the role
        :param pulumi.Input[str] name: name of the role
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: list of permissions associated with the role
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description associated with the user.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        id of the role
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        name of the role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of permissions associated with the role
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)


if not MYPY:
    class VolumeSubOperationArgsDict(TypedDict):
        resource_id: NotRequired[pulumi.Input[str]]
        """
        Affected resource of the sub-operation
        """
        resource_type: NotRequired[pulumi.Input[str]]
        """
        The started date of the sub-operation
        """
elif False:
    VolumeSubOperationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeSubOperationArgs:
    def __init__(__self__, *,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] resource_id: Affected resource of the sub-operation
        :param pulumi.Input[str] resource_type: The started date of the sub-operation
        """
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        Affected resource of the sub-operation
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        """
        The started date of the sub-operation
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


if not MYPY:
    class GetKubeCustomizationArgsDict(TypedDict):
        apiservers: Sequence['GetKubeCustomizationApiserverArgsDict']
        """
        Kubernetes API server customization
        """
elif False:
    GetKubeCustomizationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationArgs:
    def __init__(__self__, *,
                 apiservers: Sequence['GetKubeCustomizationApiserverArgs']):
        """
        :param Sequence['GetKubeCustomizationApiserverArgs'] apiservers: Kubernetes API server customization
        """
        if apiservers is not None:
            warnings.warn("""Use customization_apiserver instead""", DeprecationWarning)
            pulumi.log.warn("""apiservers is deprecated: Use customization_apiserver instead""")
        pulumi.set(__self__, "apiservers", apiservers)

    @property
    @pulumi.getter
    @_utilities.deprecated("""Use customization_apiserver instead""")
    def apiservers(self) -> Sequence['GetKubeCustomizationApiserverArgs']:
        """
        Kubernetes API server customization
        """
        return pulumi.get(self, "apiservers")

    @apiservers.setter
    def apiservers(self, value: Sequence['GetKubeCustomizationApiserverArgs']):
        pulumi.set(self, "apiservers", value)


if not MYPY:
    class GetKubeCustomizationApiserverArgsDict(TypedDict):
        admissionplugins: Sequence['GetKubeCustomizationApiserverAdmissionpluginArgsDict']
        """
        Kubernetes API server admission plugins customization
        """
elif False:
    GetKubeCustomizationApiserverArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationApiserverArgs:
    def __init__(__self__, *,
                 admissionplugins: Sequence['GetKubeCustomizationApiserverAdmissionpluginArgs']):
        """
        :param Sequence['GetKubeCustomizationApiserverAdmissionpluginArgs'] admissionplugins: Kubernetes API server admission plugins customization
        """
        pulumi.set(__self__, "admissionplugins", admissionplugins)

    @property
    @pulumi.getter
    def admissionplugins(self) -> Sequence['GetKubeCustomizationApiserverAdmissionpluginArgs']:
        """
        Kubernetes API server admission plugins customization
        """
        return pulumi.get(self, "admissionplugins")

    @admissionplugins.setter
    def admissionplugins(self, value: Sequence['GetKubeCustomizationApiserverAdmissionpluginArgs']):
        pulumi.set(self, "admissionplugins", value)


if not MYPY:
    class GetKubeCustomizationApiserverAdmissionpluginArgsDict(TypedDict):
        disableds: Sequence[str]
        """
        Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        """
        enableds: Sequence[str]
        """
        Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
elif False:
    GetKubeCustomizationApiserverAdmissionpluginArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationApiserverAdmissionpluginArgs:
    def __init__(__self__, *,
                 disableds: Sequence[str],
                 enableds: Sequence[str]):
        """
        :param Sequence[str] disableds: Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        :param Sequence[str] enableds: Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
        pulumi.set(__self__, "disableds", disableds)
        pulumi.set(__self__, "enableds", enableds)

    @property
    @pulumi.getter
    def disableds(self) -> Sequence[str]:
        """
        Array of admission plugins disabled, default is [] and only AlwaysPulImages can be disabled at this time.
        """
        return pulumi.get(self, "disableds")

    @disableds.setter
    def disableds(self, value: Sequence[str]):
        pulumi.set(self, "disableds", value)

    @property
    @pulumi.getter
    def enableds(self) -> Sequence[str]:
        """
        Array of admission plugins enabled, default is ["NodeRestriction","AlwaysPulImages"] and only these admission plugins can be enabled at this time.
        """
        return pulumi.get(self, "enableds")

    @enableds.setter
    def enableds(self, value: Sequence[str]):
        pulumi.set(self, "enableds", value)


if not MYPY:
    class GetKubeCustomizationKubeProxyArgsDict(TypedDict):
        iptables: NotRequired['GetKubeCustomizationKubeProxyIptablesArgsDict']
        """
        Kubernetes cluster kube-proxy customization of iptables specific config.
        """
        ipvs: NotRequired['GetKubeCustomizationKubeProxyIpvsArgsDict']
        """
        Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
elif False:
    GetKubeCustomizationKubeProxyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationKubeProxyArgs:
    def __init__(__self__, *,
                 iptables: Optional['GetKubeCustomizationKubeProxyIptablesArgs'] = None,
                 ipvs: Optional['GetKubeCustomizationKubeProxyIpvsArgs'] = None):
        """
        :param 'GetKubeCustomizationKubeProxyIptablesArgs' iptables: Kubernetes cluster kube-proxy customization of iptables specific config.
        :param 'GetKubeCustomizationKubeProxyIpvsArgs' ipvs: Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        if iptables is not None:
            pulumi.set(__self__, "iptables", iptables)
        if ipvs is not None:
            pulumi.set(__self__, "ipvs", ipvs)

    @property
    @pulumi.getter
    def iptables(self) -> Optional['GetKubeCustomizationKubeProxyIptablesArgs']:
        """
        Kubernetes cluster kube-proxy customization of iptables specific config.
        """
        return pulumi.get(self, "iptables")

    @iptables.setter
    def iptables(self, value: Optional['GetKubeCustomizationKubeProxyIptablesArgs']):
        pulumi.set(self, "iptables", value)

    @property
    @pulumi.getter
    def ipvs(self) -> Optional['GetKubeCustomizationKubeProxyIpvsArgs']:
        """
        Kubernetes cluster kube-proxy customization of IPVS specific config (durations format is [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        return pulumi.get(self, "ipvs")

    @ipvs.setter
    def ipvs(self, value: Optional['GetKubeCustomizationKubeProxyIpvsArgs']):
        pulumi.set(self, "ipvs", value)


if not MYPY:
    class GetKubeCustomizationKubeProxyIptablesArgsDict(TypedDict):
        min_sync_period: NotRequired[str]
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        sync_period: NotRequired[str]
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        """
elif False:
    GetKubeCustomizationKubeProxyIptablesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationKubeProxyIptablesArgs:
    def __init__(__self__, *,
                 min_sync_period: Optional[str] = None,
                 sync_period: Optional[str] = None):
        """
        :param str min_sync_period: Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        :param str sync_period: Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        """
        if min_sync_period is not None:
            pulumi.set(__self__, "min_sync_period", min_sync_period)
        if sync_period is not None:
            pulumi.set(__self__, "sync_period", sync_period)

    @property
    @pulumi.getter(name="minSyncPeriod")
    def min_sync_period(self) -> Optional[str]:
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        return pulumi.get(self, "min_sync_period")

    @min_sync_period.setter
    def min_sync_period(self, value: Optional[str]):
        pulumi.set(self, "min_sync_period", value)

    @property
    @pulumi.getter(name="syncPeriod")
    def sync_period(self) -> Optional[str]:
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        """
        return pulumi.get(self, "sync_period")

    @sync_period.setter
    def sync_period(self, value: Optional[str]):
        pulumi.set(self, "sync_period", value)


if not MYPY:
    class GetKubeCustomizationKubeProxyIpvsArgsDict(TypedDict):
        min_sync_period: NotRequired[str]
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        scheduler: NotRequired[str]
        """
        IPVS scheduler.
        """
        sync_period: NotRequired[str]
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        """
        tcp_fin_timeout: NotRequired[str]
        """
        Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration.
        """
        tcp_timeout: NotRequired[str]
        """
        Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        udp_timeout: NotRequired[str]
        """
        timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
elif False:
    GetKubeCustomizationKubeProxyIpvsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeCustomizationKubeProxyIpvsArgs:
    def __init__(__self__, *,
                 min_sync_period: Optional[str] = None,
                 scheduler: Optional[str] = None,
                 sync_period: Optional[str] = None,
                 tcp_fin_timeout: Optional[str] = None,
                 tcp_timeout: Optional[str] = None,
                 udp_timeout: Optional[str] = None):
        """
        :param str min_sync_period: Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        :param str scheduler: IPVS scheduler.
        :param str sync_period: Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        :param str tcp_fin_timeout: Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration.
        :param str tcp_timeout: Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        :param str udp_timeout: timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        if min_sync_period is not None:
            pulumi.set(__self__, "min_sync_period", min_sync_period)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if sync_period is not None:
            pulumi.set(__self__, "sync_period", sync_period)
        if tcp_fin_timeout is not None:
            pulumi.set(__self__, "tcp_fin_timeout", tcp_fin_timeout)
        if tcp_timeout is not None:
            pulumi.set(__self__, "tcp_timeout", tcp_timeout)
        if udp_timeout is not None:
            pulumi.set(__self__, "udp_timeout", udp_timeout)

    @property
    @pulumi.getter(name="minSyncPeriod")
    def min_sync_period(self) -> Optional[str]:
        """
        Minimum period that IPVS rules are refreshed in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        return pulumi.get(self, "min_sync_period")

    @min_sync_period.setter
    def min_sync_period(self, value: Optional[str]):
        pulumi.set(self, "min_sync_period", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[str]:
        """
        IPVS scheduler.
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[str]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="syncPeriod")
    def sync_period(self) -> Optional[str]:
        """
        Minimum period that IPVS rules are refreshed, in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration format.
        """
        return pulumi.get(self, "sync_period")

    @sync_period.setter
    def sync_period(self, value: Optional[str]):
        pulumi.set(self, "sync_period", value)

    @property
    @pulumi.getter(name="tcpFinTimeout")
    def tcp_fin_timeout(self) -> Optional[str]:
        """
        Timeout value used for IPVS TCP sessions after receiving a FIN in RFC3339 duration.
        """
        return pulumi.get(self, "tcp_fin_timeout")

    @tcp_fin_timeout.setter
    def tcp_fin_timeout(self, value: Optional[str]):
        pulumi.set(self, "tcp_fin_timeout", value)

    @property
    @pulumi.getter(name="tcpTimeout")
    def tcp_timeout(self) -> Optional[str]:
        """
        Timeout value used for idle IPVS TCP sessions in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        return pulumi.get(self, "tcp_timeout")

    @tcp_timeout.setter
    def tcp_timeout(self, value: Optional[str]):
        pulumi.set(self, "tcp_timeout", value)

    @property
    @pulumi.getter(name="udpTimeout")
    def udp_timeout(self) -> Optional[str]:
        """
        timeout value used for IPVS UDP packets in [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) duration.
        """
        return pulumi.get(self, "udp_timeout")

    @udp_timeout.setter
    def udp_timeout(self, value: Optional[str]):
        pulumi.set(self, "udp_timeout", value)


if not MYPY:
    class GetKubeNodePoolTemplateArgsDict(TypedDict):
        metadata: NotRequired['GetKubeNodePoolTemplateMetadataArgsDict']
        """
        metadata
        """
        spec: NotRequired['GetKubeNodePoolTemplateSpecArgsDict']
        """
        spec
        """
elif False:
    GetKubeNodePoolTemplateArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeNodePoolTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional['GetKubeNodePoolTemplateMetadataArgs'] = None,
                 spec: Optional['GetKubeNodePoolTemplateSpecArgs'] = None):
        """
        :param 'GetKubeNodePoolTemplateMetadataArgs' metadata: metadata
        :param 'GetKubeNodePoolTemplateSpecArgs' spec: spec
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['GetKubeNodePoolTemplateMetadataArgs']:
        """
        metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional['GetKubeNodePoolTemplateMetadataArgs']):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional['GetKubeNodePoolTemplateSpecArgs']:
        """
        spec
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional['GetKubeNodePoolTemplateSpecArgs']):
        pulumi.set(self, "spec", value)


if not MYPY:
    class GetKubeNodePoolTemplateMetadataArgsDict(TypedDict):
        annotations: NotRequired[Mapping[str, str]]
        """
        annotations
        """
        finalizers: NotRequired[Sequence[str]]
        """
        finalizers
        """
        labels: NotRequired[Mapping[str, str]]
        """
        labels
        """
elif False:
    GetKubeNodePoolTemplateMetadataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeNodePoolTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 finalizers: Optional[Sequence[str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param Mapping[str, str] annotations: annotations
        :param Sequence[str] finalizers: finalizers
        :param Mapping[str, str] labels: labels
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if finalizers is not None:
            pulumi.set(__self__, "finalizers", finalizers)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        annotations
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def finalizers(self) -> Optional[Sequence[str]]:
        """
        finalizers
        """
        return pulumi.get(self, "finalizers")

    @finalizers.setter
    def finalizers(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "finalizers", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[Mapping[str, str]]):
        pulumi.set(self, "labels", value)


if not MYPY:
    class GetKubeNodePoolTemplateSpecArgsDict(TypedDict):
        taints: NotRequired[Sequence[Mapping[str, str]]]
        """
        taints
        """
        unschedulable: NotRequired[bool]
        """
        unschedulable
        """
elif False:
    GetKubeNodePoolTemplateSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetKubeNodePoolTemplateSpecArgs:
    def __init__(__self__, *,
                 taints: Optional[Sequence[Mapping[str, str]]] = None,
                 unschedulable: Optional[bool] = None):
        """
        :param Sequence[Mapping[str, str]] taints: taints
        :param bool unschedulable: unschedulable
        """
        if taints is not None:
            pulumi.set(__self__, "taints", taints)
        if unschedulable is not None:
            pulumi.set(__self__, "unschedulable", unschedulable)

    @property
    @pulumi.getter
    def taints(self) -> Optional[Sequence[Mapping[str, str]]]:
        """
        taints
        """
        return pulumi.get(self, "taints")

    @taints.setter
    def taints(self, value: Optional[Sequence[Mapping[str, str]]]):
        pulumi.set(self, "taints", value)

    @property
    @pulumi.getter
    def unschedulable(self) -> Optional[bool]:
        """
        unschedulable
        """
        return pulumi.get(self, "unschedulable")

    @unschedulable.setter
    def unschedulable(self, value: Optional[bool]):
        pulumi.set(self, "unschedulable", value)


