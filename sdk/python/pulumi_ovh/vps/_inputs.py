# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VpsIamArgs',
    'VpsIamArgsDict',
    'VpsModelArgs',
    'VpsModelArgsDict',
    'VpsOrderArgs',
    'VpsOrderArgsDict',
    'VpsOrderDetailArgs',
    'VpsOrderDetailArgsDict',
    'VpsPlanArgs',
    'VpsPlanArgsDict',
    'VpsPlanConfigurationArgs',
    'VpsPlanConfigurationArgsDict',
    'VpsPlanOptionArgs',
    'VpsPlanOptionArgsDict',
    'VpsPlanOptionConfigurationArgs',
    'VpsPlanOptionConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class VpsIamArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[str]]
        """
        Resource display name
        """
        id: NotRequired[pulumi.Input[str]]
        """
        Unique identifier of the resource
        """
        tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        Resource tags. Tags that were internally computed are prefixed with ovh:
        """
        urn: NotRequired[pulumi.Input[str]]
        """
        Unique resource name used in policies
        """
elif False:
    VpsIamArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsIamArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 urn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: Resource display name
        :param pulumi.Input[str] id: Unique identifier of the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] tags: Resource tags. Tags that were internally computed are prefixed with ovh:
        :param pulumi.Input[str] urn: Unique resource name used in policies
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if urn is not None:
            pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Resource tags. Tags that were internally computed are prefixed with ovh:
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def urn(self) -> Optional[pulumi.Input[str]]:
        """
        Unique resource name used in policies
        """
        return pulumi.get(self, "urn")

    @urn.setter
    def urn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urn", value)


if not MYPY:
    class VpsModelArgsDict(TypedDict):
        available_options: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        datacenters: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        disk: NotRequired[pulumi.Input[float]]
        maximum_additionnal_ip: NotRequired[pulumi.Input[float]]
        memory: NotRequired[pulumi.Input[float]]
        name: NotRequired[pulumi.Input[str]]
        offer: NotRequired[pulumi.Input[str]]
        vcore: NotRequired[pulumi.Input[float]]
        version: NotRequired[pulumi.Input[str]]
        """
        All versions that VPS can have
        """
elif False:
    VpsModelArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsModelArgs:
    def __init__(__self__, *,
                 available_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 datacenters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disk: Optional[pulumi.Input[float]] = None,
                 maximum_additionnal_ip: Optional[pulumi.Input[float]] = None,
                 memory: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 offer: Optional[pulumi.Input[str]] = None,
                 vcore: Optional[pulumi.Input[float]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] version: All versions that VPS can have
        """
        if available_options is not None:
            pulumi.set(__self__, "available_options", available_options)
        if datacenters is not None:
            pulumi.set(__self__, "datacenters", datacenters)
        if disk is not None:
            pulumi.set(__self__, "disk", disk)
        if maximum_additionnal_ip is not None:
            pulumi.set(__self__, "maximum_additionnal_ip", maximum_additionnal_ip)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if offer is not None:
            pulumi.set(__self__, "offer", offer)
        if vcore is not None:
            pulumi.set(__self__, "vcore", vcore)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="availableOptions")
    def available_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "available_options")

    @available_options.setter
    def available_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "available_options", value)

    @property
    @pulumi.getter
    def datacenters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "datacenters")

    @datacenters.setter
    def datacenters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "datacenters", value)

    @property
    @pulumi.getter
    def disk(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "disk")

    @disk.setter
    def disk(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "disk", value)

    @property
    @pulumi.getter(name="maximumAdditionnalIp")
    def maximum_additionnal_ip(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum_additionnal_ip")

    @maximum_additionnal_ip.setter
    def maximum_additionnal_ip(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_additionnal_ip", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def offer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "offer")

    @offer.setter
    def offer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "offer", value)

    @property
    @pulumi.getter
    def vcore(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "vcore")

    @vcore.setter
    def vcore(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "vcore", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        All versions that VPS can have
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


if not MYPY:
    class VpsOrderArgsDict(TypedDict):
        date: NotRequired[pulumi.Input[str]]
        details: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpsOrderDetailArgsDict']]]]
        expiration_date: NotRequired[pulumi.Input[str]]
        order_id: NotRequired[pulumi.Input[float]]
elif False:
    VpsOrderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsOrderArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[str]] = None,
                 details: Optional[pulumi.Input[Sequence[pulumi.Input['VpsOrderDetailArgs']]]] = None,
                 expiration_date: Optional[pulumi.Input[str]] = None,
                 order_id: Optional[pulumi.Input[float]] = None):
        if date is not None:
            pulumi.set(__self__, "date", date)
        if details is not None:
            pulumi.set(__self__, "details", details)
        if expiration_date is not None:
            pulumi.set(__self__, "expiration_date", expiration_date)
        if order_id is not None:
            pulumi.set(__self__, "order_id", order_id)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpsOrderDetailArgs']]]]:
        return pulumi.get(self, "details")

    @details.setter
    def details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpsOrderDetailArgs']]]]):
        pulumi.set(self, "details", value)

    @property
    @pulumi.getter(name="expirationDate")
    def expiration_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_date")

    @expiration_date.setter
    def expiration_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_date", value)

    @property
    @pulumi.getter(name="orderId")
    def order_id(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "order_id")

    @order_id.setter
    def order_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "order_id", value)


if not MYPY:
    class VpsOrderDetailArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[str]]
        detail_type: NotRequired[pulumi.Input[str]]
        """
        Product type of item in order
        """
        domain: NotRequired[pulumi.Input[str]]
        order_detail_id: NotRequired[pulumi.Input[float]]
        quantity: NotRequired[pulumi.Input[str]]
elif False:
    VpsOrderDetailArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsOrderDetailArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 detail_type: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 order_detail_id: Optional[pulumi.Input[float]] = None,
                 quantity: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] detail_type: Product type of item in order
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detail_type is not None:
            pulumi.set(__self__, "detail_type", detail_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if order_detail_id is not None:
            pulumi.set(__self__, "order_detail_id", order_detail_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> Optional[pulumi.Input[str]]:
        """
        Product type of item in order
        """
        return pulumi.get(self, "detail_type")

    @detail_type.setter
    def detail_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_type", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="orderDetailId")
    def order_detail_id(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "order_detail_id")

    @order_detail_id.setter
    def order_detail_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "order_detail_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quantity", value)


if not MYPY:
    class VpsPlanArgsDict(TypedDict):
        duration: pulumi.Input[str]
        """
        Duration selected for the purchase of the product
        """
        plan_code: pulumi.Input[str]
        """
        Identifier of the option offer
        """
        pricing_mode: pulumi.Input[str]
        """
        Pricing mode selected for the purchase of the product
        """
        configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpsPlanConfigurationArgsDict']]]]
        item_id: NotRequired[pulumi.Input[float]]
        """
        Cart item to be linked
        """
        quantity: NotRequired[pulumi.Input[float]]
        """
        Quantity of product desired
        """
elif False:
    VpsPlanArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsPlanArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 plan_code: pulumi.Input[str],
                 pricing_mode: pulumi.Input[str],
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanConfigurationArgs']]]] = None,
                 item_id: Optional[pulumi.Input[float]] = None,
                 quantity: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] duration: Duration selected for the purchase of the product
        :param pulumi.Input[str] plan_code: Identifier of the option offer
        :param pulumi.Input[str] pricing_mode: Pricing mode selected for the purchase of the product
        :param pulumi.Input[float] item_id: Cart item to be linked
        :param pulumi.Input[float] quantity: Quantity of product desired
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if item_id is not None:
            pulumi.set(__self__, "item_id", item_id)
        if quantity is not None:
            pulumi.set(__self__, "quantity", quantity)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Duration selected for the purchase of the product
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Input[str]:
        """
        Identifier of the option offer
        """
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> pulumi.Input[str]:
        """
        Pricing mode selected for the purchase of the product
        """
        return pulumi.get(self, "pricing_mode")

    @pricing_mode.setter
    def pricing_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pricing_mode", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanConfigurationArgs']]]]:
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter(name="itemId")
    def item_id(self) -> Optional[pulumi.Input[float]]:
        """
        Cart item to be linked
        """
        return pulumi.get(self, "item_id")

    @item_id.setter
    def item_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "item_id", value)

    @property
    @pulumi.getter
    def quantity(self) -> Optional[pulumi.Input[float]]:
        """
        Quantity of product desired
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "quantity", value)


if not MYPY:
    class VpsPlanConfigurationArgsDict(TypedDict):
        label: pulumi.Input[str]
        """
        Label for your configuration item
        """
        value: pulumi.Input[str]
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
elif False:
    VpsPlanConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsPlanConfigurationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] label: Label for your configuration item
        :param pulumi.Input[str] value: Value or resource URL on API.OVH.COM of your configuration item
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Label for your configuration item
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class VpsPlanOptionArgsDict(TypedDict):
        duration: pulumi.Input[str]
        """
        Duration selected for the purchase of the product
        """
        plan_code: pulumi.Input[str]
        """
        Identifier of the option offer
        """
        pricing_mode: pulumi.Input[str]
        """
        Pricing mode selected for the purchase of the product
        """
        quantity: pulumi.Input[float]
        """
        Quantity of product desired
        """
        configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['VpsPlanOptionConfigurationArgsDict']]]]
elif False:
    VpsPlanOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsPlanOptionArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 plan_code: pulumi.Input[str],
                 pricing_mode: pulumi.Input[str],
                 quantity: pulumi.Input[float],
                 configurations: Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanOptionConfigurationArgs']]]] = None):
        """
        :param pulumi.Input[str] duration: Duration selected for the purchase of the product
        :param pulumi.Input[str] plan_code: Identifier of the option offer
        :param pulumi.Input[str] pricing_mode: Pricing mode selected for the purchase of the product
        :param pulumi.Input[float] quantity: Quantity of product desired
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "quantity", quantity)
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        Duration selected for the purchase of the product
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> pulumi.Input[str]:
        """
        Identifier of the option offer
        """
        return pulumi.get(self, "plan_code")

    @plan_code.setter
    def plan_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "plan_code", value)

    @property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> pulumi.Input[str]:
        """
        Pricing mode selected for the purchase of the product
        """
        return pulumi.get(self, "pricing_mode")

    @pricing_mode.setter
    def pricing_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "pricing_mode", value)

    @property
    @pulumi.getter
    def quantity(self) -> pulumi.Input[float]:
        """
        Quantity of product desired
        """
        return pulumi.get(self, "quantity")

    @quantity.setter
    def quantity(self, value: pulumi.Input[float]):
        pulumi.set(self, "quantity", value)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanOptionConfigurationArgs']]]]:
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpsPlanOptionConfigurationArgs']]]]):
        pulumi.set(self, "configurations", value)


if not MYPY:
    class VpsPlanOptionConfigurationArgsDict(TypedDict):
        label: pulumi.Input[str]
        """
        Label for your configuration item
        """
        value: pulumi.Input[str]
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
elif False:
    VpsPlanOptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpsPlanOptionConfigurationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] label: Label for your configuration item
        :param pulumi.Input[str] value: Value or resource URL on API.OVH.COM of your configuration item
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        """
        Label for your configuration item
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value or resource URL on API.OVH.COM of your configuration item
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


