# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetCartProductOptionsPlanPriceResult',
    'GetCartProductOptionsPlanPricePriceResult',
    'GetCartProductOptionsPlanSelectedPriceResult',
    'GetCartProductOptionsPlanSelectedPricePriceResult',
    'GetCartProductOptionsResultResult',
    'GetCartProductOptionsResultPriceResult',
    'GetCartProductOptionsResultPricePriceResult',
    'GetCartProductPlanPriceResult',
    'GetCartProductPlanPricePriceResult',
    'GetCartProductPlanSelectedPriceResult',
    'GetCartProductPlanSelectedPricePriceResult',
    'GetCartProductResultResult',
    'GetCartProductResultPriceResult',
    'GetCartProductResultPricePriceResult',
]

@pulumi.output_type
class GetCartProductOptionsPlanPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductOptionsPlanPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductOptionsPlanPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductOptionsPlanPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductOptionsPlanPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCartProductOptionsPlanSelectedPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductOptionsPlanSelectedPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductOptionsPlanSelectedPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductOptionsPlanSelectedPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductOptionsPlanSelectedPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCartProductOptionsResultResult(dict):
    def __init__(__self__, *,
                 exclusive: _builtins.bool,
                 family: _builtins.str,
                 mandatory: _builtins.bool,
                 plan_code: _builtins.str,
                 prices: Sequence['outputs.GetCartProductOptionsResultPriceResult'],
                 product_name: _builtins.str,
                 product_type: _builtins.str):
        """
        :param _builtins.bool exclusive: Define if options of this family are exclusive with each other
        :param _builtins.str family: Option family
        :param _builtins.bool mandatory: Define if an option of this family is mandatory
        :param _builtins.str plan_code: Product offer identifier
        :param Sequence['GetCartProductOptionsResultPriceArgs'] prices: Prices of the product offer
        :param _builtins.str product_name: Name of the product
        :param _builtins.str product_type: Product type
        """
        pulumi.set(__self__, "exclusive", exclusive)
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "mandatory", mandatory)
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_type", product_type)

    @_builtins.property
    @pulumi.getter
    def exclusive(self) -> _builtins.bool:
        """
        Define if options of this family are exclusive with each other
        """
        return pulumi.get(self, "exclusive")

    @_builtins.property
    @pulumi.getter
    def family(self) -> _builtins.str:
        """
        Option family
        """
        return pulumi.get(self, "family")

    @_builtins.property
    @pulumi.getter
    def mandatory(self) -> _builtins.bool:
        """
        Define if an option of this family is mandatory
        """
        return pulumi.get(self, "mandatory")

    @_builtins.property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> _builtins.str:
        """
        Product offer identifier
        """
        return pulumi.get(self, "plan_code")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductOptionsResultPriceResult']:
        """
        Prices of the product offer
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        Name of the product
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> _builtins.str:
        """
        Product type
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetCartProductOptionsResultPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductOptionsResultPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductOptionsResultPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductOptionsResultPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductOptionsResultPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCartProductPlanPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductPlanPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductPlanPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductPlanPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductPlanPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCartProductPlanSelectedPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductPlanSelectedPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductPlanSelectedPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductPlanSelectedPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductPlanSelectedPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetCartProductResultResult(dict):
    def __init__(__self__, *,
                 plan_code: _builtins.str,
                 prices: Sequence['outputs.GetCartProductResultPriceResult'],
                 product_name: _builtins.str,
                 product_type: _builtins.str):
        """
        :param _builtins.str plan_code: Product offer identifier
        :param Sequence['GetCartProductResultPriceArgs'] prices: Prices of the product offer
        :param _builtins.str product_name: Name of the product
        :param _builtins.str product_type: Product type
        """
        pulumi.set(__self__, "plan_code", plan_code)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "product_name", product_name)
        pulumi.set(__self__, "product_type", product_type)

    @_builtins.property
    @pulumi.getter(name="planCode")
    def plan_code(self) -> _builtins.str:
        """
        Product offer identifier
        """
        return pulumi.get(self, "plan_code")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductResultPriceResult']:
        """
        Prices of the product offer
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="productName")
    def product_name(self) -> _builtins.str:
        """
        Name of the product
        """
        return pulumi.get(self, "product_name")

    @_builtins.property
    @pulumi.getter(name="productType")
    def product_type(self) -> _builtins.str:
        """
        Product type
        """
        return pulumi.get(self, "product_type")


@pulumi.output_type
class GetCartProductResultPriceResult(dict):
    def __init__(__self__, *,
                 capacities: Sequence[Any],
                 description: _builtins.str,
                 duration: _builtins.str,
                 interval: _builtins.int,
                 maximum_quantity: _builtins.int,
                 maximum_repeat: _builtins.int,
                 minimum_quantity: _builtins.int,
                 minimum_repeat: _builtins.int,
                 price_in_ucents: _builtins.int,
                 prices: Sequence['outputs.GetCartProductResultPricePriceResult'],
                 pricing_mode: _builtins.str,
                 pricing_type: _builtins.str):
        """
        :param Sequence[Any] capacities: Capacities of the pricing (type of pricing)
        :param _builtins.str description: Description of the pricing
        :param _builtins.str duration: Duration for ordering the product
        :param _builtins.int interval: Interval of renewal
        :param _builtins.int maximum_quantity: Maximum quantity that can be ordered
        :param _builtins.int maximum_repeat: Maximum repeat for renewal
        :param _builtins.int minimum_quantity: Minimum quantity that can be ordered
        :param _builtins.int minimum_repeat: Minimum repeat for renewal
        :param _builtins.int price_in_ucents: Price of the product in micro-centims
        :param Sequence['GetCartProductResultPricePriceArgs'] prices: Price of the product (Price with its currency and textual representation)
        :param _builtins.str pricing_mode: Pricing model identifier
        :param _builtins.str pricing_type: Pricing type
        """
        pulumi.set(__self__, "capacities", capacities)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "maximum_quantity", maximum_quantity)
        pulumi.set(__self__, "maximum_repeat", maximum_repeat)
        pulumi.set(__self__, "minimum_quantity", minimum_quantity)
        pulumi.set(__self__, "minimum_repeat", minimum_repeat)
        pulumi.set(__self__, "price_in_ucents", price_in_ucents)
        pulumi.set(__self__, "prices", prices)
        pulumi.set(__self__, "pricing_mode", pricing_mode)
        pulumi.set(__self__, "pricing_type", pricing_type)

    @_builtins.property
    @pulumi.getter
    def capacities(self) -> Sequence[Any]:
        """
        Capacities of the pricing (type of pricing)
        """
        return pulumi.get(self, "capacities")

    @_builtins.property
    @pulumi.getter
    def description(self) -> _builtins.str:
        """
        Description of the pricing
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter
    def duration(self) -> _builtins.str:
        """
        Duration for ordering the product
        """
        return pulumi.get(self, "duration")

    @_builtins.property
    @pulumi.getter
    def interval(self) -> _builtins.int:
        """
        Interval of renewal
        """
        return pulumi.get(self, "interval")

    @_builtins.property
    @pulumi.getter(name="maximumQuantity")
    def maximum_quantity(self) -> _builtins.int:
        """
        Maximum quantity that can be ordered
        """
        return pulumi.get(self, "maximum_quantity")

    @_builtins.property
    @pulumi.getter(name="maximumRepeat")
    def maximum_repeat(self) -> _builtins.int:
        """
        Maximum repeat for renewal
        """
        return pulumi.get(self, "maximum_repeat")

    @_builtins.property
    @pulumi.getter(name="minimumQuantity")
    def minimum_quantity(self) -> _builtins.int:
        """
        Minimum quantity that can be ordered
        """
        return pulumi.get(self, "minimum_quantity")

    @_builtins.property
    @pulumi.getter(name="minimumRepeat")
    def minimum_repeat(self) -> _builtins.int:
        """
        Minimum repeat for renewal
        """
        return pulumi.get(self, "minimum_repeat")

    @_builtins.property
    @pulumi.getter(name="priceInUcents")
    def price_in_ucents(self) -> _builtins.int:
        """
        Price of the product in micro-centims
        """
        return pulumi.get(self, "price_in_ucents")

    @_builtins.property
    @pulumi.getter
    def prices(self) -> Sequence['outputs.GetCartProductResultPricePriceResult']:
        """
        Price of the product (Price with its currency and textual representation)
        """
        return pulumi.get(self, "prices")

    @_builtins.property
    @pulumi.getter(name="pricingMode")
    def pricing_mode(self) -> _builtins.str:
        """
        Pricing model identifier
        """
        return pulumi.get(self, "pricing_mode")

    @_builtins.property
    @pulumi.getter(name="pricingType")
    def pricing_type(self) -> _builtins.str:
        """
        Pricing type
        """
        return pulumi.get(self, "pricing_type")


@pulumi.output_type
class GetCartProductResultPricePriceResult(dict):
    def __init__(__self__, *,
                 currency_code: _builtins.str,
                 text: _builtins.str,
                 value: _builtins.float):
        """
        :param _builtins.str currency_code: Currency code
        :param _builtins.str text: Textual representation
        :param _builtins.float value: The effective price
        """
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> _builtins.str:
        """
        Currency code
        """
        return pulumi.get(self, "currency_code")

    @_builtins.property
    @pulumi.getter
    def text(self) -> _builtins.str:
        """
        Textual representation
        """
        return pulumi.get(self, "text")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.float:
        """
        The effective price
        """
        return pulumi.get(self, "value")


