# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ConnectIamResult',
    'ConnectsOccResult',
    'ConnectsOccIamResult',
]

@pulumi.output_type
class ConnectIamResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 tags: Mapping[str, str],
                 urn: str):
        """
        :param str display_name: Resource display name
        :param str id: Unique identifier of the resource in the IAM
        :param Mapping[str, str] tags: Resource tags. Tags that were internally computed are prefixed with `ovh:`
        :param str urn: URN of the private database, used when writing IAM policies
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of the resource in the IAM
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Resource tags. Tags that were internally computed are prefixed with `ovh:`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def urn(self) -> str:
        """
        URN of the private database, used when writing IAM policies
        """
        return pulumi.get(self, "urn")


@pulumi.output_type
class ConnectsOccResult(dict):
    def __init__(__self__, *,
                 bandwidth: str,
                 description: str,
                 iam: 'outputs.ConnectsOccIamResult',
                 interface_lists: Sequence[float],
                 pop: str,
                 port_quantity: str,
                 product: str,
                 provider_name: str,
                 service_name: str,
                 status: str,
                 uuid: str,
                 vrack: str):
        """
        :param str bandwidth: Service bandwidth
        :param str description: Service description
        :param 'ConnectsOccIamArgs' iam: IAM resource information
        :param Sequence[float] interface_lists: List of interfaces linked to a service
        :param str pop: Pop reference where the service is delivered
        :param str port_quantity: Port quantity
        :param str product: Product name of the service
        :param str provider_name: Service provider
        :param str service_name: Service name
        :param str status: Service status
        :param str uuid: uuid of the Ovhcloud Connect service
        :param str vrack: vrack linked to the service
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "iam", iam)
        pulumi.set(__self__, "interface_lists", interface_lists)
        pulumi.set(__self__, "pop", pop)
        pulumi.set(__self__, "port_quantity", port_quantity)
        pulumi.set(__self__, "product", product)
        pulumi.set(__self__, "provider_name", provider_name)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "uuid", uuid)
        pulumi.set(__self__, "vrack", vrack)

    @property
    @pulumi.getter
    def bandwidth(self) -> str:
        """
        Service bandwidth
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Service description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def iam(self) -> 'outputs.ConnectsOccIamResult':
        """
        IAM resource information
        """
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter(name="interfaceLists")
    def interface_lists(self) -> Sequence[float]:
        """
        List of interfaces linked to a service
        """
        return pulumi.get(self, "interface_lists")

    @property
    @pulumi.getter
    def pop(self) -> str:
        """
        Pop reference where the service is delivered
        """
        return pulumi.get(self, "pop")

    @property
    @pulumi.getter(name="portQuantity")
    def port_quantity(self) -> str:
        """
        Port quantity
        """
        return pulumi.get(self, "port_quantity")

    @property
    @pulumi.getter
    def product(self) -> str:
        """
        Product name of the service
        """
        return pulumi.get(self, "product")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> str:
        """
        Service provider
        """
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        """
        Service name
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Service status
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        """
        uuid of the Ovhcloud Connect service
        """
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vrack(self) -> str:
        """
        vrack linked to the service
        """
        return pulumi.get(self, "vrack")


@pulumi.output_type
class ConnectsOccIamResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 id: str,
                 tags: Mapping[str, str],
                 urn: str):
        """
        :param str display_name: Resource display name
        :param str id: Unique identifier of the resource in the IAM
        :param Mapping[str, str] tags: Resource tags. Tags that were internally computed are prefixed with `ovh:`
        :param str urn: URN of the private database, used when writing IAM policies
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "urn", urn)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique identifier of the resource in the IAM
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, str]:
        """
        Resource tags. Tags that were internally computed are prefixed with `ovh:`
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def urn(self) -> str:
        """
        URN of the private database, used when writing IAM policies
        """
        return pulumi.get(self, "urn")


