# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServerArgs', 'Server']

@pulumi.input_type
class ServerArgs:
    def __init__(__self__, *,
                 boot_id: Optional[pulumi.Input[float]] = None,
                 boot_script: Optional[pulumi.Input[str]] = None,
                 customizations: Optional[pulumi.Input['ServerCustomizationsArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 efi_bootloader_path: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 no_intervention: Optional[pulumi.Input[bool]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovh_subsidiary: Optional[pulumi.Input[str]] = None,
                 plan_options: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]] = None,
                 plans: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rescue_mail: Optional[pulumi.Input[str]] = None,
                 rescue_ssh_key: Optional[pulumi.Input[str]] = None,
                 root_device: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]] = None):
        """
        The set of arguments for constructing a Server resource.
        :param pulumi.Input[float] boot_id: Boot id of the server
        :param pulumi.Input[str] boot_script: Boot script of the server
        :param pulumi.Input['ServerCustomizationsArgs'] customizations: OS reinstallation customizations
        :param pulumi.Input[str] display_name: Resource display name
        :param pulumi.Input[str] efi_bootloader_path: Path of the EFI bootloader
        :param pulumi.Input[bool] monitoring: Icmp monitoring state
        :param pulumi.Input[bool] no_intervention: Prevent datacenter intervention
        :param pulumi.Input[str] os: Operating system
        :param pulumi.Input[str] ovh_subsidiary: OVH subsidiaries
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Arbitrary properties to pass to cloud-init's config drive datasource
        :param pulumi.Input[str] rescue_mail: Rescue mail of the server
        :param pulumi.Input[str] rescue_ssh_key: Public SSH Key used in the rescue mode
        :param pulumi.Input[str] root_device: Root device of the server
        :param pulumi.Input[str] state: All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        :param pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]] storages: OS reinstallation storage configurations
        """
        if boot_id is not None:
            pulumi.set(__self__, "boot_id", boot_id)
        if boot_script is not None:
            pulumi.set(__self__, "boot_script", boot_script)
        if customizations is not None:
            pulumi.set(__self__, "customizations", customizations)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if efi_bootloader_path is not None:
            pulumi.set(__self__, "efi_bootloader_path", efi_bootloader_path)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if no_intervention is not None:
            pulumi.set(__self__, "no_intervention", no_intervention)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if ovh_subsidiary is not None:
            pulumi.set(__self__, "ovh_subsidiary", ovh_subsidiary)
        if plan_options is not None:
            pulumi.set(__self__, "plan_options", plan_options)
        if plans is not None:
            pulumi.set(__self__, "plans", plans)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if rescue_mail is not None:
            pulumi.set(__self__, "rescue_mail", rescue_mail)
        if rescue_ssh_key is not None:
            pulumi.set(__self__, "rescue_ssh_key", rescue_ssh_key)
        if root_device is not None:
            pulumi.set(__self__, "root_device", root_device)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)

    @property
    @pulumi.getter(name="bootId")
    def boot_id(self) -> Optional[pulumi.Input[float]]:
        """
        Boot id of the server
        """
        return pulumi.get(self, "boot_id")

    @boot_id.setter
    def boot_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "boot_id", value)

    @property
    @pulumi.getter(name="bootScript")
    def boot_script(self) -> Optional[pulumi.Input[str]]:
        """
        Boot script of the server
        """
        return pulumi.get(self, "boot_script")

    @boot_script.setter
    def boot_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_script", value)

    @property
    @pulumi.getter
    def customizations(self) -> Optional[pulumi.Input['ServerCustomizationsArgs']]:
        """
        OS reinstallation customizations
        """
        return pulumi.get(self, "customizations")

    @customizations.setter
    def customizations(self, value: Optional[pulumi.Input['ServerCustomizationsArgs']]):
        pulumi.set(self, "customizations", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="efiBootloaderPath")
    def efi_bootloader_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the EFI bootloader
        """
        return pulumi.get(self, "efi_bootloader_path")

    @efi_bootloader_path.setter
    def efi_bootloader_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "efi_bootloader_path", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Icmp monitoring state
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter(name="noIntervention")
    def no_intervention(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent datacenter intervention
        """
        return pulumi.get(self, "no_intervention")

    @no_intervention.setter
    def no_intervention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_intervention", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="ovhSubsidiary")
    def ovh_subsidiary(self) -> Optional[pulumi.Input[str]]:
        """
        OVH subsidiaries
        """
        return pulumi.get(self, "ovh_subsidiary")

    @ovh_subsidiary.setter
    def ovh_subsidiary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovh_subsidiary", value)

    @property
    @pulumi.getter(name="planOptions")
    def plan_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]]:
        return pulumi.get(self, "plan_options")

    @plan_options.setter
    def plan_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]]):
        pulumi.set(self, "plan_options", value)

    @property
    @pulumi.getter
    def plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]]:
        return pulumi.get(self, "plans")

    @plans.setter
    def plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]]):
        pulumi.set(self, "plans", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Arbitrary properties to pass to cloud-init's config drive datasource
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="rescueMail")
    def rescue_mail(self) -> Optional[pulumi.Input[str]]:
        """
        Rescue mail of the server
        """
        return pulumi.get(self, "rescue_mail")

    @rescue_mail.setter
    def rescue_mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rescue_mail", value)

    @property
    @pulumi.getter(name="rescueSshKey")
    def rescue_ssh_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public SSH Key used in the rescue mode
        """
        return pulumi.get(self, "rescue_ssh_key")

    @rescue_ssh_key.setter
    def rescue_ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rescue_ssh_key", value)

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> Optional[pulumi.Input[str]]:
        """
        Root device of the server
        """
        return pulumi.get(self, "root_device")

    @root_device.setter
    def root_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_device", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]]:
        """
        OS reinstallation storage configurations
        """
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]]):
        pulumi.set(self, "storages", value)


@pulumi.input_type
class _ServerState:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 boot_id: Optional[pulumi.Input[float]] = None,
                 boot_script: Optional[pulumi.Input[str]] = None,
                 commercial_range: Optional[pulumi.Input[str]] = None,
                 customizations: Optional[pulumi.Input['ServerCustomizationsArgs']] = None,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 efi_bootloader_path: Optional[pulumi.Input[str]] = None,
                 iam: Optional[pulumi.Input['ServerIamArgs']] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 link_speed: Optional[pulumi.Input[float]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 new_upgrade_system: Optional[pulumi.Input[bool]] = None,
                 no_intervention: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input['ServerOrderArgs']] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovh_subsidiary: Optional[pulumi.Input[str]] = None,
                 plan_options: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]] = None,
                 plans: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]] = None,
                 power_state: Optional[pulumi.Input[str]] = None,
                 professional_use: Optional[pulumi.Input[bool]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rack: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 rescue_mail: Optional[pulumi.Input[str]] = None,
                 rescue_ssh_key: Optional[pulumi.Input[str]] = None,
                 reverse: Optional[pulumi.Input[str]] = None,
                 root_device: Optional[pulumi.Input[str]] = None,
                 server_id: Optional[pulumi.Input[float]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]] = None,
                 support_level: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Server resources.
        :param pulumi.Input[str] availability_zone: Dedicated AZ localisation
        :param pulumi.Input[float] boot_id: Boot id of the server
        :param pulumi.Input[str] boot_script: Boot script of the server
        :param pulumi.Input[str] commercial_range: Dedicated server commercial range
        :param pulumi.Input['ServerCustomizationsArgs'] customizations: OS reinstallation customizations
        :param pulumi.Input[str] datacenter: Dedicated datacenter localisation (bhs1,bhs2,...)
        :param pulumi.Input[str] display_name: Resource display name
        :param pulumi.Input[str] efi_bootloader_path: Path of the EFI bootloader
        :param pulumi.Input['ServerIamArgs'] iam: IAM resource information
        :param pulumi.Input[str] ip: Dedicated server ip (IPv4)
        :param pulumi.Input[float] link_speed: Link speed of the server
        :param pulumi.Input[bool] monitoring: Icmp monitoring state
        :param pulumi.Input[str] name: Dedicated server name
        :param pulumi.Input[bool] no_intervention: Prevent datacenter intervention
        :param pulumi.Input['ServerOrderArgs'] order: Details about an Order
        :param pulumi.Input[str] os: Operating system
        :param pulumi.Input[str] ovh_subsidiary: OVH subsidiaries
        :param pulumi.Input[str] power_state: Power state of the server (poweron, poweroff)
        :param pulumi.Input[bool] professional_use: Does this server have professional use option
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Arbitrary properties to pass to cloud-init's config drive datasource
        :param pulumi.Input[str] rack: Rack id of the server
        :param pulumi.Input[str] region: Dedicated region localisation
        :param pulumi.Input[str] rescue_mail: Rescue mail of the server
        :param pulumi.Input[str] rescue_ssh_key: Public SSH Key used in the rescue mode
        :param pulumi.Input[str] reverse: Dedicated server reverse
        :param pulumi.Input[str] root_device: Root device of the server
        :param pulumi.Input[float] server_id: Server id
        :param pulumi.Input[str] service_name: The service_name of your dedicated server
        :param pulumi.Input[str] state: All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        :param pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]] storages: OS reinstallation storage configurations
        :param pulumi.Input[str] support_level: Dedicated server support level (critical, fastpath, gs, pro)
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if boot_id is not None:
            pulumi.set(__self__, "boot_id", boot_id)
        if boot_script is not None:
            pulumi.set(__self__, "boot_script", boot_script)
        if commercial_range is not None:
            pulumi.set(__self__, "commercial_range", commercial_range)
        if customizations is not None:
            pulumi.set(__self__, "customizations", customizations)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if efi_bootloader_path is not None:
            pulumi.set(__self__, "efi_bootloader_path", efi_bootloader_path)
        if iam is not None:
            pulumi.set(__self__, "iam", iam)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if link_speed is not None:
            pulumi.set(__self__, "link_speed", link_speed)
        if monitoring is not None:
            pulumi.set(__self__, "monitoring", monitoring)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if new_upgrade_system is not None:
            pulumi.set(__self__, "new_upgrade_system", new_upgrade_system)
        if no_intervention is not None:
            pulumi.set(__self__, "no_intervention", no_intervention)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if os is not None:
            pulumi.set(__self__, "os", os)
        if ovh_subsidiary is not None:
            pulumi.set(__self__, "ovh_subsidiary", ovh_subsidiary)
        if plan_options is not None:
            pulumi.set(__self__, "plan_options", plan_options)
        if plans is not None:
            pulumi.set(__self__, "plans", plans)
        if power_state is not None:
            pulumi.set(__self__, "power_state", power_state)
        if professional_use is not None:
            pulumi.set(__self__, "professional_use", professional_use)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if rack is not None:
            pulumi.set(__self__, "rack", rack)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if rescue_mail is not None:
            pulumi.set(__self__, "rescue_mail", rescue_mail)
        if rescue_ssh_key is not None:
            pulumi.set(__self__, "rescue_ssh_key", rescue_ssh_key)
        if reverse is not None:
            pulumi.set(__self__, "reverse", reverse)
        if root_device is not None:
            pulumi.set(__self__, "root_device", root_device)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if storages is not None:
            pulumi.set(__self__, "storages", storages)
        if support_level is not None:
            pulumi.set(__self__, "support_level", support_level)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated AZ localisation
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="bootId")
    def boot_id(self) -> Optional[pulumi.Input[float]]:
        """
        Boot id of the server
        """
        return pulumi.get(self, "boot_id")

    @boot_id.setter
    def boot_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "boot_id", value)

    @property
    @pulumi.getter(name="bootScript")
    def boot_script(self) -> Optional[pulumi.Input[str]]:
        """
        Boot script of the server
        """
        return pulumi.get(self, "boot_script")

    @boot_script.setter
    def boot_script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "boot_script", value)

    @property
    @pulumi.getter(name="commercialRange")
    def commercial_range(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated server commercial range
        """
        return pulumi.get(self, "commercial_range")

    @commercial_range.setter
    def commercial_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "commercial_range", value)

    @property
    @pulumi.getter
    def customizations(self) -> Optional[pulumi.Input['ServerCustomizationsArgs']]:
        """
        OS reinstallation customizations
        """
        return pulumi.get(self, "customizations")

    @customizations.setter
    def customizations(self, value: Optional[pulumi.Input['ServerCustomizationsArgs']]):
        pulumi.set(self, "customizations", value)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated datacenter localisation (bhs1,bhs2,...)
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="efiBootloaderPath")
    def efi_bootloader_path(self) -> Optional[pulumi.Input[str]]:
        """
        Path of the EFI bootloader
        """
        return pulumi.get(self, "efi_bootloader_path")

    @efi_bootloader_path.setter
    def efi_bootloader_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "efi_bootloader_path", value)

    @property
    @pulumi.getter
    def iam(self) -> Optional[pulumi.Input['ServerIamArgs']]:
        """
        IAM resource information
        """
        return pulumi.get(self, "iam")

    @iam.setter
    def iam(self, value: Optional[pulumi.Input['ServerIamArgs']]):
        pulumi.set(self, "iam", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated server ip (IPv4)
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="linkSpeed")
    def link_speed(self) -> Optional[pulumi.Input[float]]:
        """
        Link speed of the server
        """
        return pulumi.get(self, "link_speed")

    @link_speed.setter
    def link_speed(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "link_speed", value)

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[pulumi.Input[bool]]:
        """
        Icmp monitoring state
        """
        return pulumi.get(self, "monitoring")

    @monitoring.setter
    def monitoring(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "monitoring", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated server name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="newUpgradeSystem")
    def new_upgrade_system(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "new_upgrade_system")

    @new_upgrade_system.setter
    def new_upgrade_system(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "new_upgrade_system", value)

    @property
    @pulumi.getter(name="noIntervention")
    def no_intervention(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevent datacenter intervention
        """
        return pulumi.get(self, "no_intervention")

    @no_intervention.setter
    def no_intervention(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_intervention", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['ServerOrderArgs']]:
        """
        Details about an Order
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['ServerOrderArgs']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        Operating system
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="ovhSubsidiary")
    def ovh_subsidiary(self) -> Optional[pulumi.Input[str]]:
        """
        OVH subsidiaries
        """
        return pulumi.get(self, "ovh_subsidiary")

    @ovh_subsidiary.setter
    def ovh_subsidiary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovh_subsidiary", value)

    @property
    @pulumi.getter(name="planOptions")
    def plan_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]]:
        return pulumi.get(self, "plan_options")

    @plan_options.setter
    def plan_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanOptionArgs']]]]):
        pulumi.set(self, "plan_options", value)

    @property
    @pulumi.getter
    def plans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]]:
        return pulumi.get(self, "plans")

    @plans.setter
    def plans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerPlanArgs']]]]):
        pulumi.set(self, "plans", value)

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[pulumi.Input[str]]:
        """
        Power state of the server (poweron, poweroff)
        """
        return pulumi.get(self, "power_state")

    @power_state.setter
    def power_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power_state", value)

    @property
    @pulumi.getter(name="professionalUse")
    def professional_use(self) -> Optional[pulumi.Input[bool]]:
        """
        Does this server have professional use option
        """
        return pulumi.get(self, "professional_use")

    @professional_use.setter
    def professional_use(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "professional_use", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Arbitrary properties to pass to cloud-init's config drive datasource
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def rack(self) -> Optional[pulumi.Input[str]]:
        """
        Rack id of the server
        """
        return pulumi.get(self, "rack")

    @rack.setter
    def rack(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rack", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated region localisation
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="rescueMail")
    def rescue_mail(self) -> Optional[pulumi.Input[str]]:
        """
        Rescue mail of the server
        """
        return pulumi.get(self, "rescue_mail")

    @rescue_mail.setter
    def rescue_mail(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rescue_mail", value)

    @property
    @pulumi.getter(name="rescueSshKey")
    def rescue_ssh_key(self) -> Optional[pulumi.Input[str]]:
        """
        Public SSH Key used in the rescue mode
        """
        return pulumi.get(self, "rescue_ssh_key")

    @rescue_ssh_key.setter
    def rescue_ssh_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rescue_ssh_key", value)

    @property
    @pulumi.getter
    def reverse(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated server reverse
        """
        return pulumi.get(self, "reverse")

    @reverse.setter
    def reverse(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reverse", value)

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> Optional[pulumi.Input[str]]:
        """
        Root device of the server
        """
        return pulumi.get(self, "root_device")

    @root_device.setter
    def root_device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "root_device", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[float]]:
        """
        Server id
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The service_name of your dedicated server
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def storages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]]:
        """
        OS reinstallation storage configurations
        """
        return pulumi.get(self, "storages")

    @storages.setter
    def storages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServerStorageArgs']]]]):
        pulumi.set(self, "storages", value)

    @property
    @pulumi.getter(name="supportLevel")
    def support_level(self) -> Optional[pulumi.Input[str]]:
        """
        Dedicated server support level (critical, fastpath, gs, pro)
        """
        return pulumi.get(self, "support_level")

    @support_level.setter
    def support_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "support_level", value)


class Server(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_id: Optional[pulumi.Input[float]] = None,
                 boot_script: Optional[pulumi.Input[str]] = None,
                 customizations: Optional[pulumi.Input[Union['ServerCustomizationsArgs', 'ServerCustomizationsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 efi_bootloader_path: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 no_intervention: Optional[pulumi.Input[bool]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovh_subsidiary: Optional[pulumi.Input[str]] = None,
                 plan_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanOptionArgs', 'ServerPlanOptionArgsDict']]]]] = None,
                 plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanArgs', 'ServerPlanArgsDict']]]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rescue_mail: Optional[pulumi.Input[str]] = None,
                 rescue_ssh_key: Optional[pulumi.Input[str]] = None,
                 root_device: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerStorageArgs', 'ServerStorageArgsDict']]]]] = None,
                 __props__=None):
        """
        ## Import

        Dedicated servers can be imported using the `service_name`.

        Using the following configuration:

        hcl

        import {

          to = ovh_dedicated_server.server

          id = "<service name>"

        }

        You can then run:

        bash

        pulumi preview -generate-config-out=dedicated.tf

        pulumi up

        The file `dedicated.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.

        See <https://developer.hashicorp.com/terraform/language/import/generating-configuration> for more details.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] boot_id: Boot id of the server
        :param pulumi.Input[str] boot_script: Boot script of the server
        :param pulumi.Input[Union['ServerCustomizationsArgs', 'ServerCustomizationsArgsDict']] customizations: OS reinstallation customizations
        :param pulumi.Input[str] display_name: Resource display name
        :param pulumi.Input[str] efi_bootloader_path: Path of the EFI bootloader
        :param pulumi.Input[bool] monitoring: Icmp monitoring state
        :param pulumi.Input[bool] no_intervention: Prevent datacenter intervention
        :param pulumi.Input[str] os: Operating system
        :param pulumi.Input[str] ovh_subsidiary: OVH subsidiaries
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Arbitrary properties to pass to cloud-init's config drive datasource
        :param pulumi.Input[str] rescue_mail: Rescue mail of the server
        :param pulumi.Input[str] rescue_ssh_key: Public SSH Key used in the rescue mode
        :param pulumi.Input[str] root_device: Root device of the server
        :param pulumi.Input[str] state: All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServerStorageArgs', 'ServerStorageArgsDict']]]] storages: OS reinstallation storage configurations
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Dedicated servers can be imported using the `service_name`.

        Using the following configuration:

        hcl

        import {

          to = ovh_dedicated_server.server

          id = "<service name>"

        }

        You can then run:

        bash

        pulumi preview -generate-config-out=dedicated.tf

        pulumi up

        The file `dedicated.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.

        See <https://developer.hashicorp.com/terraform/language/import/generating-configuration> for more details.

        :param str resource_name: The name of the resource.
        :param ServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_id: Optional[pulumi.Input[float]] = None,
                 boot_script: Optional[pulumi.Input[str]] = None,
                 customizations: Optional[pulumi.Input[Union['ServerCustomizationsArgs', 'ServerCustomizationsArgsDict']]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 efi_bootloader_path: Optional[pulumi.Input[str]] = None,
                 monitoring: Optional[pulumi.Input[bool]] = None,
                 no_intervention: Optional[pulumi.Input[bool]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovh_subsidiary: Optional[pulumi.Input[str]] = None,
                 plan_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanOptionArgs', 'ServerPlanOptionArgsDict']]]]] = None,
                 plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanArgs', 'ServerPlanArgsDict']]]]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 rescue_mail: Optional[pulumi.Input[str]] = None,
                 rescue_ssh_key: Optional[pulumi.Input[str]] = None,
                 root_device: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerStorageArgs', 'ServerStorageArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerArgs.__new__(ServerArgs)

            __props__.__dict__["boot_id"] = boot_id
            __props__.__dict__["boot_script"] = boot_script
            __props__.__dict__["customizations"] = customizations
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["efi_bootloader_path"] = efi_bootloader_path
            __props__.__dict__["monitoring"] = monitoring
            __props__.__dict__["no_intervention"] = no_intervention
            __props__.__dict__["os"] = os
            __props__.__dict__["ovh_subsidiary"] = ovh_subsidiary
            __props__.__dict__["plan_options"] = plan_options
            __props__.__dict__["plans"] = plans
            __props__.__dict__["properties"] = properties
            __props__.__dict__["rescue_mail"] = rescue_mail
            __props__.__dict__["rescue_ssh_key"] = rescue_ssh_key
            __props__.__dict__["root_device"] = root_device
            __props__.__dict__["state"] = state
            __props__.__dict__["storages"] = storages
            __props__.__dict__["availability_zone"] = None
            __props__.__dict__["commercial_range"] = None
            __props__.__dict__["datacenter"] = None
            __props__.__dict__["iam"] = None
            __props__.__dict__["ip"] = None
            __props__.__dict__["link_speed"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["new_upgrade_system"] = None
            __props__.__dict__["order"] = None
            __props__.__dict__["power_state"] = None
            __props__.__dict__["professional_use"] = None
            __props__.__dict__["rack"] = None
            __props__.__dict__["region"] = None
            __props__.__dict__["reverse"] = None
            __props__.__dict__["server_id"] = None
            __props__.__dict__["service_name"] = None
            __props__.__dict__["support_level"] = None
        super(Server, __self__).__init__(
            'ovh:Dedicated/server:Server',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            availability_zone: Optional[pulumi.Input[str]] = None,
            boot_id: Optional[pulumi.Input[float]] = None,
            boot_script: Optional[pulumi.Input[str]] = None,
            commercial_range: Optional[pulumi.Input[str]] = None,
            customizations: Optional[pulumi.Input[Union['ServerCustomizationsArgs', 'ServerCustomizationsArgsDict']]] = None,
            datacenter: Optional[pulumi.Input[str]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            efi_bootloader_path: Optional[pulumi.Input[str]] = None,
            iam: Optional[pulumi.Input[Union['ServerIamArgs', 'ServerIamArgsDict']]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            link_speed: Optional[pulumi.Input[float]] = None,
            monitoring: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            new_upgrade_system: Optional[pulumi.Input[bool]] = None,
            no_intervention: Optional[pulumi.Input[bool]] = None,
            order: Optional[pulumi.Input[Union['ServerOrderArgs', 'ServerOrderArgsDict']]] = None,
            os: Optional[pulumi.Input[str]] = None,
            ovh_subsidiary: Optional[pulumi.Input[str]] = None,
            plan_options: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanOptionArgs', 'ServerPlanOptionArgsDict']]]]] = None,
            plans: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerPlanArgs', 'ServerPlanArgsDict']]]]] = None,
            power_state: Optional[pulumi.Input[str]] = None,
            professional_use: Optional[pulumi.Input[bool]] = None,
            properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            rack: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            rescue_mail: Optional[pulumi.Input[str]] = None,
            rescue_ssh_key: Optional[pulumi.Input[str]] = None,
            reverse: Optional[pulumi.Input[str]] = None,
            root_device: Optional[pulumi.Input[str]] = None,
            server_id: Optional[pulumi.Input[float]] = None,
            service_name: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            storages: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServerStorageArgs', 'ServerStorageArgsDict']]]]] = None,
            support_level: Optional[pulumi.Input[str]] = None) -> 'Server':
        """
        Get an existing Server resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] availability_zone: Dedicated AZ localisation
        :param pulumi.Input[float] boot_id: Boot id of the server
        :param pulumi.Input[str] boot_script: Boot script of the server
        :param pulumi.Input[str] commercial_range: Dedicated server commercial range
        :param pulumi.Input[Union['ServerCustomizationsArgs', 'ServerCustomizationsArgsDict']] customizations: OS reinstallation customizations
        :param pulumi.Input[str] datacenter: Dedicated datacenter localisation (bhs1,bhs2,...)
        :param pulumi.Input[str] display_name: Resource display name
        :param pulumi.Input[str] efi_bootloader_path: Path of the EFI bootloader
        :param pulumi.Input[Union['ServerIamArgs', 'ServerIamArgsDict']] iam: IAM resource information
        :param pulumi.Input[str] ip: Dedicated server ip (IPv4)
        :param pulumi.Input[float] link_speed: Link speed of the server
        :param pulumi.Input[bool] monitoring: Icmp monitoring state
        :param pulumi.Input[str] name: Dedicated server name
        :param pulumi.Input[bool] no_intervention: Prevent datacenter intervention
        :param pulumi.Input[Union['ServerOrderArgs', 'ServerOrderArgsDict']] order: Details about an Order
        :param pulumi.Input[str] os: Operating system
        :param pulumi.Input[str] ovh_subsidiary: OVH subsidiaries
        :param pulumi.Input[str] power_state: Power state of the server (poweron, poweroff)
        :param pulumi.Input[bool] professional_use: Does this server have professional use option
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] properties: Arbitrary properties to pass to cloud-init's config drive datasource
        :param pulumi.Input[str] rack: Rack id of the server
        :param pulumi.Input[str] region: Dedicated region localisation
        :param pulumi.Input[str] rescue_mail: Rescue mail of the server
        :param pulumi.Input[str] rescue_ssh_key: Public SSH Key used in the rescue mode
        :param pulumi.Input[str] reverse: Dedicated server reverse
        :param pulumi.Input[str] root_device: Root device of the server
        :param pulumi.Input[float] server_id: Server id
        :param pulumi.Input[str] service_name: The service_name of your dedicated server
        :param pulumi.Input[str] state: All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServerStorageArgs', 'ServerStorageArgsDict']]]] storages: OS reinstallation storage configurations
        :param pulumi.Input[str] support_level: Dedicated server support level (critical, fastpath, gs, pro)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerState.__new__(_ServerState)

        __props__.__dict__["availability_zone"] = availability_zone
        __props__.__dict__["boot_id"] = boot_id
        __props__.__dict__["boot_script"] = boot_script
        __props__.__dict__["commercial_range"] = commercial_range
        __props__.__dict__["customizations"] = customizations
        __props__.__dict__["datacenter"] = datacenter
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["efi_bootloader_path"] = efi_bootloader_path
        __props__.__dict__["iam"] = iam
        __props__.__dict__["ip"] = ip
        __props__.__dict__["link_speed"] = link_speed
        __props__.__dict__["monitoring"] = monitoring
        __props__.__dict__["name"] = name
        __props__.__dict__["new_upgrade_system"] = new_upgrade_system
        __props__.__dict__["no_intervention"] = no_intervention
        __props__.__dict__["order"] = order
        __props__.__dict__["os"] = os
        __props__.__dict__["ovh_subsidiary"] = ovh_subsidiary
        __props__.__dict__["plan_options"] = plan_options
        __props__.__dict__["plans"] = plans
        __props__.__dict__["power_state"] = power_state
        __props__.__dict__["professional_use"] = professional_use
        __props__.__dict__["properties"] = properties
        __props__.__dict__["rack"] = rack
        __props__.__dict__["region"] = region
        __props__.__dict__["rescue_mail"] = rescue_mail
        __props__.__dict__["rescue_ssh_key"] = rescue_ssh_key
        __props__.__dict__["reverse"] = reverse
        __props__.__dict__["root_device"] = root_device
        __props__.__dict__["server_id"] = server_id
        __props__.__dict__["service_name"] = service_name
        __props__.__dict__["state"] = state
        __props__.__dict__["storages"] = storages
        __props__.__dict__["support_level"] = support_level
        return Server(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[str]:
        """
        Dedicated AZ localisation
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="bootId")
    def boot_id(self) -> pulumi.Output[float]:
        """
        Boot id of the server
        """
        return pulumi.get(self, "boot_id")

    @property
    @pulumi.getter(name="bootScript")
    def boot_script(self) -> pulumi.Output[str]:
        """
        Boot script of the server
        """
        return pulumi.get(self, "boot_script")

    @property
    @pulumi.getter(name="commercialRange")
    def commercial_range(self) -> pulumi.Output[str]:
        """
        Dedicated server commercial range
        """
        return pulumi.get(self, "commercial_range")

    @property
    @pulumi.getter
    def customizations(self) -> pulumi.Output[Optional['outputs.ServerCustomizations']]:
        """
        OS reinstallation customizations
        """
        return pulumi.get(self, "customizations")

    @property
    @pulumi.getter
    def datacenter(self) -> pulumi.Output[str]:
        """
        Dedicated datacenter localisation (bhs1,bhs2,...)
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        Resource display name
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="efiBootloaderPath")
    def efi_bootloader_path(self) -> pulumi.Output[str]:
        """
        Path of the EFI bootloader
        """
        return pulumi.get(self, "efi_bootloader_path")

    @property
    @pulumi.getter
    def iam(self) -> pulumi.Output['outputs.ServerIam']:
        """
        IAM resource information
        """
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        """
        Dedicated server ip (IPv4)
        """
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="linkSpeed")
    def link_speed(self) -> pulumi.Output[float]:
        """
        Link speed of the server
        """
        return pulumi.get(self, "link_speed")

    @property
    @pulumi.getter
    def monitoring(self) -> pulumi.Output[bool]:
        """
        Icmp monitoring state
        """
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Dedicated server name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="newUpgradeSystem")
    def new_upgrade_system(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "new_upgrade_system")

    @property
    @pulumi.getter(name="noIntervention")
    def no_intervention(self) -> pulumi.Output[bool]:
        """
        Prevent datacenter intervention
        """
        return pulumi.get(self, "no_intervention")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output['outputs.ServerOrder']:
        """
        Details about an Order
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        """
        Operating system
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter(name="ovhSubsidiary")
    def ovh_subsidiary(self) -> pulumi.Output[Optional[str]]:
        """
        OVH subsidiaries
        """
        return pulumi.get(self, "ovh_subsidiary")

    @property
    @pulumi.getter(name="planOptions")
    def plan_options(self) -> pulumi.Output[Sequence['outputs.ServerPlanOption']]:
        return pulumi.get(self, "plan_options")

    @property
    @pulumi.getter
    def plans(self) -> pulumi.Output[Sequence['outputs.ServerPlan']]:
        return pulumi.get(self, "plans")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> pulumi.Output[str]:
        """
        Power state of the server (poweron, poweroff)
        """
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter(name="professionalUse")
    def professional_use(self) -> pulumi.Output[bool]:
        """
        Does this server have professional use option
        """
        return pulumi.get(self, "professional_use")

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Arbitrary properties to pass to cloud-init's config drive datasource
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def rack(self) -> pulumi.Output[str]:
        """
        Rack id of the server
        """
        return pulumi.get(self, "rack")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Dedicated region localisation
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="rescueMail")
    def rescue_mail(self) -> pulumi.Output[str]:
        """
        Rescue mail of the server
        """
        return pulumi.get(self, "rescue_mail")

    @property
    @pulumi.getter(name="rescueSshKey")
    def rescue_ssh_key(self) -> pulumi.Output[str]:
        """
        Public SSH Key used in the rescue mode
        """
        return pulumi.get(self, "rescue_ssh_key")

    @property
    @pulumi.getter
    def reverse(self) -> pulumi.Output[str]:
        """
        Dedicated server reverse
        """
        return pulumi.get(self, "reverse")

    @property
    @pulumi.getter(name="rootDevice")
    def root_device(self) -> pulumi.Output[str]:
        """
        Root device of the server
        """
        return pulumi.get(self, "root_device")

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> pulumi.Output[float]:
        """
        Server id
        """
        return pulumi.get(self, "server_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Output[str]:
        """
        The service_name of your dedicated server
        """
        return pulumi.get(self, "service_name")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def storages(self) -> pulumi.Output[Optional[Sequence['outputs.ServerStorage']]]:
        """
        OS reinstallation storage configurations
        """
        return pulumi.get(self, "storages")

    @property
    @pulumi.getter(name="supportLevel")
    def support_level(self) -> pulumi.Output[str]:
        """
        Dedicated server support level (critical, fastpath, gs, pro)
        """
        return pulumi.get(self, "support_level")

