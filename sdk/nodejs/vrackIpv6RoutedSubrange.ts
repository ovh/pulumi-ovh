// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Route a subrange of your IP v6 block into your vrack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vrackRoutedSubrange = new ovh.VrackIpv6RoutedSubrange("vrack_routed_subrange", {
 *     serviceName: "<vRack service name>",
 *     block: "<ipv6 block>",
 *     routedSubrange: "<routed subrange>",
 *     nexthop: "<nexthop>",
 * });
 * ```
 *
 * ## Import
 *
 * Routing of an subrange into your vRack can be imported using the `service_name` (vRack identifier), the `block` (IPv6 block) and the `routed_subrange (IPv6 block)`, separated by "," E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange myroutedsubrange "<service_name>,<block>,<routed_subrange>"
 * ```
 */
export class VrackIpv6RoutedSubrange extends pulumi.CustomResource {
    /**
     * Get an existing VrackIpv6RoutedSubrange resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrackIpv6RoutedSubrangeState, opts?: pulumi.CustomResourceOptions): VrackIpv6RoutedSubrange {
        return new VrackIpv6RoutedSubrange(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange';

    /**
     * Returns true if the given object is an instance of VrackIpv6RoutedSubrange.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrackIpv6RoutedSubrange {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrackIpv6RoutedSubrange.__pulumiType;
    }

    /**
     * Your IPv6 block.
     */
    public readonly block!: pulumi.Output<string>;
    /**
     * Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
     */
    public readonly nexthop!: pulumi.Output<string>;
    /**
     * The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
     */
    public readonly routedSubrange!: pulumi.Output<string>;
    /**
     * The internal name of your vrack
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a VrackIpv6RoutedSubrange resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrackIpv6RoutedSubrangeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrackIpv6RoutedSubrangeArgs | VrackIpv6RoutedSubrangeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrackIpv6RoutedSubrangeState | undefined;
            resourceInputs["block"] = state ? state.block : undefined;
            resourceInputs["nexthop"] = state ? state.nexthop : undefined;
            resourceInputs["routedSubrange"] = state ? state.routedSubrange : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as VrackIpv6RoutedSubrangeArgs | undefined;
            if ((!args || args.block === undefined) && !opts.urn) {
                throw new Error("Missing required property 'block'");
            }
            if ((!args || args.nexthop === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nexthop'");
            }
            if ((!args || args.routedSubrange === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routedSubrange'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["block"] = args ? args.block : undefined;
            resourceInputs["nexthop"] = args ? args.nexthop : undefined;
            resourceInputs["routedSubrange"] = args ? args.routedSubrange : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrackIpv6RoutedSubrange.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VrackIpv6RoutedSubrange resources.
 */
export interface VrackIpv6RoutedSubrangeState {
    /**
     * Your IPv6 block.
     */
    block?: pulumi.Input<string>;
    /**
     * Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
     */
    nexthop?: pulumi.Input<string>;
    /**
     * The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
     */
    routedSubrange?: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VrackIpv6RoutedSubrange resource.
 */
export interface VrackIpv6RoutedSubrangeArgs {
    /**
     * Your IPv6 block.
     */
    block: pulumi.Input<string>;
    /**
     * Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
     */
    nexthop: pulumi.Input<string>;
    /**
     * The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
     */
    routedSubrange: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName: pulumi.Input<string>;
}
