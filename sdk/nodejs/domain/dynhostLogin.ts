// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Create a dynhost login for a given domain zone.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const dynhostUser = new ovh.domain.DynhostLogin("dynhost_user", {
 *     zoneName: "mydomain.ovh",
 *     subDomain: "dynhost",
 *     loginSuffix: "dynhostUser",
 *     password: "thisIsMyPassword",
 * });
 * ```
 */
export class DynhostLogin extends pulumi.CustomResource {
    /**
     * Get an existing DynhostLogin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DynhostLoginState, opts?: pulumi.CustomResourceOptions): DynhostLogin {
        return new DynhostLogin(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Domain/dynhostLogin:DynhostLogin';

    /**
     * Returns true if the given object is an instance of DynhostLogin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DynhostLogin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DynhostLogin.__pulumiType;
    }

    /**
     * Login name
     */
    public /*out*/ readonly login!: pulumi.Output<string>;
    /**
     * Suffix that will be concatenated to the zoneName to create the login
     */
    public readonly loginSuffix!: pulumi.Output<string>;
    /**
     * Password of the login
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Subdomain that the login will be allowed to update (use * to allow all)
     */
    public readonly subDomain!: pulumi.Output<string>;
    /**
     * Login zone
     */
    public /*out*/ readonly zone!: pulumi.Output<string>;
    /**
     * Zone name
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a DynhostLogin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DynhostLoginArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DynhostLoginArgs | DynhostLoginState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DynhostLoginState | undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["loginSuffix"] = state ? state.loginSuffix : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["subDomain"] = state ? state.subDomain : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as DynhostLoginArgs | undefined;
            if ((!args || args.loginSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginSuffix'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.subDomain === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subDomain'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["loginSuffix"] = args ? args.loginSuffix : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["subDomain"] = args ? args.subDomain : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["login"] = undefined /*out*/;
            resourceInputs["zone"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DynhostLogin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DynhostLogin resources.
 */
export interface DynhostLoginState {
    /**
     * Login name
     */
    login?: pulumi.Input<string>;
    /**
     * Suffix that will be concatenated to the zoneName to create the login
     */
    loginSuffix?: pulumi.Input<string>;
    /**
     * Password of the login
     */
    password?: pulumi.Input<string>;
    /**
     * Subdomain that the login will be allowed to update (use * to allow all)
     */
    subDomain?: pulumi.Input<string>;
    /**
     * Login zone
     */
    zone?: pulumi.Input<string>;
    /**
     * Zone name
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DynhostLogin resource.
 */
export interface DynhostLoginArgs {
    /**
     * Suffix that will be concatenated to the zoneName to create the login
     */
    loginSuffix: pulumi.Input<string>;
    /**
     * Password of the login
     */
    password: pulumi.Input<string>;
    /**
     * Subdomain that the login will be allowed to update (use * to allow all)
     */
    subDomain: pulumi.Input<string>;
    /**
     * Zone name
     */
    zoneName: pulumi.Input<string>;
}
