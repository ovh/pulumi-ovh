// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DSRecordsArgs, DSRecordsState } from "./dsrecords";
export type DSRecords = import("./dsrecords").DSRecords;
export const DSRecords: typeof import("./dsrecords").DSRecords = null as any;
utilities.lazyLoad(exports, ["DSRecords"], () => require("./dsrecords"));

export { GetZoneArgs, GetZoneResult, GetZoneOutputArgs } from "./getZone";
export const getZone: typeof import("./getZone").getZone = null as any;
export const getZoneOutput: typeof import("./getZone").getZoneOutput = null as any;
utilities.lazyLoad(exports, ["getZone","getZoneOutput"], () => require("./getZone"));

export { GetZoneDNSSecArgs, GetZoneDNSSecResult, GetZoneDNSSecOutputArgs } from "./getZoneDNSSec";
export const getZoneDNSSec: typeof import("./getZoneDNSSec").getZoneDNSSec = null as any;
export const getZoneDNSSecOutput: typeof import("./getZoneDNSSec").getZoneDNSSecOutput = null as any;
utilities.lazyLoad(exports, ["getZoneDNSSec","getZoneDNSSecOutput"], () => require("./getZoneDNSSec"));

export { NameArgs, NameState } from "./name";
export type Name = import("./name").Name;
export const Name: typeof import("./name").Name = null as any;
utilities.lazyLoad(exports, ["Name"], () => require("./name"));

export { NameServersArgs, NameServersState } from "./nameServers";
export type NameServers = import("./nameServers").NameServers;
export const NameServers: typeof import("./nameServers").NameServers = null as any;
utilities.lazyLoad(exports, ["NameServers"], () => require("./nameServers"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZoneDNSSecArgs, ZoneDNSSecState } from "./zoneDNSSec";
export type ZoneDNSSec = import("./zoneDNSSec").ZoneDNSSec;
export const ZoneDNSSec: typeof import("./zoneDNSSec").ZoneDNSSec = null as any;
utilities.lazyLoad(exports, ["ZoneDNSSec"], () => require("./zoneDNSSec"));

export { ZoneImportArgs, ZoneImportState } from "./zoneImport";
export type ZoneImport = import("./zoneImport").ZoneImport;
export const ZoneImport: typeof import("./zoneImport").ZoneImport = null as any;
utilities.lazyLoad(exports, ["ZoneImport"], () => require("./zoneImport"));

export { ZoneRecordArgs, ZoneRecordState } from "./zoneRecord";
export type ZoneRecord = import("./zoneRecord").ZoneRecord;
export const ZoneRecord: typeof import("./zoneRecord").ZoneRecord = null as any;
utilities.lazyLoad(exports, ["ZoneRecord"], () => require("./zoneRecord"));

export { ZoneRedirectionArgs, ZoneRedirectionState } from "./zoneRedirection";
export type ZoneRedirection = import("./zoneRedirection").ZoneRedirection;
export const ZoneRedirection: typeof import("./zoneRedirection").ZoneRedirection = null as any;
utilities.lazyLoad(exports, ["ZoneRedirection"], () => require("./zoneRedirection"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:Domain/dSRecords:DSRecords":
                return new DSRecords(name, <any>undefined, { urn })
            case "ovh:Domain/name:Name":
                return new Name(name, <any>undefined, { urn })
            case "ovh:Domain/nameServers:NameServers":
                return new NameServers(name, <any>undefined, { urn })
            case "ovh:Domain/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            case "ovh:Domain/zoneDNSSec:ZoneDNSSec":
                return new ZoneDNSSec(name, <any>undefined, { urn })
            case "ovh:Domain/zoneImport:ZoneImport":
                return new ZoneImport(name, <any>undefined, { urn })
            case "ovh:Domain/zoneRecord:ZoneRecord":
                return new ZoneRecord(name, <any>undefined, { urn })
            case "ovh:Domain/zoneRedirection:ZoneRedirection":
                return new ZoneRedirection(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "Domain/dSRecords", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/name", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/nameServers", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/zone", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/zoneDNSSec", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/zoneImport", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/zoneRecord", _module)
pulumi.runtime.registerResourceModule("ovh", "Domain/zoneRedirection", _module)
