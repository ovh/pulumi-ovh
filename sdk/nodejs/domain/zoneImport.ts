// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Handle a whole DNS zone using a zone file.
 *
 * > __WARNING__ This resource and resource `ovh.Domain.ZoneRecord` should not be used together as `ovh.Domain.ZoneImport` controls the whole DNS zone at once.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const _import = new ovh.domain.ZoneImport("import", {
 *     zoneName: "mysite.ovh",
 *     zoneFile: fs.readFileSync("./example.zone", "utf8"),
 * });
 * ```
 */
export class ZoneImport extends pulumi.CustomResource {
    /**
     * Get an existing ZoneImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneImportState, opts?: pulumi.CustomResourceOptions): ZoneImport {
        return new ZoneImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Domain/zoneImport:ZoneImport';

    /**
     * Returns true if the given object is an instance of ZoneImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZoneImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZoneImport.__pulumiType;
    }

    /**
     * Zone file exported from the API
     */
    public /*out*/ readonly exportedContent!: pulumi.Output<string>;
    /**
     * Content of the zone file to import
     */
    public readonly zoneFile!: pulumi.Output<string>;
    /**
     * The name of the domain zone
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a ZoneImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneImportArgs | ZoneImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneImportState | undefined;
            resourceInputs["exportedContent"] = state ? state.exportedContent : undefined;
            resourceInputs["zoneFile"] = state ? state.zoneFile : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as ZoneImportArgs | undefined;
            if ((!args || args.zoneFile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneFile'");
            }
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["zoneFile"] = args ? args.zoneFile : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["exportedContent"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZoneImport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneImport resources.
 */
export interface ZoneImportState {
    /**
     * Zone file exported from the API
     */
    exportedContent?: pulumi.Input<string>;
    /**
     * Content of the zone file to import
     */
    zoneFile?: pulumi.Input<string>;
    /**
     * The name of the domain zone
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneImport resource.
 */
export interface ZoneImportArgs {
    /**
     * Content of the zone file to import
     */
    zoneFile: pulumi.Input<string>;
    /**
     * The name of the domain zone
     */
    zoneName: pulumi.Input<string>;
}
