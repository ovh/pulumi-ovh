// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information about a user of a valkey cluster associated with a public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const valkeyUser = ovh.getCloudProjectDatabaseValkeyUser({
 *     serviceName: "XXX",
 *     clusterId: "YYY",
 *     name: "ZZZ",
 * });
 * export const valkeyUserCommands = valkeyUser.then(valkeyUser => valkeyUser.commands);
 * ```
 */
export function getCloudProjectDatabaseValkeyUser(args: GetCloudProjectDatabaseValkeyUserArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudProjectDatabaseValkeyUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ovh:index/getCloudProjectDatabaseValkeyUser:getCloudProjectDatabaseValkeyUser", {
        "clusterId": args.clusterId,
        "name": args.name,
        "serviceName": args.serviceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudProjectDatabaseValkeyUser.
 */
export interface GetCloudProjectDatabaseValkeyUserArgs {
    /**
     * Cluster ID
     */
    clusterId: string;
    /**
     * Name of the user
     */
    name: string;
    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName: string;
}

/**
 * A collection of values returned by getCloudProjectDatabaseValkeyUser.
 */
export interface GetCloudProjectDatabaseValkeyUserResult {
    /**
     * Categories of the user.
     */
    readonly categories: string[];
    /**
     * Channels of the user.
     */
    readonly channels: string[];
    /**
     * See Argument Reference above.
     */
    readonly clusterId: string;
    /**
     * Commands of the user.
     */
    readonly commands: string[];
    /**
     * Date of the creation of the user.
     */
    readonly createdAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Keys of the user.
     */
    readonly keys: string[];
    /**
     * See Argument Reference above.
     */
    readonly name: string;
    /**
     * Current status of the user.
     */
    readonly serviceName: string;
    /**
     * Current status of the user.
     */
    readonly status: string;
}
/**
 * Use this data source to get information about a user of a valkey cluster associated with a public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const valkeyUser = ovh.getCloudProjectDatabaseValkeyUser({
 *     serviceName: "XXX",
 *     clusterId: "YYY",
 *     name: "ZZZ",
 * });
 * export const valkeyUserCommands = valkeyUser.then(valkeyUser => valkeyUser.commands);
 * ```
 */
export function getCloudProjectDatabaseValkeyUserOutput(args: GetCloudProjectDatabaseValkeyUserOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCloudProjectDatabaseValkeyUserResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ovh:index/getCloudProjectDatabaseValkeyUser:getCloudProjectDatabaseValkeyUser", {
        "clusterId": args.clusterId,
        "name": args.name,
        "serviceName": args.serviceName,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudProjectDatabaseValkeyUser.
 */
export interface GetCloudProjectDatabaseValkeyUserOutputArgs {
    /**
     * Cluster ID
     */
    clusterId: pulumi.Input<string>;
    /**
     * Name of the user
     */
    name: pulumi.Input<string>;
    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName: pulumi.Input<string>;
}
