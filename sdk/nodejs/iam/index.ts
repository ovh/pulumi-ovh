// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetPermissionsGroupArgs, GetPermissionsGroupResult, GetPermissionsGroupOutputArgs } from "./getPermissionsGroup";
export const getPermissionsGroup: typeof import("./getPermissionsGroup").getPermissionsGroup = null as any;
export const getPermissionsGroupOutput: typeof import("./getPermissionsGroup").getPermissionsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionsGroup","getPermissionsGroupOutput"], () => require("./getPermissionsGroup"));

export { GetPermissionsGroupsResult } from "./getPermissionsGroups";
export const getPermissionsGroups: typeof import("./getPermissionsGroups").getPermissionsGroups = null as any;
export const getPermissionsGroupsOutput: typeof import("./getPermissionsGroups").getPermissionsGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionsGroups","getPermissionsGroupsOutput"], () => require("./getPermissionsGroups"));

export { GetPoliciesResult } from "./getPolicies";
export const getPolicies: typeof import("./getPolicies").getPolicies = null as any;
export const getPoliciesOutput: typeof import("./getPolicies").getPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getPolicies","getPoliciesOutput"], () => require("./getPolicies"));

export { GetPolicyArgs, GetPolicyResult, GetPolicyOutputArgs } from "./getPolicy";
export const getPolicy: typeof import("./getPolicy").getPolicy = null as any;
export const getPolicyOutput: typeof import("./getPolicy").getPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getPolicy","getPolicyOutput"], () => require("./getPolicy"));

export { GetReferenceActionsArgs, GetReferenceActionsResult, GetReferenceActionsOutputArgs } from "./getReferenceActions";
export const getReferenceActions: typeof import("./getReferenceActions").getReferenceActions = null as any;
export const getReferenceActionsOutput: typeof import("./getReferenceActions").getReferenceActionsOutput = null as any;
utilities.lazyLoad(exports, ["getReferenceActions","getReferenceActionsOutput"], () => require("./getReferenceActions"));

export { GetReferenceResourceTypeResult } from "./getReferenceResourceType";
export const getReferenceResourceType: typeof import("./getReferenceResourceType").getReferenceResourceType = null as any;
export const getReferenceResourceTypeOutput: typeof import("./getReferenceResourceType").getReferenceResourceTypeOutput = null as any;
utilities.lazyLoad(exports, ["getReferenceResourceType","getReferenceResourceTypeOutput"], () => require("./getReferenceResourceType"));

export { GetResourceGroupArgs, GetResourceGroupResult, GetResourceGroupOutputArgs } from "./getResourceGroup";
export const getResourceGroup: typeof import("./getResourceGroup").getResourceGroup = null as any;
export const getResourceGroupOutput: typeof import("./getResourceGroup").getResourceGroupOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroup","getResourceGroupOutput"], () => require("./getResourceGroup"));

export { GetResourceGroupsResult } from "./getResourceGroups";
export const getResourceGroups: typeof import("./getResourceGroups").getResourceGroups = null as any;
export const getResourceGroupsOutput: typeof import("./getResourceGroups").getResourceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getResourceGroups","getResourceGroupsOutput"], () => require("./getResourceGroups"));

export { PermissionsGroupArgs, PermissionsGroupState } from "./permissionsGroup";
export type PermissionsGroup = import("./permissionsGroup").PermissionsGroup;
export const PermissionsGroup: typeof import("./permissionsGroup").PermissionsGroup = null as any;
utilities.lazyLoad(exports, ["PermissionsGroup"], () => require("./permissionsGroup"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ResourceGroupArgs, ResourceGroupState } from "./resourceGroup";
export type ResourceGroup = import("./resourceGroup").ResourceGroup;
export const ResourceGroup: typeof import("./resourceGroup").ResourceGroup = null as any;
utilities.lazyLoad(exports, ["ResourceGroup"], () => require("./resourceGroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:Iam/permissionsGroup:PermissionsGroup":
                return new PermissionsGroup(name, <any>undefined, { urn })
            case "ovh:Iam/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "ovh:Iam/resourceGroup:ResourceGroup":
                return new ResourceGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "Iam/permissionsGroup", _module)
pulumi.runtime.registerResourceModule("ovh", "Iam/policy", _module)
pulumi.runtime.registerResourceModule("ovh", "Iam/resourceGroup", _module)
