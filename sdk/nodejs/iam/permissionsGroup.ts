// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Create am IAM permissions group.
 */
export class PermissionsGroup extends pulumi.CustomResource {
    /**
     * Get an existing PermissionsGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionsGroupState, opts?: pulumi.CustomResourceOptions): PermissionsGroup {
        return new PermissionsGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Iam/permissionsGroup:PermissionsGroup';

    /**
     * Returns true if the given object is an instance of PermissionsGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PermissionsGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PermissionsGroup.__pulumiType;
    }

    /**
     * Set of actions allowed by the permissions group.
     */
    public readonly allows!: pulumi.Output<string[] | undefined>;
    /**
     * Creation date of this group.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Set of actions that will be denied no matter what permissions group exists.
     */
    public readonly denies!: pulumi.Output<string[] | undefined>;
    /**
     * Group description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Set of actions that will be subtracted from the `allow` list.
     */
    public readonly excepts!: pulumi.Output<string[] | undefined>;
    /**
     * Name of the permissions group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Owner of the permissions group.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Date of the last update of this group.
     */
    public readonly updatedAt!: pulumi.Output<string>;
    /**
     * URN of the permissions group.
     */
    public /*out*/ readonly urn!: pulumi.Output<string>;

    /**
     * Create a PermissionsGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionsGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionsGroupArgs | PermissionsGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionsGroupState | undefined;
            resourceInputs["allows"] = state ? state.allows : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["denies"] = state ? state.denies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["excepts"] = state ? state.excepts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["urn"] = state ? state.urn : undefined;
        } else {
            const args = argsOrState as PermissionsGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["allows"] = args ? args.allows : undefined;
            resourceInputs["denies"] = args ? args.denies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["excepts"] = args ? args.excepts : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["updatedAt"] = args ? args.updatedAt : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["urn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PermissionsGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PermissionsGroup resources.
 */
export interface PermissionsGroupState {
    /**
     * Set of actions allowed by the permissions group.
     */
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Creation date of this group.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Set of actions that will be denied no matter what permissions group exists.
     */
    denies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Group description.
     */
    description?: pulumi.Input<string>;
    /**
     * Set of actions that will be subtracted from the `allow` list.
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the permissions group.
     */
    name?: pulumi.Input<string>;
    /**
     * Owner of the permissions group.
     */
    owner?: pulumi.Input<string>;
    /**
     * Date of the last update of this group.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * URN of the permissions group.
     */
    urn?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PermissionsGroup resource.
 */
export interface PermissionsGroupArgs {
    /**
     * Set of actions allowed by the permissions group.
     */
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set of actions that will be denied no matter what permissions group exists.
     */
    denies?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Group description.
     */
    description: pulumi.Input<string>;
    /**
     * Set of actions that will be subtracted from the `allow` list.
     */
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the permissions group.
     */
    name?: pulumi.Input<string>;
    /**
     * Date of the last update of this group.
     */
    updatedAt?: pulumi.Input<string>;
}
