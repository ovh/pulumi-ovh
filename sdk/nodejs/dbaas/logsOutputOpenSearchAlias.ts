// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class LogsOutputOpenSearchAlias extends pulumi.CustomResource {
    /**
     * Get an existing LogsOutputOpenSearchAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsOutputOpenSearchAliasState, opts?: pulumi.CustomResourceOptions): LogsOutputOpenSearchAlias {
        return new LogsOutputOpenSearchAlias(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Dbaas/logsOutputOpenSearchAlias:LogsOutputOpenSearchAlias';

    /**
     * Returns true if the given object is an instance of LogsOutputOpenSearchAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsOutputOpenSearchAlias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsOutputOpenSearchAlias.__pulumiType;
    }

    /**
     * Alias used
     */
    public /*out*/ readonly aliasId!: pulumi.Output<string>;
    /**
     * Operation creation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Current alias size (in bytes)
     */
    public /*out*/ readonly currentSize!: pulumi.Output<number>;
    /**
     * Alias description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Indexes attached to alias
     */
    public readonly indexes!: pulumi.Output<string[]>;
    /**
     * Indicates if you are allowed to edit entry
     */
    public /*out*/ readonly isEditable!: pulumi.Output<boolean>;
    /**
     * Alias name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Number of index
     */
    public readonly nbIndex!: pulumi.Output<number>;
    /**
     * Number of shard
     */
    public readonly nbStream!: pulumi.Output<number>;
    /**
     * The service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Streams attached to alias
     */
    public readonly streams!: pulumi.Output<string[]>;
    /**
     * Alias suffix
     */
    public readonly suffix!: pulumi.Output<string>;
    /**
     * Operation last update
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LogsOutputOpenSearchAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsOutputOpenSearchAliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsOutputOpenSearchAliasArgs | LogsOutputOpenSearchAliasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsOutputOpenSearchAliasState | undefined;
            resourceInputs["aliasId"] = state ? state.aliasId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["currentSize"] = state ? state.currentSize : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexes"] = state ? state.indexes : undefined;
            resourceInputs["isEditable"] = state ? state.isEditable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nbIndex"] = state ? state.nbIndex : undefined;
            resourceInputs["nbStream"] = state ? state.nbStream : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["streams"] = state ? state.streams : undefined;
            resourceInputs["suffix"] = state ? state.suffix : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LogsOutputOpenSearchAliasArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.suffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'suffix'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexes"] = args ? args.indexes : undefined;
            resourceInputs["nbIndex"] = args ? args.nbIndex : undefined;
            resourceInputs["nbStream"] = args ? args.nbStream : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["streams"] = args ? args.streams : undefined;
            resourceInputs["suffix"] = args ? args.suffix : undefined;
            resourceInputs["aliasId"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currentSize"] = undefined /*out*/;
            resourceInputs["isEditable"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsOutputOpenSearchAlias.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsOutputOpenSearchAlias resources.
 */
export interface LogsOutputOpenSearchAliasState {
    /**
     * Alias used
     */
    aliasId?: pulumi.Input<string>;
    /**
     * Operation creation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Current alias size (in bytes)
     */
    currentSize?: pulumi.Input<number>;
    /**
     * Alias description
     */
    description?: pulumi.Input<string>;
    /**
     * Indexes attached to alias
     */
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates if you are allowed to edit entry
     */
    isEditable?: pulumi.Input<boolean>;
    /**
     * Alias name
     */
    name?: pulumi.Input<string>;
    /**
     * Number of index
     */
    nbIndex?: pulumi.Input<number>;
    /**
     * Number of shard
     */
    nbStream?: pulumi.Input<number>;
    /**
     * The service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Streams attached to alias
     */
    streams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alias suffix
     */
    suffix?: pulumi.Input<string>;
    /**
     * Operation last update
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsOutputOpenSearchAlias resource.
 */
export interface LogsOutputOpenSearchAliasArgs {
    /**
     * Alias description
     */
    description: pulumi.Input<string>;
    /**
     * Indexes attached to alias
     */
    indexes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Number of index
     */
    nbIndex?: pulumi.Input<number>;
    /**
     * Number of shard
     */
    nbStream?: pulumi.Input<number>;
    /**
     * The service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Streams attached to alias
     */
    streams?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alias suffix
     */
    suffix: pulumi.Input<string>;
}
