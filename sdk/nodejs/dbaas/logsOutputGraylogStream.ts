// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a DBaaS Logs Graylog output stream.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const stream = new ovh.dbaas.LogsOutputGraylogStream("stream", {
 *     description: "my graylog stream",
 *     serviceName: "....",
 *     title: "my stream",
 * });
 * ```
 *
 * To define the retention of the stream, you can use the following configuration:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 * import * as ovh from "@pulumi/ovh";
 *
 * const retention = ovh.Dbaas.getLogsClustersRetention({
 *     serviceName: "ldp-xx-xxxxx",
 *     clusterId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
 *     duration: "P14D",
 * });
 * const stream = new ovh.dbaas.LogsOutputGraylogStream("stream", {
 *     serviceName: "....",
 *     title: "my stream",
 *     description: "my graylog stream",
 *     retentionId: retention.then(retention => retention.retentionId),
 * });
 * ```
 */
export class LogsOutputGraylogStream extends pulumi.CustomResource {
    /**
     * Get an existing LogsOutputGraylogStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsOutputGraylogStreamState, opts?: pulumi.CustomResourceOptions): LogsOutputGraylogStream {
        return new LogsOutputGraylogStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Dbaas/logsOutputGraylogStream:LogsOutputGraylogStream';

    /**
     * Returns true if the given object is an instance of LogsOutputGraylogStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsOutputGraylogStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsOutputGraylogStream.__pulumiType;
    }

    /**
     * Indicates if the current user can create alert on the stream
     */
    public /*out*/ readonly canAlert!: pulumi.Output<boolean>;
    /**
     * Cold storage compression method. One of "LZMA", "GZIP", "DEFLATED", "ZSTD"
     */
    public readonly coldStorageCompression!: pulumi.Output<string>;
    /**
     * ColdStorage content. One of "ALL", "GLEF", "PLAIN"
     */
    public readonly coldStorageContent!: pulumi.Output<string>;
    /**
     * Is Cold storage enabled?
     */
    public readonly coldStorageEnabled!: pulumi.Output<boolean>;
    /**
     * Notify on new Cold storage archive
     */
    public readonly coldStorageNotifyEnabled!: pulumi.Output<boolean>;
    /**
     * Cold storage retention in year
     */
    public readonly coldStorageRetention!: pulumi.Output<number>;
    /**
     * ColdStorage destination. One of "PCA", "PCS"
     */
    public readonly coldStorageTarget!: pulumi.Output<string>;
    /**
     * Stream creation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Stream description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Enable ES indexing
     */
    public readonly indexingEnabled!: pulumi.Output<boolean>;
    /**
     * Maximum indexing size (in GB)
     */
    public readonly indexingMaxSize!: pulumi.Output<number>;
    /**
     * If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
     */
    public readonly indexingNotifyEnabled!: pulumi.Output<boolean>;
    /**
     * Indicates if you are allowed to edit entry
     */
    public /*out*/ readonly isEditable!: pulumi.Output<boolean>;
    /**
     * Indicates if you are allowed to share entry
     */
    public /*out*/ readonly isShareable!: pulumi.Output<boolean>;
    /**
     * Number of alert condition
     */
    public /*out*/ readonly nbAlertCondition!: pulumi.Output<number>;
    /**
     * Number of coldstored archivesr
     */
    public /*out*/ readonly nbArchive!: pulumi.Output<number>;
    /**
     * Parent stream ID
     */
    public readonly parentStreamId!: pulumi.Output<string | undefined>;
    /**
     * If set, pause indexing when maximum size is reach
     */
    public readonly pauseIndexingOnMaxSize!: pulumi.Output<boolean>;
    /**
     * Retention ID
     */
    public readonly retentionId!: pulumi.Output<string>;
    /**
     * The service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Stream ID
     */
    public /*out*/ readonly streamId!: pulumi.Output<string>;
    /**
     * Stream description
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Stream last updater
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Enable Websocket
     */
    public readonly webSocketEnabled!: pulumi.Output<boolean>;
    /**
     * Write token of the stream (empty if the caller is not the owner of the stream)
     */
    public /*out*/ readonly writeToken!: pulumi.Output<string>;

    /**
     * Create a LogsOutputGraylogStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsOutputGraylogStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsOutputGraylogStreamArgs | LogsOutputGraylogStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsOutputGraylogStreamState | undefined;
            resourceInputs["canAlert"] = state ? state.canAlert : undefined;
            resourceInputs["coldStorageCompression"] = state ? state.coldStorageCompression : undefined;
            resourceInputs["coldStorageContent"] = state ? state.coldStorageContent : undefined;
            resourceInputs["coldStorageEnabled"] = state ? state.coldStorageEnabled : undefined;
            resourceInputs["coldStorageNotifyEnabled"] = state ? state.coldStorageNotifyEnabled : undefined;
            resourceInputs["coldStorageRetention"] = state ? state.coldStorageRetention : undefined;
            resourceInputs["coldStorageTarget"] = state ? state.coldStorageTarget : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["indexingEnabled"] = state ? state.indexingEnabled : undefined;
            resourceInputs["indexingMaxSize"] = state ? state.indexingMaxSize : undefined;
            resourceInputs["indexingNotifyEnabled"] = state ? state.indexingNotifyEnabled : undefined;
            resourceInputs["isEditable"] = state ? state.isEditable : undefined;
            resourceInputs["isShareable"] = state ? state.isShareable : undefined;
            resourceInputs["nbAlertCondition"] = state ? state.nbAlertCondition : undefined;
            resourceInputs["nbArchive"] = state ? state.nbArchive : undefined;
            resourceInputs["parentStreamId"] = state ? state.parentStreamId : undefined;
            resourceInputs["pauseIndexingOnMaxSize"] = state ? state.pauseIndexingOnMaxSize : undefined;
            resourceInputs["retentionId"] = state ? state.retentionId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["webSocketEnabled"] = state ? state.webSocketEnabled : undefined;
            resourceInputs["writeToken"] = state ? state.writeToken : undefined;
        } else {
            const args = argsOrState as LogsOutputGraylogStreamArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["coldStorageCompression"] = args ? args.coldStorageCompression : undefined;
            resourceInputs["coldStorageContent"] = args ? args.coldStorageContent : undefined;
            resourceInputs["coldStorageEnabled"] = args ? args.coldStorageEnabled : undefined;
            resourceInputs["coldStorageNotifyEnabled"] = args ? args.coldStorageNotifyEnabled : undefined;
            resourceInputs["coldStorageRetention"] = args ? args.coldStorageRetention : undefined;
            resourceInputs["coldStorageTarget"] = args ? args.coldStorageTarget : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["indexingEnabled"] = args ? args.indexingEnabled : undefined;
            resourceInputs["indexingMaxSize"] = args ? args.indexingMaxSize : undefined;
            resourceInputs["indexingNotifyEnabled"] = args ? args.indexingNotifyEnabled : undefined;
            resourceInputs["parentStreamId"] = args ? args.parentStreamId : undefined;
            resourceInputs["pauseIndexingOnMaxSize"] = args ? args.pauseIndexingOnMaxSize : undefined;
            resourceInputs["retentionId"] = args ? args.retentionId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["webSocketEnabled"] = args ? args.webSocketEnabled : undefined;
            resourceInputs["canAlert"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isEditable"] = undefined /*out*/;
            resourceInputs["isShareable"] = undefined /*out*/;
            resourceInputs["nbAlertCondition"] = undefined /*out*/;
            resourceInputs["nbArchive"] = undefined /*out*/;
            resourceInputs["streamId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["writeToken"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["writeToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogsOutputGraylogStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsOutputGraylogStream resources.
 */
export interface LogsOutputGraylogStreamState {
    /**
     * Indicates if the current user can create alert on the stream
     */
    canAlert?: pulumi.Input<boolean>;
    /**
     * Cold storage compression method. One of "LZMA", "GZIP", "DEFLATED", "ZSTD"
     */
    coldStorageCompression?: pulumi.Input<string>;
    /**
     * ColdStorage content. One of "ALL", "GLEF", "PLAIN"
     */
    coldStorageContent?: pulumi.Input<string>;
    /**
     * Is Cold storage enabled?
     */
    coldStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Notify on new Cold storage archive
     */
    coldStorageNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * Cold storage retention in year
     */
    coldStorageRetention?: pulumi.Input<number>;
    /**
     * ColdStorage destination. One of "PCA", "PCS"
     */
    coldStorageTarget?: pulumi.Input<string>;
    /**
     * Stream creation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Stream description
     */
    description?: pulumi.Input<string>;
    /**
     * Enable ES indexing
     */
    indexingEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum indexing size (in GB)
     */
    indexingMaxSize?: pulumi.Input<number>;
    /**
     * If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
     */
    indexingNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates if you are allowed to edit entry
     */
    isEditable?: pulumi.Input<boolean>;
    /**
     * Indicates if you are allowed to share entry
     */
    isShareable?: pulumi.Input<boolean>;
    /**
     * Number of alert condition
     */
    nbAlertCondition?: pulumi.Input<number>;
    /**
     * Number of coldstored archivesr
     */
    nbArchive?: pulumi.Input<number>;
    /**
     * Parent stream ID
     */
    parentStreamId?: pulumi.Input<string>;
    /**
     * If set, pause indexing when maximum size is reach
     */
    pauseIndexingOnMaxSize?: pulumi.Input<boolean>;
    /**
     * Retention ID
     */
    retentionId?: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Stream ID
     */
    streamId?: pulumi.Input<string>;
    /**
     * Stream description
     */
    title?: pulumi.Input<string>;
    /**
     * Stream last updater
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Enable Websocket
     */
    webSocketEnabled?: pulumi.Input<boolean>;
    /**
     * Write token of the stream (empty if the caller is not the owner of the stream)
     */
    writeToken?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsOutputGraylogStream resource.
 */
export interface LogsOutputGraylogStreamArgs {
    /**
     * Cold storage compression method. One of "LZMA", "GZIP", "DEFLATED", "ZSTD"
     */
    coldStorageCompression?: pulumi.Input<string>;
    /**
     * ColdStorage content. One of "ALL", "GLEF", "PLAIN"
     */
    coldStorageContent?: pulumi.Input<string>;
    /**
     * Is Cold storage enabled?
     */
    coldStorageEnabled?: pulumi.Input<boolean>;
    /**
     * Notify on new Cold storage archive
     */
    coldStorageNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * Cold storage retention in year
     */
    coldStorageRetention?: pulumi.Input<number>;
    /**
     * ColdStorage destination. One of "PCA", "PCS"
     */
    coldStorageTarget?: pulumi.Input<string>;
    /**
     * Stream description
     */
    description: pulumi.Input<string>;
    /**
     * Enable ES indexing
     */
    indexingEnabled?: pulumi.Input<boolean>;
    /**
     * Maximum indexing size (in GB)
     */
    indexingMaxSize?: pulumi.Input<number>;
    /**
     * If set, notify when size is near 80, 90 or 100 % of the maximum configured setting
     */
    indexingNotifyEnabled?: pulumi.Input<boolean>;
    /**
     * Parent stream ID
     */
    parentStreamId?: pulumi.Input<string>;
    /**
     * If set, pause indexing when maximum size is reach
     */
    pauseIndexingOnMaxSize?: pulumi.Input<boolean>;
    /**
     * Retention ID
     */
    retentionId?: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Stream description
     */
    title: pulumi.Input<string>;
    /**
     * Enable Websocket
     */
    webSocketEnabled?: pulumi.Input<boolean>;
}
