// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetLogsClusterArgs, GetLogsClusterResult, GetLogsClusterOutputArgs } from "./getLogsCluster";
export const getLogsCluster: typeof import("./getLogsCluster").getLogsCluster = null as any;
export const getLogsClusterOutput: typeof import("./getLogsCluster").getLogsClusterOutput = null as any;
utilities.lazyLoad(exports, ["getLogsCluster","getLogsClusterOutput"], () => require("./getLogsCluster"));

export { GetLogsClustersArgs, GetLogsClustersResult, GetLogsClustersOutputArgs } from "./getLogsClusters";
export const getLogsClusters: typeof import("./getLogsClusters").getLogsClusters = null as any;
export const getLogsClustersOutput: typeof import("./getLogsClusters").getLogsClustersOutput = null as any;
utilities.lazyLoad(exports, ["getLogsClusters","getLogsClustersOutput"], () => require("./getLogsClusters"));

export { GetLogsClustersRetentionArgs, GetLogsClustersRetentionResult, GetLogsClustersRetentionOutputArgs } from "./getLogsClustersRetention";
export const getLogsClustersRetention: typeof import("./getLogsClustersRetention").getLogsClustersRetention = null as any;
export const getLogsClustersRetentionOutput: typeof import("./getLogsClustersRetention").getLogsClustersRetentionOutput = null as any;
utilities.lazyLoad(exports, ["getLogsClustersRetention","getLogsClustersRetentionOutput"], () => require("./getLogsClustersRetention"));

export { GetLogsInputEngineArgs, GetLogsInputEngineResult, GetLogsInputEngineOutputArgs } from "./getLogsInputEngine";
export const getLogsInputEngine: typeof import("./getLogsInputEngine").getLogsInputEngine = null as any;
export const getLogsInputEngineOutput: typeof import("./getLogsInputEngine").getLogsInputEngineOutput = null as any;
utilities.lazyLoad(exports, ["getLogsInputEngine","getLogsInputEngineOutput"], () => require("./getLogsInputEngine"));

export { GetLogsOutputGraylogStreamArgs, GetLogsOutputGraylogStreamResult, GetLogsOutputGraylogStreamOutputArgs } from "./getLogsOutputGraylogStream";
export const getLogsOutputGraylogStream: typeof import("./getLogsOutputGraylogStream").getLogsOutputGraylogStream = null as any;
export const getLogsOutputGraylogStreamOutput: typeof import("./getLogsOutputGraylogStream").getLogsOutputGraylogStreamOutput = null as any;
utilities.lazyLoad(exports, ["getLogsOutputGraylogStream","getLogsOutputGraylogStreamOutput"], () => require("./getLogsOutputGraylogStream"));

export { GetLogsOutputOpenSearchIndexArgs, GetLogsOutputOpenSearchIndexResult, GetLogsOutputOpenSearchIndexOutputArgs } from "./getLogsOutputOpenSearchIndex";
export const getLogsOutputOpenSearchIndex: typeof import("./getLogsOutputOpenSearchIndex").getLogsOutputOpenSearchIndex = null as any;
export const getLogsOutputOpenSearchIndexOutput: typeof import("./getLogsOutputOpenSearchIndex").getLogsOutputOpenSearchIndexOutput = null as any;
utilities.lazyLoad(exports, ["getLogsOutputOpenSearchIndex","getLogsOutputOpenSearchIndexOutput"], () => require("./getLogsOutputOpenSearchIndex"));

export { LogsClusterArgs, LogsClusterState } from "./logsCluster";
export type LogsCluster = import("./logsCluster").LogsCluster;
export const LogsCluster: typeof import("./logsCluster").LogsCluster = null as any;
utilities.lazyLoad(exports, ["LogsCluster"], () => require("./logsCluster"));

export { LogsInputArgs, LogsInputState } from "./logsInput";
export type LogsInput = import("./logsInput").LogsInput;
export const LogsInput: typeof import("./logsInput").LogsInput = null as any;
utilities.lazyLoad(exports, ["LogsInput"], () => require("./logsInput"));

export { LogsOutputGraylogStreamArgs, LogsOutputGraylogStreamState } from "./logsOutputGraylogStream";
export type LogsOutputGraylogStream = import("./logsOutputGraylogStream").LogsOutputGraylogStream;
export const LogsOutputGraylogStream: typeof import("./logsOutputGraylogStream").LogsOutputGraylogStream = null as any;
utilities.lazyLoad(exports, ["LogsOutputGraylogStream"], () => require("./logsOutputGraylogStream"));

export { LogsOutputOpenSearchAliasArgs, LogsOutputOpenSearchAliasState } from "./logsOutputOpenSearchAlias";
export type LogsOutputOpenSearchAlias = import("./logsOutputOpenSearchAlias").LogsOutputOpenSearchAlias;
export const LogsOutputOpenSearchAlias: typeof import("./logsOutputOpenSearchAlias").LogsOutputOpenSearchAlias = null as any;
utilities.lazyLoad(exports, ["LogsOutputOpenSearchAlias"], () => require("./logsOutputOpenSearchAlias"));

export { LogsOutputOpenSearchIndexArgs, LogsOutputOpenSearchIndexState } from "./logsOutputOpenSearchIndex";
export type LogsOutputOpenSearchIndex = import("./logsOutputOpenSearchIndex").LogsOutputOpenSearchIndex;
export const LogsOutputOpenSearchIndex: typeof import("./logsOutputOpenSearchIndex").LogsOutputOpenSearchIndex = null as any;
utilities.lazyLoad(exports, ["LogsOutputOpenSearchIndex"], () => require("./logsOutputOpenSearchIndex"));

export { LogsRoleArgs, LogsRoleState } from "./logsRole";
export type LogsRole = import("./logsRole").LogsRole;
export const LogsRole: typeof import("./logsRole").LogsRole = null as any;
utilities.lazyLoad(exports, ["LogsRole"], () => require("./logsRole"));

export { LogsRolePermissionStreamArgs, LogsRolePermissionStreamState } from "./logsRolePermissionStream";
export type LogsRolePermissionStream = import("./logsRolePermissionStream").LogsRolePermissionStream;
export const LogsRolePermissionStream: typeof import("./logsRolePermissionStream").LogsRolePermissionStream = null as any;
utilities.lazyLoad(exports, ["LogsRolePermissionStream"], () => require("./logsRolePermissionStream"));

export { LogsTokenArgs, LogsTokenState } from "./logsToken";
export type LogsToken = import("./logsToken").LogsToken;
export const LogsToken: typeof import("./logsToken").LogsToken = null as any;
utilities.lazyLoad(exports, ["LogsToken"], () => require("./logsToken"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:Dbaas/logsCluster:LogsCluster":
                return new LogsCluster(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsInput:LogsInput":
                return new LogsInput(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsOutputGraylogStream:LogsOutputGraylogStream":
                return new LogsOutputGraylogStream(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsOutputOpenSearchAlias:LogsOutputOpenSearchAlias":
                return new LogsOutputOpenSearchAlias(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsOutputOpenSearchIndex:LogsOutputOpenSearchIndex":
                return new LogsOutputOpenSearchIndex(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsRole:LogsRole":
                return new LogsRole(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream":
                return new LogsRolePermissionStream(name, <any>undefined, { urn })
            case "ovh:Dbaas/logsToken:LogsToken":
                return new LogsToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsCluster", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsInput", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsOutputGraylogStream", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsOutputOpenSearchAlias", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsOutputOpenSearchIndex", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsRole", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsRolePermissionStream", _module)
pulumi.runtime.registerResourceModule("ovh", "Dbaas/logsToken", _module)
