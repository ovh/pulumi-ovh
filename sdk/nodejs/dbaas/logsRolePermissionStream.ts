// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Reference a DBaaS logs role stream permission.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const permission = new ovh.dbaas.LogsRolePermissionStream("permission", {
 *     serviceName: "ldp-xx-xxxxx",
 *     roleId: ovh_dbaas_logs_role.ro.id,
 *     streamId: ovh_dbaas_logs_output_graylog_stream.mystream.stream_id,
 * });
 * ```
 *
 * ## Import
 *
 * DBaaS logs role stream permission can be imported using the `service_name`, `role_id` and `id`  of the permission, separated by "/" E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream ovh_dbaas_logs_role_permission_stream.perm ldp-ra-XX/dc145bc2-eb01-4efe-a802-XXXXXX/e4818fa8-f426-11ef-a1f6-XXXXXXX
 * ```
 */
export class LogsRolePermissionStream extends pulumi.CustomResource {
    /**
     * Get an existing LogsRolePermissionStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogsRolePermissionStreamState, opts?: pulumi.CustomResourceOptions): LogsRolePermissionStream {
        return new LogsRolePermissionStream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream';

    /**
     * Returns true if the given object is an instance of LogsRolePermissionStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogsRolePermissionStream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogsRolePermissionStream.__pulumiType;
    }

    /**
     * Permission ID
     */
    public /*out*/ readonly permissionId!: pulumi.Output<string>;
    /**
     * Permission type (e.g., READ_ONLY)
     */
    public /*out*/ readonly permissionType!: pulumi.Output<string>;
    /**
     * The DBaaS Logs role id
     */
    public readonly roleId!: pulumi.Output<string>;
    /**
     * The service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The DBaaS Logs Graylog output stream id
     */
    public readonly streamId!: pulumi.Output<string>;

    /**
     * Create a LogsRolePermissionStream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogsRolePermissionStreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogsRolePermissionStreamArgs | LogsRolePermissionStreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogsRolePermissionStreamState | undefined;
            resourceInputs["permissionId"] = state ? state.permissionId : undefined;
            resourceInputs["permissionType"] = state ? state.permissionType : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
        } else {
            const args = argsOrState as LogsRolePermissionStreamArgs | undefined;
            if ((!args || args.roleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.streamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            resourceInputs["roleId"] = args ? args.roleId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["permissionId"] = undefined /*out*/;
            resourceInputs["permissionType"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogsRolePermissionStream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogsRolePermissionStream resources.
 */
export interface LogsRolePermissionStreamState {
    /**
     * Permission ID
     */
    permissionId?: pulumi.Input<string>;
    /**
     * Permission type (e.g., READ_ONLY)
     */
    permissionType?: pulumi.Input<string>;
    /**
     * The DBaaS Logs role id
     */
    roleId?: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The DBaaS Logs Graylog output stream id
     */
    streamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogsRolePermissionStream resource.
 */
export interface LogsRolePermissionStreamArgs {
    /**
     * The DBaaS Logs role id
     */
    roleId: pulumi.Input<string>;
    /**
     * The service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * The DBaaS Logs Graylog output stream id
     */
    streamId: pulumi.Input<string>;
}
