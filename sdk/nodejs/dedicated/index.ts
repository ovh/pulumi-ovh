// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CephAclArgs, CephAclState } from "./cephAcl";
export type CephAcl = import("./cephAcl").CephAcl;
export const CephAcl: typeof import("./cephAcl").CephAcl = null as any;
utilities.lazyLoad(exports, ["CephAcl"], () => require("./cephAcl"));

export { GetCephArgs, GetCephResult, GetCephOutputArgs } from "./getCeph";
export const getCeph: typeof import("./getCeph").getCeph = null as any;
export const getCephOutput: typeof import("./getCeph").getCephOutput = null as any;
utilities.lazyLoad(exports, ["getCeph","getCephOutput"], () => require("./getCeph"));

export { GetCloudArgs, GetCloudResult, GetCloudOutputArgs } from "./getCloud";
export const getCloud: typeof import("./getCloud").getCloud = null as any;
export const getCloudOutput: typeof import("./getCloud").getCloudOutput = null as any;
utilities.lazyLoad(exports, ["getCloud","getCloudOutput"], () => require("./getCloud"));

export { GetNasHAArgs, GetNasHAResult, GetNasHAOutputArgs } from "./getNasHA";
export const getNasHA: typeof import("./getNasHA").getNasHA = null as any;
export const getNasHAOutput: typeof import("./getNasHA").getNasHAOutput = null as any;
utilities.lazyLoad(exports, ["getNasHA","getNasHAOutput"], () => require("./getNasHA"));

export { GetNasHAPartitionArgs, GetNasHAPartitionResult, GetNasHAPartitionOutputArgs } from "./getNasHAPartition";
export const getNasHAPartition: typeof import("./getNasHAPartition").getNasHAPartition = null as any;
export const getNasHAPartitionOutput: typeof import("./getNasHAPartition").getNasHAPartitionOutput = null as any;
utilities.lazyLoad(exports, ["getNasHAPartition","getNasHAPartitionOutput"], () => require("./getNasHAPartition"));

export { GetServerBootsArgs, GetServerBootsResult, GetServerBootsOutputArgs } from "./getServerBoots";
export const getServerBoots: typeof import("./getServerBoots").getServerBoots = null as any;
export const getServerBootsOutput: typeof import("./getServerBoots").getServerBootsOutput = null as any;
utilities.lazyLoad(exports, ["getServerBoots","getServerBootsOutput"], () => require("./getServerBoots"));

export { GetServerSpecificationsHardwareArgs, GetServerSpecificationsHardwareResult, GetServerSpecificationsHardwareOutputArgs } from "./getServerSpecificationsHardware";
export const getServerSpecificationsHardware: typeof import("./getServerSpecificationsHardware").getServerSpecificationsHardware = null as any;
export const getServerSpecificationsHardwareOutput: typeof import("./getServerSpecificationsHardware").getServerSpecificationsHardwareOutput = null as any;
utilities.lazyLoad(exports, ["getServerSpecificationsHardware","getServerSpecificationsHardwareOutput"], () => require("./getServerSpecificationsHardware"));

export { GetServerSpecificationsNetworkArgs, GetServerSpecificationsNetworkResult, GetServerSpecificationsNetworkOutputArgs } from "./getServerSpecificationsNetwork";
export const getServerSpecificationsNetwork: typeof import("./getServerSpecificationsNetwork").getServerSpecificationsNetwork = null as any;
export const getServerSpecificationsNetworkOutput: typeof import("./getServerSpecificationsNetwork").getServerSpecificationsNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getServerSpecificationsNetwork","getServerSpecificationsNetworkOutput"], () => require("./getServerSpecificationsNetwork"));

export { NasHAPartitionArgs, NasHAPartitionState } from "./nasHAPartition";
export type NasHAPartition = import("./nasHAPartition").NasHAPartition;
export const NasHAPartition: typeof import("./nasHAPartition").NasHAPartition = null as any;
utilities.lazyLoad(exports, ["NasHAPartition"], () => require("./nasHAPartition"));

export { NasHAPartitionAccessArgs, NasHAPartitionAccessState } from "./nasHAPartitionAccess";
export type NasHAPartitionAccess = import("./nasHAPartitionAccess").NasHAPartitionAccess;
export const NasHAPartitionAccess: typeof import("./nasHAPartitionAccess").NasHAPartitionAccess = null as any;
utilities.lazyLoad(exports, ["NasHAPartitionAccess"], () => require("./nasHAPartitionAccess"));

export { NasHAPartitionSnapshotArgs, NasHAPartitionSnapshotState } from "./nasHAPartitionSnapshot";
export type NasHAPartitionSnapshot = import("./nasHAPartitionSnapshot").NasHAPartitionSnapshot;
export const NasHAPartitionSnapshot: typeof import("./nasHAPartitionSnapshot").NasHAPartitionSnapshot = null as any;
utilities.lazyLoad(exports, ["NasHAPartitionSnapshot"], () => require("./nasHAPartitionSnapshot"));

export { ServerArgs, ServerState } from "./server";
export type Server = import("./server").Server;
export const Server: typeof import("./server").Server = null as any;
utilities.lazyLoad(exports, ["Server"], () => require("./server"));

export { ServerNetworkingArgs, ServerNetworkingState } from "./serverNetworking";
export type ServerNetworking = import("./serverNetworking").ServerNetworking;
export const ServerNetworking: typeof import("./serverNetworking").ServerNetworking = null as any;
utilities.lazyLoad(exports, ["ServerNetworking"], () => require("./serverNetworking"));

export { ServerRebootTaskArgs, ServerRebootTaskState } from "./serverRebootTask";
export type ServerRebootTask = import("./serverRebootTask").ServerRebootTask;
export const ServerRebootTask: typeof import("./serverRebootTask").ServerRebootTask = null as any;
utilities.lazyLoad(exports, ["ServerRebootTask"], () => require("./serverRebootTask"));

export { ServerReinstallTaskArgs, ServerReinstallTaskState } from "./serverReinstallTask";
export type ServerReinstallTask = import("./serverReinstallTask").ServerReinstallTask;
export const ServerReinstallTask: typeof import("./serverReinstallTask").ServerReinstallTask = null as any;
utilities.lazyLoad(exports, ["ServerReinstallTask"], () => require("./serverReinstallTask"));

export { ServerUpdateArgs, ServerUpdateState } from "./serverUpdate";
export type ServerUpdate = import("./serverUpdate").ServerUpdate;
export const ServerUpdate: typeof import("./serverUpdate").ServerUpdate = null as any;
utilities.lazyLoad(exports, ["ServerUpdate"], () => require("./serverUpdate"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:Dedicated/cephAcl:CephAcl":
                return new CephAcl(name, <any>undefined, { urn })
            case "ovh:Dedicated/nasHAPartition:NasHAPartition":
                return new NasHAPartition(name, <any>undefined, { urn })
            case "ovh:Dedicated/nasHAPartitionAccess:NasHAPartitionAccess":
                return new NasHAPartitionAccess(name, <any>undefined, { urn })
            case "ovh:Dedicated/nasHAPartitionSnapshot:NasHAPartitionSnapshot":
                return new NasHAPartitionSnapshot(name, <any>undefined, { urn })
            case "ovh:Dedicated/server:Server":
                return new Server(name, <any>undefined, { urn })
            case "ovh:Dedicated/serverNetworking:ServerNetworking":
                return new ServerNetworking(name, <any>undefined, { urn })
            case "ovh:Dedicated/serverRebootTask:ServerRebootTask":
                return new ServerRebootTask(name, <any>undefined, { urn })
            case "ovh:Dedicated/serverReinstallTask:ServerReinstallTask":
                return new ServerReinstallTask(name, <any>undefined, { urn })
            case "ovh:Dedicated/serverUpdate:ServerUpdate":
                return new ServerUpdate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "Dedicated/cephAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/nasHAPartition", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/nasHAPartitionAccess", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/nasHAPartitionSnapshot", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/server", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/serverNetworking", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/serverRebootTask", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/serverReinstallTask", _module)
pulumi.runtime.registerResourceModule("ovh", "Dedicated/serverUpdate", _module)
