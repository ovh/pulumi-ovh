// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * Dedicated servers can be imported using the `service_name`. Using the following configuration:
 *
 * terraform
 *
 * import {
 *
 *   to = ovh_dedicated_server.server
 *
 *   id = "<service name>"
 *
 * }
 *
 * You can then run:
 *
 * bash
 *
 * pulumi preview -generate-config-out=dedicated.tf
 *
 * pulumi up
 *
 * The file `dedicated.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
 */
export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Dedicated/server:Server';

    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Server {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }

    /**
     * Dedicated AZ localisation
     */
    public /*out*/ readonly availabilityZone!: pulumi.Output<string>;
    /**
     * Boot id of the server
     */
    public readonly bootId!: pulumi.Output<number>;
    /**
     * Boot script of the server
     */
    public readonly bootScript!: pulumi.Output<string>;
    /**
     * Dedicated server commercial range
     */
    public /*out*/ readonly commercialRange!: pulumi.Output<string>;
    /**
     * OS reinstallation customizations
     */
    public readonly customizations!: pulumi.Output<outputs.Dedicated.ServerCustomizations | undefined>;
    /**
     * Dedicated datacenter localisation (bhs1,bhs2,...)
     */
    public /*out*/ readonly datacenter!: pulumi.Output<string>;
    /**
     * Resource display name
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * Path of the EFI bootloader
     */
    public readonly efiBootloaderPath!: pulumi.Output<string>;
    /**
     * IAM resource information
     */
    public /*out*/ readonly iam!: pulumi.Output<outputs.Dedicated.ServerIam>;
    /**
     * Dedicated server ip (IPv4)
     */
    public /*out*/ readonly ip!: pulumi.Output<string>;
    /**
     * Link speed of the server
     */
    public /*out*/ readonly linkSpeed!: pulumi.Output<number>;
    /**
     * Icmp monitoring state
     */
    public readonly monitoring!: pulumi.Output<boolean>;
    /**
     * Dedicated server name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public /*out*/ readonly newUpgradeSystem!: pulumi.Output<boolean>;
    /**
     * Prevent datacenter intervention
     */
    public readonly noIntervention!: pulumi.Output<boolean>;
    /**
     * Details about an Order
     */
    public /*out*/ readonly order!: pulumi.Output<outputs.Dedicated.ServerOrder>;
    /**
     * Operating system
     */
    public readonly os!: pulumi.Output<string>;
    /**
     * OVH subsidiaries
     */
    public readonly ovhSubsidiary!: pulumi.Output<string | undefined>;
    public readonly planOptions!: pulumi.Output<outputs.Dedicated.ServerPlanOption[]>;
    public readonly plans!: pulumi.Output<outputs.Dedicated.ServerPlan[]>;
    /**
     * Power state of the server (poweron, poweroff)
     */
    public /*out*/ readonly powerState!: pulumi.Output<string>;
    /**
     * Does this server have professional use option
     */
    public /*out*/ readonly professionalUse!: pulumi.Output<boolean>;
    /**
     * Arbitrary properties to pass to cloud-init's config drive datasource
     */
    public readonly properties!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Rack id of the server
     */
    public /*out*/ readonly rack!: pulumi.Output<string>;
    /**
     * Dedicated region localisation
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Rescue mail of the server
     */
    public readonly rescueMail!: pulumi.Output<string>;
    /**
     * Public SSH Key used in the rescue mode
     */
    public readonly rescueSshKey!: pulumi.Output<string>;
    /**
     * Dedicated server reverse
     */
    public /*out*/ readonly reverse!: pulumi.Output<string>;
    /**
     * Root device of the server
     */
    public readonly rootDevice!: pulumi.Output<string>;
    /**
     * Server id
     */
    public /*out*/ readonly serverId!: pulumi.Output<number>;
    /**
     * The serviceName of your dedicated server
     */
    public /*out*/ readonly serviceName!: pulumi.Output<string>;
    /**
     * All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * OS reinstallation storage configurations
     */
    public readonly storages!: pulumi.Output<outputs.Dedicated.ServerStorage[] | undefined>;
    /**
     * Dedicated server support level (critical, fastpath, gs, pro)
     */
    public /*out*/ readonly supportLevel!: pulumi.Output<string>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerState | undefined;
            resourceInputs["availabilityZone"] = state ? state.availabilityZone : undefined;
            resourceInputs["bootId"] = state ? state.bootId : undefined;
            resourceInputs["bootScript"] = state ? state.bootScript : undefined;
            resourceInputs["commercialRange"] = state ? state.commercialRange : undefined;
            resourceInputs["customizations"] = state ? state.customizations : undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["efiBootloaderPath"] = state ? state.efiBootloaderPath : undefined;
            resourceInputs["iam"] = state ? state.iam : undefined;
            resourceInputs["ip"] = state ? state.ip : undefined;
            resourceInputs["linkSpeed"] = state ? state.linkSpeed : undefined;
            resourceInputs["monitoring"] = state ? state.monitoring : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["newUpgradeSystem"] = state ? state.newUpgradeSystem : undefined;
            resourceInputs["noIntervention"] = state ? state.noIntervention : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["os"] = state ? state.os : undefined;
            resourceInputs["ovhSubsidiary"] = state ? state.ovhSubsidiary : undefined;
            resourceInputs["planOptions"] = state ? state.planOptions : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["powerState"] = state ? state.powerState : undefined;
            resourceInputs["professionalUse"] = state ? state.professionalUse : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["rack"] = state ? state.rack : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["rescueMail"] = state ? state.rescueMail : undefined;
            resourceInputs["rescueSshKey"] = state ? state.rescueSshKey : undefined;
            resourceInputs["reverse"] = state ? state.reverse : undefined;
            resourceInputs["rootDevice"] = state ? state.rootDevice : undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storages"] = state ? state.storages : undefined;
            resourceInputs["supportLevel"] = state ? state.supportLevel : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            resourceInputs["bootId"] = args ? args.bootId : undefined;
            resourceInputs["bootScript"] = args ? args.bootScript : undefined;
            resourceInputs["customizations"] = args ? args.customizations : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["efiBootloaderPath"] = args ? args.efiBootloaderPath : undefined;
            resourceInputs["monitoring"] = args ? args.monitoring : undefined;
            resourceInputs["noIntervention"] = args ? args.noIntervention : undefined;
            resourceInputs["os"] = args ? args.os : undefined;
            resourceInputs["ovhSubsidiary"] = args ? args.ovhSubsidiary : undefined;
            resourceInputs["planOptions"] = args ? args.planOptions : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["rescueMail"] = args ? args.rescueMail : undefined;
            resourceInputs["rescueSshKey"] = args ? args.rescueSshKey : undefined;
            resourceInputs["rootDevice"] = args ? args.rootDevice : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["storages"] = args ? args.storages : undefined;
            resourceInputs["availabilityZone"] = undefined /*out*/;
            resourceInputs["commercialRange"] = undefined /*out*/;
            resourceInputs["datacenter"] = undefined /*out*/;
            resourceInputs["iam"] = undefined /*out*/;
            resourceInputs["ip"] = undefined /*out*/;
            resourceInputs["linkSpeed"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["newUpgradeSystem"] = undefined /*out*/;
            resourceInputs["order"] = undefined /*out*/;
            resourceInputs["powerState"] = undefined /*out*/;
            resourceInputs["professionalUse"] = undefined /*out*/;
            resourceInputs["rack"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["reverse"] = undefined /*out*/;
            resourceInputs["serverId"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
            resourceInputs["supportLevel"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    /**
     * Dedicated AZ localisation
     */
    availabilityZone?: pulumi.Input<string>;
    /**
     * Boot id of the server
     */
    bootId?: pulumi.Input<number>;
    /**
     * Boot script of the server
     */
    bootScript?: pulumi.Input<string>;
    /**
     * Dedicated server commercial range
     */
    commercialRange?: pulumi.Input<string>;
    /**
     * OS reinstallation customizations
     */
    customizations?: pulumi.Input<inputs.Dedicated.ServerCustomizations>;
    /**
     * Dedicated datacenter localisation (bhs1,bhs2,...)
     */
    datacenter?: pulumi.Input<string>;
    /**
     * Resource display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * Path of the EFI bootloader
     */
    efiBootloaderPath?: pulumi.Input<string>;
    /**
     * IAM resource information
     */
    iam?: pulumi.Input<inputs.Dedicated.ServerIam>;
    /**
     * Dedicated server ip (IPv4)
     */
    ip?: pulumi.Input<string>;
    /**
     * Link speed of the server
     */
    linkSpeed?: pulumi.Input<number>;
    /**
     * Icmp monitoring state
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * Dedicated server name
     */
    name?: pulumi.Input<string>;
    newUpgradeSystem?: pulumi.Input<boolean>;
    /**
     * Prevent datacenter intervention
     */
    noIntervention?: pulumi.Input<boolean>;
    /**
     * Details about an Order
     */
    order?: pulumi.Input<inputs.Dedicated.ServerOrder>;
    /**
     * Operating system
     */
    os?: pulumi.Input<string>;
    /**
     * OVH subsidiaries
     */
    ovhSubsidiary?: pulumi.Input<string>;
    planOptions?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerPlanOption>[]>;
    plans?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerPlan>[]>;
    /**
     * Power state of the server (poweron, poweroff)
     */
    powerState?: pulumi.Input<string>;
    /**
     * Does this server have professional use option
     */
    professionalUse?: pulumi.Input<boolean>;
    /**
     * Arbitrary properties to pass to cloud-init's config drive datasource
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Rack id of the server
     */
    rack?: pulumi.Input<string>;
    /**
     * Dedicated region localisation
     */
    region?: pulumi.Input<string>;
    /**
     * Rescue mail of the server
     */
    rescueMail?: pulumi.Input<string>;
    /**
     * Public SSH Key used in the rescue mode
     */
    rescueSshKey?: pulumi.Input<string>;
    /**
     * Dedicated server reverse
     */
    reverse?: pulumi.Input<string>;
    /**
     * Root device of the server
     */
    rootDevice?: pulumi.Input<string>;
    /**
     * Server id
     */
    serverId?: pulumi.Input<number>;
    /**
     * The serviceName of your dedicated server
     */
    serviceName?: pulumi.Input<string>;
    /**
     * All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     */
    state?: pulumi.Input<string>;
    /**
     * OS reinstallation storage configurations
     */
    storages?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerStorage>[]>;
    /**
     * Dedicated server support level (critical, fastpath, gs, pro)
     */
    supportLevel?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    /**
     * Boot id of the server
     */
    bootId?: pulumi.Input<number>;
    /**
     * Boot script of the server
     */
    bootScript?: pulumi.Input<string>;
    /**
     * OS reinstallation customizations
     */
    customizations?: pulumi.Input<inputs.Dedicated.ServerCustomizations>;
    /**
     * Resource display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * Path of the EFI bootloader
     */
    efiBootloaderPath?: pulumi.Input<string>;
    /**
     * Icmp monitoring state
     */
    monitoring?: pulumi.Input<boolean>;
    /**
     * Prevent datacenter intervention
     */
    noIntervention?: pulumi.Input<boolean>;
    /**
     * Operating system
     */
    os?: pulumi.Input<string>;
    /**
     * OVH subsidiaries
     */
    ovhSubsidiary?: pulumi.Input<string>;
    planOptions?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerPlanOption>[]>;
    plans?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerPlan>[]>;
    /**
     * Arbitrary properties to pass to cloud-init's config drive datasource
     */
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Rescue mail of the server
     */
    rescueMail?: pulumi.Input<string>;
    /**
     * Public SSH Key used in the rescue mode
     */
    rescueSshKey?: pulumi.Input<string>;
    /**
     * Root device of the server
     */
    rootDevice?: pulumi.Input<string>;
    /**
     * All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     */
    state?: pulumi.Input<string>;
    /**
     * OS reinstallation storage configurations
     */
    storages?: pulumi.Input<pulumi.Input<inputs.Dedicated.ServerStorage>[]>;
}
