// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a credential for an OVHcloud KMS.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 * import * as ovh from "@pulumi/ovh";
 *
 * const myaccount = ovh.Me.getMe({});
 * const credNoCsr = new ovh.okms.Credential("credNoCsr", {
 *     okmsId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
 *     identityUrns: [`urn:v1:eu:identity:account:${data.ovh_me.current_account.nichandle}`],
 *     description: "Credential without CSR",
 * });
 * const credFromCsr = new ovh.okms.Credential("credFromCsr", {
 *     okmsId: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
 *     identityUrns: [`urn:v1:eu:identity:account:${data.ovh_me.current_account.nichandle}`],
 *     csr: fs.readFileSync("cred.csr", "utf8"),
 *     description: "Credential from CSR",
 * });
 * ```
 */
export class Credential extends pulumi.CustomResource {
    /**
     * Get an existing Credential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CredentialState, opts?: pulumi.CustomResourceOptions): Credential {
        return new Credential(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Okms/credential:Credential';

    /**
     * Returns true if the given object is an instance of Credential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Credential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Credential.__pulumiType;
    }

    /**
     * (String) Certificate PEM of the credential.
     */
    public /*out*/ readonly certificatePem!: pulumi.Output<string>;
    /**
     * (String) Creation time of the credential
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Valid Certificate Signing Request
     */
    public readonly csr!: pulumi.Output<string>;
    /**
     * Description of the credential (max 200)
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * (String) Expiration time of the credential
     */
    public /*out*/ readonly expiredAt!: pulumi.Output<string>;
    /**
     * (Boolean) Whether the credential was generated from a CSR
     */
    public /*out*/ readonly fromCsr!: pulumi.Output<boolean>;
    /**
     * List of identity URNs associated with the credential (max 25)
     */
    public readonly identityUrns!: pulumi.Output<string[]>;
    /**
     * Name of the credential (max 50)
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Okms ID
     */
    public readonly okmsId!: pulumi.Output<string>;
    /**
     * (String, Sensitive) Private Key PEM of the credential if no CSR is provided
     */
    public /*out*/ readonly privateKeyPem!: pulumi.Output<string>;
    /**
     * (String) Status of the credential
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Validity in days (default 365, max 365)
     */
    public readonly validity!: pulumi.Output<number>;

    /**
     * Create a Credential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CredentialArgs | CredentialState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CredentialState | undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["csr"] = state ? state.csr : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["expiredAt"] = state ? state.expiredAt : undefined;
            resourceInputs["fromCsr"] = state ? state.fromCsr : undefined;
            resourceInputs["identityUrns"] = state ? state.identityUrns : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["okmsId"] = state ? state.okmsId : undefined;
            resourceInputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["validity"] = state ? state.validity : undefined;
        } else {
            const args = argsOrState as CredentialArgs | undefined;
            if ((!args || args.identityUrns === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityUrns'");
            }
            if ((!args || args.okmsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'okmsId'");
            }
            resourceInputs["csr"] = args ? args.csr : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["identityUrns"] = args ? args.identityUrns : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["okmsId"] = args ? args.okmsId : undefined;
            resourceInputs["validity"] = args ? args.validity : undefined;
            resourceInputs["certificatePem"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["expiredAt"] = undefined /*out*/;
            resourceInputs["fromCsr"] = undefined /*out*/;
            resourceInputs["privateKeyPem"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKeyPem"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Credential.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Credential resources.
 */
export interface CredentialState {
    /**
     * (String) Certificate PEM of the credential.
     */
    certificatePem?: pulumi.Input<string>;
    /**
     * (String) Creation time of the credential
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Valid Certificate Signing Request
     */
    csr?: pulumi.Input<string>;
    /**
     * Description of the credential (max 200)
     */
    description?: pulumi.Input<string>;
    /**
     * (String) Expiration time of the credential
     */
    expiredAt?: pulumi.Input<string>;
    /**
     * (Boolean) Whether the credential was generated from a CSR
     */
    fromCsr?: pulumi.Input<boolean>;
    /**
     * List of identity URNs associated with the credential (max 25)
     */
    identityUrns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the credential (max 50)
     */
    name?: pulumi.Input<string>;
    /**
     * Okms ID
     */
    okmsId?: pulumi.Input<string>;
    /**
     * (String, Sensitive) Private Key PEM of the credential if no CSR is provided
     */
    privateKeyPem?: pulumi.Input<string>;
    /**
     * (String) Status of the credential
     */
    status?: pulumi.Input<string>;
    /**
     * Validity in days (default 365, max 365)
     */
    validity?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Credential resource.
 */
export interface CredentialArgs {
    /**
     * Valid Certificate Signing Request
     */
    csr?: pulumi.Input<string>;
    /**
     * Description of the credential (max 200)
     */
    description?: pulumi.Input<string>;
    /**
     * List of identity URNs associated with the credential (max 25)
     */
    identityUrns: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the credential (max 50)
     */
    name?: pulumi.Input<string>;
    /**
     * Okms ID
     */
    okmsId: pulumi.Input<string>;
    /**
     * Validity in days (default 365, max 365)
     */
    validity?: pulumi.Input<number>;
}
