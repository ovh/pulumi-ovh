// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Import an existing key in the JWK format in an OVHcloud KMS.
 */
export class ServiceKeyJWK extends pulumi.CustomResource {
    /**
     * Get an existing ServiceKeyJWK resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceKeyJWKState, opts?: pulumi.CustomResourceOptions): ServiceKeyJWK {
        return new ServiceKeyJWK(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Okms/serviceKeyJWK:ServiceKeyJWK';

    /**
     * Returns true if the given object is an instance of ServiceKeyJWK.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceKeyJWK {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceKeyJWK.__pulumiType;
    }

    /**
     * Context of the key
     */
    public readonly context!: pulumi.Output<string | undefined>;
    /**
     * Creation time of the key
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Key deactivation reason
     */
    public /*out*/ readonly deactivationReason!: pulumi.Output<string>;
    /**
     * IAM resource metadata
     */
    public /*out*/ readonly iam!: pulumi.Output<outputs.Okms.ServiceKeyJWKIam>;
    /**
     * Set of JSON Web Keys to import
     */
    public readonly keys!: pulumi.Output<outputs.Okms.ServiceKeyJWKKey[]>;
    /**
     * Key name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Okms ID
     */
    public readonly okmsId!: pulumi.Output<string>;
    /**
     * Size of the key to be created
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * State of the key
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Type of the key to be created
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ServiceKeyJWK resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceKeyJWKArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceKeyJWKArgs | ServiceKeyJWKState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceKeyJWKState | undefined;
            resourceInputs["context"] = state ? state.context : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deactivationReason"] = state ? state.deactivationReason : undefined;
            resourceInputs["iam"] = state ? state.iam : undefined;
            resourceInputs["keys"] = state ? state.keys : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["okmsId"] = state ? state.okmsId : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ServiceKeyJWKArgs | undefined;
            if ((!args || args.keys === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keys'");
            }
            if ((!args || args.okmsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'okmsId'");
            }
            resourceInputs["context"] = args ? args.context : undefined;
            resourceInputs["keys"] = args ? args.keys : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["okmsId"] = args ? args.okmsId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["deactivationReason"] = undefined /*out*/;
            resourceInputs["iam"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceKeyJWK.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceKeyJWK resources.
 */
export interface ServiceKeyJWKState {
    /**
     * Context of the key
     */
    context?: pulumi.Input<string>;
    /**
     * Creation time of the key
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Key deactivation reason
     */
    deactivationReason?: pulumi.Input<string>;
    /**
     * IAM resource metadata
     */
    iam?: pulumi.Input<inputs.Okms.ServiceKeyJWKIam>;
    /**
     * Set of JSON Web Keys to import
     */
    keys?: pulumi.Input<pulumi.Input<inputs.Okms.ServiceKeyJWKKey>[]>;
    /**
     * Key name
     */
    name?: pulumi.Input<string>;
    /**
     * Okms ID
     */
    okmsId?: pulumi.Input<string>;
    /**
     * Size of the key to be created
     */
    size?: pulumi.Input<number>;
    /**
     * State of the key
     */
    state?: pulumi.Input<string>;
    /**
     * Type of the key to be created
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceKeyJWK resource.
 */
export interface ServiceKeyJWKArgs {
    /**
     * Context of the key
     */
    context?: pulumi.Input<string>;
    /**
     * Set of JSON Web Keys to import
     */
    keys: pulumi.Input<pulumi.Input<inputs.Okms.ServiceKeyJWKKey>[]>;
    /**
     * Key name
     */
    name?: pulumi.Input<string>;
    /**
     * Okms ID
     */
    okmsId: pulumi.Input<string>;
}
