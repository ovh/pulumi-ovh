// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Create a SSH key in the given public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const key = new ovh.CloudProjectSshKey("key", {
 *     serviceName: "<public cloud project ID>",
 *     publicKey: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC9xPpdqP3sx2H+gcBm65tJEaUbuifQ1uGkgrWtNY0PRKNNPdy+3yoVOtxk6Vjo4YZ0EU/JhmQfnrK7X7Q5vhqYxmozi0LiTRt0BxgqHJ+4hWTWMIOgr+C2jLx7ZsCReRk+fy5AHr6h0PHQEuXVLXeUy/TDyuY2JPtUZ5jcqvLYgQ== my-key",
 *     name: "new_key",
 * });
 * ```
 */
export class CloudProjectSshKey extends pulumi.CustomResource {
    /**
     * Get an existing CloudProjectSshKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudProjectSshKeyState, opts?: pulumi.CustomResourceOptions): CloudProjectSshKey {
        return new CloudProjectSshKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/cloudProjectSshKey:CloudProjectSshKey';

    /**
     * Returns true if the given object is an instance of CloudProjectSshKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudProjectSshKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProjectSshKey.__pulumiType;
    }

    /**
     * SSH key fingerprint
     */
    public /*out*/ readonly fingerPrint!: pulumi.Output<string>;
    /**
     * SSH key name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * SSH public key
     */
    public readonly publicKey!: pulumi.Output<string>;
    /**
     * Region to create SSH key
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * SSH key regions
     */
    public /*out*/ readonly regions!: pulumi.Output<string[]>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a CloudProjectSshKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudProjectSshKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudProjectSshKeyArgs | CloudProjectSshKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudProjectSshKeyState | undefined;
            resourceInputs["fingerPrint"] = state ? state.fingerPrint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as CloudProjectSshKeyArgs | undefined;
            if ((!args || args.publicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["fingerPrint"] = undefined /*out*/;
            resourceInputs["regions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudProjectSshKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudProjectSshKey resources.
 */
export interface CloudProjectSshKeyState {
    /**
     * SSH key fingerprint
     */
    fingerPrint?: pulumi.Input<string>;
    /**
     * SSH key name
     */
    name?: pulumi.Input<string>;
    /**
     * SSH public key
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Region to create SSH key
     */
    region?: pulumi.Input<string>;
    /**
     * SSH key regions
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudProjectSshKey resource.
 */
export interface CloudProjectSshKeyArgs {
    /**
     * SSH key name
     */
    name?: pulumi.Input<string>;
    /**
     * SSH public key
     */
    publicKey: pulumi.Input<string>;
    /**
     * Region to create SSH key
     */
    region?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
}
