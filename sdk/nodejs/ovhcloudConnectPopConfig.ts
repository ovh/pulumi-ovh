// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a pop configuration for an Ovhcloud Connect product.
 *
 * Please take a look at the list of available `types` in the `Required` section in order to know the list of available type configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const occ = ovh.OVHcloud.Connect({
 *     serviceName: "XXX",
 * });
 * const pop = new ovh.OvhcloudConnectPopConfig("pop", {
 *     serviceName: occ.then(occ => occ.serviceName),
 *     interfaceId: occ.then(occ => occ.interfaceLists?.[0]),
 *     type: "l3",
 *     customerBgpArea: 65400,
 *     ovhBgpArea: 65401,
 *     subnet: "I.I.I.I/30",
 * });
 * ```
 */
export class OvhcloudConnectPopConfig extends pulumi.CustomResource {
    /**
     * Get an existing OvhcloudConnectPopConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OvhcloudConnectPopConfigState, opts?: pulumi.CustomResourceOptions): OvhcloudConnectPopConfig {
        return new OvhcloudConnectPopConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/ovhcloudConnectPopConfig:OvhcloudConnectPopConfig';

    /**
     * Returns true if the given object is an instance of OvhcloudConnectPopConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OvhcloudConnectPopConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OvhcloudConnectPopConfig.__pulumiType;
    }

    /**
     * Customer Private AS
     */
    public readonly customerBgpArea!: pulumi.Output<number>;
    /**
     * ID of the interface
     */
    public readonly interfaceId!: pulumi.Output<number>;
    /**
     * OVH Private AS
     */
    public readonly ovhBgpArea!: pulumi.Output<number>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Status of the pop configuration
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Subnet should be a /30, first IP for OVH, second IP for customer
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * Type of the pop configuration
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OvhcloudConnectPopConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OvhcloudConnectPopConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OvhcloudConnectPopConfigArgs | OvhcloudConnectPopConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OvhcloudConnectPopConfigState | undefined;
            resourceInputs["customerBgpArea"] = state ? state.customerBgpArea : undefined;
            resourceInputs["interfaceId"] = state ? state.interfaceId : undefined;
            resourceInputs["ovhBgpArea"] = state ? state.ovhBgpArea : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OvhcloudConnectPopConfigArgs | undefined;
            if ((!args || args.interfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interfaceId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["customerBgpArea"] = args ? args.customerBgpArea : undefined;
            resourceInputs["interfaceId"] = args ? args.interfaceId : undefined;
            resourceInputs["ovhBgpArea"] = args ? args.ovhBgpArea : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OvhcloudConnectPopConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OvhcloudConnectPopConfig resources.
 */
export interface OvhcloudConnectPopConfigState {
    /**
     * Customer Private AS
     */
    customerBgpArea?: pulumi.Input<number>;
    /**
     * ID of the interface
     */
    interfaceId?: pulumi.Input<number>;
    /**
     * OVH Private AS
     */
    ovhBgpArea?: pulumi.Input<number>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Status of the pop configuration
     */
    status?: pulumi.Input<string>;
    /**
     * Subnet should be a /30, first IP for OVH, second IP for customer
     */
    subnet?: pulumi.Input<string>;
    /**
     * Type of the pop configuration
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OvhcloudConnectPopConfig resource.
 */
export interface OvhcloudConnectPopConfigArgs {
    /**
     * Customer Private AS
     */
    customerBgpArea?: pulumi.Input<number>;
    /**
     * ID of the interface
     */
    interfaceId: pulumi.Input<number>;
    /**
     * OVH Private AS
     */
    ovhBgpArea?: pulumi.Input<number>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Subnet should be a /30, first IP for OVH, second IP for customer
     */
    subnet?: pulumi.Input<string>;
    /**
     * Type of the pop configuration
     */
    type: pulumi.Input<string>;
}
