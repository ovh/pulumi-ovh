// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 * import * as time from "@pulumi/time";
 *
 * const efs = ovh.getStorageEfs({
 *     serviceName: "XXX",
 * });
 * // This resource will destroy (at least) 10 seconds after ovh_storage_efs_share_snapshot resource
 * const share = new ovh.StorageEfsShare("share", {
 *     serviceName: efs.then(efs => efs.serviceName),
 *     name: "share",
 *     description: "My share",
 *     protocol: "NFS",
 *     size: 100,
 * });
 * // This resource adds a delay between ovh_storage_efs_share_snapshot and ovh_storage_efs_share resources destruction
 * const wait10Seconds = new time.index.Sleep("wait_10_seconds", {destroyDuration: "10s"}, {
 *     dependsOn: [share],
 * });
 * const snapshot = new ovh.StorageEfsShareSnapshot("snapshot", {
 *     serviceName: efs.then(efs => efs.serviceName),
 *     shareId: share.id,
 *     name: "snapshot",
 *     description: "My snapshot",
 * }, {
 *     dependsOn: [wait10Seconds],
 * });
 * ```
 */
export class StorageEfsShareSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing StorageEfsShareSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StorageEfsShareSnapshotState, opts?: pulumi.CustomResourceOptions): StorageEfsShareSnapshot {
        return new StorageEfsShareSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/storageEfsShareSnapshot:StorageEfsShareSnapshot';

    /**
     * Returns true if the given object is an instance of StorageEfsShareSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageEfsShareSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageEfsShareSnapshot.__pulumiType;
    }

    /**
     * Snapshot creation date
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Snapshot description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Snapshot name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Snapshot path
     */
    public /*out*/ readonly path!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Share ID
     */
    public readonly shareId!: pulumi.Output<string>;
    /**
     * Snapshot status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Snapshot type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a StorageEfsShareSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageEfsShareSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageEfsShareSnapshotArgs | StorageEfsShareSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StorageEfsShareSnapshotState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["shareId"] = state ? state.shareId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as StorageEfsShareSnapshotArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.shareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shareId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["shareId"] = args ? args.shareId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["path"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StorageEfsShareSnapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StorageEfsShareSnapshot resources.
 */
export interface StorageEfsShareSnapshotState {
    /**
     * Snapshot creation date
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Snapshot description
     */
    description?: pulumi.Input<string>;
    /**
     * Snapshot name
     */
    name?: pulumi.Input<string>;
    /**
     * Snapshot path
     */
    path?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Share ID
     */
    shareId?: pulumi.Input<string>;
    /**
     * Snapshot status
     */
    status?: pulumi.Input<string>;
    /**
     * Snapshot type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StorageEfsShareSnapshot resource.
 */
export interface StorageEfsShareSnapshotArgs {
    /**
     * Snapshot description
     */
    description?: pulumi.Input<string>;
    /**
     * Snapshot name
     */
    name?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Share ID
     */
    shareId: pulumi.Input<string>;
}
