// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class NetworkPrivateSubnetV2 extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPrivateSubnetV2 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPrivateSubnetV2State, opts?: pulumi.CustomResourceOptions): NetworkPrivateSubnetV2 {
        return new NetworkPrivateSubnetV2(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2';

    /**
     * Returns true if the given object is an instance of NetworkPrivateSubnetV2.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPrivateSubnetV2 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPrivateSubnetV2.__pulumiType;
    }

    /**
     * DHCP allocation pools of subnet
     */
    public readonly allocationPools!: pulumi.Output<outputs.CloudProject.NetworkPrivateSubnetV2AllocationPool[]>;
    /**
     * CIDR of subnet
     */
    public readonly cidr!: pulumi.Output<string>;
    /**
     * Enable DHCP in subnet
     */
    public readonly dhcp!: pulumi.Output<boolean | undefined>;
    /**
     * List of DNS nameservers, default: 213.186.33.99
     */
    public readonly dnsNameservers!: pulumi.Output<string[]>;
    /**
     * Enable gateway IP in subnet
     */
    public readonly enableGatewayIp!: pulumi.Output<boolean | undefined>;
    /**
     * Gateway IP of subnet
     */
    public readonly gatewayIp!: pulumi.Output<string>;
    /**
     * Static host routes of subnet
     */
    public readonly hostRoutes!: pulumi.Output<outputs.CloudProject.NetworkPrivateSubnetV2HostRoute[] | undefined>;
    /**
     * Name of subnet
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network ID of subnet
     */
    public readonly networkId!: pulumi.Output<string>;
    /**
     * Region of network/subnet
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Use OVH default DNS
     */
    public readonly useDefaultPublicDnsResolver!: pulumi.Output<boolean | undefined>;

    /**
     * Create a NetworkPrivateSubnetV2 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPrivateSubnetV2Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPrivateSubnetV2Args | NetworkPrivateSubnetV2State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NetworkPrivateSubnetV2State | undefined;
            resourceInputs["allocationPools"] = state ? state.allocationPools : undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["dhcp"] = state ? state.dhcp : undefined;
            resourceInputs["dnsNameservers"] = state ? state.dnsNameservers : undefined;
            resourceInputs["enableGatewayIp"] = state ? state.enableGatewayIp : undefined;
            resourceInputs["gatewayIp"] = state ? state.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = state ? state.hostRoutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkId"] = state ? state.networkId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["useDefaultPublicDnsResolver"] = state ? state.useDefaultPublicDnsResolver : undefined;
        } else {
            const args = argsOrState as NetworkPrivateSubnetV2Args | undefined;
            if ((!args || args.cidr === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidr'");
            }
            if ((!args || args.networkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkId'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["allocationPools"] = args ? args.allocationPools : undefined;
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["dhcp"] = args ? args.dhcp : undefined;
            resourceInputs["dnsNameservers"] = args ? args.dnsNameservers : undefined;
            resourceInputs["enableGatewayIp"] = args ? args.enableGatewayIp : undefined;
            resourceInputs["gatewayIp"] = args ? args.gatewayIp : undefined;
            resourceInputs["hostRoutes"] = args ? args.hostRoutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkId"] = args ? args.networkId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["useDefaultPublicDnsResolver"] = args ? args.useDefaultPublicDnsResolver : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkPrivateSubnetV2.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPrivateSubnetV2 resources.
 */
export interface NetworkPrivateSubnetV2State {
    /**
     * DHCP allocation pools of subnet
     */
    allocationPools?: pulumi.Input<pulumi.Input<inputs.CloudProject.NetworkPrivateSubnetV2AllocationPool>[]>;
    /**
     * CIDR of subnet
     */
    cidr?: pulumi.Input<string>;
    /**
     * Enable DHCP in subnet
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * List of DNS nameservers, default: 213.186.33.99
     */
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable gateway IP in subnet
     */
    enableGatewayIp?: pulumi.Input<boolean>;
    /**
     * Gateway IP of subnet
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Static host routes of subnet
     */
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.CloudProject.NetworkPrivateSubnetV2HostRoute>[]>;
    /**
     * Name of subnet
     */
    name?: pulumi.Input<string>;
    /**
     * Network ID of subnet
     */
    networkId?: pulumi.Input<string>;
    /**
     * Region of network/subnet
     */
    region?: pulumi.Input<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Use OVH default DNS
     */
    useDefaultPublicDnsResolver?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NetworkPrivateSubnetV2 resource.
 */
export interface NetworkPrivateSubnetV2Args {
    /**
     * DHCP allocation pools of subnet
     */
    allocationPools?: pulumi.Input<pulumi.Input<inputs.CloudProject.NetworkPrivateSubnetV2AllocationPool>[]>;
    /**
     * CIDR of subnet
     */
    cidr: pulumi.Input<string>;
    /**
     * Enable DHCP in subnet
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * List of DNS nameservers, default: 213.186.33.99
     */
    dnsNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable gateway IP in subnet
     */
    enableGatewayIp?: pulumi.Input<boolean>;
    /**
     * Gateway IP of subnet
     */
    gatewayIp?: pulumi.Input<string>;
    /**
     * Static host routes of subnet
     */
    hostRoutes?: pulumi.Input<pulumi.Input<inputs.CloudProject.NetworkPrivateSubnetV2HostRoute>[]>;
    /**
     * Name of subnet
     */
    name?: pulumi.Input<string>;
    /**
     * Network ID of subnet
     */
    networkId: pulumi.Input<string>;
    /**
     * Region of network/subnet
     */
    region: pulumi.Input<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Use OVH default DNS
     */
    useDefaultPublicDnsResolver?: pulumi.Input<boolean>;
}
