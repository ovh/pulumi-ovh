// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Create volume in a public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vol = new ovh.cloudproject.Volume("vol", {
 *     regionName: "xxx",
 *     serviceName: "yyyyy",
 *     description: "Terraform volume",
 *     name: "terrformName",
 *     size: 15,
 *     type: "classic",
 * });
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    /**
     * The action of the operation
     */
    public /*out*/ readonly action!: pulumi.Output<string>;
    /**
     * The completed date of the operation
     */
    public /*out*/ readonly completedAt!: pulumi.Output<string>;
    /**
     * The creation date of the operation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A description of the volume
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Image ID
     */
    public readonly imageId!: pulumi.Output<string>;
    /**
     * Instance ID
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Name of the volume
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Volume status
     */
    public /*out*/ readonly progress!: pulumi.Output<number>;
    /**
     * Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: "GRA11". **Changing this value recreates the resource.**
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * List of regions
     */
    public /*out*/ readonly regions!: pulumi.Output<string[]>;
    /**
     * Id of the resource
     */
    public /*out*/ readonly resourceId!: pulumi.Output<string>;
    /**
     * Required. The id of the public cloud project. **Changing this value recreates the resource.**
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Size (GB) of the volume
     */
    public readonly size!: pulumi.Output<number>;
    /**
     * Snapshot ID
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * Datetime of the operation creation
     */
    public /*out*/ readonly startedAt!: pulumi.Output<string>;
    /**
     * Volume status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Sub-operations of the operation
     */
    public /*out*/ readonly subOperations!: pulumi.Output<outputs.CloudProject.VolumeSubOperation[]>;
    /**
     * Type of the volume **Changing this value recreates the resource.**
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * Volume ID
     */
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["completedAt"] = state ? state.completedAt : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["imageId"] = state ? state.imageId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["startedAt"] = state ? state.startedAt : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subOperations"] = state ? state.subOperations : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageId"] = args ? args.imageId : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["action"] = undefined /*out*/;
            resourceInputs["completedAt"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["regions"] = undefined /*out*/;
            resourceInputs["resourceId"] = undefined /*out*/;
            resourceInputs["startedAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subOperations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    /**
     * The action of the operation
     */
    action?: pulumi.Input<string>;
    /**
     * The completed date of the operation
     */
    completedAt?: pulumi.Input<string>;
    /**
     * The creation date of the operation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * A description of the volume
     */
    description?: pulumi.Input<string>;
    /**
     * Image ID
     */
    imageId?: pulumi.Input<string>;
    /**
     * Instance ID
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Name of the volume
     */
    name?: pulumi.Input<string>;
    /**
     * Volume status
     */
    progress?: pulumi.Input<number>;
    /**
     * Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: "GRA11". **Changing this value recreates the resource.**
     */
    regionName?: pulumi.Input<string>;
    /**
     * List of regions
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Id of the resource
     */
    resourceId?: pulumi.Input<string>;
    /**
     * Required. The id of the public cloud project. **Changing this value recreates the resource.**
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Size (GB) of the volume
     */
    size?: pulumi.Input<number>;
    /**
     * Snapshot ID
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Datetime of the operation creation
     */
    startedAt?: pulumi.Input<string>;
    /**
     * Volume status
     */
    status?: pulumi.Input<string>;
    /**
     * Sub-operations of the operation
     */
    subOperations?: pulumi.Input<pulumi.Input<inputs.CloudProject.VolumeSubOperation>[]>;
    /**
     * Type of the volume **Changing this value recreates the resource.**
     */
    type?: pulumi.Input<string>;
    /**
     * Volume ID
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    /**
     * A description of the volume
     */
    description?: pulumi.Input<string>;
    /**
     * Image ID
     */
    imageId?: pulumi.Input<string>;
    /**
     * Instance ID
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Name of the volume
     */
    name?: pulumi.Input<string>;
    /**
     * Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: "GRA11". **Changing this value recreates the resource.**
     */
    regionName: pulumi.Input<string>;
    /**
     * Required. The id of the public cloud project. **Changing this value recreates the resource.**
     */
    serviceName: pulumi.Input<string>;
    /**
     * Size (GB) of the volume
     */
    size?: pulumi.Input<number>;
    /**
     * Snapshot ID
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * Type of the volume **Changing this value recreates the resource.**
     */
    type?: pulumi.Input<string>;
    /**
     * Volume ID
     */
    volumeId?: pulumi.Input<string>;
}
