// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Database extends pulumi.CustomResource {
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DatabaseState, opts?: pulumi.CustomResourceOptions): Database {
        return new Database(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/database:Database';

    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Database {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }

    /**
     * Advanced configuration key / value
     */
    public readonly advancedConfiguration!: pulumi.Output<{[key: string]: string}>;
    /**
     * List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
     * engines with one being the same as the nodes[].region field
     */
    public readonly backupRegions!: pulumi.Output<string[]>;
    /**
     * Time on which backups start every day
     */
    public readonly backupTime!: pulumi.Output<string>;
    /**
     * Date of the creation of the cluster
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the cluster
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Disk size attributes of the cluster
     */
    public readonly diskSize!: pulumi.Output<number>;
    /**
     * Disk type attributes of the cluster
     */
    public /*out*/ readonly diskType!: pulumi.Output<string>;
    /**
     * List of all endpoints of the service
     */
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.CloudProject.DatabaseEndpoint[]>;
    /**
     * Name of the engine of the service
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * The node flavor used for this cluster
     */
    public readonly flavor!: pulumi.Output<string>;
    /**
     * IP Blocks authorized to access to the cluster
     */
    public readonly ipRestrictions!: pulumi.Output<outputs.CloudProject.DatabaseIpRestriction[] | undefined>;
    /**
     * Defines whether the REST API is enabled on a Kafka cluster
     */
    public readonly kafkaRestApi!: pulumi.Output<boolean | undefined>;
    /**
     * Defines whether the schema registry is enabled on a Kafka cluster
     */
    public readonly kafkaSchemaRegistry!: pulumi.Output<boolean | undefined>;
    /**
     * Time on which maintenances can start every day
     */
    public readonly maintenanceTime!: pulumi.Output<string>;
    /**
     * Type of network of the cluster
     */
    public /*out*/ readonly networkType!: pulumi.Output<string>;
    /**
     * List of nodes composing the service
     */
    public readonly nodes!: pulumi.Output<outputs.CloudProject.DatabaseNode[]>;
    /**
     * Defines whether the ACLs are enabled on an Opensearch cluster
     */
    public readonly opensearchAclsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Plan of the cluster
     */
    public readonly plan!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Current status of the cluster
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Version of the engine deployed on the cluster
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a Database resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DatabaseArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DatabaseArgs | DatabaseState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DatabaseState | undefined;
            resourceInputs["advancedConfiguration"] = state ? state.advancedConfiguration : undefined;
            resourceInputs["backupRegions"] = state ? state.backupRegions : undefined;
            resourceInputs["backupTime"] = state ? state.backupTime : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskSize"] = state ? state.diskSize : undefined;
            resourceInputs["diskType"] = state ? state.diskType : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["ipRestrictions"] = state ? state.ipRestrictions : undefined;
            resourceInputs["kafkaRestApi"] = state ? state.kafkaRestApi : undefined;
            resourceInputs["kafkaSchemaRegistry"] = state ? state.kafkaSchemaRegistry : undefined;
            resourceInputs["maintenanceTime"] = state ? state.maintenanceTime : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["opensearchAclsEnabled"] = state ? state.opensearchAclsEnabled : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DatabaseArgs | undefined;
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.flavor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavor'");
            }
            if ((!args || args.nodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodes'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["advancedConfiguration"] = args ? args.advancedConfiguration : undefined;
            resourceInputs["backupRegions"] = args ? args.backupRegions : undefined;
            resourceInputs["backupTime"] = args ? args.backupTime : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskSize"] = args ? args.diskSize : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["flavor"] = args ? args.flavor : undefined;
            resourceInputs["ipRestrictions"] = args ? args.ipRestrictions : undefined;
            resourceInputs["kafkaRestApi"] = args ? args.kafkaRestApi : undefined;
            resourceInputs["kafkaSchemaRegistry"] = args ? args.kafkaSchemaRegistry : undefined;
            resourceInputs["maintenanceTime"] = args ? args.maintenanceTime : undefined;
            resourceInputs["nodes"] = args ? args.nodes : undefined;
            resourceInputs["opensearchAclsEnabled"] = args ? args.opensearchAclsEnabled : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["diskType"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["networkType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Database resources.
 */
export interface DatabaseState {
    /**
     * Advanced configuration key / value
     */
    advancedConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
     * engines with one being the same as the nodes[].region field
     */
    backupRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time on which backups start every day
     */
    backupTime?: pulumi.Input<string>;
    /**
     * Date of the creation of the cluster
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Disk size attributes of the cluster
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Disk type attributes of the cluster
     */
    diskType?: pulumi.Input<string>;
    /**
     * List of all endpoints of the service
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.CloudProject.DatabaseEndpoint>[]>;
    /**
     * Name of the engine of the service
     */
    engine?: pulumi.Input<string>;
    /**
     * The node flavor used for this cluster
     */
    flavor?: pulumi.Input<string>;
    /**
     * IP Blocks authorized to access to the cluster
     */
    ipRestrictions?: pulumi.Input<pulumi.Input<inputs.CloudProject.DatabaseIpRestriction>[]>;
    /**
     * Defines whether the REST API is enabled on a Kafka cluster
     */
    kafkaRestApi?: pulumi.Input<boolean>;
    /**
     * Defines whether the schema registry is enabled on a Kafka cluster
     */
    kafkaSchemaRegistry?: pulumi.Input<boolean>;
    /**
     * Time on which maintenances can start every day
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * Type of network of the cluster
     */
    networkType?: pulumi.Input<string>;
    /**
     * List of nodes composing the service
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.CloudProject.DatabaseNode>[]>;
    /**
     * Defines whether the ACLs are enabled on an Opensearch cluster
     */
    opensearchAclsEnabled?: pulumi.Input<boolean>;
    /**
     * Plan of the cluster
     */
    plan?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    /**
     * Current status of the cluster
     */
    status?: pulumi.Input<string>;
    /**
     * Version of the engine deployed on the cluster
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Database resource.
 */
export interface DatabaseArgs {
    /**
     * Advanced configuration key / value
     */
    advancedConfiguration?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
     * engines with one being the same as the nodes[].region field
     */
    backupRegions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Time on which backups start every day
     */
    backupTime?: pulumi.Input<string>;
    /**
     * Description of the cluster
     */
    description?: pulumi.Input<string>;
    /**
     * Disk size attributes of the cluster
     */
    diskSize?: pulumi.Input<number>;
    /**
     * Name of the engine of the service
     */
    engine: pulumi.Input<string>;
    /**
     * The node flavor used for this cluster
     */
    flavor: pulumi.Input<string>;
    /**
     * IP Blocks authorized to access to the cluster
     */
    ipRestrictions?: pulumi.Input<pulumi.Input<inputs.CloudProject.DatabaseIpRestriction>[]>;
    /**
     * Defines whether the REST API is enabled on a Kafka cluster
     */
    kafkaRestApi?: pulumi.Input<boolean>;
    /**
     * Defines whether the schema registry is enabled on a Kafka cluster
     */
    kafkaSchemaRegistry?: pulumi.Input<boolean>;
    /**
     * Time on which maintenances can start every day
     */
    maintenanceTime?: pulumi.Input<string>;
    /**
     * List of nodes composing the service
     */
    nodes: pulumi.Input<pulumi.Input<inputs.CloudProject.DatabaseNode>[]>;
    /**
     * Defines whether the ACLs are enabled on an Opensearch cluster
     */
    opensearchAclsEnabled?: pulumi.Input<boolean>;
    /**
     * Plan of the cluster
     */
    plan: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    /**
     * Version of the engine deployed on the cluster
     */
    version: pulumi.Input<string>;
}
