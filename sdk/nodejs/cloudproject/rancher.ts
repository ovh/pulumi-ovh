// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manage a Rancher service in a public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const rancher = new ovh.cloudproject.Rancher("rancher", {
 *     projectId: "<public cloud project ID>",
 *     targetSpec: {
 *         name: "MyRancher",
 *         plan: "STANDARD",
 *     },
 * });
 * export const rancherUrl = rancher.currentState.apply(currentState => currentState.url);
 * ```
 *
 * ## Import
 *
 * A share in a public cloud project can be imported using the `project_id` and `id` attributes. Using the following configuration:
 *
 * terraform
 *
 * import {
 *
 *   id = "<project_id>/<id>"
 *
 *   to = ovh_cloud_project_rancher.rancher
 *
 * }
 *
 * You can then run:
 *
 * bash
 *
 * $ pulumi preview -generate-config-out=rancher.tf
 *
 * $ pulumi up
 *
 * The file `rancher.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
 */
export class Rancher extends pulumi.CustomResource {
    /**
     * Get an existing Rancher resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RancherState, opts?: pulumi.CustomResourceOptions): Rancher {
        return new Rancher(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/rancher:Rancher';

    /**
     * Returns true if the given object is an instance of Rancher.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rancher {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rancher.__pulumiType;
    }

    /**
     * Date of the managed Rancher service creation
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Current configuration applied to the managed Rancher service
     */
    public /*out*/ readonly currentState!: pulumi.Output<outputs.CloudProject.RancherCurrentState>;
    /**
     * Asynchronous operations ongoing on the managed Rancher service
     */
    public /*out*/ readonly currentTasks!: pulumi.Output<outputs.CloudProject.RancherCurrentTask[]>;
    /**
     * Project ID
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
     */
    public /*out*/ readonly resourceStatus!: pulumi.Output<string>;
    /**
     * Target specification for the managed Rancher service
     */
    public readonly targetSpec!: pulumi.Output<outputs.CloudProject.RancherTargetSpec>;
    /**
     * Date of the last managed Rancher service update
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Rancher resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RancherArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RancherArgs | RancherState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RancherState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["currentState"] = state ? state.currentState : undefined;
            resourceInputs["currentTasks"] = state ? state.currentTasks : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["resourceStatus"] = state ? state.resourceStatus : undefined;
            resourceInputs["targetSpec"] = state ? state.targetSpec : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as RancherArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.targetSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSpec'");
            }
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["targetSpec"] = args ? args.targetSpec : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currentState"] = undefined /*out*/;
            resourceInputs["currentTasks"] = undefined /*out*/;
            resourceInputs["resourceStatus"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rancher.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rancher resources.
 */
export interface RancherState {
    /**
     * Date of the managed Rancher service creation
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Current configuration applied to the managed Rancher service
     */
    currentState?: pulumi.Input<inputs.CloudProject.RancherCurrentState>;
    /**
     * Asynchronous operations ongoing on the managed Rancher service
     */
    currentTasks?: pulumi.Input<pulumi.Input<inputs.CloudProject.RancherCurrentTask>[]>;
    /**
     * Project ID
     */
    projectId?: pulumi.Input<string>;
    /**
     * Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
     */
    resourceStatus?: pulumi.Input<string>;
    /**
     * Target specification for the managed Rancher service
     */
    targetSpec?: pulumi.Input<inputs.CloudProject.RancherTargetSpec>;
    /**
     * Date of the last managed Rancher service update
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Rancher resource.
 */
export interface RancherArgs {
    /**
     * Project ID
     */
    projectId: pulumi.Input<string>;
    /**
     * Target specification for the managed Rancher service
     */
    targetSpec: pulumi.Input<inputs.CloudProject.RancherTargetSpec>;
}
