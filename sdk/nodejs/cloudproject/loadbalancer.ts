// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class Loadbalancer extends pulumi.CustomResource {
    /**
     * Get an existing Loadbalancer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadbalancerState, opts?: pulumi.CustomResourceOptions): Loadbalancer {
        return new Loadbalancer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/loadbalancer:Loadbalancer';

    /**
     * Returns true if the given object is an instance of Loadbalancer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Loadbalancer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Loadbalancer.__pulumiType;
    }

    /**
     * The UTC date and timestamp when the resource was created
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the loadbalancer
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Loadbalancer flavor id
     */
    public readonly flavorId!: pulumi.Output<string>;
    /**
     * Information about floating IP
     */
    public /*out*/ readonly floatingIp!: pulumi.Output<outputs.CloudProject.LoadbalancerFloatingIp>;
    /**
     * Listeners to create with the loadbalancer
     */
    public readonly listeners!: pulumi.Output<outputs.CloudProject.LoadbalancerListener[] | undefined>;
    /**
     * Name of the resource
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network information to create the loadbalancer
     */
    public readonly network!: pulumi.Output<outputs.CloudProject.LoadbalancerNetwork>;
    /**
     * Operating status of the resource
     */
    public /*out*/ readonly operatingStatus!: pulumi.Output<string>;
    /**
     * Provisioning status of the resource
     */
    public /*out*/ readonly provisioningStatus!: pulumi.Output<string>;
    /**
     * Region of the resource
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Region name
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * UTC date and timestamp when the resource was created
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * IP address of the Virtual IP
     */
    public /*out*/ readonly vipAddress!: pulumi.Output<string>;
    /**
     * Openstack ID of the network for the Virtual IP
     */
    public /*out*/ readonly vipNetworkId!: pulumi.Output<string>;
    /**
     * ID of the subnet for the Virtual IP
     */
    public /*out*/ readonly vipSubnetId!: pulumi.Output<string>;

    /**
     * Create a Loadbalancer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadbalancerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadbalancerArgs | LoadbalancerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadbalancerState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flavorId"] = state ? state.flavorId : undefined;
            resourceInputs["floatingIp"] = state ? state.floatingIp : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["network"] = state ? state.network : undefined;
            resourceInputs["operatingStatus"] = state ? state.operatingStatus : undefined;
            resourceInputs["provisioningStatus"] = state ? state.provisioningStatus : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vipAddress"] = state ? state.vipAddress : undefined;
            resourceInputs["vipNetworkId"] = state ? state.vipNetworkId : undefined;
            resourceInputs["vipSubnetId"] = state ? state.vipSubnetId : undefined;
        } else {
            const args = argsOrState as LoadbalancerArgs | undefined;
            if ((!args || args.flavorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorId'");
            }
            if ((!args || args.network === undefined) && !opts.urn) {
                throw new Error("Missing required property 'network'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flavorId"] = args ? args.flavorId : undefined;
            resourceInputs["listeners"] = args ? args.listeners : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["network"] = args ? args.network : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["floatingIp"] = undefined /*out*/;
            resourceInputs["operatingStatus"] = undefined /*out*/;
            resourceInputs["provisioningStatus"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vipAddress"] = undefined /*out*/;
            resourceInputs["vipNetworkId"] = undefined /*out*/;
            resourceInputs["vipSubnetId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Loadbalancer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Loadbalancer resources.
 */
export interface LoadbalancerState {
    /**
     * The UTC date and timestamp when the resource was created
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the loadbalancer
     */
    description?: pulumi.Input<string>;
    /**
     * Loadbalancer flavor id
     */
    flavorId?: pulumi.Input<string>;
    /**
     * Information about floating IP
     */
    floatingIp?: pulumi.Input<inputs.CloudProject.LoadbalancerFloatingIp>;
    /**
     * Listeners to create with the loadbalancer
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.CloudProject.LoadbalancerListener>[]>;
    /**
     * Name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * Network information to create the loadbalancer
     */
    network?: pulumi.Input<inputs.CloudProject.LoadbalancerNetwork>;
    /**
     * Operating status of the resource
     */
    operatingStatus?: pulumi.Input<string>;
    /**
     * Provisioning status of the resource
     */
    provisioningStatus?: pulumi.Input<string>;
    /**
     * Region of the resource
     */
    region?: pulumi.Input<string>;
    /**
     * Region name
     */
    regionName?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * UTC date and timestamp when the resource was created
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * IP address of the Virtual IP
     */
    vipAddress?: pulumi.Input<string>;
    /**
     * Openstack ID of the network for the Virtual IP
     */
    vipNetworkId?: pulumi.Input<string>;
    /**
     * ID of the subnet for the Virtual IP
     */
    vipSubnetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Loadbalancer resource.
 */
export interface LoadbalancerArgs {
    /**
     * Description of the loadbalancer
     */
    description?: pulumi.Input<string>;
    /**
     * Loadbalancer flavor id
     */
    flavorId: pulumi.Input<string>;
    /**
     * Listeners to create with the loadbalancer
     */
    listeners?: pulumi.Input<pulumi.Input<inputs.CloudProject.LoadbalancerListener>[]>;
    /**
     * Name of the resource
     */
    name?: pulumi.Input<string>;
    /**
     * Network information to create the loadbalancer
     */
    network: pulumi.Input<inputs.CloudProject.LoadbalancerNetwork>;
    /**
     * Region name
     */
    regionName: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
}
