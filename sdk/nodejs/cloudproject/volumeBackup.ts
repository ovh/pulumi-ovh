// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage backups for the given volume in a public cloud project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const backup = new ovh.cloudproject.VolumeBackup("backup", {
 *     regionName: "GRA9",
 *     serviceName: "<public cloud project ID>",
 *     volumeId: "<volume ID>",
 * });
 * ```
 *
 * ## Import
 *
 * A volume backup in a public cloud project can be imported using the `service_name`, `region_name` and `id` attributes.
 *
 * Using the following configuration:
 *
 * hcl
 *
 * import {
 *
 *   id = "<service_name>/<region_name>/<id>"
 *
 *   to = ovh_cloud_project_volume_backup.backup
 *
 * }
 *
 * You can then run:
 *
 * bash
 *
 * $ pulumi preview -generate-config-out=backup.tf
 *
 * $ pulumi up
 *
 * The file `backup.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.
 *
 * See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
 */
export class VolumeBackup extends pulumi.CustomResource {
    /**
     * Get an existing VolumeBackup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeBackupState, opts?: pulumi.CustomResourceOptions): VolumeBackup {
        return new VolumeBackup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/volumeBackup:VolumeBackup';

    /**
     * Returns true if the given object is an instance of VolumeBackup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeBackup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeBackup.__pulumiType;
    }

    /**
     * Creation date of the backup
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * name of the backup
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Volume backup region
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Region name
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Size of the backup in GiB
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Staus of the backup
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * ID of the volume to backup
     */
    public readonly volumeId!: pulumi.Output<string>;

    /**
     * Create a VolumeBackup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeBackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeBackupArgs | VolumeBackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeBackupState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["volumeId"] = state ? state.volumeId : undefined;
        } else {
            const args = argsOrState as VolumeBackupArgs | undefined;
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.volumeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumeId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["volumeId"] = args ? args.volumeId : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeBackup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeBackup resources.
 */
export interface VolumeBackupState {
    /**
     * Creation date of the backup
     */
    creationDate?: pulumi.Input<string>;
    /**
     * name of the backup
     */
    name?: pulumi.Input<string>;
    /**
     * Volume backup region
     */
    region?: pulumi.Input<string>;
    /**
     * Region name
     */
    regionName?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Size of the backup in GiB
     */
    size?: pulumi.Input<number>;
    /**
     * Staus of the backup
     */
    status?: pulumi.Input<string>;
    /**
     * ID of the volume to backup
     */
    volumeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeBackup resource.
 */
export interface VolumeBackupArgs {
    /**
     * name of the backup
     */
    name?: pulumi.Input<string>;
    /**
     * Region name
     */
    regionName: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * ID of the volume to backup
     */
    volumeId: pulumi.Input<string>;
}
