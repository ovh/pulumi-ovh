// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class RegionLoadBalancerLogSubscription extends pulumi.CustomResource {
    /**
     * Get an existing RegionLoadBalancerLogSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegionLoadBalancerLogSubscriptionState, opts?: pulumi.CustomResourceOptions): RegionLoadBalancerLogSubscription {
        return new RegionLoadBalancerLogSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/regionLoadBalancerLogSubscription:RegionLoadBalancerLogSubscription';

    /**
     * Returns true if the given object is an instance of RegionLoadBalancerLogSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RegionLoadBalancerLogSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegionLoadBalancerLogSubscription.__pulumiType;
    }

    /**
     * Creation date of the subscription
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Log kind name of this subscription
     */
    public readonly kind!: pulumi.Output<string>;
    /**
     * Name of the destination log service
     */
    public /*out*/ readonly ldpServiceName!: pulumi.Output<string>;
    /**
     * ID representing the loadbalancer of the resource
     */
    public readonly loadbalancerId!: pulumi.Output<string>;
    /**
     * Identifier of the operation
     */
    public /*out*/ readonly operationId!: pulumi.Output<string>;
    /**
     * Region name of the resource representing the name of the region.
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * Name of subscribed resource, where the logs come from
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * Type of subscribed resource, where the logs come from
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * ID representing the stream of the resource
     */
    public readonly streamId!: pulumi.Output<string>;
    /**
     * Id of the subscription
     */
    public /*out*/ readonly subscriptionId!: pulumi.Output<string>;
    /**
     * Last update date of the subscription
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a RegionLoadBalancerLogSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RegionLoadBalancerLogSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegionLoadBalancerLogSubscriptionArgs | RegionLoadBalancerLogSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegionLoadBalancerLogSubscriptionState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["ldpServiceName"] = state ? state.ldpServiceName : undefined;
            resourceInputs["loadbalancerId"] = state ? state.loadbalancerId : undefined;
            resourceInputs["operationId"] = state ? state.operationId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as RegionLoadBalancerLogSubscriptionArgs | undefined;
            if ((!args || args.kind === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kind'");
            }
            if ((!args || args.loadbalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadbalancerId'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.streamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["loadbalancerId"] = args ? args.loadbalancerId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["ldpServiceName"] = undefined /*out*/;
            resourceInputs["operationId"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["subscriptionId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RegionLoadBalancerLogSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RegionLoadBalancerLogSubscription resources.
 */
export interface RegionLoadBalancerLogSubscriptionState {
    /**
     * Creation date of the subscription
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Log kind name of this subscription
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the destination log service
     */
    ldpServiceName?: pulumi.Input<string>;
    /**
     * ID representing the loadbalancer of the resource
     */
    loadbalancerId?: pulumi.Input<string>;
    /**
     * Identifier of the operation
     */
    operationId?: pulumi.Input<string>;
    /**
     * Region name of the resource representing the name of the region.
     */
    regionName?: pulumi.Input<string>;
    /**
     * Name of subscribed resource, where the logs come from
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Type of subscribed resource, where the logs come from
     */
    resourceType?: pulumi.Input<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * ID representing the stream of the resource
     */
    streamId?: pulumi.Input<string>;
    /**
     * Id of the subscription
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * Last update date of the subscription
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RegionLoadBalancerLogSubscription resource.
 */
export interface RegionLoadBalancerLogSubscriptionArgs {
    /**
     * Log kind name of this subscription
     */
    kind: pulumi.Input<string>;
    /**
     * ID representing the loadbalancer of the resource
     */
    loadbalancerId: pulumi.Input<string>;
    /**
     * Region name of the resource representing the name of the region.
     */
    regionName: pulumi.Input<string>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName: pulumi.Input<string>;
    /**
     * ID representing the stream of the resource
     */
    streamId: pulumi.Input<string>;
}
