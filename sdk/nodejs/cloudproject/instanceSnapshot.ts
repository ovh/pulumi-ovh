// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Create and manage snapshots for an instance in a public cloud project.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const snapshot = new ovh.cloudproject.InstanceSnapshot("snapshot", {
 *     instanceId: "<instance ID>",
 *     serviceName: "<public cloud project ID>",
 * });
 * ```
 */
export class InstanceSnapshot extends pulumi.CustomResource {
    /**
     * Get an existing InstanceSnapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceSnapshotState, opts?: pulumi.CustomResourceOptions): InstanceSnapshot {
        return new InstanceSnapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/instanceSnapshot:InstanceSnapshot';

    /**
     * Returns true if the given object is an instance of InstanceSnapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceSnapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceSnapshot.__pulumiType;
    }

    /**
     * Image creation date
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * Image usable only for this type of flavor if not null
     */
    public /*out*/ readonly flavorType!: pulumi.Output<string>;
    /**
     * Instance ID
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Minimum disks required to use image
     */
    public /*out*/ readonly minDisk!: pulumi.Output<number>;
    /**
     * Minimum RAM required to use image
     */
    public /*out*/ readonly minRam!: pulumi.Output<number>;
    /**
     * Snapshot name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Order plan code
     */
    public /*out*/ readonly planCode!: pulumi.Output<string>;
    /**
     * Image region
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Image size (in GiB)
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * Image status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags about the image
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;
    /**
     * Image type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * User to connect with
     */
    public /*out*/ readonly user!: pulumi.Output<string>;
    /**
     * Image visibility
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a InstanceSnapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceSnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceSnapshotArgs | InstanceSnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceSnapshotState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["flavorType"] = state ? state.flavorType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["minDisk"] = state ? state.minDisk : undefined;
            resourceInputs["minRam"] = state ? state.minRam : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["planCode"] = state ? state.planCode : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as InstanceSnapshotArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["flavorType"] = undefined /*out*/;
            resourceInputs["minDisk"] = undefined /*out*/;
            resourceInputs["minRam"] = undefined /*out*/;
            resourceInputs["planCode"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["user"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceSnapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceSnapshot resources.
 */
export interface InstanceSnapshotState {
    /**
     * Image creation date
     */
    creationDate?: pulumi.Input<string>;
    /**
     * Image usable only for this type of flavor if not null
     */
    flavorType?: pulumi.Input<string>;
    /**
     * Instance ID
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Minimum disks required to use image
     */
    minDisk?: pulumi.Input<number>;
    /**
     * Minimum RAM required to use image
     */
    minRam?: pulumi.Input<number>;
    /**
     * Snapshot name
     */
    name?: pulumi.Input<string>;
    /**
     * Order plan code
     */
    planCode?: pulumi.Input<string>;
    /**
     * Image region
     */
    region?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Image size (in GiB)
     */
    size?: pulumi.Input<number>;
    /**
     * Image status
     */
    status?: pulumi.Input<string>;
    /**
     * Tags about the image
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Image type
     */
    type?: pulumi.Input<string>;
    /**
     * User to connect with
     */
    user?: pulumi.Input<string>;
    /**
     * Image visibility
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceSnapshot resource.
 */
export interface InstanceSnapshotArgs {
    /**
     * Instance ID
     */
    instanceId: pulumi.Input<string>;
    /**
     * Snapshot name
     */
    name?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
}
