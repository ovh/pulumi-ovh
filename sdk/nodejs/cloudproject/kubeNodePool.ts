// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class KubeNodePool extends pulumi.CustomResource {
    /**
     * Get an existing KubeNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KubeNodePoolState, opts?: pulumi.CustomResourceOptions): KubeNodePool {
        return new KubeNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/kubeNodePool:KubeNodePool';

    /**
     * Returns true if the given object is an instance of KubeNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KubeNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KubeNodePool.__pulumiType;
    }

    /**
     * Enable anti affinity groups for nodes in the pool
     */
    public readonly antiAffinity!: pulumi.Output<boolean>;
    /**
     * Enable auto-scaling for the pool
     */
    public readonly autoscale!: pulumi.Output<boolean>;
    /**
     * scaleDownUnneededTimeSeconds for autoscaling
     */
    public readonly autoscalingScaleDownUnneededTimeSeconds!: pulumi.Output<number>;
    /**
     * scaleDownUnreadyTimeSeconds for autoscaling
     */
    public readonly autoscalingScaleDownUnreadyTimeSeconds!: pulumi.Output<number>;
    /**
     * scaleDownUtilizationThreshold for autoscaling
     */
    public readonly autoscalingScaleDownUtilizationThreshold!: pulumi.Output<number>;
    /**
     * Number of nodes which are actually ready in the pool
     */
    public /*out*/ readonly availableNodes!: pulumi.Output<number>;
    /**
     * Creation date
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Number of nodes present in the pool
     */
    public /*out*/ readonly currentNodes!: pulumi.Output<number>;
    /**
     * Number of nodes you desire in the pool
     */
    public readonly desiredNodes!: pulumi.Output<number>;
    /**
     * Flavor name
     */
    public /*out*/ readonly flavor!: pulumi.Output<string>;
    /**
     * Flavor name
     */
    public readonly flavorName!: pulumi.Output<string>;
    /**
     * Kube ID
     */
    public readonly kubeId!: pulumi.Output<string>;
    /**
     * Number of nodes you desire in the pool
     */
    public readonly maxNodes!: pulumi.Output<number>;
    /**
     * Number of nodes you desire in the pool
     */
    public readonly minNodes!: pulumi.Output<number>;
    /**
     * Enable monthly billing on all nodes in the pool
     */
    public readonly monthlyBilled!: pulumi.Output<boolean>;
    /**
     * NodePool resource name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Project id
     */
    public /*out*/ readonly projectId!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Status describing the state between number of nodes wanted and available ones
     */
    public /*out*/ readonly sizeStatus!: pulumi.Output<string>;
    /**
     * Current status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Node pool template
     */
    public readonly template!: pulumi.Output<outputs.CloudProject.KubeNodePoolTemplate | undefined>;
    /**
     * Number of nodes with latest version installed in the pool
     */
    public /*out*/ readonly upToDateNodes!: pulumi.Output<number>;
    /**
     * Last update date
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a KubeNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KubeNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KubeNodePoolArgs | KubeNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KubeNodePoolState | undefined;
            resourceInputs["antiAffinity"] = state ? state.antiAffinity : undefined;
            resourceInputs["autoscale"] = state ? state.autoscale : undefined;
            resourceInputs["autoscalingScaleDownUnneededTimeSeconds"] = state ? state.autoscalingScaleDownUnneededTimeSeconds : undefined;
            resourceInputs["autoscalingScaleDownUnreadyTimeSeconds"] = state ? state.autoscalingScaleDownUnreadyTimeSeconds : undefined;
            resourceInputs["autoscalingScaleDownUtilizationThreshold"] = state ? state.autoscalingScaleDownUtilizationThreshold : undefined;
            resourceInputs["availableNodes"] = state ? state.availableNodes : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["currentNodes"] = state ? state.currentNodes : undefined;
            resourceInputs["desiredNodes"] = state ? state.desiredNodes : undefined;
            resourceInputs["flavor"] = state ? state.flavor : undefined;
            resourceInputs["flavorName"] = state ? state.flavorName : undefined;
            resourceInputs["kubeId"] = state ? state.kubeId : undefined;
            resourceInputs["maxNodes"] = state ? state.maxNodes : undefined;
            resourceInputs["minNodes"] = state ? state.minNodes : undefined;
            resourceInputs["monthlyBilled"] = state ? state.monthlyBilled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sizeStatus"] = state ? state.sizeStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
            resourceInputs["upToDateNodes"] = state ? state.upToDateNodes : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as KubeNodePoolArgs | undefined;
            if ((!args || args.flavorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flavorName'");
            }
            if ((!args || args.kubeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubeId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["antiAffinity"] = args ? args.antiAffinity : undefined;
            resourceInputs["autoscale"] = args ? args.autoscale : undefined;
            resourceInputs["autoscalingScaleDownUnneededTimeSeconds"] = args ? args.autoscalingScaleDownUnneededTimeSeconds : undefined;
            resourceInputs["autoscalingScaleDownUnreadyTimeSeconds"] = args ? args.autoscalingScaleDownUnreadyTimeSeconds : undefined;
            resourceInputs["autoscalingScaleDownUtilizationThreshold"] = args ? args.autoscalingScaleDownUtilizationThreshold : undefined;
            resourceInputs["desiredNodes"] = args ? args.desiredNodes : undefined;
            resourceInputs["flavorName"] = args ? args.flavorName : undefined;
            resourceInputs["kubeId"] = args ? args.kubeId : undefined;
            resourceInputs["maxNodes"] = args ? args.maxNodes : undefined;
            resourceInputs["minNodes"] = args ? args.minNodes : undefined;
            resourceInputs["monthlyBilled"] = args ? args.monthlyBilled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
            resourceInputs["availableNodes"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["currentNodes"] = undefined /*out*/;
            resourceInputs["flavor"] = undefined /*out*/;
            resourceInputs["projectId"] = undefined /*out*/;
            resourceInputs["sizeStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["upToDateNodes"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KubeNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KubeNodePool resources.
 */
export interface KubeNodePoolState {
    /**
     * Enable anti affinity groups for nodes in the pool
     */
    antiAffinity?: pulumi.Input<boolean>;
    /**
     * Enable auto-scaling for the pool
     */
    autoscale?: pulumi.Input<boolean>;
    /**
     * scaleDownUnneededTimeSeconds for autoscaling
     */
    autoscalingScaleDownUnneededTimeSeconds?: pulumi.Input<number>;
    /**
     * scaleDownUnreadyTimeSeconds for autoscaling
     */
    autoscalingScaleDownUnreadyTimeSeconds?: pulumi.Input<number>;
    /**
     * scaleDownUtilizationThreshold for autoscaling
     */
    autoscalingScaleDownUtilizationThreshold?: pulumi.Input<number>;
    /**
     * Number of nodes which are actually ready in the pool
     */
    availableNodes?: pulumi.Input<number>;
    /**
     * Creation date
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Number of nodes present in the pool
     */
    currentNodes?: pulumi.Input<number>;
    /**
     * Number of nodes you desire in the pool
     */
    desiredNodes?: pulumi.Input<number>;
    /**
     * Flavor name
     */
    flavor?: pulumi.Input<string>;
    /**
     * Flavor name
     */
    flavorName?: pulumi.Input<string>;
    /**
     * Kube ID
     */
    kubeId?: pulumi.Input<string>;
    /**
     * Number of nodes you desire in the pool
     */
    maxNodes?: pulumi.Input<number>;
    /**
     * Number of nodes you desire in the pool
     */
    minNodes?: pulumi.Input<number>;
    /**
     * Enable monthly billing on all nodes in the pool
     */
    monthlyBilled?: pulumi.Input<boolean>;
    /**
     * NodePool resource name
     */
    name?: pulumi.Input<string>;
    /**
     * Project id
     */
    projectId?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Status describing the state between number of nodes wanted and available ones
     */
    sizeStatus?: pulumi.Input<string>;
    /**
     * Current status
     */
    status?: pulumi.Input<string>;
    /**
     * Node pool template
     */
    template?: pulumi.Input<inputs.CloudProject.KubeNodePoolTemplate>;
    /**
     * Number of nodes with latest version installed in the pool
     */
    upToDateNodes?: pulumi.Input<number>;
    /**
     * Last update date
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KubeNodePool resource.
 */
export interface KubeNodePoolArgs {
    /**
     * Enable anti affinity groups for nodes in the pool
     */
    antiAffinity?: pulumi.Input<boolean>;
    /**
     * Enable auto-scaling for the pool
     */
    autoscale?: pulumi.Input<boolean>;
    /**
     * scaleDownUnneededTimeSeconds for autoscaling
     */
    autoscalingScaleDownUnneededTimeSeconds?: pulumi.Input<number>;
    /**
     * scaleDownUnreadyTimeSeconds for autoscaling
     */
    autoscalingScaleDownUnreadyTimeSeconds?: pulumi.Input<number>;
    /**
     * scaleDownUtilizationThreshold for autoscaling
     */
    autoscalingScaleDownUtilizationThreshold?: pulumi.Input<number>;
    /**
     * Number of nodes you desire in the pool
     */
    desiredNodes?: pulumi.Input<number>;
    /**
     * Flavor name
     */
    flavorName: pulumi.Input<string>;
    /**
     * Kube ID
     */
    kubeId: pulumi.Input<string>;
    /**
     * Number of nodes you desire in the pool
     */
    maxNodes?: pulumi.Input<number>;
    /**
     * Number of nodes you desire in the pool
     */
    minNodes?: pulumi.Input<number>;
    /**
     * Enable monthly billing on all nodes in the pool
     */
    monthlyBilled?: pulumi.Input<boolean>;
    /**
     * NodePool resource name
     */
    name?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Node pool template
     */
    template?: pulumi.Input<inputs.CloudProject.KubeNodePoolTemplate>;
}
