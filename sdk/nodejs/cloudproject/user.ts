// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState, opts?: pulumi.CustomResourceOptions): User {
        return new User(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/user:User';

    /**
     * Returns true if the given object is an instance of User.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is User {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === User.__pulumiType;
    }

    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly openstackRc!: pulumi.Output<{[key: string]: string}>;
    public /*out*/ readonly password!: pulumi.Output<string>;
    public readonly roleName!: pulumi.Output<string | undefined>;
    public readonly roleNames!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly roles!: pulumi.Output<outputs.CloudProject.UserRole[]>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    public readonly serviceName!: pulumi.Output<string>;
    public /*out*/ readonly status!: pulumi.Output<string>;
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["openstackRc"] = state ? state.openstackRc : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["roleNames"] = state ? state.roleNames : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["openstackRc"] = args ? args.openstackRc : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["roleNames"] = args ? args.roleNames : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["password"] = undefined /*out*/;
            resourceInputs["roles"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(User.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    creationDate?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    openstackRc?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    password?: pulumi.Input<string>;
    roleName?: pulumi.Input<string>;
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
    roles?: pulumi.Input<pulumi.Input<inputs.CloudProject.UserRole>[]>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    description?: pulumi.Input<string>;
    openstackRc?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    roleName?: pulumi.Input<string>;
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service name of the resource representing the id of the cloud project.
     */
    serviceName: pulumi.Input<string>;
}
