// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const region = new ovh.cloudproject.ProjectRegion("region", {
 *     serviceName: "<public cloud project ID>",
 *     region: "EU-WEST-LZ-LUX-A",
 * });
 * ```
 */
export class ProjectRegion extends pulumi.CustomResource {
    /**
     * Get an existing ProjectRegion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectRegionState, opts?: pulumi.CustomResourceOptions): ProjectRegion {
        return new ProjectRegion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProject/projectRegion:ProjectRegion';

    /**
     * Returns true if the given object is an instance of ProjectRegion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectRegion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectRegion.__pulumiType;
    }

    /**
     * Availability zones of the region
     */
    public /*out*/ readonly availabilityZones!: pulumi.Output<string[]>;
    /**
     * Region continent code
     */
    public /*out*/ readonly continentCode!: pulumi.Output<string>;
    /**
     * Region country code
     */
    public /*out*/ readonly countryCode!: pulumi.Output<string>;
    /**
     * Location of the datacenter where the region is
     */
    public /*out*/ readonly datacenterLocation!: pulumi.Output<string>;
    /**
     * Allowed countries for failover ip
     */
    public /*out*/ readonly ipCountries!: pulumi.Output<string[]>;
    /**
     * Region name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Region to add to your project
     */
    public readonly region!: pulumi.Output<string>;
    /**
     * Region name
     */
    public /*out*/ readonly regionName!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Details about components status
     */
    public /*out*/ readonly services!: pulumi.Output<outputs.CloudProject.ProjectRegionService[]>;
    /**
     * Openstack region status
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Region type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a ProjectRegion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectRegionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectRegionArgs | ProjectRegionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectRegionState | undefined;
            resourceInputs["availabilityZones"] = state ? state.availabilityZones : undefined;
            resourceInputs["continentCode"] = state ? state.continentCode : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["datacenterLocation"] = state ? state.datacenterLocation : undefined;
            resourceInputs["ipCountries"] = state ? state.ipCountries : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["services"] = state ? state.services : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ProjectRegionArgs | undefined;
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["availabilityZones"] = undefined /*out*/;
            resourceInputs["continentCode"] = undefined /*out*/;
            resourceInputs["countryCode"] = undefined /*out*/;
            resourceInputs["datacenterLocation"] = undefined /*out*/;
            resourceInputs["ipCountries"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["regionName"] = undefined /*out*/;
            resourceInputs["services"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectRegion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectRegion resources.
 */
export interface ProjectRegionState {
    /**
     * Availability zones of the region
     */
    availabilityZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Region continent code
     */
    continentCode?: pulumi.Input<string>;
    /**
     * Region country code
     */
    countryCode?: pulumi.Input<string>;
    /**
     * Location of the datacenter where the region is
     */
    datacenterLocation?: pulumi.Input<string>;
    /**
     * Allowed countries for failover ip
     */
    ipCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Region name
     */
    name?: pulumi.Input<string>;
    /**
     * Region to add to your project
     */
    region?: pulumi.Input<string>;
    /**
     * Region name
     */
    regionName?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Details about components status
     */
    services?: pulumi.Input<pulumi.Input<inputs.CloudProject.ProjectRegionService>[]>;
    /**
     * Openstack region status
     */
    status?: pulumi.Input<string>;
    /**
     * Region type
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectRegion resource.
 */
export interface ProjectRegionArgs {
    /**
     * Region to add to your project
     */
    region: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
}
