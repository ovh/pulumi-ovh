// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DatabaseInstanceArgs, DatabaseInstanceState } from "./databaseInstance";
export type DatabaseInstance = import("./databaseInstance").DatabaseInstance;
export const DatabaseInstance: typeof import("./databaseInstance").DatabaseInstance = null as any;
utilities.lazyLoad(exports, ["DatabaseInstance"], () => require("./databaseInstance"));

export { GetCapabilitiesArgs, GetCapabilitiesResult, GetCapabilitiesOutputArgs } from "./getCapabilities";
export const getCapabilities: typeof import("./getCapabilities").getCapabilities = null as any;
export const getCapabilitiesOutput: typeof import("./getCapabilities").getCapabilitiesOutput = null as any;
utilities.lazyLoad(exports, ["getCapabilities","getCapabilitiesOutput"], () => require("./getCapabilities"));

export { GetCertificatesArgs, GetCertificatesResult, GetCertificatesOutputArgs } from "./getCertificates";
export const getCertificates: typeof import("./getCertificates").getCertificates = null as any;
export const getCertificatesOutput: typeof import("./getCertificates").getCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getCertificates","getCertificatesOutput"], () => require("./getCertificates"));

export { GetDatabaseArgs, GetDatabaseResult, GetDatabaseOutputArgs } from "./getDatabase";
export const getDatabase: typeof import("./getDatabase").getDatabase = null as any;
export const getDatabaseOutput: typeof import("./getDatabase").getDatabaseOutput = null as any;
utilities.lazyLoad(exports, ["getDatabase","getDatabaseOutput"], () => require("./getDatabase"));

export { GetDatabaseInstanceArgs, GetDatabaseInstanceResult, GetDatabaseInstanceOutputArgs } from "./getDatabaseInstance";
export const getDatabaseInstance: typeof import("./getDatabaseInstance").getDatabaseInstance = null as any;
export const getDatabaseInstanceOutput: typeof import("./getDatabaseInstance").getDatabaseInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseInstance","getDatabaseInstanceOutput"], () => require("./getDatabaseInstance"));

export { GetDatabaseInstancesArgs, GetDatabaseInstancesResult, GetDatabaseInstancesOutputArgs } from "./getDatabaseInstances";
export const getDatabaseInstances: typeof import("./getDatabaseInstances").getDatabaseInstances = null as any;
export const getDatabaseInstancesOutput: typeof import("./getDatabaseInstances").getDatabaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseInstances","getDatabaseInstancesOutput"], () => require("./getDatabaseInstances"));

export { GetDatabaseIntegrationArgs, GetDatabaseIntegrationResult, GetDatabaseIntegrationOutputArgs } from "./getDatabaseIntegration";
export const getDatabaseIntegration: typeof import("./getDatabaseIntegration").getDatabaseIntegration = null as any;
export const getDatabaseIntegrationOutput: typeof import("./getDatabaseIntegration").getDatabaseIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseIntegration","getDatabaseIntegrationOutput"], () => require("./getDatabaseIntegration"));

export { GetDatabaseIntegrationsArgs, GetDatabaseIntegrationsResult, GetDatabaseIntegrationsOutputArgs } from "./getDatabaseIntegrations";
export const getDatabaseIntegrations: typeof import("./getDatabaseIntegrations").getDatabaseIntegrations = null as any;
export const getDatabaseIntegrationsOutput: typeof import("./getDatabaseIntegrations").getDatabaseIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseIntegrations","getDatabaseIntegrationsOutput"], () => require("./getDatabaseIntegrations"));

export { GetDatabaseLogSubscriptionArgs, GetDatabaseLogSubscriptionResult, GetDatabaseLogSubscriptionOutputArgs } from "./getDatabaseLogSubscription";
export const getDatabaseLogSubscription: typeof import("./getDatabaseLogSubscription").getDatabaseLogSubscription = null as any;
export const getDatabaseLogSubscriptionOutput: typeof import("./getDatabaseLogSubscription").getDatabaseLogSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseLogSubscription","getDatabaseLogSubscriptionOutput"], () => require("./getDatabaseLogSubscription"));

export { GetDatabaseLogSubscriptionsArgs, GetDatabaseLogSubscriptionsResult, GetDatabaseLogSubscriptionsOutputArgs } from "./getDatabaseLogSubscriptions";
export const getDatabaseLogSubscriptions: typeof import("./getDatabaseLogSubscriptions").getDatabaseLogSubscriptions = null as any;
export const getDatabaseLogSubscriptionsOutput: typeof import("./getDatabaseLogSubscriptions").getDatabaseLogSubscriptionsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseLogSubscriptions","getDatabaseLogSubscriptionsOutput"], () => require("./getDatabaseLogSubscriptions"));

export { GetDatabasePostgreSQLConnectionPoolsArgs, GetDatabasePostgreSQLConnectionPoolsResult, GetDatabasePostgreSQLConnectionPoolsOutputArgs } from "./getDatabasePostgreSQLConnectionPools";
export const getDatabasePostgreSQLConnectionPools: typeof import("./getDatabasePostgreSQLConnectionPools").getDatabasePostgreSQLConnectionPools = null as any;
export const getDatabasePostgreSQLConnectionPoolsOutput: typeof import("./getDatabasePostgreSQLConnectionPools").getDatabasePostgreSQLConnectionPoolsOutput = null as any;
utilities.lazyLoad(exports, ["getDatabasePostgreSQLConnectionPools","getDatabasePostgreSQLConnectionPoolsOutput"], () => require("./getDatabasePostgreSQLConnectionPools"));

export { GetDatabasesArgs, GetDatabasesResult, GetDatabasesOutputArgs } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetIpRestrictionsArgs, GetIpRestrictionsResult, GetIpRestrictionsOutputArgs } from "./getIpRestrictions";
export const getIpRestrictions: typeof import("./getIpRestrictions").getIpRestrictions = null as any;
export const getIpRestrictionsOutput: typeof import("./getIpRestrictions").getIpRestrictionsOutput = null as any;
utilities.lazyLoad(exports, ["getIpRestrictions","getIpRestrictionsOutput"], () => require("./getIpRestrictions"));

export { GetKafkaAclArgs, GetKafkaAclResult, GetKafkaAclOutputArgs } from "./getKafkaAcl";
export const getKafkaAcl: typeof import("./getKafkaAcl").getKafkaAcl = null as any;
export const getKafkaAclOutput: typeof import("./getKafkaAcl").getKafkaAclOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaAcl","getKafkaAclOutput"], () => require("./getKafkaAcl"));

export { GetKafkaAclsArgs, GetKafkaAclsResult, GetKafkaAclsOutputArgs } from "./getKafkaAcls";
export const getKafkaAcls: typeof import("./getKafkaAcls").getKafkaAcls = null as any;
export const getKafkaAclsOutput: typeof import("./getKafkaAcls").getKafkaAclsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaAcls","getKafkaAclsOutput"], () => require("./getKafkaAcls"));

export { GetKafkaSchemaRegistryAclArgs, GetKafkaSchemaRegistryAclResult, GetKafkaSchemaRegistryAclOutputArgs } from "./getKafkaSchemaRegistryAcl";
export const getKafkaSchemaRegistryAcl: typeof import("./getKafkaSchemaRegistryAcl").getKafkaSchemaRegistryAcl = null as any;
export const getKafkaSchemaRegistryAclOutput: typeof import("./getKafkaSchemaRegistryAcl").getKafkaSchemaRegistryAclOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaSchemaRegistryAcl","getKafkaSchemaRegistryAclOutput"], () => require("./getKafkaSchemaRegistryAcl"));

export { GetKafkaSchemaRegistryAclsArgs, GetKafkaSchemaRegistryAclsResult, GetKafkaSchemaRegistryAclsOutputArgs } from "./getKafkaSchemaRegistryAcls";
export const getKafkaSchemaRegistryAcls: typeof import("./getKafkaSchemaRegistryAcls").getKafkaSchemaRegistryAcls = null as any;
export const getKafkaSchemaRegistryAclsOutput: typeof import("./getKafkaSchemaRegistryAcls").getKafkaSchemaRegistryAclsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaSchemaRegistryAcls","getKafkaSchemaRegistryAclsOutput"], () => require("./getKafkaSchemaRegistryAcls"));

export { GetKafkaTopicArgs, GetKafkaTopicResult, GetKafkaTopicOutputArgs } from "./getKafkaTopic";
export const getKafkaTopic: typeof import("./getKafkaTopic").getKafkaTopic = null as any;
export const getKafkaTopicOutput: typeof import("./getKafkaTopic").getKafkaTopicOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopic","getKafkaTopicOutput"], () => require("./getKafkaTopic"));

export { GetKafkaTopicsArgs, GetKafkaTopicsResult, GetKafkaTopicsOutputArgs } from "./getKafkaTopics";
export const getKafkaTopics: typeof import("./getKafkaTopics").getKafkaTopics = null as any;
export const getKafkaTopicsOutput: typeof import("./getKafkaTopics").getKafkaTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaTopics","getKafkaTopicsOutput"], () => require("./getKafkaTopics"));

export { GetKafkaUserAccessArgs, GetKafkaUserAccessResult, GetKafkaUserAccessOutputArgs } from "./getKafkaUserAccess";
export const getKafkaUserAccess: typeof import("./getKafkaUserAccess").getKafkaUserAccess = null as any;
export const getKafkaUserAccessOutput: typeof import("./getKafkaUserAccess").getKafkaUserAccessOutput = null as any;
utilities.lazyLoad(exports, ["getKafkaUserAccess","getKafkaUserAccessOutput"], () => require("./getKafkaUserAccess"));

export { GetPostgresSqlConnectionPoolArgs, GetPostgresSqlConnectionPoolResult, GetPostgresSqlConnectionPoolOutputArgs } from "./getPostgresSqlConnectionPool";
export const getPostgresSqlConnectionPool: typeof import("./getPostgresSqlConnectionPool").getPostgresSqlConnectionPool = null as any;
export const getPostgresSqlConnectionPoolOutput: typeof import("./getPostgresSqlConnectionPool").getPostgresSqlConnectionPoolOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresSqlConnectionPool","getPostgresSqlConnectionPoolOutput"], () => require("./getPostgresSqlConnectionPool"));

export { GetPostgresSqlUserArgs, GetPostgresSqlUserResult, GetPostgresSqlUserOutputArgs } from "./getPostgresSqlUser";
export const getPostgresSqlUser: typeof import("./getPostgresSqlUser").getPostgresSqlUser = null as any;
export const getPostgresSqlUserOutput: typeof import("./getPostgresSqlUser").getPostgresSqlUserOutput = null as any;
utilities.lazyLoad(exports, ["getPostgresSqlUser","getPostgresSqlUserOutput"], () => require("./getPostgresSqlUser"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { IpRestrictionArgs, IpRestrictionState } from "./ipRestriction";
export type IpRestriction = import("./ipRestriction").IpRestriction;
export const IpRestriction: typeof import("./ipRestriction").IpRestriction = null as any;
utilities.lazyLoad(exports, ["IpRestriction"], () => require("./ipRestriction"));

export { KafkaAclArgs, KafkaAclState } from "./kafkaAcl";
export type KafkaAcl = import("./kafkaAcl").KafkaAcl;
export const KafkaAcl: typeof import("./kafkaAcl").KafkaAcl = null as any;
utilities.lazyLoad(exports, ["KafkaAcl"], () => require("./kafkaAcl"));

export { KafkaSchemaRegistryAclArgs, KafkaSchemaRegistryAclState } from "./kafkaSchemaRegistryAcl";
export type KafkaSchemaRegistryAcl = import("./kafkaSchemaRegistryAcl").KafkaSchemaRegistryAcl;
export const KafkaSchemaRegistryAcl: typeof import("./kafkaSchemaRegistryAcl").KafkaSchemaRegistryAcl = null as any;
utilities.lazyLoad(exports, ["KafkaSchemaRegistryAcl"], () => require("./kafkaSchemaRegistryAcl"));

export { KafkaTopicArgs, KafkaTopicState } from "./kafkaTopic";
export type KafkaTopic = import("./kafkaTopic").KafkaTopic;
export const KafkaTopic: typeof import("./kafkaTopic").KafkaTopic = null as any;
utilities.lazyLoad(exports, ["KafkaTopic"], () => require("./kafkaTopic"));

export { LogSubscriptionArgs, LogSubscriptionState } from "./logSubscription";
export type LogSubscription = import("./logSubscription").LogSubscription;
export const LogSubscription: typeof import("./logSubscription").LogSubscription = null as any;
utilities.lazyLoad(exports, ["LogSubscription"], () => require("./logSubscription"));

export { M3DbNamespaceArgs, M3DbNamespaceState } from "./m3dbNamespace";
export type M3DbNamespace = import("./m3dbNamespace").M3DbNamespace;
export const M3DbNamespace: typeof import("./m3dbNamespace").M3DbNamespace = null as any;
utilities.lazyLoad(exports, ["M3DbNamespace"], () => require("./m3dbNamespace"));

export { M3DbUserArgs, M3DbUserState } from "./m3dbUser";
export type M3DbUser = import("./m3dbUser").M3DbUser;
export const M3DbUser: typeof import("./m3dbUser").M3DbUser = null as any;
utilities.lazyLoad(exports, ["M3DbUser"], () => require("./m3dbUser"));

export { MongoDbPrometheusArgs, MongoDbPrometheusState } from "./mongoDbPrometheus";
export type MongoDbPrometheus = import("./mongoDbPrometheus").MongoDbPrometheus;
export const MongoDbPrometheus: typeof import("./mongoDbPrometheus").MongoDbPrometheus = null as any;
utilities.lazyLoad(exports, ["MongoDbPrometheus"], () => require("./mongoDbPrometheus"));

export { MongoDbUserArgs, MongoDbUserState } from "./mongoDbUser";
export type MongoDbUser = import("./mongoDbUser").MongoDbUser;
export const MongoDbUser: typeof import("./mongoDbUser").MongoDbUser = null as any;
utilities.lazyLoad(exports, ["MongoDbUser"], () => require("./mongoDbUser"));

export { OpensearchPatternArgs, OpensearchPatternState } from "./opensearchPattern";
export type OpensearchPattern = import("./opensearchPattern").OpensearchPattern;
export const OpensearchPattern: typeof import("./opensearchPattern").OpensearchPattern = null as any;
utilities.lazyLoad(exports, ["OpensearchPattern"], () => require("./opensearchPattern"));

export { OpensearchUserArgs, OpensearchUserState } from "./opensearchUser";
export type OpensearchUser = import("./opensearchUser").OpensearchUser;
export const OpensearchUser: typeof import("./opensearchUser").OpensearchUser = null as any;
utilities.lazyLoad(exports, ["OpensearchUser"], () => require("./opensearchUser"));

export { PostgresSqlConnectionPoolArgs, PostgresSqlConnectionPoolState } from "./postgresSqlConnectionPool";
export type PostgresSqlConnectionPool = import("./postgresSqlConnectionPool").PostgresSqlConnectionPool;
export const PostgresSqlConnectionPool: typeof import("./postgresSqlConnectionPool").PostgresSqlConnectionPool = null as any;
utilities.lazyLoad(exports, ["PostgresSqlConnectionPool"], () => require("./postgresSqlConnectionPool"));

export { PostgresSqlUserArgs, PostgresSqlUserState } from "./postgresSqlUser";
export type PostgresSqlUser = import("./postgresSqlUser").PostgresSqlUser;
export const PostgresSqlUser: typeof import("./postgresSqlUser").PostgresSqlUser = null as any;
utilities.lazyLoad(exports, ["PostgresSqlUser"], () => require("./postgresSqlUser"));

export { PrometheusArgs, PrometheusState } from "./prometheus";
export type Prometheus = import("./prometheus").Prometheus;
export const Prometheus: typeof import("./prometheus").Prometheus = null as any;
utilities.lazyLoad(exports, ["Prometheus"], () => require("./prometheus"));

export { RedisUserArgs, RedisUserState } from "./redisUser";
export type RedisUser = import("./redisUser").RedisUser;
export const RedisUser: typeof import("./redisUser").RedisUser = null as any;
utilities.lazyLoad(exports, ["RedisUser"], () => require("./redisUser"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:CloudProjectDatabase/databaseInstance:DatabaseInstance":
                return new DatabaseInstance(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/ipRestriction:IpRestriction":
                return new IpRestriction(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/kafkaAcl:KafkaAcl":
                return new KafkaAcl(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/kafkaSchemaRegistryAcl:KafkaSchemaRegistryAcl":
                return new KafkaSchemaRegistryAcl(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/kafkaTopic:KafkaTopic":
                return new KafkaTopic(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/logSubscription:LogSubscription":
                return new LogSubscription(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/m3DbNamespace:M3DbNamespace":
                return new M3DbNamespace(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/m3DbUser:M3DbUser":
                return new M3DbUser(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/mongoDbPrometheus:MongoDbPrometheus":
                return new MongoDbPrometheus(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/mongoDbUser:MongoDbUser":
                return new MongoDbUser(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/opensearchPattern:OpensearchPattern":
                return new OpensearchPattern(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/opensearchUser:OpensearchUser":
                return new OpensearchUser(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/postgresSqlConnectionPool:PostgresSqlConnectionPool":
                return new PostgresSqlConnectionPool(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/postgresSqlUser:PostgresSqlUser":
                return new PostgresSqlUser(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/prometheus:Prometheus":
                return new Prometheus(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/redisUser:RedisUser":
                return new RedisUser(name, <any>undefined, { urn })
            case "ovh:CloudProjectDatabase/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/databaseInstance", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/integration", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/ipRestriction", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/kafkaAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/kafkaSchemaRegistryAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/kafkaTopic", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/logSubscription", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/m3DbNamespace", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/m3DbUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/mongoDbPrometheus", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/mongoDbUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/opensearchPattern", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/opensearchUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/postgresSqlConnectionPool", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/postgresSqlUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/prometheus", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/redisUser", _module)
pulumi.runtime.registerResourceModule("ovh", "CloudProjectDatabase/user", _module)
