// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class KafkaTopic extends pulumi.CustomResource {
    /**
     * Get an existing KafkaTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaTopicState, opts?: pulumi.CustomResourceOptions): KafkaTopic {
        return new KafkaTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProjectDatabase/kafkaTopic:KafkaTopic';

    /**
     * Returns true if the given object is an instance of KafkaTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaTopic.__pulumiType;
    }

    /**
     * Id of the database cluster
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Minimum insync replica accepted for this topic
     */
    public readonly minInsyncReplicas!: pulumi.Output<number>;
    /**
     * Name of the topic
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of partitions for this topic
     */
    public readonly partitions!: pulumi.Output<number>;
    /**
     * Number of replication for this topic
     */
    public readonly replication!: pulumi.Output<number>;
    /**
     * Number of bytes for the retention of the data for this topic
     */
    public readonly retentionBytes!: pulumi.Output<number>;
    /**
     * Number of hours for the retention of the data for this topic
     */
    public readonly retentionHours!: pulumi.Output<number>;
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a KafkaTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaTopicArgs | KafkaTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaTopicState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["minInsyncReplicas"] = state ? state.minInsyncReplicas : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitions"] = state ? state.partitions : undefined;
            resourceInputs["replication"] = state ? state.replication : undefined;
            resourceInputs["retentionBytes"] = state ? state.retentionBytes : undefined;
            resourceInputs["retentionHours"] = state ? state.retentionHours : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as KafkaTopicArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["minInsyncReplicas"] = args ? args.minInsyncReplicas : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitions"] = args ? args.partitions : undefined;
            resourceInputs["replication"] = args ? args.replication : undefined;
            resourceInputs["retentionBytes"] = args ? args.retentionBytes : undefined;
            resourceInputs["retentionHours"] = args ? args.retentionHours : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaTopic resources.
 */
export interface KafkaTopicState {
    /**
     * Id of the database cluster
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Minimum insync replica accepted for this topic
     */
    minInsyncReplicas?: pulumi.Input<number>;
    /**
     * Name of the topic
     */
    name?: pulumi.Input<string>;
    /**
     * Number of partitions for this topic
     */
    partitions?: pulumi.Input<number>;
    /**
     * Number of replication for this topic
     */
    replication?: pulumi.Input<number>;
    /**
     * Number of bytes for the retention of the data for this topic
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * Number of hours for the retention of the data for this topic
     */
    retentionHours?: pulumi.Input<number>;
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaTopic resource.
 */
export interface KafkaTopicArgs {
    /**
     * Id of the database cluster
     */
    clusterId: pulumi.Input<string>;
    /**
     * Minimum insync replica accepted for this topic
     */
    minInsyncReplicas?: pulumi.Input<number>;
    /**
     * Name of the topic
     */
    name?: pulumi.Input<string>;
    /**
     * Number of partitions for this topic
     */
    partitions?: pulumi.Input<number>;
    /**
     * Number of replication for this topic
     */
    replication?: pulumi.Input<number>;
    /**
     * Number of bytes for the retention of the data for this topic
     */
    retentionBytes?: pulumi.Input<number>;
    /**
     * Number of hours for the retention of the data for this topic
     */
    retentionHours?: pulumi.Input<number>;
    serviceName: pulumi.Input<string>;
}
