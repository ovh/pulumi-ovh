// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates a log subscription for a cluster associated with a public cloud project.
 *
 * ## Example Usage
 *
 * Create a log subscription for a database.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 * import * as ovh from "@pulumi/ovh";
 *
 * const stream = ovh.Dbaas.getLogsOutputGraylogStream({
 *     serviceName: "ldp-xx-xxxxx",
 *     title: "my stream",
 * });
 * const db = ovh.CloudProjectDatabase.getDatabase({
 *     serviceName: "XXX",
 *     engine: "YYY",
 *     id: "ZZZ",
 * });
 * const subscription = new ovh.cloudprojectdatabase.LogSubscription("subscription", {
 *     serviceName: db.then(db => db.serviceName),
 *     engine: db.then(db => db.engine),
 *     clusterId: db.then(db => db.id),
 *     streamId: stream.then(stream => stream.id),
 * });
 * ```
 *
 * ## Import
 *
 * OVHcloud Managed clusters logs subscription can be imported using the `service_name`, `engine`, `cluster_id` and `id` of the subscription, separated by "/" E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:CloudProjectDatabase/logSubscription:LogSubscription sub service_name/engine/cluster_id/id
 * ```
 */
export class LogSubscription extends pulumi.CustomResource {
    /**
     * Get an existing LogSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogSubscriptionState, opts?: pulumi.CustomResourceOptions): LogSubscription {
        return new LogSubscription(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProjectDatabase/logSubscription:LogSubscription';

    /**
     * Returns true if the given object is an instance of LogSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogSubscription {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogSubscription.__pulumiType;
    }

    /**
     * Cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * Creation date of the subscription.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The database engine for which you want to manage a subscription. To get a full list of available engine visit.
     * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * Log kind name of this subscription.
     */
    public /*out*/ readonly kind!: pulumi.Output<string>;
    /**
     * Name of the destination log service.
     */
    public /*out*/ readonly ldpServiceName!: pulumi.Output<string>;
    /**
     * Identifier of the operation.
     */
    public /*out*/ readonly operationId!: pulumi.Output<string>;
    /**
     * Name of subscribed resource, where the logs come from.
     */
    public /*out*/ readonly resourceName!: pulumi.Output<string>;
    /**
     * Type of subscribed resource, where the logs come from.
     */
    public /*out*/ readonly resourceType!: pulumi.Output<string>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Id of the target Log data platform stream.
     */
    public readonly streamId!: pulumi.Output<string>;
    /**
     * Last update date of the subscription.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a LogSubscription resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogSubscriptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogSubscriptionArgs | LogSubscriptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogSubscriptionState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["ldpServiceName"] = state ? state.ldpServiceName : undefined;
            resourceInputs["operationId"] = state ? state.operationId : undefined;
            resourceInputs["resourceName"] = state ? state.resourceName : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["streamId"] = state ? state.streamId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as LogSubscriptionArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.streamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["streamId"] = args ? args.streamId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["ldpServiceName"] = undefined /*out*/;
            resourceInputs["operationId"] = undefined /*out*/;
            resourceInputs["resourceName"] = undefined /*out*/;
            resourceInputs["resourceType"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["ldpServiceName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LogSubscription.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogSubscription resources.
 */
export interface LogSubscriptionState {
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Creation date of the subscription.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The database engine for which you want to manage a subscription. To get a full list of available engine visit.
     * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     */
    engine?: pulumi.Input<string>;
    /**
     * Log kind name of this subscription.
     */
    kind?: pulumi.Input<string>;
    /**
     * Name of the destination log service.
     */
    ldpServiceName?: pulumi.Input<string>;
    /**
     * Identifier of the operation.
     */
    operationId?: pulumi.Input<string>;
    /**
     * Name of subscribed resource, where the logs come from.
     */
    resourceName?: pulumi.Input<string>;
    /**
     * Type of subscribed resource, where the logs come from.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Id of the target Log data platform stream.
     */
    streamId?: pulumi.Input<string>;
    /**
     * Last update date of the subscription.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogSubscription resource.
 */
export interface LogSubscriptionArgs {
    /**
     * Cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The database engine for which you want to manage a subscription. To get a full list of available engine visit.
     * [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     */
    engine: pulumi.Input<string>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName: pulumi.Input<string>;
    /**
     * Id of the target Log data platform stream.
     */
    streamId: pulumi.Input<string>;
}
