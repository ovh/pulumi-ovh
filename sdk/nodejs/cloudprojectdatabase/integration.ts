// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an integration for a database cluster associated with a public cloud project.
 *
 * With this resource you can create an integration for all engine exept `mongodb`.
 *
 * Please take a look at the list of available `types` in the `Argument references` section in order to know the list of avaulable integrations. For example, thanks to the integration feature you can have your PostgreSQL logs in your OpenSearch Database.
 *
 * ## Example Usage
 *
 * Push PostgreSQL logs in an OpenSearch DB:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 * import * as ovh from "@pulumi/ovh";
 *
 * const dbPostgresql = ovh.CloudProjectDatabase.getDatabase({
 *     serviceName: "XXXX",
 *     engine: "postgresql",
 *     id: "ZZZZ",
 * });
 * const dbOpensearch = ovh.CloudProjectDatabase.getDatabase({
 *     serviceName: "XXXX",
 *     engine: "opensearch",
 *     id: "ZZZZ",
 * });
 * const integration = new ovh.cloudprojectdatabase.Integration("integration", {
 *     serviceName: dbPostgresql.then(dbPostgresql => dbPostgresql.serviceName),
 *     engine: dbPostgresql.then(dbPostgresql => dbPostgresql.engine),
 *     clusterId: dbPostgresql.then(dbPostgresql => dbPostgresql.id),
 *     sourceServiceId: dbPostgresql.then(dbPostgresql => dbPostgresql.id),
 *     destinationServiceId: dbOpensearch.then(dbOpensearch => dbOpensearch.id),
 *     type: "opensearchLogs",
 * });
 * ```
 *
 * ## Import
 *
 * OVHcloud Managed database clusters users can be imported using the `service_name`, `engine`, `cluster_id` and `id` of the user, separated by "/" E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:CloudProjectDatabase/integration:Integration my_user service_name/engine/cluster_id/id
 * ```
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:CloudProjectDatabase/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * Cluster ID.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * ID of the destination service.
     */
    public readonly destinationServiceId!: pulumi.Output<string>;
    /**
     * The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     * All engines available exept `mongodb`.
     */
    public readonly engine!: pulumi.Output<string>;
    /**
     * Parameters for the integration.
     */
    public readonly parameters!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * ID of the source service.
     */
    public readonly sourceServiceId!: pulumi.Output<string>;
    /**
     * Current status of the integration.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Type of the integration.
     * Available types:
     * * `grafanaDashboard`
     * * `grafanaDatasource`
     * * `kafkaConnect`
     * * `kafkaLogs`
     * * `kafkaMirrorMaker`
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["destinationServiceId"] = state ? state.destinationServiceId : undefined;
            resourceInputs["engine"] = state ? state.engine : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["sourceServiceId"] = state ? state.sourceServiceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.destinationServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationServiceId'");
            }
            if ((!args || args.engine === undefined) && !opts.urn) {
                throw new Error("Missing required property 'engine'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.sourceServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceServiceId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["destinationServiceId"] = args ? args.destinationServiceId : undefined;
            resourceInputs["engine"] = args ? args.engine : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["sourceServiceId"] = args ? args.sourceServiceId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * Cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * ID of the destination service.
     */
    destinationServiceId?: pulumi.Input<string>;
    /**
     * The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     * All engines available exept `mongodb`.
     */
    engine?: pulumi.Input<string>;
    /**
     * Parameters for the integration.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName?: pulumi.Input<string>;
    /**
     * ID of the source service.
     */
    sourceServiceId?: pulumi.Input<string>;
    /**
     * Current status of the integration.
     */
    status?: pulumi.Input<string>;
    /**
     * Type of the integration.
     * Available types:
     * * `grafanaDashboard`
     * * `grafanaDatasource`
     * * `kafkaConnect`
     * * `kafkaLogs`
     * * `kafkaMirrorMaker`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * Cluster ID.
     */
    clusterId: pulumi.Input<string>;
    /**
     * ID of the destination service.
     */
    destinationServiceId: pulumi.Input<string>;
    /**
     * The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
     * All engines available exept `mongodb`.
     */
    engine: pulumi.Input<string>;
    /**
     * Parameters for the integration.
     */
    parameters?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The id of the public cloud project. If omitted,
     * the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     */
    serviceName: pulumi.Input<string>;
    /**
     * ID of the source service.
     */
    sourceServiceId: pulumi.Input<string>;
    /**
     * Type of the integration.
     * Available types:
     * * `grafanaDashboard`
     * * `grafanaDatasource`
     * * `kafkaConnect`
     * * `kafkaLogs`
     * * `kafkaMirrorMaker`
     */
    type?: pulumi.Input<string>;
}
