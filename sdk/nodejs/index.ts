// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { CloudProjectContainerregistryIamArgs, CloudProjectContainerregistryIamState } from "./cloudProjectContainerregistryIam";
export type CloudProjectContainerregistryIam = import("./cloudProjectContainerregistryIam").CloudProjectContainerregistryIam;
export const CloudProjectContainerregistryIam: typeof import("./cloudProjectContainerregistryIam").CloudProjectContainerregistryIam = null as any;
utilities.lazyLoad(exports, ["CloudProjectContainerregistryIam"], () => require("./cloudProjectContainerregistryIam"));

export { CloudProjectDatabaseValkeyUserArgs, CloudProjectDatabaseValkeyUserState } from "./cloudProjectDatabaseValkeyUser";
export type CloudProjectDatabaseValkeyUser = import("./cloudProjectDatabaseValkeyUser").CloudProjectDatabaseValkeyUser;
export const CloudProjectDatabaseValkeyUser: typeof import("./cloudProjectDatabaseValkeyUser").CloudProjectDatabaseValkeyUser = null as any;
utilities.lazyLoad(exports, ["CloudProjectDatabaseValkeyUser"], () => require("./cloudProjectDatabaseValkeyUser"));

export { CloudProjectSshKeyArgs, CloudProjectSshKeyState } from "./cloudProjectSshKey";
export type CloudProjectSshKey = import("./cloudProjectSshKey").CloudProjectSshKey;
export const CloudProjectSshKey: typeof import("./cloudProjectSshKey").CloudProjectSshKey = null as any;
utilities.lazyLoad(exports, ["CloudProjectSshKey"], () => require("./cloudProjectSshKey"));

export { DomainZoneDynhostRecordArgs, DomainZoneDynhostRecordState } from "./domainZoneDynhostRecord";
export type DomainZoneDynhostRecord = import("./domainZoneDynhostRecord").DomainZoneDynhostRecord;
export const DomainZoneDynhostRecord: typeof import("./domainZoneDynhostRecord").DomainZoneDynhostRecord = null as any;
utilities.lazyLoad(exports, ["DomainZoneDynhostRecord"], () => require("./domainZoneDynhostRecord"));

export { GetCloudProjectDatabaseValkeyUserArgs, GetCloudProjectDatabaseValkeyUserResult, GetCloudProjectDatabaseValkeyUserOutputArgs } from "./getCloudProjectDatabaseValkeyUser";
export const getCloudProjectDatabaseValkeyUser: typeof import("./getCloudProjectDatabaseValkeyUser").getCloudProjectDatabaseValkeyUser = null as any;
export const getCloudProjectDatabaseValkeyUserOutput: typeof import("./getCloudProjectDatabaseValkeyUser").getCloudProjectDatabaseValkeyUserOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectDatabaseValkeyUser","getCloudProjectDatabaseValkeyUserOutput"], () => require("./getCloudProjectDatabaseValkeyUser"));

export { GetCloudProjectFlavorArgs, GetCloudProjectFlavorResult, GetCloudProjectFlavorOutputArgs } from "./getCloudProjectFlavor";
export const getCloudProjectFlavor: typeof import("./getCloudProjectFlavor").getCloudProjectFlavor = null as any;
export const getCloudProjectFlavorOutput: typeof import("./getCloudProjectFlavor").getCloudProjectFlavorOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectFlavor","getCloudProjectFlavorOutput"], () => require("./getCloudProjectFlavor"));

export { GetCloudProjectGatewayArgs, GetCloudProjectGatewayResult, GetCloudProjectGatewayOutputArgs } from "./getCloudProjectGateway";
export const getCloudProjectGateway: typeof import("./getCloudProjectGateway").getCloudProjectGateway = null as any;
export const getCloudProjectGatewayOutput: typeof import("./getCloudProjectGateway").getCloudProjectGatewayOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectGateway","getCloudProjectGatewayOutput"], () => require("./getCloudProjectGateway"));

export { GetCloudProjectRancherCapabilitiesPlanArgs, GetCloudProjectRancherCapabilitiesPlanResult, GetCloudProjectRancherCapabilitiesPlanOutputArgs } from "./getCloudProjectRancherCapabilitiesPlan";
export const getCloudProjectRancherCapabilitiesPlan: typeof import("./getCloudProjectRancherCapabilitiesPlan").getCloudProjectRancherCapabilitiesPlan = null as any;
export const getCloudProjectRancherCapabilitiesPlanOutput: typeof import("./getCloudProjectRancherCapabilitiesPlan").getCloudProjectRancherCapabilitiesPlanOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRancherCapabilitiesPlan","getCloudProjectRancherCapabilitiesPlanOutput"], () => require("./getCloudProjectRancherCapabilitiesPlan"));

export { GetCloudProjectRancherCapabilitiesVersionArgs, GetCloudProjectRancherCapabilitiesVersionResult, GetCloudProjectRancherCapabilitiesVersionOutputArgs } from "./getCloudProjectRancherCapabilitiesVersion";
export const getCloudProjectRancherCapabilitiesVersion: typeof import("./getCloudProjectRancherCapabilitiesVersion").getCloudProjectRancherCapabilitiesVersion = null as any;
export const getCloudProjectRancherCapabilitiesVersionOutput: typeof import("./getCloudProjectRancherCapabilitiesVersion").getCloudProjectRancherCapabilitiesVersionOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectRancherCapabilitiesVersion","getCloudProjectRancherCapabilitiesVersionOutput"], () => require("./getCloudProjectRancherCapabilitiesVersion"));

export { GetCloudProjectSshKeyArgs, GetCloudProjectSshKeyResult, GetCloudProjectSshKeyOutputArgs } from "./getCloudProjectSshKey";
export const getCloudProjectSshKey: typeof import("./getCloudProjectSshKey").getCloudProjectSshKey = null as any;
export const getCloudProjectSshKeyOutput: typeof import("./getCloudProjectSshKey").getCloudProjectSshKeyOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectSshKey","getCloudProjectSshKeyOutput"], () => require("./getCloudProjectSshKey"));

export { GetCloudProjectSshKeysArgs, GetCloudProjectSshKeysResult, GetCloudProjectSshKeysOutputArgs } from "./getCloudProjectSshKeys";
export const getCloudProjectSshKeys: typeof import("./getCloudProjectSshKeys").getCloudProjectSshKeys = null as any;
export const getCloudProjectSshKeysOutput: typeof import("./getCloudProjectSshKeys").getCloudProjectSshKeysOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProjectSshKeys","getCloudProjectSshKeysOutput"], () => require("./getCloudProjectSshKeys"));

export { GetInstallationTemplateArgs, GetInstallationTemplateResult, GetInstallationTemplateOutputArgs } from "./getInstallationTemplate";
export const getInstallationTemplate: typeof import("./getInstallationTemplate").getInstallationTemplate = null as any;
export const getInstallationTemplateOutput: typeof import("./getInstallationTemplate").getInstallationTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getInstallationTemplate","getInstallationTemplateOutput"], () => require("./getInstallationTemplate"));

export { GetInstallationTemplatesResult } from "./getInstallationTemplates";
export const getInstallationTemplates: typeof import("./getInstallationTemplates").getInstallationTemplates = null as any;
export const getInstallationTemplatesOutput: typeof import("./getInstallationTemplates").getInstallationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getInstallationTemplates","getInstallationTemplatesOutput"], () => require("./getInstallationTemplates"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetOvhcloudConnectConfigPopDatacenterExtrasArgs, GetOvhcloudConnectConfigPopDatacenterExtrasResult, GetOvhcloudConnectConfigPopDatacenterExtrasOutputArgs } from "./getOvhcloudConnectConfigPopDatacenterExtras";
export const getOvhcloudConnectConfigPopDatacenterExtras: typeof import("./getOvhcloudConnectConfigPopDatacenterExtras").getOvhcloudConnectConfigPopDatacenterExtras = null as any;
export const getOvhcloudConnectConfigPopDatacenterExtrasOutput: typeof import("./getOvhcloudConnectConfigPopDatacenterExtras").getOvhcloudConnectConfigPopDatacenterExtrasOutput = null as any;
utilities.lazyLoad(exports, ["getOvhcloudConnectConfigPopDatacenterExtras","getOvhcloudConnectConfigPopDatacenterExtrasOutput"], () => require("./getOvhcloudConnectConfigPopDatacenterExtras"));

export { GetOvhcloudConnectConfigPopDatacentersArgs, GetOvhcloudConnectConfigPopDatacentersResult, GetOvhcloudConnectConfigPopDatacentersOutputArgs } from "./getOvhcloudConnectConfigPopDatacenters";
export const getOvhcloudConnectConfigPopDatacenters: typeof import("./getOvhcloudConnectConfigPopDatacenters").getOvhcloudConnectConfigPopDatacenters = null as any;
export const getOvhcloudConnectConfigPopDatacentersOutput: typeof import("./getOvhcloudConnectConfigPopDatacenters").getOvhcloudConnectConfigPopDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getOvhcloudConnectConfigPopDatacenters","getOvhcloudConnectConfigPopDatacentersOutput"], () => require("./getOvhcloudConnectConfigPopDatacenters"));

export { GetOvhcloudConnectConfigPopsArgs, GetOvhcloudConnectConfigPopsResult, GetOvhcloudConnectConfigPopsOutputArgs } from "./getOvhcloudConnectConfigPops";
export const getOvhcloudConnectConfigPops: typeof import("./getOvhcloudConnectConfigPops").getOvhcloudConnectConfigPops = null as any;
export const getOvhcloudConnectConfigPopsOutput: typeof import("./getOvhcloudConnectConfigPops").getOvhcloudConnectConfigPopsOutput = null as any;
utilities.lazyLoad(exports, ["getOvhcloudConnectConfigPops","getOvhcloudConnectConfigPopsOutput"], () => require("./getOvhcloudConnectConfigPops"));

export { GetOvhcloudConnectDatacentersArgs, GetOvhcloudConnectDatacentersResult, GetOvhcloudConnectDatacentersOutputArgs } from "./getOvhcloudConnectDatacenters";
export const getOvhcloudConnectDatacenters: typeof import("./getOvhcloudConnectDatacenters").getOvhcloudConnectDatacenters = null as any;
export const getOvhcloudConnectDatacentersOutput: typeof import("./getOvhcloudConnectDatacenters").getOvhcloudConnectDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getOvhcloudConnectDatacenters","getOvhcloudConnectDatacentersOutput"], () => require("./getOvhcloudConnectDatacenters"));

export { GetServerArgs, GetServerResult, GetServerOutputArgs } from "./getServer";
export const getServer: typeof import("./getServer").getServer = null as any;
export const getServerOutput: typeof import("./getServer").getServerOutput = null as any;
utilities.lazyLoad(exports, ["getServer","getServerOutput"], () => require("./getServer"));

export { GetServersResult } from "./getServers";
export const getServers: typeof import("./getServers").getServers = null as any;
export const getServersOutput: typeof import("./getServers").getServersOutput = null as any;
utilities.lazyLoad(exports, ["getServers","getServersOutput"], () => require("./getServers"));

export { GetStorageEfsArgs, GetStorageEfsResult, GetStorageEfsOutputArgs } from "./getStorageEfs";
export const getStorageEfs: typeof import("./getStorageEfs").getStorageEfs = null as any;
export const getStorageEfsOutput: typeof import("./getStorageEfs").getStorageEfsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEfs","getStorageEfsOutput"], () => require("./getStorageEfs"));

export { GetStorageEfsShareAccessPathArgs, GetStorageEfsShareAccessPathResult, GetStorageEfsShareAccessPathOutputArgs } from "./getStorageEfsShareAccessPath";
export const getStorageEfsShareAccessPath: typeof import("./getStorageEfsShareAccessPath").getStorageEfsShareAccessPath = null as any;
export const getStorageEfsShareAccessPathOutput: typeof import("./getStorageEfsShareAccessPath").getStorageEfsShareAccessPathOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEfsShareAccessPath","getStorageEfsShareAccessPathOutput"], () => require("./getStorageEfsShareAccessPath"));

export { GetStorageEfsShareAccessPathsArgs, GetStorageEfsShareAccessPathsResult, GetStorageEfsShareAccessPathsOutputArgs } from "./getStorageEfsShareAccessPaths";
export const getStorageEfsShareAccessPaths: typeof import("./getStorageEfsShareAccessPaths").getStorageEfsShareAccessPaths = null as any;
export const getStorageEfsShareAccessPathsOutput: typeof import("./getStorageEfsShareAccessPaths").getStorageEfsShareAccessPathsOutput = null as any;
utilities.lazyLoad(exports, ["getStorageEfsShareAccessPaths","getStorageEfsShareAccessPathsOutput"], () => require("./getStorageEfsShareAccessPaths"));

export { GetVrackNetworksArgs, GetVrackNetworksResult, GetVrackNetworksOutputArgs } from "./getVrackNetworks";
export const getVrackNetworks: typeof import("./getVrackNetworks").getVrackNetworks = null as any;
export const getVrackNetworksOutput: typeof import("./getVrackNetworks").getVrackNetworksOutput = null as any;
utilities.lazyLoad(exports, ["getVrackNetworks","getVrackNetworksOutput"], () => require("./getVrackNetworks"));

export { OvhcloudConnectPopConfigArgs, OvhcloudConnectPopConfigState } from "./ovhcloudConnectPopConfig";
export type OvhcloudConnectPopConfig = import("./ovhcloudConnectPopConfig").OvhcloudConnectPopConfig;
export const OvhcloudConnectPopConfig: typeof import("./ovhcloudConnectPopConfig").OvhcloudConnectPopConfig = null as any;
utilities.lazyLoad(exports, ["OvhcloudConnectPopConfig"], () => require("./ovhcloudConnectPopConfig"));

export { OvhcloudConnectPopDatacenterConfigArgs, OvhcloudConnectPopDatacenterConfigState } from "./ovhcloudConnectPopDatacenterConfig";
export type OvhcloudConnectPopDatacenterConfig = import("./ovhcloudConnectPopDatacenterConfig").OvhcloudConnectPopDatacenterConfig;
export const OvhcloudConnectPopDatacenterConfig: typeof import("./ovhcloudConnectPopDatacenterConfig").OvhcloudConnectPopDatacenterConfig = null as any;
utilities.lazyLoad(exports, ["OvhcloudConnectPopDatacenterConfig"], () => require("./ovhcloudConnectPopDatacenterConfig"));

export { OvhcloudConnectPopDatacenterExtraConfigArgs, OvhcloudConnectPopDatacenterExtraConfigState } from "./ovhcloudConnectPopDatacenterExtraConfig";
export type OvhcloudConnectPopDatacenterExtraConfig = import("./ovhcloudConnectPopDatacenterExtraConfig").OvhcloudConnectPopDatacenterExtraConfig;
export const OvhcloudConnectPopDatacenterExtraConfig: typeof import("./ovhcloudConnectPopDatacenterExtraConfig").OvhcloudConnectPopDatacenterExtraConfig = null as any;
utilities.lazyLoad(exports, ["OvhcloudConnectPopDatacenterExtraConfig"], () => require("./ovhcloudConnectPopDatacenterExtraConfig"));

export * from "./provider";
import { Provider } from "./provider";

export { StorageEfsShareArgs, StorageEfsShareState } from "./storageEfsShare";
export type StorageEfsShare = import("./storageEfsShare").StorageEfsShare;
export const StorageEfsShare: typeof import("./storageEfsShare").StorageEfsShare = null as any;
utilities.lazyLoad(exports, ["StorageEfsShare"], () => require("./storageEfsShare"));

export { StorageEfsShareAclArgs, StorageEfsShareAclState } from "./storageEfsShareAcl";
export type StorageEfsShareAcl = import("./storageEfsShareAcl").StorageEfsShareAcl;
export const StorageEfsShareAcl: typeof import("./storageEfsShareAcl").StorageEfsShareAcl = null as any;
utilities.lazyLoad(exports, ["StorageEfsShareAcl"], () => require("./storageEfsShareAcl"));

export { StorageEfsShareSnapshotArgs, StorageEfsShareSnapshotState } from "./storageEfsShareSnapshot";
export type StorageEfsShareSnapshot = import("./storageEfsShareSnapshot").StorageEfsShareSnapshot;
export const StorageEfsShareSnapshot: typeof import("./storageEfsShareSnapshot").StorageEfsShareSnapshot = null as any;
utilities.lazyLoad(exports, ["StorageEfsShareSnapshot"], () => require("./storageEfsShareSnapshot"));

export { VrackIpv6RoutedSubrangeArgs, VrackIpv6RoutedSubrangeState } from "./vrackIpv6RoutedSubrange";
export type VrackIpv6RoutedSubrange = import("./vrackIpv6RoutedSubrange").VrackIpv6RoutedSubrange;
export const VrackIpv6RoutedSubrange: typeof import("./vrackIpv6RoutedSubrange").VrackIpv6RoutedSubrange = null as any;
utilities.lazyLoad(exports, ["VrackIpv6RoutedSubrange"], () => require("./vrackIpv6RoutedSubrange"));


// Export sub-modules:
import * as cloud from "./cloud";
import * as cloudproject from "./cloudproject";
import * as cloudprojectdatabase from "./cloudprojectdatabase";
import * as config from "./config";
import * as dbaas from "./dbaas";
import * as dedicated from "./dedicated";
import * as domain from "./domain";
import * as hosting from "./hosting";
import * as iam from "./iam";
import * as ip from "./ip";
import * as iploadbalancing from "./iploadbalancing";
import * as me from "./me";
import * as okms from "./okms";
import * as order from "./order";
import * as ovhcloud from "./ovhcloud";
import * as savingsplan from "./savingsplan";
import * as types from "./types";
import * as vmware from "./vmware";
import * as vps from "./vps";
import * as vrack from "./vrack";

export {
    cloud,
    cloudproject,
    cloudprojectdatabase,
    config,
    dbaas,
    dedicated,
    domain,
    hosting,
    iam,
    ip,
    iploadbalancing,
    me,
    okms,
    order,
    ovhcloud,
    savingsplan,
    types,
    vmware,
    vps,
    vrack,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:index/cloudProjectContainerregistryIam:CloudProjectContainerregistryIam":
                return new CloudProjectContainerregistryIam(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectDatabaseValkeyUser:CloudProjectDatabaseValkeyUser":
                return new CloudProjectDatabaseValkeyUser(name, <any>undefined, { urn })
            case "ovh:index/cloudProjectSshKey:CloudProjectSshKey":
                return new CloudProjectSshKey(name, <any>undefined, { urn })
            case "ovh:index/domainZoneDynhostRecord:DomainZoneDynhostRecord":
                return new DomainZoneDynhostRecord(name, <any>undefined, { urn })
            case "ovh:index/ovhcloudConnectPopConfig:OvhcloudConnectPopConfig":
                return new OvhcloudConnectPopConfig(name, <any>undefined, { urn })
            case "ovh:index/ovhcloudConnectPopDatacenterConfig:OvhcloudConnectPopDatacenterConfig":
                return new OvhcloudConnectPopDatacenterConfig(name, <any>undefined, { urn })
            case "ovh:index/ovhcloudConnectPopDatacenterExtraConfig:OvhcloudConnectPopDatacenterExtraConfig":
                return new OvhcloudConnectPopDatacenterExtraConfig(name, <any>undefined, { urn })
            case "ovh:index/storageEfsShare:StorageEfsShare":
                return new StorageEfsShare(name, <any>undefined, { urn })
            case "ovh:index/storageEfsShareAcl:StorageEfsShareAcl":
                return new StorageEfsShareAcl(name, <any>undefined, { urn })
            case "ovh:index/storageEfsShareSnapshot:StorageEfsShareSnapshot":
                return new StorageEfsShareSnapshot(name, <any>undefined, { urn })
            case "ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange":
                return new VrackIpv6RoutedSubrange(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectContainerregistryIam", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectDatabaseValkeyUser", _module)
pulumi.runtime.registerResourceModule("ovh", "index/cloudProjectSshKey", _module)
pulumi.runtime.registerResourceModule("ovh", "index/domainZoneDynhostRecord", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ovhcloudConnectPopConfig", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ovhcloudConnectPopDatacenterConfig", _module)
pulumi.runtime.registerResourceModule("ovh", "index/ovhcloudConnectPopDatacenterExtraConfig", _module)
pulumi.runtime.registerResourceModule("ovh", "index/storageEfsShare", _module)
pulumi.runtime.registerResourceModule("ovh", "index/storageEfsShareAcl", _module)
pulumi.runtime.registerResourceModule("ovh", "index/storageEfsShareSnapshot", _module)
pulumi.runtime.registerResourceModule("ovh", "index/vrackIpv6RoutedSubrange", _module)
pulumi.runtime.registerResourcePackage("ovh", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:ovh") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
