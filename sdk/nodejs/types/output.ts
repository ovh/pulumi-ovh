// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetInstallationTemplateInput {
    default: string;
    description: string;
    enums: string[];
    mandatory: boolean;
    name: string;
    type: string;
}

export interface GetInstallationTemplateLicense {
    os: outputs.GetInstallationTemplateLicenseO[];
    usages: outputs.GetInstallationTemplateLicenseUsage[];
}

export interface GetInstallationTemplateLicenseO {
    names: string[];
    url: string;
}

export interface GetInstallationTemplateLicenseUsage {
    names: string[];
    url: string;
}

export interface GetInstallationTemplateProject {
    /**
     * OS template project OS details
     */
    os: outputs.GetInstallationTemplateProjectO[];
    usages: outputs.GetInstallationTemplateProjectUsage[];
}

export interface GetInstallationTemplateProjectO {
    /**
     * OS template project item governance
     */
    governances: string[];
    /**
     * OS template project item name
     */
    name: string;
    /**
     * OS template project item release notes
     */
    releaseNotes: string;
    /**
     * OS template project item url
     */
    url: string;
    /**
     * OS template project item version
     */
    version: string;
}

export interface GetInstallationTemplateProjectUsage {
    /**
     * OS template project item governance
     */
    governances: string[];
    /**
     * OS template project item name
     */
    name: string;
    /**
     * OS template project item release notes
     */
    releaseNotes: string;
    /**
     * OS template project item url
     */
    url: string;
    /**
     * OS template project item version
     */
    version: string;
}

export interface GetServerVni {
    /**
     * VirtualNetworkInterface activation state
     */
    enabled: boolean;
    /**
     * VirtualNetworkInterface mode (public,vrack,vrack_aggregation)
     */
    mode: string;
    /**
     * User defined VirtualNetworkInterface name
     */
    name: string;
    /**
     * NetworkInterfaceControllers bound to this VirtualNetworkInterface
     */
    nics: string[];
    /**
     * Server name
     */
    serverName: string;
    /**
     * VirtualNetworkInterface unique id
     */
    uuid: string;
    /**
     * vRack name
     */
    vrack: string;
}

export namespace Cloud {
    export interface GetProjectIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetProjectsProject {
        /**
         * Project access
         */
        access: string;
        /**
         * Project creation date
         */
        creationDate: string;
        /**
         * Description of your project
         */
        description: string;
        /**
         * Expiration date of your project. After this date, your project will be deleted
         */
        expiration: string;
        /**
         * IAM resource metadata
         */
        iam: outputs.Cloud.GetProjectsProjectIam;
        /**
         * Manual quota prevent automatic quota upgrade
         */
        manualQuota: boolean;
        /**
         * Project order id
         */
        orderId: number;
        /**
         * Order plan code
         */
        planCode: string;
        /**
         * Project id
         */
        projectId: string;
        /**
         * Project name
         */
        projectName: string;
        /**
         * Service name
         */
        serviceName: string;
        /**
         * Current status
         */
        status: string;
        /**
         * Project unleashed
         */
        unleash: boolean;
    }

    export interface GetProjectsProjectIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

}

export namespace CloudProject {
    export interface AlertingFormattedMonthlyThreshold {
        currencyCode: string;
        text: string;
        value: number;
    }

    export interface ContainerRegistryPlan {
        /**
         * Plan code from catalog
         */
        code: string;
        /**
         * Plan creation date
         */
        createdAt: string;
        /**
         * Features of the plan
         */
        features: outputs.CloudProject.ContainerRegistryPlanFeature[];
        /**
         * Plan ID
         */
        id: string;
        /**
         * Plan name
         */
        name: string;
        /**
         * Container registry limits
         */
        registryLimits: outputs.CloudProject.ContainerRegistryPlanRegistryLimit[];
        /**
         * Plan last update date
         */
        updatedAt: string;
    }

    export interface ContainerRegistryPlanFeature {
        /**
         * Vulnerability scanning
         */
        vulnerability: boolean;
    }

    export interface ContainerRegistryPlanRegistryLimit {
        /**
         * Docker image storage limits in bytes
         */
        imageStorage: number;
        /**
         * Parallel requests on Docker image API (/v2 Docker registry API)
         */
        parallelRequest: number;
    }

    export interface DatabaseEndpoint {
        /**
         * Type of component the URI relates to
         */
        component: string;
        /**
         * Domain of the cluster
         */
        domain: string;
        /**
         * Path of the endpoint
         */
        path: string;
        /**
         * Connection port for the endpoint
         */
        port: number;
        /**
         * Scheme used to generate the URI
         */
        scheme: string;
        /**
         * Defines whether the endpoint uses SSL
         */
        ssl: boolean;
        /**
         * SSL mode used to connect to the service if the SSL is enabled
         */
        sslMode: string;
        /**
         * URI of the endpoint
         */
        uri: string;
    }

    export interface DatabaseIpRestriction {
        /**
         * Description of the IP restriction
         */
        description?: string;
        /**
         * Authorized IP
         */
        ip?: string;
        /**
         * Current status of the IP restriction
         */
        status: string;
    }

    export interface DatabaseNode {
        /**
         * Private network ID in which the node is. It's the regional openstackId of the private network.
         */
        networkId?: string;
        /**
         * Region of the node
         */
        region: string;
        /**
         * Private subnet ID in which the node is
         */
        subnetId?: string;
    }

    export interface GatewayExternalInformation {
        /**
         * List of external ips of the gateway
         */
        ips: outputs.CloudProject.GatewayExternalInformationIp[];
        /**
         * External network ID of the gateway
         */
        networkId: string;
    }

    export interface GatewayExternalInformationIp {
        /**
         * External IP of the gateway
         */
        ip: string;
        /**
         * Subnet ID of the ip
         */
        subnetId: string;
    }

    export interface GatewayInterface {
        /**
         * ID of the interface
         */
        id: string;
        /**
         * IP of the interface
         */
        ip: string;
        /**
         * Network ID of the interface
         */
        networkId: string;
        /**
         * Subnet ID of the interface
         */
        subnetId: string;
    }

    export interface GetCapabilitiesContainerFilterFeature {
        /**
         * Vulnerability scanning
         */
        vulnerability: boolean;
    }

    export interface GetCapabilitiesContainerFilterRegistryLimit {
        /**
         * Docker image storage limits in bytes
         */
        imageStorage: number;
        /**
         * Parallel requests on Docker image API (/v2 Docker registry API)
         */
        parallelRequest: number;
    }

    export interface GetCapabilitiesContainerRegistryResult {
        /**
         * Available plans in the region
         */
        plans: outputs.CloudProject.GetCapabilitiesContainerRegistryResultPlan[];
        /**
         * The region name
         */
        regionName: string;
    }

    export interface GetCapabilitiesContainerRegistryResultPlan {
        /**
         * Plan code from catalog
         */
        code: string;
        /**
         * Plan creation date
         */
        createdAt: string;
        /**
         * Features of the plan
         */
        features: outputs.CloudProject.GetCapabilitiesContainerRegistryResultPlanFeature[];
        /**
         * Plan ID
         */
        id: string;
        /**
         * Plan name
         */
        name: string;
        /**
         * Container registry limits
         */
        registryLimits: outputs.CloudProject.GetCapabilitiesContainerRegistryResultPlanRegistryLimit[];
        /**
         * Plan last update date
         */
        updatedAt: string;
    }

    export interface GetCapabilitiesContainerRegistryResultPlanFeature {
        /**
         * Vulnerability scanning
         */
        vulnerability: boolean;
    }

    export interface GetCapabilitiesContainerRegistryResultPlanRegistryLimit {
        /**
         * Docker image storage limits in bytes
         */
        imageStorage: number;
        /**
         * Parallel requests on Docker image API (/v2 Docker registry API)
         */
        parallelRequest: number;
    }

    export interface GetContainerRegistriesResult {
        /**
         * Registry creation date
         */
        createdAt: string;
        /**
         * Registry ID
         */
        id: string;
        /**
         * Registry name
         */
        name: string;
        /**
         * Project ID of your registry
         */
        projectId: string;
        /**
         * Region of the registry.
         */
        region: string;
        /**
         * Current size of the registry (bytes)
         */
        size: number;
        /**
         * Registry status
         */
        status: string;
        /**
         * Registry last update date
         */
        updatedAt: string;
        /**
         * Access url of the registry
         */
        url: string;
        /**
         * Version of your registry
         */
        version: string;
    }

    export interface GetContainerRegistryUsersResult {
        /**
         * User email
         */
        email: string;
        /**
         * User ID
         */
        id: string;
        /**
         * User name
         */
        user: string;
    }

    export interface GetFlavorsFlavor {
        /**
         * Available in stock
         */
        available: boolean;
        /**
         * Capabilities of the flavor
         */
        capabilities: outputs.CloudProject.GetFlavorsFlavorCapability[];
        /**
         * Number of disks
         */
        disk: number;
        /**
         * Flavor id
         */
        id: string;
        /**
         * Max capacity of inbound traffic in Mbit/s
         */
        inboundBandwidth: number;
        /**
         * Flavor name
         */
        name: string;
        /**
         * OS to install on
         */
        osType: string;
        /**
         * Max capacity of outbound traffic in Mbit/s
         */
        outboundBandwidth: number;
        /**
         * Plan codes to order instances
         */
        planCodes: outputs.CloudProject.GetFlavorsFlavorPlanCodes;
        /**
         * Number instance you can spawn with your actual quota
         */
        quota: number;
        /**
         * Ram quantity (Gio)
         */
        ram: number;
        /**
         * Flavor region
         */
        region: string;
        /**
         * Flavor type
         */
        type: string;
        /**
         * Number of VCPUs
         */
        vcpus: number;
    }

    export interface GetFlavorsFlavorCapability {
        /**
         * Is the capability enabled
         */
        enabled: boolean;
        /**
         * Name of the capability
         */
        name: string;
    }

    export interface GetFlavorsFlavorPlanCodes {
        /**
         * Plan code to order hourly instance
         */
        hourly: string;
        /**
         * Plan code to order monthly instance
         */
        monthly: string;
    }

    export interface GetFloatingIPsCloudProjectFloatingip {
        /**
         * Associated entity with the floating ip
         */
        associatedEntity: outputs.CloudProject.GetFloatingIPsCloudProjectFloatingipAssociatedEntity;
        /**
         * ID of the floating ip
         */
        id: string;
        /**
         * Value of the floating ip
         */
        ip: string;
        /**
         * ID of the network
         */
        networkId: string;
        /**
         * Floating ip region
         */
        region: string;
        /**
         * Status of the floating ip
         */
        status: string;
    }

    export interface GetFloatingIPsCloudProjectFloatingipAssociatedEntity {
        /**
         * ID of the gateway
         */
        gatewayId: string;
        /**
         * ID of the port
         */
        id: string;
        /**
         * IP of the port
         */
        ip: string;
        /**
         * Type of the port
         */
        type: string;
    }

    export interface GetInstanceAddress {
        /**
         * IP address
         */
        ip: string;
        /**
         * IP version
         */
        version: number;
    }

    export interface GetInstanceAttachedVolume {
        /**
         * Volume id
         */
        id: string;
    }

    export interface GetInstancesInstance {
        /**
         * Instance IP addresses
         */
        addresses: outputs.CloudProject.GetInstancesInstanceAddress[];
        /**
         * Volumes attached to the instance
         */
        attachedVolumes: outputs.CloudProject.GetInstancesInstanceAttachedVolume[];
        /**
         * Availability Zone
         */
        availabilityZone: string;
        /**
         * Flavor id
         */
        flavorId: string;
        /**
         * Flavor name
         */
        flavorName: string;
        /**
         * Instance id
         */
        id: string;
        /**
         * Image id
         */
        imageId: string;
        /**
         * Instance name
         */
        name: string;
        /**
         * SSH Key pair name
         */
        sshKey: string;
        /**
         * Instance task state
         */
        taskState: string;
    }

    export interface GetInstancesInstanceAddress {
        /**
         * IP address
         */
        ip: string;
        /**
         * IP version
         */
        version: number;
    }

    export interface GetInstancesInstanceAttachedVolume {
        /**
         * Volume id
         */
        id: string;
    }

    export interface GetKubeCustomization {
        /**
         * @deprecated Use customizationApiserver instead
         */
        apiservers: outputs.CloudProject.GetKubeCustomizationApiserver[];
    }

    export interface GetKubeCustomizationApiserver {
        admissionplugins: outputs.CloudProject.GetKubeCustomizationApiserverAdmissionplugin[];
    }

    export interface GetKubeCustomizationApiserverAdmissionplugin {
        disableds: string[];
        enableds: string[];
    }

    export interface GetKubeCustomizationKubeProxy {
        iptables?: outputs.CloudProject.GetKubeCustomizationKubeProxyIptables;
        ipvs?: outputs.CloudProject.GetKubeCustomizationKubeProxyIpvs;
    }

    export interface GetKubeCustomizationKubeProxyIptables {
        minSyncPeriod?: string;
        syncPeriod?: string;
    }

    export interface GetKubeCustomizationKubeProxyIpvs {
        minSyncPeriod?: string;
        scheduler?: string;
        syncPeriod?: string;
        tcpFinTimeout?: string;
        tcpTimeout?: string;
        udpTimeout?: string;
    }

    export interface GetKubeNodePoolNodesNode {
        /**
         * Creation date
         */
        createdAt: string;
        /**
         * Node deployment date
         */
        deployedAt: string;
        /**
         * Flavor name
         */
        flavor: string;
        /**
         * Node ID
         */
        id: string;
        /**
         * Public Cloud instance ID
         */
        instanceId: string;
        /**
         * True if the node is up to date
         */
        isUpToDate: boolean;
        /**
         * Node name
         */
        name: string;
        /**
         * NodePool parent ID
         */
        nodePoolId: string;
        /**
         * Project ID
         */
        projectId: string;
        /**
         * Current status
         */
        status: string;
        /**
         * Last update date
         */
        updatedAt: string;
        /**
         * Node version
         */
        version: string;
    }

    export interface GetKubeNodePoolTemplate {
        /**
         * metadata
         */
        metadata?: outputs.CloudProject.GetKubeNodePoolTemplateMetadata;
        /**
         * spec
         */
        spec?: outputs.CloudProject.GetKubeNodePoolTemplateSpec;
    }

    export interface GetKubeNodePoolTemplateMetadata {
        /**
         * annotations
         */
        annotations?: {[key: string]: string};
        /**
         * finalizers
         */
        finalizers?: string[];
        /**
         * labels
         */
        labels?: {[key: string]: string};
    }

    export interface GetKubeNodePoolTemplateSpec {
        /**
         * taints
         */
        taints?: {[key: string]: string}[];
        /**
         * unschedulable
         */
        unschedulable?: boolean;
    }

    export interface GetKubeNodesNode {
        /**
         * Creation date
         */
        createdAt: string;
        /**
         * Node deployment date
         */
        deployedAt: string;
        /**
         * Flavor name
         */
        flavor: string;
        /**
         * Node ID
         */
        id: string;
        /**
         * Public Cloud instance ID
         */
        instanceId: string;
        /**
         * True if the node is up to date
         */
        isUpToDate: boolean;
        /**
         * Node name
         */
        name: string;
        /**
         * NodePool parent ID
         */
        nodePoolId: string;
        /**
         * Project ID
         */
        projectId: string;
        /**
         * Current status
         */
        status: string;
        /**
         * Last update date
         */
        updatedAt: string;
        /**
         * Node version
         */
        version: string;
    }

    export interface GetLoadBalancerFlavorsFlavor {
        /**
         * Flavor id
         */
        id: string;
        /**
         * Flavor name
         */
        name: string;
        /**
         * Region name
         */
        region: string;
    }

    export interface GetLoadBalancerFloatingIp {
        /**
         * ID of the floating IP
         */
        id: string;
        /**
         * IP Address of the floating IP
         */
        ip: string;
    }

    export interface GetLoadBalancersLoadbalancer {
        /**
         * The UTC date and timestamp when the loadbalancer was created
         */
        createdAt: string;
        /**
         * ID of the flavor
         */
        flavorId: string;
        /**
         * Information about floating IP
         */
        floatingIp: outputs.CloudProject.GetLoadBalancersLoadbalancerFloatingIp;
        /**
         * ID of the loadbalancer
         */
        id: string;
        /**
         * Name of the loadbalancer
         */
        name: string;
        /**
         * Operating status of the loadbalancer
         */
        operatingStatus: string;
        /**
         * Provisioning status of the loadbalancer
         */
        provisioningStatus: string;
        /**
         * Region of the loadbalancer
         */
        region: string;
        /**
         * UTC date and timestamp when the loadbalancer was updated
         */
        updatedAt: string;
        /**
         * IP address of the Virtual IP
         */
        vipAddress: string;
        /**
         * Openstack ID of the network for the Virtual IP
         */
        vipNetworkId: string;
        /**
         * ID of the subnet for the Virtual IP
         */
        vipSubnetId: string;
    }

    export interface GetLoadBalancersLoadbalancerFloatingIp {
        /**
         * ID of the floating IP
         */
        id: string;
        /**
         * IP Address of the floating IP
         */
        ip: string;
    }

    export interface GetNetworkPrivateRegion {
        /**
         * Network id on openstack region
         */
        openstackId: string;
        /**
         * Network region
         */
        region: string;
        /**
         * Network region status
         */
        status: string;
    }

    export interface GetNetworkPrivateSubnetsSubnet {
        /**
         * Subnet CIDR
         */
        cidr: string;
        /**
         * Is DHCP enabled for the subnet
         */
        dhcpEnabled: boolean;
        /**
         * Gateway IP in the subnet
         */
        gatewayIp: string;
        /**
         * Subnet id
         */
        id: string;
        /**
         * List of ip pools allocated in subnet
         */
        ipPools: outputs.CloudProject.GetNetworkPrivateSubnetsSubnetIpPool[];
    }

    export interface GetNetworkPrivateSubnetsSubnetIpPool {
        /**
         * Enable DHCP
         */
        dhcp: boolean;
        /**
         * Last IP for this region (eg: 192.168.1.24)
         */
        end: string;
        /**
         * Global network with cidr (eg: 192.168.1.0/24)
         */
        network: string;
        /**
         * Region of the subnet
         */
        region: string;
        /**
         * First IP for this region (eg: 192.168.1.12)
         */
        start: string;
    }

    export interface GetNetworkPrivatesNetwork {
        /**
         * Network id
         */
        id: string;
        /**
         * Network name
         */
        name: string;
        /**
         * Details about private network in region
         */
        regions: outputs.CloudProject.GetNetworkPrivatesNetworkRegion[];
        /**
         * Network status
         */
        status: string;
        /**
         * Network type
         */
        type: string;
        /**
         * Network VLAN id
         */
        vlanId: number;
    }

    export interface GetNetworkPrivatesNetworkRegion {
        /**
         * Network id on openstack region
         */
        openstackId: string;
        /**
         * Network region
         */
        region: string;
        /**
         * Network region status
         */
        status: string;
    }

    export interface GetOpenSearchUserAcl {
        /**
         * Pattern of the ACL
         */
        pattern: string;
        /**
         * Permission of the ACL
         */
        permission: string;
    }

    export interface GetPrometheusTarget {
        /**
         * Host of the endpoint
         */
        host: string;
        /**
         * Connection port for the endpoint
         */
        port: number;
    }

    export interface GetRancherCurrentState {
        /**
         * Bootstrap password of the managed Rancher service, returned only on creation
         */
        bootstrapPassword: string;
        /**
         * List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
         */
        ipRestrictions: outputs.CloudProject.GetRancherCurrentStateIpRestriction[];
        /**
         * Name of the managed Rancher service
         */
        name: string;
        /**
         * Networking properties of a managed Rancher service
         */
        networking: outputs.CloudProject.GetRancherCurrentStateNetworking;
        /**
         * Plan of the managed Rancher service
         */
        plan: string;
        /**
         * Region of the managed Rancher service
         */
        region: string;
        /**
         * URL of the managed Rancher service
         */
        url: string;
        /**
         * Latest metrics regarding the usage of the managed Rancher service
         */
        usage: outputs.CloudProject.GetRancherCurrentStateUsage;
        /**
         * Version of the managed Rancher service
         */
        version: string;
    }

    export interface GetRancherCurrentStateIpRestriction {
        /**
         * Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
         */
        cidrBlock: string;
        /**
         * Description of the allowed CIDR block
         */
        description: string;
    }

    export interface GetRancherCurrentStateNetworking {
        /**
         * Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access.
         */
        egressCidrBlocks: string[];
    }

    export interface GetRancherCurrentStateUsage {
        /**
         * Date of the sample
         */
        datetime: string;
        /**
         * Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters
         */
        orchestratedVcpus: number;
    }

    export interface GetRancherCurrentTask {
        /**
         * Identifier of the current task
         */
        id: string;
        /**
         * Link to the task details
         */
        link: string;
        /**
         * Current global status of the current task
         */
        status: string;
        /**
         * Type of the current task
         */
        type: string;
    }

    export interface GetRancherPlanPlan {
        /**
         * Cause for an unavailability
         */
        cause: string;
        /**
         * Human-readable description of the unavailability cause
         */
        message: string;
        /**
         * Name of the plan
         */
        name: string;
        /**
         * Status of the plan
         */
        status: string;
    }

    export interface GetRancherTargetSpec {
        /**
         * List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
         */
        ipRestrictions: outputs.CloudProject.GetRancherTargetSpecIpRestriction[];
        /**
         * Name of the managed Rancher service
         */
        name: string;
        /**
         * Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan
         */
        plan: string;
        /**
         * Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version
         */
        version: string;
    }

    export interface GetRancherTargetSpecIpRestriction {
        /**
         * Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
         */
        cidrBlock: string;
        /**
         * Description of the allowed CIDR block
         */
        description: string;
    }

    export interface GetRancherVersionVersion {
        /**
         * Cause for an unavailability
         */
        cause: string;
        /**
         * Changelog URL of the version
         */
        changelogUrl: string;
        /**
         * Human-readable description of the unavailability cause
         */
        message: string;
        /**
         * Name of the version
         */
        name: string;
        /**
         * Status of the version
         */
        status: string;
    }

    export interface GetRegionService {
        name: string;
        status: string;
    }

    export interface GetStorageEncryption {
        /**
         * Encryption algorithm
         */
        sseAlgorithm: string;
    }

    export interface GetStorageObject {
        /**
         * ETag
         */
        etag: string;
        /**
         * Whether this object is a delete marker
         */
        isDeleteMarker: boolean;
        /**
         * Whether this is the latest version of the object
         */
        isLatest: boolean;
        /**
         * Key
         */
        key: string;
        /**
         * Last modification date
         */
        lastModified: string;
        /**
         * Size (bytes)
         */
        size: number;
        /**
         * Storage class
         */
        storageClass: string;
        /**
         * Version ID of the object
         */
        versionId: string;
    }

    export interface GetStorageReplication {
        /**
         * Replication rules
         */
        rules: outputs.CloudProject.GetStorageReplicationRule[];
    }

    export interface GetStorageReplicationRule {
        /**
         * Delete marker replication
         */
        deleteMarkerReplication: string;
        /**
         * Rule destination configuration
         */
        destination: outputs.CloudProject.GetStorageReplicationRuleDestination;
        /**
         * Rule filters
         */
        filter: outputs.CloudProject.GetStorageReplicationRuleFilter;
        /**
         * Rule ID
         */
        id: string;
        /**
         * Rule priority
         */
        priority: number;
        /**
         * Rule status
         */
        status: string;
    }

    export interface GetStorageReplicationRuleDestination {
        /**
         * Destination bucket name
         */
        name: string;
        /**
         * Destination region, can be null if destination bucket has been deleted
         */
        region: string;
        /**
         * Destination storage class
         */
        storageClass: string;
    }

    export interface GetStorageReplicationRuleFilter {
        /**
         * Prefix filter
         */
        prefix: string;
        /**
         * Tags filter
         */
        tags: {[key: string]: string};
    }

    export interface GetStorageVersioning {
        /**
         * Versioning status
         */
        status: string;
    }

    export interface GetStoragesContainer {
        /**
         * The date and timestamp when the resource was created
         */
        createdAt: string;
        /**
         * Encryption configuration
         */
        encryption: outputs.CloudProject.GetStoragesContainerEncryption;
        /**
         * Container name
         */
        name: string;
        /**
         * Container objects
         */
        objects: outputs.CloudProject.GetStoragesContainerObject[];
        /**
         * Container total objects count
         */
        objectsCount: number;
        /**
         * Container total objects size (bytes)
         */
        objectsSize: number;
        /**
         * Container owner user ID
         */
        ownerId: number;
        /**
         * Container region
         */
        region: string;
        /**
         * Replication configuration
         */
        replication: outputs.CloudProject.GetStoragesContainerReplication;
        /**
         * Container tags
         */
        tags: {[key: string]: string};
        /**
         * Versioning configuration
         */
        versioning: outputs.CloudProject.GetStoragesContainerVersioning;
        /**
         * Container virtual host
         */
        virtualHost: string;
    }

    export interface GetStoragesContainerEncryption {
        /**
         * Encryption algorithm
         */
        sseAlgorithm: string;
    }

    export interface GetStoragesContainerObject {
        /**
         * ETag
         */
        etag: string;
        /**
         * Whether this object is a delete marker
         */
        isDeleteMarker: boolean;
        /**
         * Whether this is the latest version of the object
         */
        isLatest: boolean;
        /**
         * Key
         */
        key: string;
        /**
         * Last modification date
         */
        lastModified: string;
        /**
         * Size (bytes)
         */
        size: number;
        /**
         * Storage class
         */
        storageClass: string;
        /**
         * Version ID of the object
         */
        versionId: string;
    }

    export interface GetStoragesContainerReplication {
        /**
         * Replication rules
         */
        rules: outputs.CloudProject.GetStoragesContainerReplicationRule[];
    }

    export interface GetStoragesContainerReplicationRule {
        /**
         * Delete marker replication
         */
        deleteMarkerReplication: string;
        /**
         * Rule destination configuration
         */
        destination: outputs.CloudProject.GetStoragesContainerReplicationRuleDestination;
        /**
         * Rule filters
         */
        filter: outputs.CloudProject.GetStoragesContainerReplicationRuleFilter;
        /**
         * Rule ID
         */
        id: string;
        /**
         * Rule priority
         */
        priority: number;
        /**
         * Rule status
         */
        status: string;
    }

    export interface GetStoragesContainerReplicationRuleDestination {
        /**
         * Destination bucket name
         */
        name: string;
        /**
         * Destination region, can be null if destination bucket has been deleted
         */
        region: string;
        /**
         * Destination storage class
         */
        storageClass: string;
    }

    export interface GetStoragesContainerReplicationRuleFilter {
        /**
         * Prefix filter
         */
        prefix: string;
        /**
         * Tags filter
         */
        tags: {[key: string]: string};
    }

    export interface GetStoragesContainerVersioning {
        /**
         * Versioning status
         */
        status: string;
    }

    export interface GetUserRole {
        description: string;
        id: string;
        name: string;
        permissions: string[];
    }

    export interface GetUsersUser {
        creationDate: string;
        description: string;
        roles: outputs.CloudProject.GetUsersUserRole[];
        status: string;
        userId: string;
        username: string;
    }

    export interface GetUsersUserRole {
        description: string;
        id: string;
        name: string;
        permissions: string[];
    }

    export interface GetVolumesVolume {
        /**
         * Volume ID
         */
        id: string;
        /**
         * Volume name
         */
        name: string;
        /**
         * Volume size
         */
        size: number;
    }

    export interface InstanceAddress {
        /**
         * IP address
         */
        ip: string;
        /**
         * IP version
         */
        version: number;
    }

    export interface InstanceAttachedVolume {
        /**
         * Volume id
         */
        id: string;
    }

    export interface InstanceAutoBackup {
        /**
         * Unix cron pattern
         */
        cron: string;
        /**
         * Number of backup to keep
         */
        rotation: number;
    }

    export interface InstanceBootFrom {
        /**
         * Instance image id
         */
        imageId?: string;
        /**
         * Instance volume id
         */
        volumeId?: string;
    }

    export interface InstanceFlavor {
        /**
         * Flavor id
         */
        flavorId: string;
    }

    export interface InstanceGroup {
        /**
         * Group id
         */
        groupId?: string;
    }

    export interface InstanceNetwork {
        /**
         * Set the new instance as public
         */
        public?: boolean;
    }

    export interface InstanceSshKey {
        /**
         * SSH Key pair name
         */
        name: string;
    }

    export interface InstanceSshKeyCreate {
        /**
         * SSH Key pair name
         */
        name: string;
        /**
         * SSH Public Key
         */
        publicKey: string;
    }

    export interface KubeCustomization {
        /**
         * @deprecated Use customizationApiserver instead
         */
        apiservers: outputs.CloudProject.KubeCustomizationApiserver[];
    }

    export interface KubeCustomizationApiserver {
        admissionplugins: outputs.CloudProject.KubeCustomizationApiserverAdmissionplugin[];
    }

    export interface KubeCustomizationApiserverAdmissionplugin {
        disableds: string[];
        enableds: string[];
    }

    export interface KubeCustomizationKubeProxy {
        iptables?: outputs.CloudProject.KubeCustomizationKubeProxyIptables;
        ipvs?: outputs.CloudProject.KubeCustomizationKubeProxyIpvs;
    }

    export interface KubeCustomizationKubeProxyIptables {
        minSyncPeriod?: string;
        syncPeriod?: string;
    }

    export interface KubeCustomizationKubeProxyIpvs {
        minSyncPeriod?: string;
        scheduler?: string;
        syncPeriod?: string;
        tcpFinTimeout?: string;
        tcpTimeout?: string;
        udpTimeout?: string;
    }

    export interface KubeKubeconfigAttribute {
        clientCertificate: string;
        clientKey: string;
        clusterCaCertificate: string;
        host: string;
    }

    export interface KubeNodePoolTemplate {
        /**
         * metadata
         */
        metadata: outputs.CloudProject.KubeNodePoolTemplateMetadata;
        /**
         * spec
         */
        spec: outputs.CloudProject.KubeNodePoolTemplateSpec;
    }

    export interface KubeNodePoolTemplateMetadata {
        /**
         * annotations
         */
        annotations: {[key: string]: string};
        /**
         * finalizers
         */
        finalizers: string[];
        /**
         * labels
         */
        labels: {[key: string]: string};
    }

    export interface KubeNodePoolTemplateSpec {
        /**
         * taints
         */
        taints: {[key: string]: string}[];
        /**
         * unschedulable
         */
        unschedulable: boolean;
    }

    export interface KubePrivateNetworkConfiguration {
        /**
         * If defined, all egress traffic will be routed towards this IP address, which should belong to the private network. Empty string means disabled.
         */
        defaultVrackGateway: string;
        /**
         * Defines whether routing should default to using the nodes' private interface, instead of their public interface. Default is false.
         */
        privateNetworkRoutingAsDefault: boolean;
    }

    export interface LoadbalancerFloatingIp {
        /**
         * ID of the resource
         */
        id: string;
        /**
         * IP Address of the resource
         */
        ip: string;
    }

    export interface LoadbalancerListener {
        /**
         * The allowed CIDRs
         */
        allowedCidrs?: string[];
        /**
         * The description of the listener
         */
        description?: string;
        /**
         * Name of the listener
         */
        name?: string;
        /**
         * Listener pool
         */
        pool?: outputs.CloudProject.LoadbalancerListenerPool;
        /**
         * Listener port
         */
        port: number;
        /**
         * Protocol for the listener
         */
        protocol: string;
        /**
         * Secret ID to get certificate for SSL listener creation
         */
        secretId?: string;
        /**
         * Timeout client data of the listener
         */
        timeoutClientData?: number;
        /**
         * Timeout member data of the listener
         */
        timeoutMemberData?: number;
        /**
         * TLS versions of the listener
         */
        tlsVersions?: string[];
    }

    export interface LoadbalancerListenerPool {
        /**
         * Pool algorithm to split traffic between members
         */
        algorithm?: string;
        /**
         * Pool health monitor
         */
        healthMonitor?: outputs.CloudProject.LoadbalancerListenerPoolHealthMonitor;
        /**
         * Pool members
         */
        members: outputs.CloudProject.LoadbalancerListenerPoolMember[];
        /**
         * Name of the pool
         */
        name: string;
        /**
         * Protocol for the pool
         */
        protocol?: string;
        /**
         * Pool session persistence
         */
        sessionPersistence?: outputs.CloudProject.LoadbalancerListenerPoolSessionPersistence;
    }

    export interface LoadbalancerListenerPoolHealthMonitor {
        /**
         * Duration between sending probes to members, in seconds
         */
        delay?: number;
        /**
         * Monitor HTTP configuration
         */
        httpConfiguration: outputs.CloudProject.LoadbalancerListenerPoolHealthMonitorHttpConfiguration;
        /**
         * Number of successful checks before changing the operating status of the member to ONLINE
         */
        maxRetries?: number;
        /**
         * Number of allowed check failures before changing the operating status of the member to ERROR
         */
        maxRetriesDown: number;
        /**
         * Type of the monitor
         */
        monitorType?: string;
        /**
         * The name of the resource
         */
        name?: string;
        /**
         * The operating status of the resource
         */
        operatingStatus: string;
        /**
         * The provisioning status of the resource
         */
        provisioningStatus: string;
        /**
         * Maximum time, in seconds, that a monitor waits to connect before it times out. This value must be less than the delay value
         */
        timeout?: number;
    }

    export interface LoadbalancerListenerPoolHealthMonitorHttpConfiguration {
        /**
         * Domain name, which be injected into the HTTP Host Header to the backend server for HTTP health check
         */
        domainName: string;
        /**
         * Status codes expected in response from the member to declare it healthy; The list of HTTP status codes expected in response from the member to declare it healthy. Specify one of the following values: * A single value, such as 200; * A list, such as 200, 202; * A range, such as 200-204
         */
        expectedCodes: string;
        /**
         * HTTP method that the health monitor uses for requests
         */
        httpMethod?: string;
        /**
         * HTTP version that the health monitor uses for requests
         */
        httpVersion: string;
        /**
         * HTTP URL path of the request sent by the monitor to test the health of a backend member
         */
        urlPath: string;
    }

    export interface LoadbalancerListenerPoolMember {
        /**
         * IP address of the resource
         */
        address?: string;
        /**
         * Name of the member
         */
        name: string;
        /**
         * Protocol port number for the resource
         */
        protocolPort?: number;
        /**
         * Weight of a member determines the portion of requests or connections it services compared to the other members of the pool. Between 1 and 256.
         */
        weight: number;
    }

    export interface LoadbalancerListenerPoolSessionPersistence {
        /**
         * Cookie name, only applicable to session persistence through cookie
         */
        cookieName: string;
        /**
         * Type of session persistence
         */
        type: string;
    }

    export interface LoadbalancerNetwork {
        /**
         * Information to private network
         */
        private: outputs.CloudProject.LoadbalancerNetworkPrivate;
    }

    export interface LoadbalancerNetworkPrivate {
        /**
         * Floating IP to associate
         */
        floatingIp?: outputs.CloudProject.LoadbalancerNetworkPrivateFloatingIp;
        /**
         * Floating IP to create
         */
        floatingIpCreate?: outputs.CloudProject.LoadbalancerNetworkPrivateFloatingIpCreate;
        /**
         * Gateway to associate
         */
        gateway?: outputs.CloudProject.LoadbalancerNetworkPrivateGateway;
        /**
         * Gateway to create
         */
        gatewayCreate?: outputs.CloudProject.LoadbalancerNetworkPrivateGatewayCreate;
        /**
         * Network to associate
         */
        network: outputs.CloudProject.LoadbalancerNetworkPrivateNetwork;
    }

    export interface LoadbalancerNetworkPrivateFloatingIp {
        /**
         * ID of the floatingIp
         */
        id?: string;
    }

    export interface LoadbalancerNetworkPrivateFloatingIpCreate {
        /**
         * Description for the floatingIp
         */
        description?: string;
    }

    export interface LoadbalancerNetworkPrivateGateway {
        /**
         * ID of the gateway
         */
        id?: string;
    }

    export interface LoadbalancerNetworkPrivateGatewayCreate {
        /**
         * Model of the gateway
         */
        model?: string;
        /**
         * Name of the gateway
         */
        name?: string;
    }

    export interface LoadbalancerNetworkPrivateNetwork {
        /**
         * Private network ID
         */
        id: string;
        /**
         * Subnet ID
         */
        subnetId: string;
    }

    export interface NetworkPrivateRegionsAttribute {
        openstackid: string;
        region: string;
        status: string;
    }

    export interface NetworkPrivateRegionsStatus {
        region: string;
        status: string;
    }

    export interface NetworkPrivateSubnetIpPool {
        dhcp: boolean;
        end: string;
        network: string;
        region: string;
        start: string;
    }

    export interface NetworkPrivateSubnetV2AllocationPool {
        end: string;
        start: string;
    }

    export interface NetworkPrivateSubnetV2HostRoute {
        destination: string;
        nexthop: string;
    }

    export interface ProjectOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.CloudProject.ProjectOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface ProjectOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface ProjectPlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.CloudProject.ProjectPlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface ProjectPlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface ProjectPlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.CloudProject.ProjectPlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface ProjectPlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface RancherCurrentState {
        /**
         * Bootstrap password of the managed Rancher service, returned only on creation
         */
        bootstrapPassword: string;
        /**
         * List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
         */
        ipRestrictions: outputs.CloudProject.RancherCurrentStateIpRestriction[];
        /**
         * Name of the managed Rancher service
         */
        name: string;
        /**
         * Networking properties of a managed Rancher service
         */
        networking: outputs.CloudProject.RancherCurrentStateNetworking;
        /**
         * Plan of the managed Rancher service
         */
        plan: string;
        /**
         * Region of the managed Rancher service
         */
        region: string;
        /**
         * URL of the managed Rancher service
         */
        url: string;
        /**
         * Latest metrics regarding the usage of the managed Rancher service
         */
        usage: outputs.CloudProject.RancherCurrentStateUsage;
        /**
         * Version of the managed Rancher service
         */
        version: string;
    }

    export interface RancherCurrentStateIpRestriction {
        /**
         * Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
         */
        cidrBlock: string;
        /**
         * Description of the allowed CIDR block
         */
        description: string;
    }

    export interface RancherCurrentStateNetworking {
        /**
         * Specifies the CIDR ranges for egress IP addresses used by Rancher. Ensure these ranges are allowed in any IP restrictions for services that Rancher will access.
         */
        egressCidrBlocks: string[];
    }

    export interface RancherCurrentStateUsage {
        /**
         * Date of the sample
         */
        datetime: string;
        /**
         * Total number of vCPUs orchestrated by the managed Rancher service through the downstream clusters
         */
        orchestratedVcpus: number;
    }

    export interface RancherCurrentTask {
        /**
         * Identifier of the current task
         */
        id: string;
        /**
         * Link to the task details
         */
        link: string;
        /**
         * Current global status of the current task
         */
        status: string;
        /**
         * Type of the current task
         */
        type: string;
    }

    export interface RancherTargetSpec {
        /**
         * List of allowed CIDR blocks for a managed Rancher service's IP restrictions. When empty, any IP is allowed
         */
        ipRestrictions: outputs.CloudProject.RancherTargetSpecIpRestriction[];
        /**
         * Name of the managed Rancher service
         */
        name: string;
        /**
         * Plan of the managed Rancher service. Available plans for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/plan
         */
        plan: string;
        /**
         * Version of the managed Rancher service. Available versions for an existing managed Rancher can be retrieved using GET /rancher/rancherID/capabilities/version. Default is the latest version.
         */
        version: string;
    }

    export interface RancherTargetSpecIpRestriction {
        /**
         * Allowed CIDR block (/subnet is optional, if unspecified then /32 will be used)
         */
        cidrBlock: string;
        /**
         * Description of the allowed CIDR block
         */
        description: string;
    }

    export interface RegionNetworkSubnet {
        /**
         * List of ip pools allocated in subnet
         */
        allocationPools?: outputs.CloudProject.RegionNetworkSubnetAllocationPool[];
        /**
         * Subnet range in CIDR notation
         */
        cidr: string;
        /**
         * DNS nameservers
         */
        dnsNameServers?: string[];
        /**
         * Enable DHCP for the subnet
         */
        enableDhcp: boolean;
        /**
         * Set a gateway ip for the subnet
         */
        enableGatewayIp: boolean;
        /**
         * Gateway IP
         */
        gatewayIp?: string;
        /**
         * Host routes
         */
        hostRoutes?: outputs.CloudProject.RegionNetworkSubnetHostRoute[];
        /**
         * IP version
         */
        ipVersion: number;
        /**
         * Subnet name
         */
        name?: string;
        /**
         * Use default DNS
         */
        useDefaultPublicDnsresolver?: boolean;
    }

    export interface RegionNetworkSubnetAllocationPool {
        /**
         * Last IP for the pool (eg: 192.168.1.24)
         */
        end?: string;
        /**
         * First IP for the pool (eg: 192.168.1.12)
         */
        start?: string;
    }

    export interface RegionNetworkSubnetHostRoute {
        /**
         * Host route destination (eg: 192.168.1.0/24)
         */
        destination?: string;
        /**
         * Host route next hop (eg: 192.168.1.254)
         */
        nextHop?: string;
    }

    export interface StorageEncryption {
        /**
         * Encryption algorithm
         */
        sseAlgorithm: string;
    }

    export interface StorageObject {
        /**
         * ETag
         */
        etag: string;
        /**
         * Whether this object is a delete marker
         */
        isDeleteMarker: boolean;
        /**
         * Whether this is the latest version of the object
         */
        isLatest: boolean;
        /**
         * Key
         */
        key: string;
        /**
         * Last modification date
         */
        lastModified: string;
        /**
         * Size (bytes)
         */
        size: number;
        /**
         * Storage class
         */
        storageClass: string;
        /**
         * Version ID of the object
         */
        versionId: string;
    }

    export interface StorageReplication {
        /**
         * Replication rules
         */
        rules: outputs.CloudProject.StorageReplicationRule[];
    }

    export interface StorageReplicationRule {
        /**
         * Delete marker replication
         */
        deleteMarkerReplication: string;
        /**
         * Rule destination configuration
         */
        destination: outputs.CloudProject.StorageReplicationRuleDestination;
        /**
         * Rule filters
         */
        filter: outputs.CloudProject.StorageReplicationRuleFilter;
        /**
         * Rule ID
         */
        id: string;
        /**
         * Rule priority
         */
        priority: number;
        /**
         * Rule status
         */
        status: string;
    }

    export interface StorageReplicationRuleDestination {
        /**
         * Destination bucket name
         */
        name: string;
        /**
         * Destination region
         */
        region: string;
        /**
         * Destination storage class
         */
        storageClass: string;
    }

    export interface StorageReplicationRuleFilter {
        /**
         * Prefix filter
         */
        prefix: string;
        /**
         * Tags filter
         */
        tags: outputs.CloudProject.StorageReplicationRuleFilterTag[];
    }

    export interface StorageReplicationRuleFilterTag {
        /**
         * Tag key
         */
        key: string;
        /**
         * Tag value
         */
        value: string;
    }

    export interface StorageVersioning {
        /**
         * Versioning status
         */
        status: string;
    }

    export interface UserRole {
        description: string;
        id: string;
        name: string;
        permissions: string[];
    }

    export interface VolumeSubOperation {
        /**
         * Affected resource of the sub-operation
         */
        resourceId: string;
        /**
         * The started date of the sub-operation
         */
        resourceType: string;
    }

}

export namespace CloudProjectDatabase {
    export interface GetCapabilitiesEngine {
        /**
         * Default version used for the engine
         */
        defaultVersion: string;
        /**
         * Description of the engine
         */
        description: string;
        /**
         * Engine name
         */
        name: string;
        /**
         * SSL modes for this engine
         */
        sslModes: string[];
        /**
         * Versions available for this engine
         */
        versions: string[];
    }

    export interface GetCapabilitiesFlavor {
        /**
         * Flavor core number
         */
        core: number;
        /**
         * Flavor ram size in GB
         */
        memory: number;
        /**
         * Name of the flavor
         */
        name: string;
        /**
         * Flavor disk size in GB
         */
        storage: number;
    }

    export interface GetCapabilitiesOption {
        /**
         * Name of the option
         */
        name: string;
        /**
         * Type of the option
         */
        type: string;
    }

    export interface GetCapabilitiesPlan {
        /**
         * Automatic backup retention duration
         */
        backupRetention: string;
        /**
         * Description of the plan
         */
        description: string;
        /**
         * Name of the plan
         */
        name: string;
    }

    export interface GetDatabaseEndpoint {
        /**
         * Type of component the URI relates to
         */
        component: string;
        /**
         * Domain of the cluster
         */
        domain: string;
        /**
         * Path of the endpoint
         */
        path: string;
        /**
         * Connection port for the endpoint
         */
        port: number;
        /**
         * Scheme used to generate the URI
         */
        scheme: string;
        /**
         * Defines whether the endpoint uses SSL
         */
        ssl: boolean;
        /**
         * SSL mode used to connect to the service if the SSL is enabled
         */
        sslMode: string;
        /**
         * URI of the endpoint
         */
        uri: string;
    }

    export interface GetDatabaseIpRestriction {
        /**
         * Description of the IP restriction
         */
        description: string;
        /**
         * Authorized IP
         */
        ip: string;
        /**
         * Current status of the IP restriction
         */
        status: string;
    }

    export interface GetDatabaseNode {
        /**
         * Private network ID in which the node is
         */
        networkId: string;
        /**
         * Region of the node
         */
        region: string;
        /**
         * Private subnet ID in which the node is
         */
        subnetId: string;
    }

    export interface OpensearchUserAcl {
        /**
         * Pattern of the ACL
         */
        pattern: string;
        /**
         * Permission of the ACL
         */
        permission: string;
    }

    export interface PrometheusTarget {
        /**
         * Host of the endpoint
         */
        host: string;
        /**
         * Connection port for the endpoint
         */
        port: number;
    }

}

export namespace Dbaas {
    export interface LogsInputConfiguration {
        /**
         * Flowgger configuration
         */
        flowgger?: outputs.Dbaas.LogsInputConfigurationFlowgger;
        /**
         * Logstash configuration
         */
        logstash?: outputs.Dbaas.LogsInputConfigurationLogstash;
    }

    export interface LogsInputConfigurationFlowgger {
        /**
         * Type of format to decode
         */
        logFormat: string;
        /**
         * Indicates how messages are delimited
         */
        logFraming: string;
    }

    export interface LogsInputConfigurationLogstash {
        /**
         * The filter section of logstash.conf
         */
        filterSection?: string;
        /**
         * The filter section of logstash.conf
         */
        inputSection: string;
        /**
         * The list of customs Grok patterns
         */
        patternSection?: string;
    }

}

export namespace Dedicated {
    export interface GetServerSpecificationsHardwareDefaultHardwareRaidSize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsHardwareDiskGroup {
        /**
         * default hardware raid size for this disk group
         */
        defaultHardwareRaidSize: outputs.Dedicated.GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize;
        /**
         * default hardware raid type for this disk group
         */
        defaultHardwareRaidType: string;
        /**
         * human readable description of this disk group
         */
        description: string;
        /**
         * identifier of this disk group
         */
        diskGroupId: number;
        /**
         * disk capacity
         */
        diskSize: outputs.Dedicated.GetServerSpecificationsHardwareDiskGroupDiskSize;
        /**
         * type of the disk (SSD, SATA, SAS, ...)
         */
        diskType: string;
        /**
         * number of disks in this group
         */
        numberOfDisks: number;
        /**
         * raid controller, if any, managing this group of disks
         */
        raidController: string;
    }

    export interface GetServerSpecificationsHardwareDiskGroupDefaultHardwareRaidSize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsHardwareDiskGroupDiskSize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsHardwareExpansionCard {
        /**
         * expansion card description
         */
        description: string;
        /**
         * Expansion card type enum
         */
        type: string;
    }

    export interface GetServerSpecificationsHardwareMemorySize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsHardwareUsbKey {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkBandwidth {
        /**
         * bandwidth limitation Internet to OVH
         */
        internetToOvh: outputs.Dedicated.GetServerSpecificationsNetworkBandwidthInternetToOvh;
        /**
         * bandwidth limitation OVH to Internet
         */
        ovhToInternet: outputs.Dedicated.GetServerSpecificationsNetworkBandwidthOvhToInternet;
        /**
         * bandwidth limitation OVH to OVH
         */
        ovhToOvh: outputs.Dedicated.GetServerSpecificationsNetworkBandwidthOvhToOvh;
        /**
         * bandwidth offer type
         */
        type: string;
    }

    export interface GetServerSpecificationsNetworkBandwidthInternetToOvh {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkBandwidthOvhToInternet {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkBandwidthOvhToOvh {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkConnectionVal {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkOla {
        /**
         * Is the OLA feature available
         */
        available: boolean;
        /**
         * What modes are supported
         */
        availableModes: outputs.Dedicated.GetServerSpecificationsNetworkOlaAvailableMode[];
        /**
         * (DEPRECATED) What modes are supported
         */
        supportedModes: string[];
    }

    export interface GetServerSpecificationsNetworkOlaAvailableMode {
        /**
         * Is it the default configuration of the server
         */
        default: boolean;
        /**
         * Interface layout
         */
        interfaces: outputs.Dedicated.GetServerSpecificationsNetworkOlaAvailableModeInterface[];
        /**
         * Mode name
         */
        name: string;
    }

    export interface GetServerSpecificationsNetworkOlaAvailableModeInterface {
        /**
         * Interface aggregation status
         */
        aggregation: boolean;
        /**
         * Interface count
         */
        count: number;
        /**
         * An enum describing OVH Link Aggregation interface types
         */
        type: string;
    }

    export interface GetServerSpecificationsNetworkRouting {
        /**
         * Ipv4 routing details
         */
        ipv4: outputs.Dedicated.GetServerSpecificationsNetworkRoutingIpv4;
        /**
         * Ipv6 routing details
         */
        ipv6: outputs.Dedicated.GetServerSpecificationsNetworkRoutingIpv6;
    }

    export interface GetServerSpecificationsNetworkRoutingIpv4 {
        /**
         * Server gateway
         */
        gateway: string;
        /**
         * Server main IP
         */
        ip: string;
        /**
         * Server network
         */
        network: string;
    }

    export interface GetServerSpecificationsNetworkRoutingIpv6 {
        /**
         * Server gateway
         */
        gateway: string;
        /**
         * Server main IP
         */
        ip: string;
        /**
         * Server network
         */
        network: string;
    }

    export interface GetServerSpecificationsNetworkSwitching {
        /**
         * Switch name
         */
        name: string;
    }

    export interface GetServerSpecificationsNetworkTraffic {
        /**
         * Monthly input traffic quota allowed
         */
        inputQuotaSize: outputs.Dedicated.GetServerSpecificationsNetworkTrafficInputQuotaSize;
        /**
         * Monthly input traffic consumed this month
         */
        inputQuotaUsed: outputs.Dedicated.GetServerSpecificationsNetworkTrafficInputQuotaUsed;
        /**
         * Is bandwidth throttleted for being over quota
         */
        isThrottled: boolean;
        /**
         * Monthly output traffic quota allowed
         */
        outputQuotaSize: outputs.Dedicated.GetServerSpecificationsNetworkTrafficOutputQuotaSize;
        /**
         * Monthly output traffic consumed this month
         */
        outputQuotaUsed: outputs.Dedicated.GetServerSpecificationsNetworkTrafficOutputQuotaUsed;
        /**
         * Next reset quota date for traffic counter
         */
        resetQuotaDate: string;
    }

    export interface GetServerSpecificationsNetworkTrafficInputQuotaSize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkTrafficInputQuotaUsed {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkTrafficOutputQuotaSize {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkTrafficOutputQuotaUsed {
        unit: string;
        value: number;
    }

    export interface GetServerSpecificationsNetworkVmac {
        /**
         * Server is compatible vmac or not
         */
        supported: boolean;
    }

    export interface GetServerSpecificationsNetworkVrack {
        /**
         * vrack bandwidth limitation
         */
        bandwidth: outputs.Dedicated.GetServerSpecificationsNetworkVrackBandwidth;
        /**
         * bandwidth offer type
         */
        type: string;
    }

    export interface GetServerSpecificationsNetworkVrackBandwidth {
        unit: string;
        value: number;
    }

    export interface ServerCustomizations {
        /**
         * Config Drive UserData
         */
        configDriveUserData?: string;
        /**
         * Path of the EFI bootloader from the OS installed on the server
         */
        efiBootloaderPath?: string;
        /**
         * Custom hostname
         */
        hostname?: string;
        /**
         * Image HTTP Headers
         */
        httpHeaders?: {[key: string]: string};
        /**
         * Image checksum
         */
        imageCheckSum?: string;
        /**
         * Checksum type
         */
        imageCheckSumType?: string;
        /**
         * Image Type
         */
        imageType?: string;
        /**
         * Image URL
         */
        imageUrl?: string;
        /**
         * Display Language
         */
        language?: string;
        /**
         * Post-Installation Script
         */
        postInstallationScript?: string;
        /**
         * Post-Installation Script File Extension
         */
        postInstallationScriptExtension?: string;
        /**
         * SSH Public Key
         */
        sshKey?: string;
    }

    export interface ServerIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface ServerNetworkingInterface {
        /**
         * Interface Mac address
         */
        macs: string[];
        /**
         * Interface type
         */
        type: string;
    }

    export interface ServerOrder {
        date: string;
        details: outputs.Dedicated.ServerOrderDetail[];
        expirationDate: string;
        orderId: number;
    }

    export interface ServerOrderDetail {
        description: string;
        /**
         * Product type of item in order
         */
        detailType: string;
        domain: string;
        orderDetailId: number;
        quantity: string;
    }

    export interface ServerPlan {
        configurations: outputs.Dedicated.ServerPlanConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Cart item to be linked
         */
        itemId?: number;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity?: number;
    }

    export interface ServerPlanConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

    export interface ServerPlanOption {
        configurations?: outputs.Dedicated.ServerPlanOptionConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity: number;
    }

    export interface ServerPlanOptionConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

    export interface ServerReinstallTaskCustomizations {
        /**
         * Config Drive UserData
         */
        configDriveUserData?: string;
        /**
         * EFI bootloader path
         */
        efiBootloaderPath?: string;
        /**
         * Custom hostname
         */
        hostname?: string;
        /**
         * Image HTTP Headers
         */
        httpHeaders?: {[key: string]: string};
        /**
         * Image checksum
         */
        imageCheckSum?: string;
        /**
         * Checksum type
         */
        imageCheckSumType?: string;
        /**
         * Image Type
         */
        imageType?: string;
        /**
         * Image URL
         */
        imageUrl?: string;
        /**
         * Display Language
         */
        language?: string;
        /**
         * Post-Installation Script
         */
        postInstallationScript?: string;
        /**
         * Post-Installation Script File Extension
         */
        postInstallationScriptExtension?: string;
        /**
         * SSH Public Key
         */
        sshKey?: string;
    }

    export interface ServerReinstallTaskStorage {
        /**
         * Disk group id (default is 0, meaning automatic)
         */
        diskGroupId?: number;
        /**
         * Hardware Raid configurations (if not specified, all disks of the chosen disk group id will be configured in JBOD mode)
         */
        hardwareRaids?: outputs.Dedicated.ServerReinstallTaskStorageHardwareRaid[];
        /**
         * Partitioning configuration
         */
        partitionings?: outputs.Dedicated.ServerReinstallTaskStoragePartitioning[];
    }

    export interface ServerReinstallTaskStorageHardwareRaid {
        /**
         * Number of arrays (default is 1)
         */
        arrays?: number;
        /**
         * Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
         */
        disks?: number;
        /**
         * Hardware raid type (default is 1)
         */
        raidLevel?: number;
        /**
         * Number of disks in the disk group involved in the spare (default is 0)
         */
        spares?: number;
    }

    export interface ServerReinstallTaskStoragePartitioning {
        /**
         * Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
         */
        disks?: number;
        /**
         * Custom partitioning layout (default is the default layout of the operating system's default partitioning scheme)
         */
        layouts?: outputs.Dedicated.ServerReinstallTaskStoragePartitioningLayout[];
        /**
         * Partitioning scheme name
         */
        schemeName?: string;
    }

    export interface ServerReinstallTaskStoragePartitioningLayout {
        /**
         * Partition extras parameters
         */
        extras?: outputs.Dedicated.ServerReinstallTaskStoragePartitioningLayoutExtra[];
        /**
         * File system type
         */
        fileSystem: string;
        /**
         * Mount point
         */
        mountPoint: string;
        /**
         * Software raid type (default is 1)
         */
        raidLevel?: number;
        /**
         * Partition size in MiB (default value is 0)
         */
        size?: number;
    }

    export interface ServerReinstallTaskStoragePartitioningLayoutExtra {
        /**
         * LVM-specific parameters
         */
        lvs?: outputs.Dedicated.ServerReinstallTaskStoragePartitioningLayoutExtraLv[];
        /**
         * ZFS-specific parameters
         */
        zps?: outputs.Dedicated.ServerReinstallTaskStoragePartitioningLayoutExtraZp[];
    }

    export interface ServerReinstallTaskStoragePartitioningLayoutExtraLv {
        /**
         * Logical volume name
         */
        name?: string;
    }

    export interface ServerReinstallTaskStoragePartitioningLayoutExtraZp {
        /**
         * zpool name (generated automatically if not specified)
         */
        name?: string;
    }

    export interface ServerStorage {
        /**
         * Disk group id (default is 0, meaning automatic)
         */
        diskGroupId?: number;
        /**
         * Hardware Raid configurations (if not specified, all disks of the chosen disk group id will be configured in JBOD mode)
         */
        hardwareRaids?: outputs.Dedicated.ServerStorageHardwareRaid[];
        /**
         * Partitioning configuration
         */
        partitioning?: outputs.Dedicated.ServerStoragePartitioning;
    }

    export interface ServerStorageHardwareRaid {
        /**
         * Number of arrays (default is 1)
         */
        arrays?: number;
        /**
         * Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
         */
        disks?: number;
        /**
         * Hardware raid type (default is 1)
         */
        raidLevel?: number;
        /**
         * Number of disks in the disk group involved in the spare (default is 0)
         */
        spares?: number;
    }

    export interface ServerStoragePartitioning {
        /**
         * Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
         */
        disks?: number;
        /**
         * Custom partitioning layout (default is the default layout of the operating system's default partitioning scheme)
         */
        layouts?: outputs.Dedicated.ServerStoragePartitioningLayout[];
        /**
         * Partitioning scheme (if applicable with selected operating system)
         */
        schemeName?: string;
    }

    export interface ServerStoragePartitioningLayout {
        /**
         * Partition extras parameters
         */
        extras?: outputs.Dedicated.ServerStoragePartitioningLayoutExtras;
        /**
         * File system type
         */
        fileSystem: string;
        /**
         * Mount point
         */
        mountPoint: string;
        /**
         * Software raid type (default is 1)
         */
        raidLevel?: number;
        /**
         * Partition size in MiB (default value is 0 which means to fill the disk with that partition)
         */
        size?: number;
    }

    export interface ServerStoragePartitioningLayoutExtras {
        /**
         * LVM-specific parameters
         */
        lv?: outputs.Dedicated.ServerStoragePartitioningLayoutExtrasLv;
        /**
         * ZFS-specific parameters
         */
        zp?: outputs.Dedicated.ServerStoragePartitioningLayoutExtrasZp;
    }

    export interface ServerStoragePartitioningLayoutExtrasLv {
        /**
         * Logical volume name
         */
        name?: string;
    }

    export interface ServerStoragePartitioningLayoutExtrasZp {
        /**
         * zpool name (generated automatically if not specified, note that multiple ZFS partitions with same zpool names will be configured as multiple datasets belonging to the same zpool if compatible)
         */
        name?: string;
    }

}

export namespace Domain {
    export interface DsRecordsDsRecord {
        /**
         * Algorithm name of the DNSSEC key
         */
        algorithm: string;
        /**
         * Flag name of the DNSSEC key
         */
        flags: string;
        /**
         * Public key
         */
        publicKey: string;
        /**
         * Tag of the DNSSEC key
         */
        tag: number;
    }

    export interface NameCurrentState {
        /**
         * Domain additional states
         */
        additionalStates: string[];
        /**
         * The domain DNS configuration
         */
        dnsConfiguration: outputs.Domain.NameCurrentStateDnsConfiguration;
        /**
         * Extension of the domain name
         */
        extension: string;
        /**
         * Domain main state
         */
        mainState: string;
        /**
         * Domain name
         */
        name: string;
        /**
         * Domain protection state
         */
        protectionState: string;
        /**
         * Domain suspension state
         */
        suspensionState: string;
    }

    export interface NameCurrentStateDnsConfiguration {
        /**
         * The type of DNS configuration of the domain
         */
        configurationType: string;
        /**
         * Whether the registry supports IPv6 or not
         */
        glueRecordIpv6supported: boolean;
        /**
         * Whether the registry accepts hosts or not
         */
        hostSupported: boolean;
        /**
         * The maximum number of name servers allowed by the registry
         */
        maxDns: number;
        /**
         * The minimum number of name servers allowed by the registry
         */
        minDns: number;
        /**
         * The name servers used by the domain name
         */
        nameServers: outputs.Domain.NameCurrentStateDnsConfigurationNameServer[];
    }

    export interface NameCurrentStateDnsConfigurationNameServer {
        /**
         * The IPv4 associated to the name server
         */
        ipv4: string;
        /**
         * The IPv6 associated to the name server
         */
        ipv6: string;
        /**
         * The host name
         */
        nameServer: string;
        /**
         * The type of name server
         */
        nameServerType: string;
    }

    export interface NameCurrentTask {
        /**
         * Identifier of the current task
         */
        id: string;
        /**
         * Link to the task details
         */
        link: string;
        /**
         * Current global status of the current task
         */
        status: string;
        /**
         * Type of the current task
         */
        type: string;
    }

    export interface NameIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface NameOrder {
        date: string;
        details: outputs.Domain.NameOrderDetail[];
        expirationDate: string;
        orderId: number;
    }

    export interface NameOrderDetail {
        description: string;
        /**
         * Product type of item in order
         */
        detailType: string;
        domain: string;
        orderDetailId: number;
        quantity: string;
    }

    export interface NamePlan {
        configurations: outputs.Domain.NamePlanConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Cart item to be linked
         */
        itemId?: number;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity?: number;
    }

    export interface NamePlanConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

    export interface NamePlanOption {
        configurations?: outputs.Domain.NamePlanOptionConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity: number;
    }

    export interface NamePlanOptionConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

    export interface NameServersServer {
        /**
         * DNS name server hostname
         */
        host: string;
        /**
         * DNS name server IP address
         */
        ip?: string;
    }

    export interface NameTargetSpec {
        /**
         * The domain DNS configuration
         */
        dnsConfiguration: outputs.Domain.NameTargetSpecDnsConfiguration;
    }

    export interface NameTargetSpecDnsConfiguration {
        /**
         * The name servers to update
         */
        nameServers?: outputs.Domain.NameTargetSpecDnsConfigurationNameServer[];
    }

    export interface NameTargetSpecDnsConfigurationNameServer {
        /**
         * The IPv4 associated to the name server
         */
        ipv4: string;
        /**
         * The IPv6 associated to the name server
         */
        ipv6: string;
        /**
         * The host name
         */
        nameServer: string;
    }

    export interface ZoneOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.Domain.ZoneOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface ZoneOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface ZonePlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Domain.ZonePlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface ZonePlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface ZonePlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Domain.ZonePlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface ZonePlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

}

export namespace Hosting {
    export interface GetPrivateDatabaseDbUser {
        /**
         * User's rights on this database
         */
        grantType: string;
        /**
         * User's name granted on this database
         */
        userName: string;
    }

    export interface GetPrivateDatabaseUserDatabase {
        /**
         * Database's name linked to this user
         */
        databaseName: string;
        /**
         * Grant of this user for this database
         */
        grantType: string;
    }

    export interface PrivateDatabaseOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.Hosting.PrivateDatabaseOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface PrivateDatabaseOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface PrivateDatabasePlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Hosting.PrivateDatabasePlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface PrivateDatabasePlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface PrivateDatabasePlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Hosting.PrivateDatabasePlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface PrivateDatabasePlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

}

export namespace Iam {
    export interface GetReferenceActionsAction {
        action: string;
        categories: string[];
        description: string;
        resourceType: string;
    }

}

export namespace Ip {
    export interface GetServiceRoutedTo {
        /**
         * Service where ip is routed to
         */
        serviceName: string;
    }

    export interface IpServiceOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.Ip.IpServiceOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface IpServiceOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface IpServicePlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Ip.IpServicePlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface IpServicePlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface IpServicePlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Ip.IpServicePlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface IpServicePlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface IpServiceRoutedTo {
        /**
         * Service where ip is routed to
         */
        serviceName: string;
    }

    export interface MoveRoutedTo {
        /**
         * Service where ip is routed to
         */
        serviceName: string;
    }

}

export namespace IpLoadBalancing {
    export interface GetIpLoadBalancingOrderableZone {
        name: string;
        planCode: string;
    }

    export interface HttpFarmProbe {
        forceSsl?: boolean;
        interval?: number;
        match: string;
        method: string;
        negate?: boolean;
        pattern: string;
        port: number;
        type: string;
        url: string;
    }

    export interface HttpRouteAction {
        /**
         * HTTP status code for "redirect" and "reject" actions
         */
        status?: number;
        /**
         * Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
         */
        target?: string;
        /**
         * Action to trigger if all the rules of this route matches
         */
        type: string;
    }

    export interface HttpRouteRule {
        /**
         * Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
         */
        field: string;
        /**
         * Matching operator. Not all operators are available for all fields. See "/availableRules"
         */
        match: string;
        /**
         * Invert the matching operator effect
         */
        negate: boolean;
        /**
         * Value to match against this match. Interpretation if this field depends on the match and field
         */
        pattern: string;
        /**
         * Id of your rule
         */
        ruleId: number;
        /**
         * Name of sub-field, if applicable. This may be a Cookie or Header name for instance
         */
        subField: string;
    }

    export interface LoadBalancerOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.IpLoadBalancing.LoadBalancerOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface LoadBalancerOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface LoadBalancerOrderableZone {
        /**
         * The zone three letter code
         */
        name: string;
        /**
         * The billing planCode for this zone
         */
        planCode: string;
    }

    export interface LoadBalancerPlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.IpLoadBalancing.LoadBalancerPlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface LoadBalancerPlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface LoadBalancerPlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.IpLoadBalancing.LoadBalancerPlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface LoadBalancerPlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface TcpFarmProbe {
        forceSsl?: boolean;
        interval?: number;
        match: string;
        method?: string;
        negate?: boolean;
        pattern?: string;
        port?: number;
        type: string;
        url?: string;
    }

    export interface TcpRouteAction {
        /**
         * Farm ID for "farm" action type, empty for others
         */
        target?: string;
        /**
         * Action to trigger if all the rules of this route matches
         */
        type: string;
    }

    export interface TcpRouteRule {
        /**
         * Name of the field to match like "protocol" or "host". See "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
         */
        field: string;
        /**
         * Matching operator. Not all operators are available for all fields. See "/availableRules"
         */
        match: string;
        /**
         * Invert the matching operator effect
         */
        negate: boolean;
        /**
         * Value to match against this match. Interpretation if this field depends on the match and field
         */
        pattern: string;
        /**
         * Id of your rule
         */
        ruleId: number;
        /**
         * Name of sub-field, if applicable. This may be a Cookie or Header name for instance
         */
        subField: string;
    }

}

export namespace Me {
    export interface GetMeCurrency {
        /**
         * Currency code
         */
        code: string;
        /**
         * Currency symbol
         */
        symbol: string;
    }

}

export namespace Okms {
    export interface GetOkmsResourceIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetOkmsServiceKeyIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetOkmsServiceKeyJwkIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetOkmsServiceKeyJwkKey {
        /**
         * The algorithm intended to be used with the key
         */
        alg: string;
        /**
         * The cryptographic curve used with the key
         */
        crv: string;
        /**
         * The exponent value for the RSA public key
         */
        e: string;
        /**
         * The operation for which the key is intended to be used
         */
        keyOps: string[];
        /**
         * key ID parameter used to match a specific key
         */
        kid: string;
        /**
         * Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
         */
        kty: string;
        /**
         * The modulus value for the RSA public key
         */
        n: string;
        /**
         * The intended use of the public key
         */
        use: string;
        /**
         * The x coordinate for the Elliptic Curve point
         */
        x: string;
        /**
         * The y coordinate for the Elliptic Curve point
         */
        y: string;
    }

    export interface GetOkmsServiceKeyPemIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetOkmsServiceKeyPemKeysPem {
        /**
         * The key in base64 encoded PEM format
         */
        pem: string;
    }

    export interface GetOvhCloudConnectIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface GetOvhCloudConnectsOcc {
        /**
         * Service bandwidth
         */
        bandwidth: string;
        /**
         * Service description
         */
        description: string;
        /**
         * IAM resource metadata
         */
        iam: outputs.Okms.GetOvhCloudConnectsOccIam;
        /**
         * List of interfaces linked to a service
         */
        interfaceLists: number[];
        /**
         * Pop reference where the service is delivered
         */
        pop: string;
        /**
         * Port quantity
         */
        portQuantity: string;
        /**
         * Product name of the service
         */
        product: string;
        /**
         * Service provider
         */
        providerName: string;
        /**
         * Service name
         */
        serviceName: string;
        /**
         * Service status
         */
        status: string;
        /**
         * Service UUID
         */
        uuid: string;
        /**
         * vrack linked to the service
         */
        vrack: string;
    }

    export interface GetOvhCloudConnectsOccIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface OkmsIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface ServiceKeyJWKIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface ServiceKeyJWKKey {
        /**
         * The algorithm intended to be used with the key
         */
        alg?: string;
        /**
         * The cryptographic curve used with the key
         */
        crv?: string;
        /**
         * The RSA or EC private exponent
         */
        d?: string;
        /**
         * The RSA private key's first factor CRT exponent
         */
        dp?: string;
        /**
         * The RSA private key's second factor CRT exponent
         */
        dq?: string;
        /**
         * The exponent value for the RSA public key
         */
        e?: string;
        /**
         * The value of the symmetric (or other single-valued) key
         */
        k?: string;
        /**
         * The operation for which the key is intended to be used
         */
        keyOps: string[];
        /**
         * key ID parameter used to match a specific key
         */
        kid: string;
        /**
         * Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
         */
        kty: string;
        /**
         * The modulus value for the RSA public key
         */
        n?: string;
        /**
         * The first prime factor of the RSA private key
         */
        p?: string;
        /**
         * The second prime factor of the RSA private key
         */
        q?: string;
        /**
         * The CRT coefficient of the second factor of the RSA private key
         */
        qi?: string;
        /**
         * The intended use of the public key
         */
        use?: string;
        /**
         * The x coordinate for the Elliptic Curve point
         */
        x?: string;
        /**
         * The y coordinate for the Elliptic Curve point
         */
        y?: string;
    }

}

export namespace Order {
    export interface GetCartProductOptionsPlanPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductOptionsPlanPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductOptionsPlanPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

    export interface GetCartProductOptionsPlanSelectedPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductOptionsPlanSelectedPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductOptionsPlanSelectedPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

    export interface GetCartProductOptionsResult {
        /**
         * Define if options of this family are exclusive with each other
         */
        exclusive: boolean;
        /**
         * Option family
         */
        family: string;
        /**
         * Define if an option of this family is mandatory
         */
        mandatory: boolean;
        /**
         * Product offer identifier
         */
        planCode: string;
        /**
         * Prices of the product offer
         */
        prices: outputs.Order.GetCartProductOptionsResultPrice[];
        /**
         * Name of the product
         */
        productName: string;
        /**
         * Product type
         */
        productType: string;
    }

    export interface GetCartProductOptionsResultPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductOptionsResultPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductOptionsResultPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

    export interface GetCartProductPlanPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductPlanPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductPlanPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

    export interface GetCartProductPlanSelectedPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductPlanSelectedPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductPlanSelectedPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

    export interface GetCartProductResult {
        /**
         * Product offer identifier
         */
        planCode: string;
        /**
         * Prices of the product offer
         */
        prices: outputs.Order.GetCartProductResultPrice[];
        /**
         * Name of the product
         */
        productName: string;
        /**
         * Product type
         */
        productType: string;
    }

    export interface GetCartProductResultPrice {
        /**
         * Capacities of the pricing (type of pricing)
         */
        capacities: any[];
        /**
         * Description of the pricing
         */
        description: string;
        /**
         * Duration for ordering the product
         */
        duration: string;
        /**
         * Interval of renewal
         */
        interval: number;
        /**
         * Maximum quantity that can be ordered
         */
        maximumQuantity: number;
        /**
         * Maximum repeat for renewal
         */
        maximumRepeat: number;
        /**
         * Minimum quantity that can be ordered
         */
        minimumQuantity: number;
        /**
         * Minimum repeat for renewal
         */
        minimumRepeat: number;
        /**
         * Price of the product in micro-centims
         */
        priceInUcents: number;
        /**
         * Price of the product (Price with its currency and textual representation)
         */
        prices: outputs.Order.GetCartProductResultPricePrice[];
        /**
         * Pricing model identifier
         */
        pricingMode: string;
        /**
         * Pricing type
         */
        pricingType: string;
    }

    export interface GetCartProductResultPricePrice {
        /**
         * Currency code
         */
        currencyCode: string;
        /**
         * Textual representation
         */
        text: string;
        /**
         * The effective price
         */
        value: number;
    }

}

export namespace Vps {
    export interface VpsIam {
        /**
         * Resource display name
         */
        displayName: string;
        /**
         * Unique identifier of the resource
         */
        id: string;
        /**
         * Resource tags. Tags that were internally computed are prefixed with ovh:
         */
        tags: {[key: string]: string};
        /**
         * Unique resource name used in policies
         */
        urn: string;
    }

    export interface VpsModel {
        availableOptions: string[];
        datacenters: string[];
        disk: number;
        maximumAdditionnalIp: number;
        memory: number;
        name: string;
        offer: string;
        vcore: number;
        /**
         * All versions that VPS can have
         */
        version: string;
    }

    export interface VpsOrder {
        date: string;
        details: outputs.Vps.VpsOrderDetail[];
        expirationDate: string;
        orderId: number;
    }

    export interface VpsOrderDetail {
        description: string;
        /**
         * Product type of item in order
         */
        detailType: string;
        domain: string;
        orderDetailId: number;
        quantity: string;
    }

    export interface VpsPlan {
        configurations: outputs.Vps.VpsPlanConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Cart item to be linked
         */
        itemId?: number;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity?: number;
    }

    export interface VpsPlanConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

    export interface VpsPlanOption {
        configurations?: outputs.Vps.VpsPlanOptionConfiguration[];
        /**
         * Duration selected for the purchase of the product
         */
        duration: string;
        /**
         * Identifier of the option offer
         */
        planCode: string;
        /**
         * Pricing mode selected for the purchase of the product
         */
        pricingMode: string;
        /**
         * Quantity of product desired
         */
        quantity: number;
    }

    export interface VpsPlanOptionConfiguration {
        /**
         * Label for your configuration item
         */
        label: string;
        /**
         * Value or resource URL on API.OVH.COM of your configuration item
         */
        value: string;
    }

}

export namespace Vrack {
    export interface VrackOrder {
        /**
         * date
         */
        date: string;
        /**
         * Information about a Bill entry
         */
        details: outputs.Vrack.VrackOrderDetail[];
        /**
         * expiration date
         */
        expirationDate: string;
        /**
         * order id
         */
        orderId: number;
    }

    export interface VrackOrderDetail {
        /**
         * description
         */
        description: string;
        /**
         * expiration date
         */
        domain: string;
        /**
         * order detail id
         */
        orderDetailId: number;
        /**
         * quantity
         */
        quantity: string;
    }

    export interface VrackPlan {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Vrack.VrackPlanConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface VrackPlanConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

    export interface VrackPlanOption {
        /**
         * Catalog name
         */
        catalogName?: string;
        /**
         * Representation of a configuration item for personalizing product
         */
        configurations?: outputs.Vrack.VrackPlanOptionConfiguration[];
        /**
         * duration
         */
        duration: string;
        /**
         * Plan code
         */
        planCode: string;
        /**
         * Pricing model identifier
         */
        pricingMode: string;
    }

    export interface VrackPlanOptionConfiguration {
        /**
         * Identifier of the resource
         */
        label: string;
        /**
         * Path to the resource in API.OVH.COM
         */
        value: string;
    }

}
