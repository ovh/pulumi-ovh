// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Creates an identity user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const myUser = new ovh.me.IdentityUser("myUser", {
 *     description: "Some custom description",
 *     email: "my_login@example.com",
 *     group: "DEFAULT",
 *     login: "my_login",
 *     password: "super-s3cr3t!password",
 * });
 * ```
 */
export class IdentityUser extends pulumi.CustomResource {
    /**
     * Get an existing IdentityUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentityUserState, opts?: pulumi.CustomResourceOptions): IdentityUser {
        return new IdentityUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Me/identityUser:IdentityUser';

    /**
     * Returns true if the given object is an instance of IdentityUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentityUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentityUser.__pulumiType;
    }

    /**
     * URN of the user, used when writing IAM policies
     */
    public /*out*/ readonly UserURN!: pulumi.Output<string>;
    /**
     * Creation date of this user.
     */
    public /*out*/ readonly creation!: pulumi.Output<string>;
    /**
     * User description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * User's email.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * User's group.
     */
    public readonly group!: pulumi.Output<string | undefined>;
    /**
     * Last update of this user.
     */
    public /*out*/ readonly lastUpdate!: pulumi.Output<string>;
    /**
     * User's login suffix.
     */
    public readonly login!: pulumi.Output<string>;
    /**
     * User's password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * When the user changed his password for the last time.
     */
    public /*out*/ readonly passwordLastUpdate!: pulumi.Output<string>;
    /**
     * Current user's status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a IdentityUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentityUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentityUserArgs | IdentityUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentityUserState | undefined;
            resourceInputs["UserURN"] = state ? state.UserURN : undefined;
            resourceInputs["creation"] = state ? state.creation : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["lastUpdate"] = state ? state.lastUpdate : undefined;
            resourceInputs["login"] = state ? state.login : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordLastUpdate"] = state ? state.passwordLastUpdate : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as IdentityUserArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.login === undefined) && !opts.urn) {
                throw new Error("Missing required property 'login'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["login"] = args ? args.login : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["UserURN"] = undefined /*out*/;
            resourceInputs["creation"] = undefined /*out*/;
            resourceInputs["lastUpdate"] = undefined /*out*/;
            resourceInputs["passwordLastUpdate"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(IdentityUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentityUser resources.
 */
export interface IdentityUserState {
    /**
     * URN of the user, used when writing IAM policies
     */
    UserURN?: pulumi.Input<string>;
    /**
     * Creation date of this user.
     */
    creation?: pulumi.Input<string>;
    /**
     * User description.
     */
    description?: pulumi.Input<string>;
    /**
     * User's email.
     */
    email?: pulumi.Input<string>;
    /**
     * User's group.
     */
    group?: pulumi.Input<string>;
    /**
     * Last update of this user.
     */
    lastUpdate?: pulumi.Input<string>;
    /**
     * User's login suffix.
     */
    login?: pulumi.Input<string>;
    /**
     * User's password.
     */
    password?: pulumi.Input<string>;
    /**
     * When the user changed his password for the last time.
     */
    passwordLastUpdate?: pulumi.Input<string>;
    /**
     * Current user's status.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentityUser resource.
 */
export interface IdentityUserArgs {
    /**
     * User description.
     */
    description?: pulumi.Input<string>;
    /**
     * User's email.
     */
    email: pulumi.Input<string>;
    /**
     * User's group.
     */
    group?: pulumi.Input<string>;
    /**
     * User's login suffix.
     */
    login: pulumi.Input<string>;
    /**
     * User's password.
     */
    password: pulumi.Input<string>;
}
