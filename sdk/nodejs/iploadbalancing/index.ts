// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetIpLoadBalancingArgs, GetIpLoadBalancingResult, GetIpLoadBalancingOutputArgs } from "./getIpLoadBalancing";
export const getIpLoadBalancing: typeof import("./getIpLoadBalancing").getIpLoadBalancing = null as any;
export const getIpLoadBalancingOutput: typeof import("./getIpLoadBalancing").getIpLoadBalancingOutput = null as any;
utilities.lazyLoad(exports, ["getIpLoadBalancing","getIpLoadBalancingOutput"], () => require("./getIpLoadBalancing"));

export { GetVrackNetworkArgs, GetVrackNetworkResult, GetVrackNetworkOutputArgs } from "./getVrackNetwork";
export const getVrackNetwork: typeof import("./getVrackNetwork").getVrackNetwork = null as any;
export const getVrackNetworkOutput: typeof import("./getVrackNetwork").getVrackNetworkOutput = null as any;
utilities.lazyLoad(exports, ["getVrackNetwork","getVrackNetworkOutput"], () => require("./getVrackNetwork"));

export { HttpFarmArgs, HttpFarmState } from "./httpFarm";
export type HttpFarm = import("./httpFarm").HttpFarm;
export const HttpFarm: typeof import("./httpFarm").HttpFarm = null as any;
utilities.lazyLoad(exports, ["HttpFarm"], () => require("./httpFarm"));

export { HttpFarmServerArgs, HttpFarmServerState } from "./httpFarmServer";
export type HttpFarmServer = import("./httpFarmServer").HttpFarmServer;
export const HttpFarmServer: typeof import("./httpFarmServer").HttpFarmServer = null as any;
utilities.lazyLoad(exports, ["HttpFarmServer"], () => require("./httpFarmServer"));

export { HttpFrontendArgs, HttpFrontendState } from "./httpFrontend";
export type HttpFrontend = import("./httpFrontend").HttpFrontend;
export const HttpFrontend: typeof import("./httpFrontend").HttpFrontend = null as any;
utilities.lazyLoad(exports, ["HttpFrontend"], () => require("./httpFrontend"));

export { HttpRouteArgs, HttpRouteState } from "./httpRoute";
export type HttpRoute = import("./httpRoute").HttpRoute;
export const HttpRoute: typeof import("./httpRoute").HttpRoute = null as any;
utilities.lazyLoad(exports, ["HttpRoute"], () => require("./httpRoute"));

export { HttpRouteRuleArgs, HttpRouteRuleState } from "./httpRouteRule";
export type HttpRouteRule = import("./httpRouteRule").HttpRouteRule;
export const HttpRouteRule: typeof import("./httpRouteRule").HttpRouteRule = null as any;
utilities.lazyLoad(exports, ["HttpRouteRule"], () => require("./httpRouteRule"));

export { LoadBalancerArgs, LoadBalancerState } from "./loadBalancer";
export type LoadBalancer = import("./loadBalancer").LoadBalancer;
export const LoadBalancer: typeof import("./loadBalancer").LoadBalancer = null as any;
utilities.lazyLoad(exports, ["LoadBalancer"], () => require("./loadBalancer"));

export { RefreshArgs, RefreshState } from "./refresh";
export type Refresh = import("./refresh").Refresh;
export const Refresh: typeof import("./refresh").Refresh = null as any;
utilities.lazyLoad(exports, ["Refresh"], () => require("./refresh"));

export { SslArgs, SslState } from "./ssl";
export type Ssl = import("./ssl").Ssl;
export const Ssl: typeof import("./ssl").Ssl = null as any;
utilities.lazyLoad(exports, ["Ssl"], () => require("./ssl"));

export { TcpFarmArgs, TcpFarmState } from "./tcpFarm";
export type TcpFarm = import("./tcpFarm").TcpFarm;
export const TcpFarm: typeof import("./tcpFarm").TcpFarm = null as any;
utilities.lazyLoad(exports, ["TcpFarm"], () => require("./tcpFarm"));

export { TcpFarmServerArgs, TcpFarmServerState } from "./tcpFarmServer";
export type TcpFarmServer = import("./tcpFarmServer").TcpFarmServer;
export const TcpFarmServer: typeof import("./tcpFarmServer").TcpFarmServer = null as any;
utilities.lazyLoad(exports, ["TcpFarmServer"], () => require("./tcpFarmServer"));

export { TcpFrontendArgs, TcpFrontendState } from "./tcpFrontend";
export type TcpFrontend = import("./tcpFrontend").TcpFrontend;
export const TcpFrontend: typeof import("./tcpFrontend").TcpFrontend = null as any;
utilities.lazyLoad(exports, ["TcpFrontend"], () => require("./tcpFrontend"));

export { TcpRouteArgs, TcpRouteState } from "./tcpRoute";
export type TcpRoute = import("./tcpRoute").TcpRoute;
export const TcpRoute: typeof import("./tcpRoute").TcpRoute = null as any;
utilities.lazyLoad(exports, ["TcpRoute"], () => require("./tcpRoute"));

export { TcpRouteRuleArgs, TcpRouteRuleState } from "./tcpRouteRule";
export type TcpRouteRule = import("./tcpRouteRule").TcpRouteRule;
export const TcpRouteRule: typeof import("./tcpRouteRule").TcpRouteRule = null as any;
utilities.lazyLoad(exports, ["TcpRouteRule"], () => require("./tcpRouteRule"));

export { UdpFarmArgs, UdpFarmState } from "./udpFarm";
export type UdpFarm = import("./udpFarm").UdpFarm;
export const UdpFarm: typeof import("./udpFarm").UdpFarm = null as any;
utilities.lazyLoad(exports, ["UdpFarm"], () => require("./udpFarm"));

export { UdpFarmServerArgs, UdpFarmServerState } from "./udpFarmServer";
export type UdpFarmServer = import("./udpFarmServer").UdpFarmServer;
export const UdpFarmServer: typeof import("./udpFarmServer").UdpFarmServer = null as any;
utilities.lazyLoad(exports, ["UdpFarmServer"], () => require("./udpFarmServer"));

export { UdpFrontendArgs, UdpFrontendState } from "./udpFrontend";
export type UdpFrontend = import("./udpFrontend").UdpFrontend;
export const UdpFrontend: typeof import("./udpFrontend").UdpFrontend = null as any;
utilities.lazyLoad(exports, ["UdpFrontend"], () => require("./udpFrontend"));

export { VrackNetworkArgs, VrackNetworkState } from "./vrackNetwork";
export type VrackNetwork = import("./vrackNetwork").VrackNetwork;
export const VrackNetwork: typeof import("./vrackNetwork").VrackNetwork = null as any;
utilities.lazyLoad(exports, ["VrackNetwork"], () => require("./vrackNetwork"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "ovh:IpLoadBalancing/httpFarm:HttpFarm":
                return new HttpFarm(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/httpFarmServer:HttpFarmServer":
                return new HttpFarmServer(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/httpFrontend:HttpFrontend":
                return new HttpFrontend(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/httpRoute:HttpRoute":
                return new HttpRoute(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/httpRouteRule:HttpRouteRule":
                return new HttpRouteRule(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/loadBalancer:LoadBalancer":
                return new LoadBalancer(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/refresh:Refresh":
                return new Refresh(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/ssl:Ssl":
                return new Ssl(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/tcpFarm:TcpFarm":
                return new TcpFarm(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/tcpFarmServer:TcpFarmServer":
                return new TcpFarmServer(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/tcpFrontend:TcpFrontend":
                return new TcpFrontend(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/tcpRoute:TcpRoute":
                return new TcpRoute(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/tcpRouteRule:TcpRouteRule":
                return new TcpRouteRule(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/udpFarm:UdpFarm":
                return new UdpFarm(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/udpFarmServer:UdpFarmServer":
                return new UdpFarmServer(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/udpFrontend:UdpFrontend":
                return new UdpFrontend(name, <any>undefined, { urn })
            case "ovh:IpLoadBalancing/vrackNetwork:VrackNetwork":
                return new VrackNetwork(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/httpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/httpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/httpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/httpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/httpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/loadBalancer", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/refresh", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/ssl", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/tcpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/tcpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/tcpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/tcpRoute", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/tcpRouteRule", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/udpFarm", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/udpFarmServer", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/udpFrontend", _module)
pulumi.runtime.registerResourceModule("ovh", "IpLoadBalancing/vrackNetwork", _module)
