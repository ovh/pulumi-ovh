// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getIpLoadBalancing(args?: GetIpLoadBalancingArgs, opts?: pulumi.InvokeOptions): Promise<GetIpLoadBalancingResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("ovh:IpLoadBalancing/getIpLoadBalancing:getIpLoadBalancing", {
        "displayName": args.displayName,
        "ipLoadbalancing": args.ipLoadbalancing,
        "ipv4": args.ipv4,
        "ipv6": args.ipv6,
        "offer": args.offer,
        "serviceName": args.serviceName,
        "sslConfiguration": args.sslConfiguration,
        "state": args.state,
        "vrackEligibility": args.vrackEligibility,
        "vrackName": args.vrackName,
        "zones": args.zones,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpLoadBalancing.
 */
export interface GetIpLoadBalancingArgs {
    displayName?: string;
    ipLoadbalancing?: string;
    ipv4?: string;
    ipv6?: string;
    offer?: string;
    serviceName?: string;
    sslConfiguration?: string;
    state?: string;
    vrackEligibility?: boolean;
    vrackName?: string;
    zones?: string[];
}

/**
 * A collection of values returned by getIpLoadBalancing.
 */
export interface GetIpLoadBalancingResult {
    readonly displayName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ipLoadbalancing: string;
    readonly ipv4: string;
    readonly ipv6: string;
    readonly metricsToken: string;
    readonly offer: string;
    readonly orderableZones: outputs.IpLoadBalancing.GetIpLoadBalancingOrderableZone[];
    readonly serviceName: string;
    readonly sslConfiguration: string;
    readonly state: string;
    readonly urn: string;
    readonly vrackEligibility: boolean;
    readonly vrackName: string;
    readonly zones: string[];
}
export function getIpLoadBalancingOutput(args?: GetIpLoadBalancingOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetIpLoadBalancingResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("ovh:IpLoadBalancing/getIpLoadBalancing:getIpLoadBalancing", {
        "displayName": args.displayName,
        "ipLoadbalancing": args.ipLoadbalancing,
        "ipv4": args.ipv4,
        "ipv6": args.ipv6,
        "offer": args.offer,
        "serviceName": args.serviceName,
        "sslConfiguration": args.sslConfiguration,
        "state": args.state,
        "vrackEligibility": args.vrackEligibility,
        "vrackName": args.vrackName,
        "zones": args.zones,
    }, opts);
}

/**
 * A collection of arguments for invoking getIpLoadBalancing.
 */
export interface GetIpLoadBalancingOutputArgs {
    displayName?: pulumi.Input<string>;
    ipLoadbalancing?: pulumi.Input<string>;
    ipv4?: pulumi.Input<string>;
    ipv6?: pulumi.Input<string>;
    offer?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    sslConfiguration?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    vrackEligibility?: pulumi.Input<boolean>;
    vrackName?: pulumi.Input<string>;
    zones?: pulumi.Input<pulumi.Input<string>[]>;
}
