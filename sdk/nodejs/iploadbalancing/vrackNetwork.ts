// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manage a vrack network for your IP Loadbalancing service.
 */
export class VrackNetwork extends pulumi.CustomResource {
    /**
     * Get an existing VrackNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrackNetworkState, opts?: pulumi.CustomResourceOptions): VrackNetwork {
        return new VrackNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:IpLoadBalancing/vrackNetwork:VrackNetwork';

    /**
     * Returns true if the given object is an instance of VrackNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VrackNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VrackNetwork.__pulumiType;
    }

    /**
     * Human readable name for your vrack network
     */
    public readonly displayName!: pulumi.Output<string | undefined>;
    /**
     * This attribute is there for documentation purpose only and isnt passed to the OVHcloud API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
     */
    public readonly farmIds!: pulumi.Output<number[] | undefined>;
    /**
     * An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
     */
    public readonly natIp!: pulumi.Output<string>;
    /**
     * The internal name of your IP load balancing
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * IP block of the private network in the vRack
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
     */
    public readonly vlan!: pulumi.Output<number>;
    /**
     * (Required) Internal Load Balancer identifier of the vRack private network
     */
    public /*out*/ readonly vrackNetworkId!: pulumi.Output<number>;

    /**
     * Create a VrackNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrackNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrackNetworkArgs | VrackNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrackNetworkState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["farmIds"] = state ? state.farmIds : undefined;
            resourceInputs["natIp"] = state ? state.natIp : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["vlan"] = state ? state.vlan : undefined;
            resourceInputs["vrackNetworkId"] = state ? state.vrackNetworkId : undefined;
        } else {
            const args = argsOrState as VrackNetworkArgs | undefined;
            if ((!args || args.natIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'natIp'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.subnet === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnet'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["farmIds"] = args ? args.farmIds : undefined;
            resourceInputs["natIp"] = args ? args.natIp : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["vlan"] = args ? args.vlan : undefined;
            resourceInputs["vrackNetworkId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VrackNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VrackNetwork resources.
 */
export interface VrackNetworkState {
    /**
     * Human readable name for your vrack network
     */
    displayName?: pulumi.Input<string>;
    /**
     * This attribute is there for documentation purpose only and isnt passed to the OVHcloud API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
     */
    farmIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
     */
    natIp?: pulumi.Input<string>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName?: pulumi.Input<string>;
    /**
     * IP block of the private network in the vRack
     */
    subnet?: pulumi.Input<string>;
    /**
     * VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
     */
    vlan?: pulumi.Input<number>;
    /**
     * (Required) Internal Load Balancer identifier of the vRack private network
     */
    vrackNetworkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VrackNetwork resource.
 */
export interface VrackNetworkArgs {
    /**
     * Human readable name for your vrack network
     */
    displayName?: pulumi.Input<string>;
    /**
     * This attribute is there for documentation purpose only and isnt passed to the OVHcloud API as it may conflicts with http/tcp farms `vrackNetworkId` attribute
     */
    farmIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * An IP block used as a pool of IPs by this Load Balancer to connect to the servers in this private network. The blck must be in the private network and reserved for the Load Balancer
     */
    natIp: pulumi.Input<string>;
    /**
     * The internal name of your IP load balancing
     */
    serviceName: pulumi.Input<string>;
    /**
     * IP block of the private network in the vRack
     */
    subnet: pulumi.Input<string>;
    /**
     * VLAN of the private network in the vRack. 0 if the private network is not in a VLAN
     */
    vlan?: pulumi.Input<number>;
}
