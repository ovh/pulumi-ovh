// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class HttpRouteRule extends pulumi.CustomResource {
    /**
     * Get an existing HttpRouteRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HttpRouteRuleState, opts?: pulumi.CustomResourceOptions): HttpRouteRule {
        return new HttpRouteRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:IpLoadBalancing/httpRouteRule:HttpRouteRule';

    /**
     * Returns true if the given object is an instance of HttpRouteRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HttpRouteRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HttpRouteRule.__pulumiType;
    }

    public readonly displayName!: pulumi.Output<string | undefined>;
    public readonly field!: pulumi.Output<string>;
    public readonly match!: pulumi.Output<string>;
    public readonly negate!: pulumi.Output<boolean>;
    public readonly pattern!: pulumi.Output<string | undefined>;
    public readonly routeId!: pulumi.Output<string>;
    public readonly serviceName!: pulumi.Output<string>;
    public readonly subField!: pulumi.Output<string | undefined>;

    /**
     * Create a HttpRouteRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HttpRouteRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HttpRouteRuleArgs | HttpRouteRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HttpRouteRuleState | undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["field"] = state ? state.field : undefined;
            resourceInputs["match"] = state ? state.match : undefined;
            resourceInputs["negate"] = state ? state.negate : undefined;
            resourceInputs["pattern"] = state ? state.pattern : undefined;
            resourceInputs["routeId"] = state ? state.routeId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["subField"] = state ? state.subField : undefined;
        } else {
            const args = argsOrState as HttpRouteRuleArgs | undefined;
            if ((!args || args.field === undefined) && !opts.urn) {
                throw new Error("Missing required property 'field'");
            }
            if ((!args || args.match === undefined) && !opts.urn) {
                throw new Error("Missing required property 'match'");
            }
            if ((!args || args.routeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["field"] = args ? args.field : undefined;
            resourceInputs["match"] = args ? args.match : undefined;
            resourceInputs["negate"] = args ? args.negate : undefined;
            resourceInputs["pattern"] = args ? args.pattern : undefined;
            resourceInputs["routeId"] = args ? args.routeId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subField"] = args ? args.subField : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HttpRouteRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HttpRouteRule resources.
 */
export interface HttpRouteRuleState {
    displayName?: pulumi.Input<string>;
    field?: pulumi.Input<string>;
    match?: pulumi.Input<string>;
    negate?: pulumi.Input<boolean>;
    pattern?: pulumi.Input<string>;
    routeId?: pulumi.Input<string>;
    serviceName?: pulumi.Input<string>;
    subField?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HttpRouteRule resource.
 */
export interface HttpRouteRuleArgs {
    displayName?: pulumi.Input<string>;
    field: pulumi.Input<string>;
    match: pulumi.Input<string>;
    negate?: pulumi.Input<boolean>;
    pattern?: pulumi.Input<string>;
    routeId: pulumi.Input<string>;
    serviceName: pulumi.Input<string>;
    subField?: pulumi.Input<string>;
}
