// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 */
export class Vps extends pulumi.CustomResource {
    /**
     * Get an existing Vps resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpsState, opts?: pulumi.CustomResourceOptions): Vps {
        return new Vps(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Vps/vps:Vps';

    /**
     * Returns true if the given object is an instance of Vps.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vps {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vps.__pulumiType;
    }

    /**
     * VPS cluster
     */
    public /*out*/ readonly cluster!: pulumi.Output<string>;
    /**
     * Custom display name
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * IAM resource information
     */
    public /*out*/ readonly iam!: pulumi.Output<outputs.Vps.VpsIam>;
    /**
     * KVM keyboard layout on VPS Cloud
     */
    public readonly keymap!: pulumi.Output<string>;
    /**
     * RAM of this VPS
     */
    public readonly memoryLimit!: pulumi.Output<number>;
    /**
     * Structure describing characteristics of a VPS model
     */
    public readonly model!: pulumi.Output<outputs.Vps.VpsModel>;
    /**
     * IP blocks for OVH monitoring servers
     */
    public readonly monitoringIpBlocks!: pulumi.Output<string[]>;
    /**
     * Name of the VPS
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * VPS netboot mode (local┃rescue)
     */
    public readonly netbootMode!: pulumi.Output<string>;
    /**
     * All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
     */
    public readonly offerType!: pulumi.Output<string>;
    /**
     * Details about an Order
     */
    public /*out*/ readonly order!: pulumi.Output<outputs.Vps.VpsOrder>;
    /**
     * OVHcloud Subsidiary. Country of OVHcloud legal entity you'll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&branch=v1#get-/me)
     */
    public readonly ovhSubsidiary!: pulumi.Output<string | undefined>;
    /**
     * Product Plan to order
     */
    public readonly planOptions!: pulumi.Output<outputs.Vps.VpsPlanOption[]>;
    /**
     * Product Plan to order
     */
    public readonly plans!: pulumi.Output<outputs.Vps.VpsPlan[]>;
    /**
     * The internal name of your VPS offer
     */
    public /*out*/ readonly serviceName!: pulumi.Output<string>;
    public readonly slaMonitoring!: pulumi.Output<boolean>;
    /**
     * State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Number of vcores
     */
    public readonly vcore!: pulumi.Output<number>;
    /**
     * OpenStask region where the VPS is located
     */
    public readonly zone!: pulumi.Output<string>;

    /**
     * Create a Vps resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VpsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpsArgs | VpsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpsState | undefined;
            resourceInputs["cluster"] = state ? state.cluster : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["iam"] = state ? state.iam : undefined;
            resourceInputs["keymap"] = state ? state.keymap : undefined;
            resourceInputs["memoryLimit"] = state ? state.memoryLimit : undefined;
            resourceInputs["model"] = state ? state.model : undefined;
            resourceInputs["monitoringIpBlocks"] = state ? state.monitoringIpBlocks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["netbootMode"] = state ? state.netbootMode : undefined;
            resourceInputs["offerType"] = state ? state.offerType : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["ovhSubsidiary"] = state ? state.ovhSubsidiary : undefined;
            resourceInputs["planOptions"] = state ? state.planOptions : undefined;
            resourceInputs["plans"] = state ? state.plans : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["slaMonitoring"] = state ? state.slaMonitoring : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vcore"] = state ? state.vcore : undefined;
            resourceInputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as VpsArgs | undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["keymap"] = args ? args.keymap : undefined;
            resourceInputs["memoryLimit"] = args ? args.memoryLimit : undefined;
            resourceInputs["model"] = args ? args.model : undefined;
            resourceInputs["monitoringIpBlocks"] = args ? args.monitoringIpBlocks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["netbootMode"] = args ? args.netbootMode : undefined;
            resourceInputs["offerType"] = args ? args.offerType : undefined;
            resourceInputs["ovhSubsidiary"] = args ? args.ovhSubsidiary : undefined;
            resourceInputs["planOptions"] = args ? args.planOptions : undefined;
            resourceInputs["plans"] = args ? args.plans : undefined;
            resourceInputs["slaMonitoring"] = args ? args.slaMonitoring : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["vcore"] = args ? args.vcore : undefined;
            resourceInputs["zone"] = args ? args.zone : undefined;
            resourceInputs["cluster"] = undefined /*out*/;
            resourceInputs["iam"] = undefined /*out*/;
            resourceInputs["order"] = undefined /*out*/;
            resourceInputs["serviceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vps.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vps resources.
 */
export interface VpsState {
    /**
     * VPS cluster
     */
    cluster?: pulumi.Input<string>;
    /**
     * Custom display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * IAM resource information
     */
    iam?: pulumi.Input<inputs.Vps.VpsIam>;
    /**
     * KVM keyboard layout on VPS Cloud
     */
    keymap?: pulumi.Input<string>;
    /**
     * RAM of this VPS
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Structure describing characteristics of a VPS model
     */
    model?: pulumi.Input<inputs.Vps.VpsModel>;
    /**
     * IP blocks for OVH monitoring servers
     */
    monitoringIpBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the VPS
     */
    name?: pulumi.Input<string>;
    /**
     * VPS netboot mode (local┃rescue)
     */
    netbootMode?: pulumi.Input<string>;
    /**
     * All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
     */
    offerType?: pulumi.Input<string>;
    /**
     * Details about an Order
     */
    order?: pulumi.Input<inputs.Vps.VpsOrder>;
    /**
     * OVHcloud Subsidiary. Country of OVHcloud legal entity you'll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&branch=v1#get-/me)
     */
    ovhSubsidiary?: pulumi.Input<string>;
    /**
     * Product Plan to order
     */
    planOptions?: pulumi.Input<pulumi.Input<inputs.Vps.VpsPlanOption>[]>;
    /**
     * Product Plan to order
     */
    plans?: pulumi.Input<pulumi.Input<inputs.Vps.VpsPlan>[]>;
    /**
     * The internal name of your VPS offer
     */
    serviceName?: pulumi.Input<string>;
    slaMonitoring?: pulumi.Input<boolean>;
    /**
     * State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
     */
    state?: pulumi.Input<string>;
    /**
     * Number of vcores
     */
    vcore?: pulumi.Input<number>;
    /**
     * OpenStask region where the VPS is located
     */
    zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vps resource.
 */
export interface VpsArgs {
    /**
     * Custom display name
     */
    displayName?: pulumi.Input<string>;
    /**
     * KVM keyboard layout on VPS Cloud
     */
    keymap?: pulumi.Input<string>;
    /**
     * RAM of this VPS
     */
    memoryLimit?: pulumi.Input<number>;
    /**
     * Structure describing characteristics of a VPS model
     */
    model?: pulumi.Input<inputs.Vps.VpsModel>;
    /**
     * IP blocks for OVH monitoring servers
     */
    monitoringIpBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the VPS
     */
    name?: pulumi.Input<string>;
    /**
     * VPS netboot mode (local┃rescue)
     */
    netbootMode?: pulumi.Input<string>;
    /**
     * All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
     */
    offerType?: pulumi.Input<string>;
    /**
     * OVHcloud Subsidiary. Country of OVHcloud legal entity you'll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&branch=v1#get-/me)
     */
    ovhSubsidiary?: pulumi.Input<string>;
    /**
     * Product Plan to order
     */
    planOptions?: pulumi.Input<pulumi.Input<inputs.Vps.VpsPlanOption>[]>;
    /**
     * Product Plan to order
     */
    plans?: pulumi.Input<pulumi.Input<inputs.Vps.VpsPlan>[]>;
    slaMonitoring?: pulumi.Input<boolean>;
    /**
     * State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
     */
    state?: pulumi.Input<string>;
    /**
     * Number of vcores
     */
    vcore?: pulumi.Input<number>;
    /**
     * OpenStask region where the VPS is located
     */
    zone?: pulumi.Input<string>;
}
