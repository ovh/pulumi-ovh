// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates an extra datacenter configuration for an Ovhcloud Connect product.
 *
 * Please take a look at the list of available `types` in the `Required` section in order to know the list of available type configurations.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const popCfgs = ovh.getOvhcloudConnectConfigPops({
 *     serviceName: "XXX",
 * });
 * const datacenterCfgs = Promise.all([popCfgs, popCfgs]).then(([popCfgs, popCfgs1]) => ovh.getOvhcloudConnectConfigPopDatacenters({
 *     serviceName: popCfgs.serviceName,
 *     configPopId: popCfgs1.popConfigs?.[0]?.id,
 * }));
 * const extra = new ovh.OvhcloudConnectPopDatacenterExtraConfig("extra", {
 *     serviceName: popCfgs.then(popCfgs => popCfgs.serviceName),
 *     configPopId: popCfgs.then(popCfgs => popCfgs.popConfigs?.[0]?.id),
 *     configDatacenterId: datacenterCfgs.then(datacenterCfgs => datacenterCfgs.datacenterConfigs?.[0]?.id),
 *     type: "network",
 *     nextHop: "P.P.P.P",
 *     subnet: "I.I.I.I/M",
 * });
 * ```
 */
export class OvhcloudConnectPopDatacenterExtraConfig extends pulumi.CustomResource {
    /**
     * Get an existing OvhcloudConnectPopDatacenterExtraConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OvhcloudConnectPopDatacenterExtraConfigState, opts?: pulumi.CustomResourceOptions): OvhcloudConnectPopDatacenterExtraConfig {
        return new OvhcloudConnectPopDatacenterExtraConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:index/ovhcloudConnectPopDatacenterExtraConfig:OvhcloudConnectPopDatacenterExtraConfig';

    /**
     * Returns true if the given object is an instance of OvhcloudConnectPopDatacenterExtraConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OvhcloudConnectPopDatacenterExtraConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OvhcloudConnectPopDatacenterExtraConfig.__pulumiType;
    }

    /**
     * BGP AS number
     */
    public readonly bgpNeighborArea!: pulumi.Output<number>;
    /**
     * Router IP for BGP
     */
    public readonly bgpNeighborIp!: pulumi.Output<string>;
    /**
     * ID of the datacenter configuration
     */
    public readonly configDatacenterId!: pulumi.Output<number>;
    /**
     * ID of the pop configuration
     */
    public readonly configPopId!: pulumi.Output<number>;
    /**
     * Static route next hop
     */
    public readonly nextHop!: pulumi.Output<string>;
    /**
     * Service name
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Status of the pop configuration
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Static route ip
     */
    public readonly subnet!: pulumi.Output<string>;
    /**
     * Type of the configuration
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OvhcloudConnectPopDatacenterExtraConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OvhcloudConnectPopDatacenterExtraConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OvhcloudConnectPopDatacenterExtraConfigArgs | OvhcloudConnectPopDatacenterExtraConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OvhcloudConnectPopDatacenterExtraConfigState | undefined;
            resourceInputs["bgpNeighborArea"] = state ? state.bgpNeighborArea : undefined;
            resourceInputs["bgpNeighborIp"] = state ? state.bgpNeighborIp : undefined;
            resourceInputs["configDatacenterId"] = state ? state.configDatacenterId : undefined;
            resourceInputs["configPopId"] = state ? state.configPopId : undefined;
            resourceInputs["nextHop"] = state ? state.nextHop : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnet"] = state ? state.subnet : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OvhcloudConnectPopDatacenterExtraConfigArgs | undefined;
            if ((!args || args.configDatacenterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configDatacenterId'");
            }
            if ((!args || args.configPopId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configPopId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["bgpNeighborArea"] = args ? args.bgpNeighborArea : undefined;
            resourceInputs["bgpNeighborIp"] = args ? args.bgpNeighborIp : undefined;
            resourceInputs["configDatacenterId"] = args ? args.configDatacenterId : undefined;
            resourceInputs["configPopId"] = args ? args.configPopId : undefined;
            resourceInputs["nextHop"] = args ? args.nextHop : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["subnet"] = args ? args.subnet : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OvhcloudConnectPopDatacenterExtraConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OvhcloudConnectPopDatacenterExtraConfig resources.
 */
export interface OvhcloudConnectPopDatacenterExtraConfigState {
    /**
     * BGP AS number
     */
    bgpNeighborArea?: pulumi.Input<number>;
    /**
     * Router IP for BGP
     */
    bgpNeighborIp?: pulumi.Input<string>;
    /**
     * ID of the datacenter configuration
     */
    configDatacenterId?: pulumi.Input<number>;
    /**
     * ID of the pop configuration
     */
    configPopId?: pulumi.Input<number>;
    /**
     * Static route next hop
     */
    nextHop?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Status of the pop configuration
     */
    status?: pulumi.Input<string>;
    /**
     * Static route ip
     */
    subnet?: pulumi.Input<string>;
    /**
     * Type of the configuration
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OvhcloudConnectPopDatacenterExtraConfig resource.
 */
export interface OvhcloudConnectPopDatacenterExtraConfigArgs {
    /**
     * BGP AS number
     */
    bgpNeighborArea?: pulumi.Input<number>;
    /**
     * Router IP for BGP
     */
    bgpNeighborIp?: pulumi.Input<string>;
    /**
     * ID of the datacenter configuration
     */
    configDatacenterId: pulumi.Input<number>;
    /**
     * ID of the pop configuration
     */
    configPopId: pulumi.Input<number>;
    /**
     * Static route next hop
     */
    nextHop?: pulumi.Input<string>;
    /**
     * Service name
     */
    serviceName: pulumi.Input<string>;
    /**
     * Static route ip
     */
    subnet?: pulumi.Input<string>;
    /**
     * Type of the configuration
     */
    type: pulumi.Input<string>;
}
