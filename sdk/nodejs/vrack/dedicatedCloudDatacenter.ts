// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Move a Dedicated Cloud Datacenter to a vrack.
 *
 * ## Example Usage
 *
 * > **WARNING** You have to import the resource first as it cannot be created, see Import section below.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vrack_dedicatedCloudDatacenter = new ovh.vrack.DedicatedCloudDatacenter("vrack-dedicatedCloudDatacenter", {
 *     serviceName: "<vRack service name>",
 *     datacenter: "<Dedicated Cloud Datacenter service name>",
 * });
 * ```
 *
 * ## Import
 *
 * A Datacenter will always be in a vRack, first import the resource, this will move the Dedicated Cloud Datacenter to the vRack target.
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:Vrack/dedicatedCloudDatacenter:DedicatedCloudDatacenter vrack-dedicatedCloudDatacenter "<vRack service name>/<Dedicated Cloud Datacener service name>/<vRack target service name>"
 * ```
 */
export class DedicatedCloudDatacenter extends pulumi.CustomResource {
    /**
     * Get an existing DedicatedCloudDatacenter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DedicatedCloudDatacenterState, opts?: pulumi.CustomResourceOptions): DedicatedCloudDatacenter {
        return new DedicatedCloudDatacenter(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Vrack/dedicatedCloudDatacenter:DedicatedCloudDatacenter';

    /**
     * Returns true if the given object is an instance of DedicatedCloudDatacenter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DedicatedCloudDatacenter {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DedicatedCloudDatacenter.__pulumiType;
    }

    /**
     * Your Dedicated Cloud Datacenter.
     */
    public readonly datacenter!: pulumi.Output<string>;
    /**
     * Your dedicatedCloud name
     */
    public /*out*/ readonly dedicatedCloud!: pulumi.Output<string>;
    /**
     * The internal name of your vrack
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * The internal name of your target vrack
     */
    public /*out*/ readonly targetServiceName!: pulumi.Output<string>;

    /**
     * Create a DedicatedCloudDatacenter resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DedicatedCloudDatacenterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DedicatedCloudDatacenterArgs | DedicatedCloudDatacenterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DedicatedCloudDatacenterState | undefined;
            resourceInputs["datacenter"] = state ? state.datacenter : undefined;
            resourceInputs["dedicatedCloud"] = state ? state.dedicatedCloud : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["targetServiceName"] = state ? state.targetServiceName : undefined;
        } else {
            const args = argsOrState as DedicatedCloudDatacenterArgs | undefined;
            if ((!args || args.datacenter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datacenter'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["datacenter"] = args ? args.datacenter : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["dedicatedCloud"] = undefined /*out*/;
            resourceInputs["targetServiceName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DedicatedCloudDatacenter.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DedicatedCloudDatacenter resources.
 */
export interface DedicatedCloudDatacenterState {
    /**
     * Your Dedicated Cloud Datacenter.
     */
    datacenter?: pulumi.Input<string>;
    /**
     * Your dedicatedCloud name
     */
    dedicatedCloud?: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName?: pulumi.Input<string>;
    /**
     * The internal name of your target vrack
     */
    targetServiceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DedicatedCloudDatacenter resource.
 */
export interface DedicatedCloudDatacenterArgs {
    /**
     * Your Dedicated Cloud Datacenter.
     */
    datacenter: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName: pulumi.Input<string>;
}
