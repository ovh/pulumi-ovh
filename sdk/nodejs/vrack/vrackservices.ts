// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attach a vrackServices to the vrack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vrackVrackservices = new ovh.vrack.Vrackservices("vrackVrackservices", {
 *     serviceName: "<vRack service name>",
 *     vrackServices: "<vrackServices service name>",
 * });
 * ```
 *
 * ## Import
 *
 * Attachment of a vrackServices and a vRack can be imported using the `service_name` (vRack identifier) and the `vrack_services` (vrackServices service name), separated by "/" E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:Vrack/vrackservices:Vrackservices myattach "<service_name>/<vrackServices service name>"
 * ```
 */
export class Vrackservices extends pulumi.CustomResource {
    /**
     * Get an existing Vrackservices resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VrackservicesState, opts?: pulumi.CustomResourceOptions): Vrackservices {
        return new Vrackservices(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Vrack/vrackservices:Vrackservices';

    /**
     * Returns true if the given object is an instance of Vrackservices.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vrackservices {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vrackservices.__pulumiType;
    }

    /**
     * The internal name of your vrack
     */
    public readonly serviceName!: pulumi.Output<string>;
    /**
     * Your vrackServices service name.
     */
    public readonly vrackServices!: pulumi.Output<string>;

    /**
     * Create a Vrackservices resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VrackservicesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VrackservicesArgs | VrackservicesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VrackservicesState | undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
            resourceInputs["vrackServices"] = state ? state.vrackServices : undefined;
        } else {
            const args = argsOrState as VrackservicesArgs | undefined;
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            if ((!args || args.vrackServices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vrackServices'");
            }
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
            resourceInputs["vrackServices"] = args ? args.vrackServices : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vrackservices.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vrackservices resources.
 */
export interface VrackservicesState {
    /**
     * The internal name of your vrack
     */
    serviceName?: pulumi.Input<string>;
    /**
     * Your vrackServices service name.
     */
    vrackServices?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vrackservices resource.
 */
export interface VrackservicesArgs {
    /**
     * The internal name of your vrack
     */
    serviceName: pulumi.Input<string>;
    /**
     * Your vrackServices service name.
     */
    vrackServices: pulumi.Input<string>;
}
