// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attach an IPv6 block to a VRack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vrackBlock = new ovh.vrack.IpV6("vrackBlock", {
 *     block: "<ipv6 block>",
 *     serviceName: "<vRack service name>",
 * });
 * ```
 *
 * ## Import
 *
 * Attachment of an IPv6 block and a VRack can be imported using the `service_name` (vRack identifier) and the `block` (IPv6 block), separated by "," E.g.,
 *
 * bash
 *
 * ```sh
 * $ pulumi import ovh:Vrack/ipV6:IpV6 myattach "<service_name>,<block>"
 * ```
 */
export class IpV6 extends pulumi.CustomResource {
    /**
     * Get an existing IpV6 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpV6State, opts?: pulumi.CustomResourceOptions): IpV6 {
        return new IpV6(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Vrack/ipV6:IpV6';

    /**
     * Returns true if the given object is an instance of IpV6.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpV6 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpV6.__pulumiType;
    }

    /**
     * Your IPv6 block.
     */
    public readonly block!: pulumi.Output<string>;
    /**
     * The internal name of your vrack
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a IpV6 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpV6Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpV6Args | IpV6State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpV6State | undefined;
            resourceInputs["block"] = state ? state.block : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as IpV6Args | undefined;
            if ((!args || args.block === undefined) && !opts.urn) {
                throw new Error("Missing required property 'block'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["block"] = args ? args.block : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpV6.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpV6 resources.
 */
export interface IpV6State {
    /**
     * Your IPv6 block.
     */
    block?: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IpV6 resource.
 */
export interface IpV6Args {
    /**
     * Your IPv6 block.
     */
    block: pulumi.Input<string>;
    /**
     * The internal name of your vrack
     */
    serviceName: pulumi.Input<string>;
}
