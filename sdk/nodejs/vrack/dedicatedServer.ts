// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Attach a legacy dedicated server to a vRack.
 *
 * > **NOTE:** The resource `ovh.Vrack.DedicatedServer` is intended to be used for legacy dedicated servers.<br />
 * Dedicated servers that have configurable network interfaces MUST use the resource `ovh.Vrack.DedicatedServerInterface` instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as ovh from "@ovhcloud/pulumi-ovh";
 *
 * const vds = new ovh.vrack.DedicatedServer("vds", {
 *     serverId: "67890",
 *     serviceName: "XXXX",
 * });
 * ```
 */
export class DedicatedServer extends pulumi.CustomResource {
    /**
     * Get an existing DedicatedServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DedicatedServerState, opts?: pulumi.CustomResourceOptions): DedicatedServer {
        return new DedicatedServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'ovh:Vrack/dedicatedServer:DedicatedServer';

    /**
     * Returns true if the given object is an instance of DedicatedServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DedicatedServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DedicatedServer.__pulumiType;
    }

    /**
     * The id of the dedicated server.
     */
    public readonly serverId!: pulumi.Output<string>;
    /**
     * The service name of the vrack. If omitted,
     * the `OVH_VRACK_SERVICE` environment variable is used.
     */
    public readonly serviceName!: pulumi.Output<string>;

    /**
     * Create a DedicatedServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DedicatedServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DedicatedServerArgs | DedicatedServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DedicatedServerState | undefined;
            resourceInputs["serverId"] = state ? state.serverId : undefined;
            resourceInputs["serviceName"] = state ? state.serviceName : undefined;
        } else {
            const args = argsOrState as DedicatedServerArgs | undefined;
            if ((!args || args.serverId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverId'");
            }
            if ((!args || args.serviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceName'");
            }
            resourceInputs["serverId"] = args ? args.serverId : undefined;
            resourceInputs["serviceName"] = args ? args.serviceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DedicatedServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DedicatedServer resources.
 */
export interface DedicatedServerState {
    /**
     * The id of the dedicated server.
     */
    serverId?: pulumi.Input<string>;
    /**
     * The service name of the vrack. If omitted,
     * the `OVH_VRACK_SERVICE` environment variable is used.
     */
    serviceName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DedicatedServer resource.
 */
export interface DedicatedServerArgs {
    /**
     * The id of the dedicated server.
     */
    serverId: pulumi.Input<string>;
    /**
     * The service name of the vrack. If omitted,
     * the `OVH_VRACK_SERVICE` environment variable is used.
     */
    serviceName: pulumi.Input<string>;
}
