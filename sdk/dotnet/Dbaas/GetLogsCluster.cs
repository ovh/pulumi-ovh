// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Dbaas
{
    public static class GetLogsCluster
    {
        public static Task<GetLogsClusterResult> InvokeAsync(GetLogsClusterArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLogsClusterResult>("ovh:Dbaas/getLogsCluster:getLogsCluster", args ?? new GetLogsClusterArgs(), options.WithDefaults());

        public static Output<GetLogsClusterResult> Invoke(GetLogsClusterInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogsClusterResult>("ovh:Dbaas/getLogsCluster:getLogsCluster", args ?? new GetLogsClusterInvokeArgs(), options.WithDefaults());

        public static Output<GetLogsClusterResult> Invoke(GetLogsClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLogsClusterResult>("ovh:Dbaas/getLogsCluster:getLogsCluster", args ?? new GetLogsClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLogsClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId")]
        public string? ClusterId { get; set; }

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetLogsClusterArgs()
        {
        }
        public static new GetLogsClusterArgs Empty => new GetLogsClusterArgs();
    }

    public sealed class GetLogsClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetLogsClusterInvokeArgs()
        {
        }
        public static new GetLogsClusterInvokeArgs Empty => new GetLogsClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetLogsClusterResult
    {
        public readonly ImmutableArray<string> ArchiveAllowedNetworks;
        public readonly string ClusterId;
        public readonly string ClusterType;
        public readonly string DedicatedInputPem;
        public readonly ImmutableArray<string> DirectInputAllowedNetworks;
        public readonly string DirectInputPem;
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool IsDefault;
        public readonly bool IsUnlocked;
        public readonly ImmutableArray<string> QueryAllowedNetworks;
        public readonly string Region;
        public readonly string ServiceName;
        public readonly string Urn;

        [OutputConstructor]
        private GetLogsClusterResult(
            ImmutableArray<string> archiveAllowedNetworks,

            string clusterId,

            string clusterType,

            string dedicatedInputPem,

            ImmutableArray<string> directInputAllowedNetworks,

            string directInputPem,

            string hostname,

            string id,

            bool isDefault,

            bool isUnlocked,

            ImmutableArray<string> queryAllowedNetworks,

            string region,

            string serviceName,

            string urn)
        {
            ArchiveAllowedNetworks = archiveAllowedNetworks;
            ClusterId = clusterId;
            ClusterType = clusterType;
            DedicatedInputPem = dedicatedInputPem;
            DirectInputAllowedNetworks = directInputAllowedNetworks;
            DirectInputPem = directInputPem;
            Hostname = hostname;
            Id = id;
            IsDefault = isDefault;
            IsUnlocked = isUnlocked;
            QueryAllowedNetworks = queryAllowedNetworks;
            Region = region;
            ServiceName = serviceName;
            Urn = urn;
        }
    }
}
