// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Dedicated
{
    [OvhResourceType("ovh:Dedicated/server:Server")]
    public partial class Server : global::Pulumi.CustomResource
    {
        /// <summary>
        /// dedicated AZ localisation
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        [Output("bootId")]
        public Output<double> BootId { get; private set; } = null!;

        /// <summary>
        /// Ipxe script served on boot
        /// </summary>
        [Output("bootScript")]
        public Output<string> BootScript { get; private set; } = null!;

        /// <summary>
        /// dedicater server commercial range
        /// </summary>
        [Output("commercialRange")]
        public Output<string> CommercialRange { get; private set; } = null!;

        /// <summary>
        /// OS reinstallation customizations
        /// </summary>
        [Output("customizations")]
        public Output<Outputs.ServerCustomizations?> Customizations { get; private set; } = null!;

        /// <summary>
        /// dedicated datacenter localisation
        /// </summary>
        [Output("datacenter")]
        public Output<string> Datacenter { get; private set; } = null!;

        /// <summary>
        /// The display name of your dedicated server
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Path of the EFI bootloader served on boot
        /// </summary>
        [Output("efiBootloaderPath")]
        public Output<string> EfiBootloaderPath { get; private set; } = null!;

        /// <summary>
        /// IAM resource metadata
        /// </summary>
        [Output("iam")]
        public Output<Outputs.ServerIam> Iam { get; private set; } = null!;

        /// <summary>
        /// dedicated server ip
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        [Output("linkSpeed")]
        public Output<double> LinkSpeed { get; private set; } = null!;

        /// <summary>
        /// Icmp monitoring state
        /// </summary>
        [Output("monitoring")]
        public Output<bool> Monitoring { get; private set; } = null!;

        /// <summary>
        /// dedicated server name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("newUpgradeSystem")]
        public Output<bool> NewUpgradeSystem { get; private set; } = null!;

        /// <summary>
        /// Prevent datacenter intervention
        /// </summary>
        [Output("noIntervention")]
        public Output<bool> NoIntervention { get; private set; } = null!;

        /// <summary>
        /// Details about an Order
        /// </summary>
        [Output("order")]
        public Output<Outputs.ServerOrder> Order { get; private set; } = null!;

        /// <summary>
        /// Operating system
        /// </summary>
        [Output("os")]
        public Output<string> Os { get; private set; } = null!;

        /// <summary>
        /// OVH subsidiaries
        /// </summary>
        [Output("ovhSubsidiary")]
        public Output<string?> OvhSubsidiary { get; private set; } = null!;

        [Output("planOptions")]
        public Output<ImmutableArray<Outputs.ServerPlanOption>> PlanOptions { get; private set; } = null!;

        [Output("plans")]
        public Output<ImmutableArray<Outputs.ServerPlan>> Plans { get; private set; } = null!;

        /// <summary>
        /// Power state of the server
        /// </summary>
        [Output("powerState")]
        public Output<string> PowerState { get; private set; } = null!;

        /// <summary>
        /// Does this server have professional use option
        /// </summary>
        [Output("professionalUse")]
        public Output<bool> ProfessionalUse { get; private set; } = null!;

        /// <summary>
        /// Arbitrary properties to pass to cloud-init's config drive datasource
        /// </summary>
        [Output("properties")]
        public Output<ImmutableDictionary<string, string>?> Properties { get; private set; } = null!;

        [Output("rack")]
        public Output<string> Rack { get; private set; } = null!;

        /// <summary>
        /// dedicated region localisation
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Custom email used to receive rescue credentials
        /// </summary>
        [Output("rescueMail")]
        public Output<string> RescueMail { get; private set; } = null!;

        /// <summary>
        /// Public SSH Key used in the rescue mode
        /// </summary>
        [Output("rescueSshKey")]
        public Output<string> RescueSshKey { get; private set; } = null!;

        /// <summary>
        /// dedicated server reverse
        /// </summary>
        [Output("reverse")]
        public Output<string> Reverse { get; private set; } = null!;

        [Output("rootDevice")]
        public Output<string> RootDevice { get; private set; } = null!;

        /// <summary>
        /// Server id
        /// </summary>
        [Output("serverId")]
        public Output<double> ServerId { get; private set; } = null!;

        /// <summary>
        /// The internal name of your dedicated server
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// All states a Dedicated can be in
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// OS reinstallation storage configurations
        /// </summary>
        [Output("storages")]
        public Output<ImmutableArray<Outputs.ServerStorage>> Storages { get; private set; } = null!;

        /// <summary>
        /// Dedicated server support level
        /// </summary>
        [Output("supportLevel")]
        public Output<string> SupportLevel { get; private set; } = null!;


        /// <summary>
        /// Create a Server resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Server(string name, ServerArgs? args = null, CustomResourceOptions? options = null)
            : base("ovh:Dedicated/server:Server", name, args ?? new ServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Server(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Dedicated/server:Server", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Server resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Server Get(string name, Input<string> id, ServerState? state = null, CustomResourceOptions? options = null)
        {
            return new Server(name, id, state, options);
        }
    }

    public sealed class ServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("bootId")]
        public Input<double>? BootId { get; set; }

        /// <summary>
        /// Ipxe script served on boot
        /// </summary>
        [Input("bootScript")]
        public Input<string>? BootScript { get; set; }

        /// <summary>
        /// OS reinstallation customizations
        /// </summary>
        [Input("customizations")]
        public Input<Inputs.ServerCustomizationsArgs>? Customizations { get; set; }

        /// <summary>
        /// The display name of your dedicated server
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Path of the EFI bootloader served on boot
        /// </summary>
        [Input("efiBootloaderPath")]
        public Input<string>? EfiBootloaderPath { get; set; }

        /// <summary>
        /// Icmp monitoring state
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        /// <summary>
        /// Prevent datacenter intervention
        /// </summary>
        [Input("noIntervention")]
        public Input<bool>? NoIntervention { get; set; }

        /// <summary>
        /// Operating system
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// OVH subsidiaries
        /// </summary>
        [Input("ovhSubsidiary")]
        public Input<string>? OvhSubsidiary { get; set; }

        [Input("planOptions")]
        private InputList<Inputs.ServerPlanOptionArgs>? _planOptions;
        public InputList<Inputs.ServerPlanOptionArgs> PlanOptions
        {
            get => _planOptions ?? (_planOptions = new InputList<Inputs.ServerPlanOptionArgs>());
            set => _planOptions = value;
        }

        [Input("plans")]
        private InputList<Inputs.ServerPlanArgs>? _plans;
        public InputList<Inputs.ServerPlanArgs> Plans
        {
            get => _plans ?? (_plans = new InputList<Inputs.ServerPlanArgs>());
            set => _plans = value;
        }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// Arbitrary properties to pass to cloud-init's config drive datasource
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        /// <summary>
        /// Custom email used to receive rescue credentials
        /// </summary>
        [Input("rescueMail")]
        public Input<string>? RescueMail { get; set; }

        /// <summary>
        /// Public SSH Key used in the rescue mode
        /// </summary>
        [Input("rescueSshKey")]
        public Input<string>? RescueSshKey { get; set; }

        [Input("rootDevice")]
        public Input<string>? RootDevice { get; set; }

        /// <summary>
        /// All states a Dedicated can be in
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("storages")]
        private InputList<Inputs.ServerStorageArgs>? _storages;

        /// <summary>
        /// OS reinstallation storage configurations
        /// </summary>
        public InputList<Inputs.ServerStorageArgs> Storages
        {
            get => _storages ?? (_storages = new InputList<Inputs.ServerStorageArgs>());
            set => _storages = value;
        }

        public ServerArgs()
        {
        }
        public static new ServerArgs Empty => new ServerArgs();
    }

    public sealed class ServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// dedicated AZ localisation
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        [Input("bootId")]
        public Input<double>? BootId { get; set; }

        /// <summary>
        /// Ipxe script served on boot
        /// </summary>
        [Input("bootScript")]
        public Input<string>? BootScript { get; set; }

        /// <summary>
        /// dedicater server commercial range
        /// </summary>
        [Input("commercialRange")]
        public Input<string>? CommercialRange { get; set; }

        /// <summary>
        /// OS reinstallation customizations
        /// </summary>
        [Input("customizations")]
        public Input<Inputs.ServerCustomizationsGetArgs>? Customizations { get; set; }

        /// <summary>
        /// dedicated datacenter localisation
        /// </summary>
        [Input("datacenter")]
        public Input<string>? Datacenter { get; set; }

        /// <summary>
        /// The display name of your dedicated server
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Path of the EFI bootloader served on boot
        /// </summary>
        [Input("efiBootloaderPath")]
        public Input<string>? EfiBootloaderPath { get; set; }

        /// <summary>
        /// IAM resource metadata
        /// </summary>
        [Input("iam")]
        public Input<Inputs.ServerIamGetArgs>? Iam { get; set; }

        /// <summary>
        /// dedicated server ip
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        [Input("linkSpeed")]
        public Input<double>? LinkSpeed { get; set; }

        /// <summary>
        /// Icmp monitoring state
        /// </summary>
        [Input("monitoring")]
        public Input<bool>? Monitoring { get; set; }

        /// <summary>
        /// dedicated server name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("newUpgradeSystem")]
        public Input<bool>? NewUpgradeSystem { get; set; }

        /// <summary>
        /// Prevent datacenter intervention
        /// </summary>
        [Input("noIntervention")]
        public Input<bool>? NoIntervention { get; set; }

        /// <summary>
        /// Details about an Order
        /// </summary>
        [Input("order")]
        public Input<Inputs.ServerOrderGetArgs>? Order { get; set; }

        /// <summary>
        /// Operating system
        /// </summary>
        [Input("os")]
        public Input<string>? Os { get; set; }

        /// <summary>
        /// OVH subsidiaries
        /// </summary>
        [Input("ovhSubsidiary")]
        public Input<string>? OvhSubsidiary { get; set; }

        [Input("planOptions")]
        private InputList<Inputs.ServerPlanOptionGetArgs>? _planOptions;
        public InputList<Inputs.ServerPlanOptionGetArgs> PlanOptions
        {
            get => _planOptions ?? (_planOptions = new InputList<Inputs.ServerPlanOptionGetArgs>());
            set => _planOptions = value;
        }

        [Input("plans")]
        private InputList<Inputs.ServerPlanGetArgs>? _plans;
        public InputList<Inputs.ServerPlanGetArgs> Plans
        {
            get => _plans ?? (_plans = new InputList<Inputs.ServerPlanGetArgs>());
            set => _plans = value;
        }

        /// <summary>
        /// Power state of the server
        /// </summary>
        [Input("powerState")]
        public Input<string>? PowerState { get; set; }

        /// <summary>
        /// Does this server have professional use option
        /// </summary>
        [Input("professionalUse")]
        public Input<bool>? ProfessionalUse { get; set; }

        [Input("properties")]
        private InputMap<string>? _properties;

        /// <summary>
        /// Arbitrary properties to pass to cloud-init's config drive datasource
        /// </summary>
        public InputMap<string> Properties
        {
            get => _properties ?? (_properties = new InputMap<string>());
            set => _properties = value;
        }

        [Input("rack")]
        public Input<string>? Rack { get; set; }

        /// <summary>
        /// dedicated region localisation
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Custom email used to receive rescue credentials
        /// </summary>
        [Input("rescueMail")]
        public Input<string>? RescueMail { get; set; }

        /// <summary>
        /// Public SSH Key used in the rescue mode
        /// </summary>
        [Input("rescueSshKey")]
        public Input<string>? RescueSshKey { get; set; }

        /// <summary>
        /// dedicated server reverse
        /// </summary>
        [Input("reverse")]
        public Input<string>? Reverse { get; set; }

        [Input("rootDevice")]
        public Input<string>? RootDevice { get; set; }

        /// <summary>
        /// Server id
        /// </summary>
        [Input("serverId")]
        public Input<double>? ServerId { get; set; }

        /// <summary>
        /// The internal name of your dedicated server
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// All states a Dedicated can be in
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("storages")]
        private InputList<Inputs.ServerStorageGetArgs>? _storages;

        /// <summary>
        /// OS reinstallation storage configurations
        /// </summary>
        public InputList<Inputs.ServerStorageGetArgs> Storages
        {
            get => _storages ?? (_storages = new InputList<Inputs.ServerStorageGetArgs>());
            set => _storages = value;
        }

        /// <summary>
        /// Dedicated server support level
        /// </summary>
        [Input("supportLevel")]
        public Input<string>? SupportLevel { get; set; }

        public ServerState()
        {
        }
        public static new ServerState Empty => new ServerState();
    }
}
