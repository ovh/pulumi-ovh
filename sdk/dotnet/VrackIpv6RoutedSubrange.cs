// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    /// <summary>
    /// Route a subrange of your IP v6 block into your vrack.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var vrackRoutedSubrange = new Ovh.VrackIpv6RoutedSubrange("vrack_routed_subrange", new()
    ///     {
    ///         ServiceName = "&lt;vRack service name&gt;",
    ///         Block = "&lt;ipv6 block&gt;",
    ///         RoutedSubrange = "&lt;routed subrange&gt;",
    ///         Nexthop = "&lt;nexthop&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Routing of an subrange into your vRack can be imported using the `service_name` (vRack identifier), the `block` (IPv6 block) and the `routed_subrange (IPv6 block)`, separated by "," E.g.,
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange myroutedsubrange "&lt;service_name&gt;,&lt;block&gt;,&lt;routed_subrange&gt;"
    /// ```
    /// </summary>
    [OvhResourceType("ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange")]
    public partial class VrackIpv6RoutedSubrange : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Your IPv6 block.
        /// </summary>
        [Output("block")]
        public Output<string> Block { get; private set; } = null!;

        /// <summary>
        /// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
        /// </summary>
        [Output("nexthop")]
        public Output<string> Nexthop { get; private set; } = null!;

        /// <summary>
        /// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
        /// </summary>
        [Output("routedSubrange")]
        public Output<string> RoutedSubrange { get; private set; } = null!;

        /// <summary>
        /// The internal name of your vrack
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;


        /// <summary>
        /// Create a VrackIpv6RoutedSubrange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VrackIpv6RoutedSubrange(string name, VrackIpv6RoutedSubrangeArgs args, CustomResourceOptions? options = null)
            : base("ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange", name, args ?? new VrackIpv6RoutedSubrangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VrackIpv6RoutedSubrange(string name, Input<string> id, VrackIpv6RoutedSubrangeState? state = null, CustomResourceOptions? options = null)
            : base("ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VrackIpv6RoutedSubrange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VrackIpv6RoutedSubrange Get(string name, Input<string> id, VrackIpv6RoutedSubrangeState? state = null, CustomResourceOptions? options = null)
        {
            return new VrackIpv6RoutedSubrange(name, id, state, options);
        }
    }

    public sealed class VrackIpv6RoutedSubrangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your IPv6 block.
        /// </summary>
        [Input("block", required: true)]
        public Input<string> Block { get; set; } = null!;

        /// <summary>
        /// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
        /// </summary>
        [Input("nexthop", required: true)]
        public Input<string> Nexthop { get; set; } = null!;

        /// <summary>
        /// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
        /// </summary>
        [Input("routedSubrange", required: true)]
        public Input<string> RoutedSubrange { get; set; } = null!;

        /// <summary>
        /// The internal name of your vrack
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public VrackIpv6RoutedSubrangeArgs()
        {
        }
        public static new VrackIpv6RoutedSubrangeArgs Empty => new VrackIpv6RoutedSubrangeArgs();
    }

    public sealed class VrackIpv6RoutedSubrangeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Your IPv6 block.
        /// </summary>
        [Input("block")]
        public Input<string>? Block { get; set; }

        /// <summary>
        /// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
        /// </summary>
        [Input("nexthop")]
        public Input<string>? Nexthop { get; set; }

        /// <summary>
        /// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
        /// </summary>
        [Input("routedSubrange")]
        public Input<string>? RoutedSubrange { get; set; }

        /// <summary>
        /// The internal name of your vrack
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        public VrackIpv6RoutedSubrangeState()
        {
        }
        public static new VrackIpv6RoutedSubrangeState Empty => new VrackIpv6RoutedSubrangeState();
    }
}
