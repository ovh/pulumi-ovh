// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    /// <summary>
    /// Creates a share for an EFS service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var efs = Ovh.GetStorageEfs.Invoke(new()
    ///     {
    ///         ServiceName = "XXX",
    ///     });
    /// 
    ///     var share = new Ovh.StorageEfsShare("share", new()
    ///     {
    ///         ServiceName = efs.Apply(getStorageEfsResult =&gt; getStorageEfsResult.ServiceName),
    ///         Name = "share",
    ///         Description = "My share",
    ///         Protocol = "NFS",
    ///         Size = 100,
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:index/storageEfsShare:StorageEfsShare")]
    public partial class StorageEfsShare : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Share creation date
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Share description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// User-defined name used to generate human readable access path for the share
        /// </summary>
        [Output("mountPointName")]
        public Output<string> MountPointName { get; private set; } = null!;

        /// <summary>
        /// Share name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Share protocol
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Share size in Gigabytes
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// Snapshot ID used to create the share
        /// </summary>
        [Output("snapshotId")]
        public Output<string> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// Share status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a StorageEfsShare resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StorageEfsShare(string name, StorageEfsShareArgs args, CustomResourceOptions? options = null)
            : base("ovh:index/storageEfsShare:StorageEfsShare", name, args ?? new StorageEfsShareArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StorageEfsShare(string name, Input<string> id, StorageEfsShareState? state = null, CustomResourceOptions? options = null)
            : base("ovh:index/storageEfsShare:StorageEfsShare", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StorageEfsShare resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StorageEfsShare Get(string name, Input<string> id, StorageEfsShareState? state = null, CustomResourceOptions? options = null)
        {
            return new StorageEfsShare(name, id, state, options);
        }
    }

    public sealed class StorageEfsShareArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Share description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User-defined name used to generate human readable access path for the share
        /// </summary>
        [Input("mountPointName")]
        public Input<string>? MountPointName { get; set; }

        /// <summary>
        /// Share name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Share protocol
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Share size in Gigabytes
        /// </summary>
        [Input("size", required: true)]
        public Input<double> Size { get; set; } = null!;

        /// <summary>
        /// Snapshot ID used to create the share
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        public StorageEfsShareArgs()
        {
        }
        public static new StorageEfsShareArgs Empty => new StorageEfsShareArgs();
    }

    public sealed class StorageEfsShareState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Share creation date
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Share description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User-defined name used to generate human readable access path for the share
        /// </summary>
        [Input("mountPointName")]
        public Input<string>? MountPointName { get; set; }

        /// <summary>
        /// Share name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Share protocol
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Share size in Gigabytes
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// Snapshot ID used to create the share
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// Share status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public StorageEfsShareState()
        {
        }
        public static new StorageEfsShareState Empty => new StorageEfsShareState();
    }
}
