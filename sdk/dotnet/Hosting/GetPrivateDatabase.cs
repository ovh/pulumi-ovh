// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Hosting
{
    public static class GetPrivateDatabase
    {
        public static Task<GetPrivateDatabaseResult> InvokeAsync(GetPrivateDatabaseArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrivateDatabaseResult>("ovh:Hosting/getPrivateDatabase:getPrivateDatabase", args ?? new GetPrivateDatabaseArgs(), options.WithDefaults());

        public static Output<GetPrivateDatabaseResult> Invoke(GetPrivateDatabaseInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateDatabaseResult>("ovh:Hosting/getPrivateDatabase:getPrivateDatabase", args ?? new GetPrivateDatabaseInvokeArgs(), options.WithDefaults());

        public static Output<GetPrivateDatabaseResult> Invoke(GetPrivateDatabaseInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateDatabaseResult>("ovh:Hosting/getPrivateDatabase:getPrivateDatabase", args ?? new GetPrivateDatabaseInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateDatabaseArgs : global::Pulumi.InvokeArgs
    {
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetPrivateDatabaseArgs()
        {
        }
        public static new GetPrivateDatabaseArgs Empty => new GetPrivateDatabaseArgs();
    }

    public sealed class GetPrivateDatabaseInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetPrivateDatabaseInvokeArgs()
        {
        }
        public static new GetPrivateDatabaseInvokeArgs Empty => new GetPrivateDatabaseInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateDatabaseResult
    {
        public readonly int Cpu;
        public readonly string Datacenter;
        public readonly string DisplayName;
        public readonly string Hostname;
        public readonly string HostnameFtp;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Infrastructure;
        public readonly string Offer;
        public readonly int Port;
        public readonly int PortFtp;
        public readonly int QuotaSize;
        public readonly int QuotaUsed;
        public readonly int Ram;
        public readonly string Server;
        public readonly string ServiceName;
        public readonly string State;
        public readonly string Type;
        public readonly string Urn;
        public readonly string Version;
        public readonly string VersionLabel;
        public readonly double VersionNumber;

        [OutputConstructor]
        private GetPrivateDatabaseResult(
            int cpu,

            string datacenter,

            string displayName,

            string hostname,

            string hostnameFtp,

            string id,

            string infrastructure,

            string offer,

            int port,

            int portFtp,

            int quotaSize,

            int quotaUsed,

            int ram,

            string server,

            string serviceName,

            string state,

            string type,

            string urn,

            string version,

            string versionLabel,

            double versionNumber)
        {
            Cpu = cpu;
            Datacenter = datacenter;
            DisplayName = displayName;
            Hostname = hostname;
            HostnameFtp = hostnameFtp;
            Id = id;
            Infrastructure = infrastructure;
            Offer = offer;
            Port = port;
            PortFtp = portFtp;
            QuotaSize = quotaSize;
            QuotaUsed = quotaUsed;
            Ram = ram;
            Server = server;
            ServiceName = serviceName;
            State = state;
            Type = type;
            Urn = urn;
            Version = version;
            VersionLabel = versionLabel;
            VersionNumber = versionNumber;
        }
    }
}
