// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.IpLoadBalancing
{
    /// <summary>
    /// Creates a new custom SSL certificate on your IP Load Balancing
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var lb = Ovh.IpLoadBalancing.GetIpLoadBalancing.Invoke(new()
    ///     {
    ///         ServiceName = "ip-1.2.3.4",
    ///         State = "ok",
    ///     });
    /// 
    ///     var sslname = new Ovh.IpLoadBalancing.Ssl("sslname", new()
    ///     {
    ///         Certificate = "...",
    ///         Chain = "...",
    ///         DisplayName = "test",
    ///         Key = "...",
    ///         ServiceName = lb.Apply(getIpLoadBalancingResult =&gt; getIpLoadBalancingResult.ServiceName),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSL can be imported using the following format `service_name` and the `id` of the ssl, separated by "/" e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import ovh:IpLoadBalancing/ssl:Ssl sslname service_name/ssl_id
    /// ```
    /// </summary>
    [OvhResourceType("ovh:IpLoadBalancing/ssl:Ssl")]
    public partial class Ssl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate
        /// </summary>
        [Output("certificate")]
        public Output<string> Certificate { get; private set; } = null!;

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Output("chain")]
        public Output<string?> Chain { get; private set; } = null!;

        /// <summary>
        /// Readable label for loadbalancer ssl
        /// </summary>
        [Output("displayName")]
        public Output<string?> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Expire date of your SSL certificate.
        /// </summary>
        [Output("expireDate")]
        public Output<string> ExpireDate { get; private set; } = null!;

        /// <summary>
        /// Fingerprint of your SSL certificate.
        /// </summary>
        [Output("fingerprint")]
        public Output<string> Fingerprint { get; private set; } = null!;

        /// <summary>
        /// Certificate key
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// Subject Alternative Name of your SSL certificate.
        /// </summary>
        [Output("sans")]
        public Output<ImmutableArray<string>> Sans { get; private set; } = null!;

        /// <summary>
        /// Serial of your SSL certificate (Deprecated, use fingerprint instead !)
        /// </summary>
        [Output("serial")]
        public Output<string> Serial { get; private set; } = null!;

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Subject of your SSL certificate.
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// Type of your SSL certificate. 'built' for SSL certificates managed by the IP Load Balancing. 'custom' for user manager certificates.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Ssl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ssl(string name, SslArgs args, CustomResourceOptions? options = null)
            : base("ovh:IpLoadBalancing/ssl:Ssl", name, args ?? new SslArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ssl(string name, Input<string> id, SslState? state = null, CustomResourceOptions? options = null)
            : base("ovh:IpLoadBalancing/ssl:Ssl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ssl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ssl Get(string name, Input<string> id, SslState? state = null, CustomResourceOptions? options = null)
        {
            return new Ssl(name, id, state, options);
        }
    }

    public sealed class SslArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate
        /// </summary>
        [Input("certificate", required: true)]
        public Input<string> Certificate { get; set; } = null!;

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Input("chain")]
        public Input<string>? Chain { get; set; }

        /// <summary>
        /// Readable label for loadbalancer ssl
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("key", required: true)]
        private Input<string>? _key;

        /// <summary>
        /// Certificate key
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public SslArgs()
        {
        }
        public static new SslArgs Empty => new SslArgs();
    }

    public sealed class SslState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate
        /// </summary>
        [Input("certificate")]
        public Input<string>? Certificate { get; set; }

        /// <summary>
        /// Certificate chain
        /// </summary>
        [Input("chain")]
        public Input<string>? Chain { get; set; }

        /// <summary>
        /// Readable label for loadbalancer ssl
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Expire date of your SSL certificate.
        /// </summary>
        [Input("expireDate")]
        public Input<string>? ExpireDate { get; set; }

        /// <summary>
        /// Fingerprint of your SSL certificate.
        /// </summary>
        [Input("fingerprint")]
        public Input<string>? Fingerprint { get; set; }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// Certificate key
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sans")]
        private InputList<string>? _sans;

        /// <summary>
        /// Subject Alternative Name of your SSL certificate.
        /// </summary>
        public InputList<string> Sans
        {
            get => _sans ?? (_sans = new InputList<string>());
            set => _sans = value;
        }

        /// <summary>
        /// Serial of your SSL certificate (Deprecated, use fingerprint instead !)
        /// </summary>
        [Input("serial")]
        public Input<string>? Serial { get; set; }

        /// <summary>
        /// The internal name of your IP load balancing
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Subject of your SSL certificate.
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// Type of your SSL certificate. 'built' for SSL certificates managed by the IP Load Balancing. 'custom' for user manager certificates.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SslState()
        {
        }
        public static new SslState Empty => new SslState();
    }
}
