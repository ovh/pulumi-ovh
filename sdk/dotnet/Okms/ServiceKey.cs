// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Okms
{
    /// <summary>
    /// Creates a Service Key in an OVHcloud KMS.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var keySymetric = new Ovh.Okms.ServiceKey("keySymetric", new()
    ///     {
    ///         OkmsId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         Operations = new[]
    ///         {
    ///             "encrypt",
    ///             "decrypt",
    ///         },
    ///         Size = 256,
    ///         Type = "oct",
    ///     });
    /// 
    ///     var keyRsa = new Ovh.Okms.ServiceKey("keyRsa", new()
    ///     {
    ///         OkmsId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         Operations = new[]
    ///         {
    ///             "sign",
    ///             "verify",
    ///         },
    ///         Size = 2048,
    ///         Type = "RSA",
    ///     });
    /// 
    ///     var keyEcdsa = new Ovh.Okms.ServiceKey("keyEcdsa", new()
    ///     {
    ///         Curve = "P-256",
    ///         OkmsId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         Operations = new[]
    ///         {
    ///             "sign",
    ///             "verify",
    ///         },
    ///         Type = "EC",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:Okms/serviceKey:ServiceKey")]
    public partial class ServiceKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Context of the key
        /// </summary>
        [Output("context")]
        public Output<string> Context { get; private set; } = null!;

        /// <summary>
        /// Creation time of the key
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Curve type for Elliptic Curve (EC) keys
        /// </summary>
        [Output("curve")]
        public Output<string> Curve { get; private set; } = null!;

        /// <summary>
        /// Key deactivation reason
        /// </summary>
        [Output("deactivationReason")]
        public Output<string> DeactivationReason { get; private set; } = null!;

        /// <summary>
        /// Key name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Okms ID
        /// </summary>
        [Output("okmsId")]
        public Output<string> OkmsId { get; private set; } = null!;

        /// <summary>
        /// The operations for which the key is intended to be used
        /// </summary>
        [Output("operations")]
        public Output<ImmutableArray<string>> Operations { get; private set; } = null!;

        /// <summary>
        /// Size of the key to be created
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// State of the key
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Type of the key to be created
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceKey(string name, ServiceKeyArgs args, CustomResourceOptions? options = null)
            : base("ovh:Okms/serviceKey:ServiceKey", name, args ?? new ServiceKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceKey(string name, Input<string> id, ServiceKeyState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Okms/serviceKey:ServiceKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceKey Get(string name, Input<string> id, ServiceKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceKey(name, id, state, options);
        }
    }

    public sealed class ServiceKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Context of the key
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Curve type for Elliptic Curve (EC) keys
        /// </summary>
        [Input("curve")]
        public Input<string>? Curve { get; set; }

        /// <summary>
        /// Key name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Okms ID
        /// </summary>
        [Input("okmsId", required: true)]
        public Input<string> OkmsId { get; set; } = null!;

        [Input("operations", required: true)]
        private InputList<string>? _operations;

        /// <summary>
        /// The operations for which the key is intended to be used
        /// </summary>
        public InputList<string> Operations
        {
            get => _operations ?? (_operations = new InputList<string>());
            set => _operations = value;
        }

        /// <summary>
        /// Size of the key to be created
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// Type of the key to be created
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServiceKeyArgs()
        {
        }
        public static new ServiceKeyArgs Empty => new ServiceKeyArgs();
    }

    public sealed class ServiceKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Context of the key
        /// </summary>
        [Input("context")]
        public Input<string>? Context { get; set; }

        /// <summary>
        /// Creation time of the key
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Curve type for Elliptic Curve (EC) keys
        /// </summary>
        [Input("curve")]
        public Input<string>? Curve { get; set; }

        /// <summary>
        /// Key deactivation reason
        /// </summary>
        [Input("deactivationReason")]
        public Input<string>? DeactivationReason { get; set; }

        /// <summary>
        /// Key name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Okms ID
        /// </summary>
        [Input("okmsId")]
        public Input<string>? OkmsId { get; set; }

        [Input("operations")]
        private InputList<string>? _operations;

        /// <summary>
        /// The operations for which the key is intended to be used
        /// </summary>
        public InputList<string> Operations
        {
            get => _operations ?? (_operations = new InputList<string>());
            set => _operations = value;
        }

        /// <summary>
        /// Size of the key to be created
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// State of the key
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Type of the key to be created
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServiceKeyState()
        {
        }
        public static new ServiceKeyState Empty => new ServiceKeyState();
    }
}
