// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Okms
{
    /// <summary>
    /// Creates a credential for an OVHcloud KMS.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.IO;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myaccount = Ovh.Me.GetMe.Invoke();
    /// 
    ///     var credNoCsr = new Ovh.Okms.Credential("credNoCsr", new()
    ///     {
    ///         OkmsId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         IdentityUrns = new[]
    ///         {
    ///             $"urn:v1:eu:identity:account:{data.Ovh_me.Current_account.Nichandle}",
    ///         },
    ///         Description = "Credential without CSR",
    ///     });
    /// 
    ///     var credFromCsr = new Ovh.Okms.Credential("credFromCsr", new()
    ///     {
    ///         OkmsId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         IdentityUrns = new[]
    ///         {
    ///             $"urn:v1:eu:identity:account:{data.Ovh_me.Current_account.Nichandle}",
    ///         },
    ///         Csr = File.ReadAllText("cred.csr"),
    ///         Description = "Credential from CSR",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:Okms/credential:Credential")]
    public partial class Credential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (String) Certificate PEM of the credential.
        /// </summary>
        [Output("certificatePem")]
        public Output<string> CertificatePem { get; private set; } = null!;

        /// <summary>
        /// (String) Creation time of the credential
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Valid Certificate Signing Request
        /// </summary>
        [Output("csr")]
        public Output<string> Csr { get; private set; } = null!;

        /// <summary>
        /// Description of the credential (max 200)
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// (String) Expiration time of the credential
        /// </summary>
        [Output("expiredAt")]
        public Output<string> ExpiredAt { get; private set; } = null!;

        /// <summary>
        /// (Boolean) Whether the credential was generated from a CSR
        /// </summary>
        [Output("fromCsr")]
        public Output<bool> FromCsr { get; private set; } = null!;

        /// <summary>
        /// List of identity URNs associated with the credential (max 25)
        /// </summary>
        [Output("identityUrns")]
        public Output<ImmutableArray<string>> IdentityUrns { get; private set; } = null!;

        /// <summary>
        /// Name of the credential (max 50)
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Okms ID
        /// </summary>
        [Output("okmsId")]
        public Output<string> OkmsId { get; private set; } = null!;

        /// <summary>
        /// (String, Sensitive) Private Key PEM of the credential if no CSR is provided
        /// </summary>
        [Output("privateKeyPem")]
        public Output<string> PrivateKeyPem { get; private set; } = null!;

        /// <summary>
        /// (String) Status of the credential
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Validity in days (default 365, max 365)
        /// </summary>
        [Output("validity")]
        public Output<double> Validity { get; private set; } = null!;


        /// <summary>
        /// Create a Credential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Credential(string name, CredentialArgs args, CustomResourceOptions? options = null)
            : base("ovh:Okms/credential:Credential", name, args ?? new CredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Credential(string name, Input<string> id, CredentialState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Okms/credential:Credential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
                AdditionalSecretOutputs =
                {
                    "privateKeyPem",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Credential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Credential Get(string name, Input<string> id, CredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new Credential(name, id, state, options);
        }
    }

    public sealed class CredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Valid Certificate Signing Request
        /// </summary>
        [Input("csr")]
        public Input<string>? Csr { get; set; }

        /// <summary>
        /// Description of the credential (max 200)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("identityUrns", required: true)]
        private InputList<string>? _identityUrns;

        /// <summary>
        /// List of identity URNs associated with the credential (max 25)
        /// </summary>
        public InputList<string> IdentityUrns
        {
            get => _identityUrns ?? (_identityUrns = new InputList<string>());
            set => _identityUrns = value;
        }

        /// <summary>
        /// Name of the credential (max 50)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Okms ID
        /// </summary>
        [Input("okmsId", required: true)]
        public Input<string> OkmsId { get; set; } = null!;

        /// <summary>
        /// Validity in days (default 365, max 365)
        /// </summary>
        [Input("validity")]
        public Input<double>? Validity { get; set; }

        public CredentialArgs()
        {
        }
        public static new CredentialArgs Empty => new CredentialArgs();
    }

    public sealed class CredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (String) Certificate PEM of the credential.
        /// </summary>
        [Input("certificatePem")]
        public Input<string>? CertificatePem { get; set; }

        /// <summary>
        /// (String) Creation time of the credential
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Valid Certificate Signing Request
        /// </summary>
        [Input("csr")]
        public Input<string>? Csr { get; set; }

        /// <summary>
        /// Description of the credential (max 200)
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (String) Expiration time of the credential
        /// </summary>
        [Input("expiredAt")]
        public Input<string>? ExpiredAt { get; set; }

        /// <summary>
        /// (Boolean) Whether the credential was generated from a CSR
        /// </summary>
        [Input("fromCsr")]
        public Input<bool>? FromCsr { get; set; }

        [Input("identityUrns")]
        private InputList<string>? _identityUrns;

        /// <summary>
        /// List of identity URNs associated with the credential (max 25)
        /// </summary>
        public InputList<string> IdentityUrns
        {
            get => _identityUrns ?? (_identityUrns = new InputList<string>());
            set => _identityUrns = value;
        }

        /// <summary>
        /// Name of the credential (max 50)
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Okms ID
        /// </summary>
        [Input("okmsId")]
        public Input<string>? OkmsId { get; set; }

        [Input("privateKeyPem")]
        private Input<string>? _privateKeyPem;

        /// <summary>
        /// (String, Sensitive) Private Key PEM of the credential if no CSR is provided
        /// </summary>
        public Input<string>? PrivateKeyPem
        {
            get => _privateKeyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKeyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// (String) Status of the credential
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Validity in days (default 365, max 365)
        /// </summary>
        [Input("validity")]
        public Input<double>? Validity { get; set; }

        public CredentialState()
        {
        }
        public static new CredentialState Empty => new CredentialState();
    }
}
