// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Okms.Inputs
{

    public sealed class ServiceKeyJWKKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The algorithm intended to be used with the key
        /// </summary>
        [Input("alg")]
        public Input<string>? Alg { get; set; }

        /// <summary>
        /// The cryptographic curve used with the key
        /// </summary>
        [Input("crv")]
        public Input<string>? Crv { get; set; }

        [Input("d")]
        private Input<string>? _d;

        /// <summary>
        /// The RSA or EC private exponent
        /// </summary>
        public Input<string>? D
        {
            get => _d;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _d = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dp")]
        private Input<string>? _dp;

        /// <summary>
        /// The RSA private key's first factor CRT exponent
        /// </summary>
        public Input<string>? Dp
        {
            get => _dp;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dp = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("dq")]
        private Input<string>? _dq;

        /// <summary>
        /// The RSA private key's second factor CRT exponent
        /// </summary>
        public Input<string>? Dq
        {
            get => _dq;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _dq = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The exponent value for the RSA public key
        /// </summary>
        [Input("e")]
        public Input<string>? E { get; set; }

        [Input("k")]
        private Input<string>? _k;

        /// <summary>
        /// The value of the symmetric (or other single-valued) key
        /// </summary>
        public Input<string>? K
        {
            get => _k;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _k = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("keyOps", required: true)]
        private InputList<string>? _keyOps;

        /// <summary>
        /// The operation for which the key is intended to be used
        /// </summary>
        public InputList<string> KeyOps
        {
            get => _keyOps ?? (_keyOps = new InputList<string>());
            set => _keyOps = value;
        }

        /// <summary>
        /// key ID parameter used to match a specific key
        /// </summary>
        [Input("kid")]
        public Input<string>? Kid { get; set; }

        /// <summary>
        /// Key type parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC
        /// </summary>
        [Input("kty", required: true)]
        public Input<string> Kty { get; set; } = null!;

        /// <summary>
        /// The modulus value for the RSA public key
        /// </summary>
        [Input("n")]
        public Input<string>? N { get; set; }

        [Input("p")]
        private Input<string>? _p;

        /// <summary>
        /// The first prime factor of the RSA private key
        /// </summary>
        public Input<string>? P
        {
            get => _p;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _p = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("q")]
        private Input<string>? _q;

        /// <summary>
        /// The second prime factor of the RSA private key
        /// </summary>
        public Input<string>? Q
        {
            get => _q;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _q = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("qi")]
        private Input<string>? _qi;

        /// <summary>
        /// The CRT coefficient of the second factor of the RSA private key
        /// </summary>
        public Input<string>? Qi
        {
            get => _qi;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _qi = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The intended use of the public key
        /// </summary>
        [Input("use")]
        public Input<string>? Use { get; set; }

        /// <summary>
        /// The x coordinate for the Elliptic Curve point
        /// </summary>
        [Input("x")]
        public Input<string>? X { get; set; }

        /// <summary>
        /// The y coordinate for the Elliptic Curve point
        /// </summary>
        [Input("y")]
        public Input<string>? Y { get; set; }

        public ServiceKeyJWKKeyArgs()
        {
        }
        public static new ServiceKeyJWKKeyArgs Empty => new ServiceKeyJWKKeyArgs();
    }
}
