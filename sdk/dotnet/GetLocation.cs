// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetLocation
    {
        /// <summary>
        /// Get available regions and their availability zones
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var paris = Ovh.GetLocation.Invoke(new()
        ///     {
        ///         Name = "eu-west-par",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLocationResult> InvokeAsync(GetLocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationResult>("ovh:index/getLocation:getLocation", args ?? new GetLocationArgs(), options.WithDefaults());

        /// <summary>
        /// Get available regions and their availability zones
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var paris = Ovh.GetLocation.Invoke(new()
        ///     {
        ///         Name = "eu-west-par",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationResult> Invoke(GetLocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationResult>("ovh:index/getLocation:getLocation", args ?? new GetLocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get available regions and their availability zones
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var paris = Ovh.GetLocation.Invoke(new()
        ///     {
        ///         Name = "eu-west-par",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLocationResult> Invoke(GetLocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationResult>("ovh:index/getLocation:getLocation", args ?? new GetLocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetLocationArgs()
        {
        }
        public static new GetLocationArgs Empty => new GetLocationArgs();
    }

    public sealed class GetLocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetLocationInvokeArgs()
        {
        }
        public static new GetLocationInvokeArgs Empty => new GetLocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationResult
    {
        /// <summary>
        /// List of availability zones for the region
        /// </summary>
        public readonly ImmutableArray<string> AvailabilityZones;
        /// <summary>
        /// Cardinal direction where the region is located
        /// </summary>
        public readonly string CardinalPoint;
        /// <summary>
        /// ISO code of the city
        /// </summary>
        public readonly string CityCode;
        /// <summary>
        /// Geographical latitude of the city
        /// </summary>
        public readonly double CityLatitude;
        /// <summary>
        /// Geographical longitude of the city
        /// </summary>
        public readonly double CityLongitude;
        /// <summary>
        /// Full name of the city
        /// </summary>
        public readonly string CityName;
        /// <summary>
        /// Region's short code
        /// </summary>
        public readonly string Code;
        /// <summary>
        /// ISO code of the country
        /// </summary>
        public readonly string CountryCode;
        /// <summary>
        /// Full name of the country
        /// </summary>
        public readonly string CountryName;
        /// <summary>
        /// Short code representing the geographical area
        /// </summary>
        public readonly string GeographyCode;
        /// <summary>
        /// Name of the geographical area
        /// </summary>
        public readonly string GeographyName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Location of the region
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Year the region was opened
        /// </summary>
        public readonly double OpeningYear;
        /// <summary>
        /// Specific typology of the region
        /// </summary>
        public readonly string SpecificType;
        /// <summary>
        /// General typology of the region
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetLocationResult(
            ImmutableArray<string> availabilityZones,

            string cardinalPoint,

            string cityCode,

            double cityLatitude,

            double cityLongitude,

            string cityName,

            string code,

            string countryCode,

            string countryName,

            string geographyCode,

            string geographyName,

            string id,

            string location,

            string name,

            double openingYear,

            string specificType,

            string type)
        {
            AvailabilityZones = availabilityZones;
            CardinalPoint = cardinalPoint;
            CityCode = cityCode;
            CityLatitude = cityLatitude;
            CityLongitude = cityLongitude;
            CityName = cityName;
            Code = code;
            CountryCode = countryCode;
            CountryName = countryName;
            GeographyCode = geographyCode;
            GeographyName = geographyName;
            Id = id;
            Location = location;
            Name = name;
            OpeningYear = openingYear;
            SpecificType = specificType;
            Type = type;
        }
    }
}
