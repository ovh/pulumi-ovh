// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// Creates a subnet in a private network of a public cloud region.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var subnet = new Ovh.CloudProject.NetworkPrivateSubnetV2("subnet", new()
    ///     {
    ///         Cidr = "192.168.168.0/24",
    ///         Dhcp = true,
    ///         DnsNameservers = new[]
    ///         {
    ///             "1.1.1.1",
    ///         },
    ///         EnableGatewayIp = true,
    ///         NetworkId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    ///         Region = "XXX1",
    ///         ServiceName = "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    ///         UseDefaultPublicDnsResolver = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Subnet in a private network of a public cloud project can be imported using the `service_name`, `region`, `network_id` and `subnet_id`, separated by "/" E.g.,
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2 mysubnet 5ceb661434891538b54a4f2c66fc4b746e/BHS5/25807101-8aaa-4ea5-b507-61f0d661b101/0f0b73a4-403b-45e4-86d0-b438f1291909
    /// ```
    /// </summary>
    [OvhResourceType("ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2")]
    public partial class NetworkPrivateSubnetV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of IP allocation pools
        /// Changing this value recreates the resource.
        /// </summary>
        [Output("allocationPools")]
        public Output<ImmutableArray<Outputs.NetworkPrivateSubnetV2AllocationPool>> AllocationPools { get; private set; } = null!;

        /// <summary>
        /// IP range of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Output("cidr")]
        public Output<string> Cidr { get; private set; } = null!;

        /// <summary>
        /// Enable DHCP.
        /// Changing this forces a new resource to be created. Defaults to true.
        /// </summary>
        [Output("dhcp")]
        public Output<bool?> Dhcp { get; private set; } = null!;

        /// <summary>
        /// DNS nameservers used by DHCP
        /// Changing this value recreates the resource. Defaults to OVH default DNS nameserver.
        /// </summary>
        [Output("dnsNameservers")]
        public Output<ImmutableArray<string>> DnsNameservers { get; private set; } = null!;

        /// <summary>
        /// Set to true if you want to set a default gateway IP.
        /// Changing this value recreates the resource. Defaults to true.
        /// </summary>
        [Output("enableGatewayIp")]
        public Output<bool?> EnableGatewayIp { get; private set; } = null!;

        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        [Output("gatewayIp")]
        public Output<string> GatewayIp { get; private set; } = null!;

        /// <summary>
        /// Static host routes of subnet
        /// </summary>
        [Output("hostRoutes")]
        public Output<ImmutableArray<Outputs.NetworkPrivateSubnetV2HostRoute>> HostRoutes { get; private set; } = null!;

        /// <summary>
        /// Name of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the network.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Output("networkId")]
        public Output<string> NetworkId { get; private set; } = null!;

        /// <summary>
        /// The region in which the network subnet will be created.
        /// Ex.: "GRA1". Changing this value recreates the resource.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Set to false if you want to use your DNS resolver.
        /// Changing this value recreates the resource.
        /// </summary>
        [Output("useDefaultPublicDnsResolver")]
        public Output<bool?> UseDefaultPublicDnsResolver { get; private set; } = null!;


        /// <summary>
        /// Create a NetworkPrivateSubnetV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NetworkPrivateSubnetV2(string name, NetworkPrivateSubnetV2Args args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2", name, args ?? new NetworkPrivateSubnetV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private NetworkPrivateSubnetV2(string name, Input<string> id, NetworkPrivateSubnetV2State? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NetworkPrivateSubnetV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NetworkPrivateSubnetV2 Get(string name, Input<string> id, NetworkPrivateSubnetV2State? state = null, CustomResourceOptions? options = null)
        {
            return new NetworkPrivateSubnetV2(name, id, state, options);
        }
    }

    public sealed class NetworkPrivateSubnetV2Args : global::Pulumi.ResourceArgs
    {
        [Input("allocationPools")]
        private InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolArgs>? _allocationPools;

        /// <summary>
        /// List of IP allocation pools
        /// Changing this value recreates the resource.
        /// </summary>
        public InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolArgs> AllocationPools
        {
            get => _allocationPools ?? (_allocationPools = new InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolArgs>());
            set => _allocationPools = value;
        }

        /// <summary>
        /// IP range of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Input("cidr", required: true)]
        public Input<string> Cidr { get; set; } = null!;

        /// <summary>
        /// Enable DHCP.
        /// Changing this forces a new resource to be created. Defaults to true.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        [Input("dnsNameservers")]
        private InputList<string>? _dnsNameservers;

        /// <summary>
        /// DNS nameservers used by DHCP
        /// Changing this value recreates the resource. Defaults to OVH default DNS nameserver.
        /// </summary>
        public InputList<string> DnsNameservers
        {
            get => _dnsNameservers ?? (_dnsNameservers = new InputList<string>());
            set => _dnsNameservers = value;
        }

        /// <summary>
        /// Set to true if you want to set a default gateway IP.
        /// Changing this value recreates the resource. Defaults to true.
        /// </summary>
        [Input("enableGatewayIp")]
        public Input<bool>? EnableGatewayIp { get; set; }

        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("hostRoutes")]
        private InputList<Inputs.NetworkPrivateSubnetV2HostRouteArgs>? _hostRoutes;

        /// <summary>
        /// Static host routes of subnet
        /// </summary>
        public InputList<Inputs.NetworkPrivateSubnetV2HostRouteArgs> HostRoutes
        {
            get => _hostRoutes ?? (_hostRoutes = new InputList<Inputs.NetworkPrivateSubnetV2HostRouteArgs>());
            set => _hostRoutes = value;
        }

        /// <summary>
        /// Name of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the network.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkId", required: true)]
        public Input<string> NetworkId { get; set; } = null!;

        /// <summary>
        /// The region in which the network subnet will be created.
        /// Ex.: "GRA1". Changing this value recreates the resource.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Set to false if you want to use your DNS resolver.
        /// Changing this value recreates the resource.
        /// </summary>
        [Input("useDefaultPublicDnsResolver")]
        public Input<bool>? UseDefaultPublicDnsResolver { get; set; }

        public NetworkPrivateSubnetV2Args()
        {
        }
        public static new NetworkPrivateSubnetV2Args Empty => new NetworkPrivateSubnetV2Args();
    }

    public sealed class NetworkPrivateSubnetV2State : global::Pulumi.ResourceArgs
    {
        [Input("allocationPools")]
        private InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolGetArgs>? _allocationPools;

        /// <summary>
        /// List of IP allocation pools
        /// Changing this value recreates the resource.
        /// </summary>
        public InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolGetArgs> AllocationPools
        {
            get => _allocationPools ?? (_allocationPools = new InputList<Inputs.NetworkPrivateSubnetV2AllocationPoolGetArgs>());
            set => _allocationPools = value;
        }

        /// <summary>
        /// IP range of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Input("cidr")]
        public Input<string>? Cidr { get; set; }

        /// <summary>
        /// Enable DHCP.
        /// Changing this forces a new resource to be created. Defaults to true.
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        [Input("dnsNameservers")]
        private InputList<string>? _dnsNameservers;

        /// <summary>
        /// DNS nameservers used by DHCP
        /// Changing this value recreates the resource. Defaults to OVH default DNS nameserver.
        /// </summary>
        public InputList<string> DnsNameservers
        {
            get => _dnsNameservers ?? (_dnsNameservers = new InputList<string>());
            set => _dnsNameservers = value;
        }

        /// <summary>
        /// Set to true if you want to set a default gateway IP.
        /// Changing this value recreates the resource. Defaults to true.
        /// </summary>
        [Input("enableGatewayIp")]
        public Input<bool>? EnableGatewayIp { get; set; }

        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("hostRoutes")]
        private InputList<Inputs.NetworkPrivateSubnetV2HostRouteGetArgs>? _hostRoutes;

        /// <summary>
        /// Static host routes of subnet
        /// </summary>
        public InputList<Inputs.NetworkPrivateSubnetV2HostRouteGetArgs> HostRoutes
        {
            get => _hostRoutes ?? (_hostRoutes = new InputList<Inputs.NetworkPrivateSubnetV2HostRouteGetArgs>());
            set => _hostRoutes = value;
        }

        /// <summary>
        /// Name of the subnet
        /// Changing this value recreates the subnet.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the network.
        /// Changing this forces a new resource to be created.
        /// </summary>
        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        /// <summary>
        /// The region in which the network subnet will be created.
        /// Ex.: "GRA1". Changing this value recreates the resource.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Set to false if you want to use your DNS resolver.
        /// Changing this value recreates the resource.
        /// </summary>
        [Input("useDefaultPublicDnsResolver")]
        public Input<bool>? UseDefaultPublicDnsResolver { get; set; }

        public NetworkPrivateSubnetV2State()
        {
        }
        public static new NetworkPrivateSubnetV2State Empty => new NetworkPrivateSubnetV2State();
    }
}
