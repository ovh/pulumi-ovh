// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// Manage a Rancher service in a public cloud project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var rancher = new Ovh.CloudProject.Rancher("rancher", new()
    ///     {
    ///         ProjectId = "&lt;public cloud project ID&gt;",
    ///         TargetSpec = new Ovh.CloudProject.Inputs.RancherTargetSpecArgs
    ///         {
    ///             Name = "MyRancher",
    ///             Plan = "STANDARD",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A share in a public cloud project can be imported using the `project_id` and `id` attributes.
    /// 
    /// Using the following configuration:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   id = "&lt;project_id&gt;/&lt;id&gt;"
    /// 
    ///   to = ovh_cloud_project_rancher.rancher
    /// 
    /// }
    /// 
    /// You can then run:
    /// 
    /// bash
    /// 
    /// $ pulumi preview -generate-config-out=rancher.tf
    /// 
    /// $ pulumi up
    /// 
    /// The file `rancher.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.
    /// 
    /// See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
    /// </summary>
    [OvhResourceType("ovh:CloudProject/rancher:Rancher")]
    public partial class Rancher : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Date of the managed Rancher service creation
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Current configuration applied to the managed Rancher service
        /// </summary>
        [Output("currentState")]
        public Output<Outputs.RancherCurrentState> CurrentState { get; private set; } = null!;

        /// <summary>
        /// Asynchronous operations ongoing on the managed Rancher service
        /// </summary>
        [Output("currentTasks")]
        public Output<ImmutableArray<Outputs.RancherCurrentTask>> CurrentTasks { get; private set; } = null!;

        /// <summary>
        /// Project ID
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
        /// </summary>
        [Output("resourceStatus")]
        public Output<string> ResourceStatus { get; private set; } = null!;

        /// <summary>
        /// Target specification for the managed Rancher service
        /// </summary>
        [Output("targetSpec")]
        public Output<Outputs.RancherTargetSpec> TargetSpec { get; private set; } = null!;

        /// <summary>
        /// Date of the last managed Rancher service update
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Rancher resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rancher(string name, RancherArgs args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/rancher:Rancher", name, args ?? new RancherArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rancher(string name, Input<string> id, RancherState? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/rancher:Rancher", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rancher resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rancher Get(string name, Input<string> id, RancherState? state = null, CustomResourceOptions? options = null)
        {
            return new Rancher(name, id, state, options);
        }
    }

    public sealed class RancherArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Target specification for the managed Rancher service
        /// </summary>
        [Input("targetSpec", required: true)]
        public Input<Inputs.RancherTargetSpecArgs> TargetSpec { get; set; } = null!;

        public RancherArgs()
        {
        }
        public static new RancherArgs Empty => new RancherArgs();
    }

    public sealed class RancherState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date of the managed Rancher service creation
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Current configuration applied to the managed Rancher service
        /// </summary>
        [Input("currentState")]
        public Input<Inputs.RancherCurrentStateGetArgs>? CurrentState { get; set; }

        [Input("currentTasks")]
        private InputList<Inputs.RancherCurrentTaskGetArgs>? _currentTasks;

        /// <summary>
        /// Asynchronous operations ongoing on the managed Rancher service
        /// </summary>
        public InputList<Inputs.RancherCurrentTaskGetArgs> CurrentTasks
        {
            get => _currentTasks ?? (_currentTasks = new InputList<Inputs.RancherCurrentTaskGetArgs>());
            set => _currentTasks = value;
        }

        /// <summary>
        /// Project ID
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
        /// </summary>
        [Input("resourceStatus")]
        public Input<string>? ResourceStatus { get; set; }

        /// <summary>
        /// Target specification for the managed Rancher service
        /// </summary>
        [Input("targetSpec")]
        public Input<Inputs.RancherTargetSpecGetArgs>? TargetSpec { get; set; }

        /// <summary>
        /// Date of the last managed Rancher service update
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public RancherState()
        {
        }
        public static new RancherState Empty => new RancherState();
    }
}
