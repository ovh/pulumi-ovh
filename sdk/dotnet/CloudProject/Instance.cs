// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// **This resource uses a Beta API** Creates an instance associated with a public cloud project.
    /// 
    /// ## Example Usage
    /// 
    /// Create a instance.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var instance = new Ovh.CloudProject.Instance("instance", new()
    ///     {
    ///         BillingPeriod = "hourly",
    ///         BootFrom = new Ovh.CloudProject.Inputs.InstanceBootFromArgs
    ///         {
    ///             ImageId = "UUID",
    ///         },
    ///         Flavor = new Ovh.CloudProject.Inputs.InstanceFlavorArgs
    ///         {
    ///             FlavorId = "UUID",
    ///         },
    ///         Network = new Ovh.CloudProject.Inputs.InstanceNetworkArgs
    ///         {
    ///             Public = true,
    ///         },
    ///         Region = "RRRR",
    ///         ServiceName = "XXX",
    ///         SshKey = new Ovh.CloudProject.Inputs.InstanceSshKeyArgs
    ///         {
    ///             Name = "sshname",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:CloudProject/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Instance IP addresses
        /// </summary>
        [Output("addresses")]
        public Output<ImmutableArray<Outputs.InstanceAddress>> Addresses { get; private set; } = null!;

        /// <summary>
        /// Volumes attached to the instance
        /// </summary>
        [Output("attachedVolumes")]
        public Output<ImmutableArray<Outputs.InstanceAttachedVolume>> AttachedVolumes { get; private set; } = null!;

        /// <summary>
        /// Create an autobackup workflow after instance start up.
        /// </summary>
        [Output("autoBackup")]
        public Output<Outputs.InstanceAutoBackup?> AutoBackup { get; private set; } = null!;

        /// <summary>
        /// The availability zone where the instance will be created
        /// </summary>
        [Output("availabilityZone")]
        public Output<string> AvailabilityZone { get; private set; } = null!;

        /// <summary>
        /// Billing period - hourly or monthly
        /// </summary>
        [Output("billingPeriod")]
        public Output<string> BillingPeriod { get; private set; } = null!;

        /// <summary>
        /// Boot the instance from an image or a volume
        /// </summary>
        [Output("bootFrom")]
        public Output<Outputs.InstanceBootFrom> BootFrom { get; private set; } = null!;

        /// <summary>
        /// Create multiple instances
        /// </summary>
        [Output("bulk")]
        public Output<int?> Bulk { get; private set; } = null!;

        /// <summary>
        /// Flavor information
        /// </summary>
        [Output("flavor")]
        public Output<Outputs.InstanceFlavor> Flavor { get; private set; } = null!;

        /// <summary>
        /// Flavor id
        /// </summary>
        [Output("flavorId")]
        public Output<string> FlavorId { get; private set; } = null!;

        /// <summary>
        /// Flavor name
        /// </summary>
        [Output("flavorName")]
        public Output<string> FlavorName { get; private set; } = null!;

        /// <summary>
        /// Start instance in group
        /// </summary>
        [Output("group")]
        public Output<Outputs.InstanceGroup?> Group { get; private set; } = null!;

        /// <summary>
        /// Image id
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// Instance name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Create network interfaces
        /// </summary>
        [Output("network")]
        public Output<Outputs.InstanceNetwork> Network { get; private set; } = null!;

        /// <summary>
        /// Instance region
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Existing SSH Keypair
        /// </summary>
        [Output("sshKey")]
        public Output<Outputs.InstanceSshKey?> SshKey { get; private set; } = null!;

        /// <summary>
        /// Add existing SSH Key pair into your Public Cloud project and link it to the instance
        /// </summary>
        [Output("sshKeyCreate")]
        public Output<Outputs.InstanceSshKeyCreate?> SshKeyCreate { get; private set; } = null!;

        /// <summary>
        /// Instance task state
        /// </summary>
        [Output("taskState")]
        public Output<string> TaskState { get; private set; } = null!;

        /// <summary>
        /// Configuration information or scripts to use upon launch
        /// </summary>
        [Output("userData")]
        public Output<string?> UserData { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Create an autobackup workflow after instance start up.
        /// </summary>
        [Input("autoBackup")]
        public Input<Inputs.InstanceAutoBackupArgs>? AutoBackup { get; set; }

        /// <summary>
        /// The availability zone where the instance will be created
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Billing period - hourly or monthly
        /// </summary>
        [Input("billingPeriod", required: true)]
        public Input<string> BillingPeriod { get; set; } = null!;

        /// <summary>
        /// Boot the instance from an image or a volume
        /// </summary>
        [Input("bootFrom", required: true)]
        public Input<Inputs.InstanceBootFromArgs> BootFrom { get; set; } = null!;

        /// <summary>
        /// Create multiple instances
        /// </summary>
        [Input("bulk")]
        public Input<int>? Bulk { get; set; }

        /// <summary>
        /// Flavor information
        /// </summary>
        [Input("flavor", required: true)]
        public Input<Inputs.InstanceFlavorArgs> Flavor { get; set; } = null!;

        /// <summary>
        /// Start instance in group
        /// </summary>
        [Input("group")]
        public Input<Inputs.InstanceGroupArgs>? Group { get; set; }

        /// <summary>
        /// Instance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Create network interfaces
        /// </summary>
        [Input("network", required: true)]
        public Input<Inputs.InstanceNetworkArgs> Network { get; set; } = null!;

        /// <summary>
        /// Instance region
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Existing SSH Keypair
        /// </summary>
        [Input("sshKey")]
        public Input<Inputs.InstanceSshKeyArgs>? SshKey { get; set; }

        /// <summary>
        /// Add existing SSH Key pair into your Public Cloud project and link it to the instance
        /// </summary>
        [Input("sshKeyCreate")]
        public Input<Inputs.InstanceSshKeyCreateArgs>? SshKeyCreate { get; set; }

        /// <summary>
        /// Configuration information or scripts to use upon launch
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<Inputs.InstanceAddressGetArgs>? _addresses;

        /// <summary>
        /// Instance IP addresses
        /// </summary>
        public InputList<Inputs.InstanceAddressGetArgs> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<Inputs.InstanceAddressGetArgs>());
            set => _addresses = value;
        }

        [Input("attachedVolumes")]
        private InputList<Inputs.InstanceAttachedVolumeGetArgs>? _attachedVolumes;

        /// <summary>
        /// Volumes attached to the instance
        /// </summary>
        public InputList<Inputs.InstanceAttachedVolumeGetArgs> AttachedVolumes
        {
            get => _attachedVolumes ?? (_attachedVolumes = new InputList<Inputs.InstanceAttachedVolumeGetArgs>());
            set => _attachedVolumes = value;
        }

        /// <summary>
        /// Create an autobackup workflow after instance start up.
        /// </summary>
        [Input("autoBackup")]
        public Input<Inputs.InstanceAutoBackupGetArgs>? AutoBackup { get; set; }

        /// <summary>
        /// The availability zone where the instance will be created
        /// </summary>
        [Input("availabilityZone")]
        public Input<string>? AvailabilityZone { get; set; }

        /// <summary>
        /// Billing period - hourly or monthly
        /// </summary>
        [Input("billingPeriod")]
        public Input<string>? BillingPeriod { get; set; }

        /// <summary>
        /// Boot the instance from an image or a volume
        /// </summary>
        [Input("bootFrom")]
        public Input<Inputs.InstanceBootFromGetArgs>? BootFrom { get; set; }

        /// <summary>
        /// Create multiple instances
        /// </summary>
        [Input("bulk")]
        public Input<int>? Bulk { get; set; }

        /// <summary>
        /// Flavor information
        /// </summary>
        [Input("flavor")]
        public Input<Inputs.InstanceFlavorGetArgs>? Flavor { get; set; }

        /// <summary>
        /// Flavor id
        /// </summary>
        [Input("flavorId")]
        public Input<string>? FlavorId { get; set; }

        /// <summary>
        /// Flavor name
        /// </summary>
        [Input("flavorName")]
        public Input<string>? FlavorName { get; set; }

        /// <summary>
        /// Start instance in group
        /// </summary>
        [Input("group")]
        public Input<Inputs.InstanceGroupGetArgs>? Group { get; set; }

        /// <summary>
        /// Image id
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// Instance name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Create network interfaces
        /// </summary>
        [Input("network")]
        public Input<Inputs.InstanceNetworkGetArgs>? Network { get; set; }

        /// <summary>
        /// Instance region
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Existing SSH Keypair
        /// </summary>
        [Input("sshKey")]
        public Input<Inputs.InstanceSshKeyGetArgs>? SshKey { get; set; }

        /// <summary>
        /// Add existing SSH Key pair into your Public Cloud project and link it to the instance
        /// </summary>
        [Input("sshKeyCreate")]
        public Input<Inputs.InstanceSshKeyCreateGetArgs>? SshKeyCreate { get; set; }

        /// <summary>
        /// Instance task state
        /// </summary>
        [Input("taskState")]
        public Input<string>? TaskState { get; set; }

        /// <summary>
        /// Configuration information or scripts to use upon launch
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
