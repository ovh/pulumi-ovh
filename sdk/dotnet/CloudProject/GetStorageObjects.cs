// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    public static class GetStorageObjects
    {
        /// <summary>
        /// Get objects of S3™* compatible storage containers. \* S3 is a trademark filed by Amazon Technologies,Inc. OVHcloud's service is not sponsored by, endorsed by, or otherwise affiliated with Amazon Technologies,Inc.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objects = Ovh.CloudProject.GetStorageObjects.Invoke(new()
        ///     {
        ///         Name = "&lt;bucket name&gt;",
        ///         RegionName = "GRA",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStorageObjectsResult> InvokeAsync(GetStorageObjectsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageObjectsResult>("ovh:CloudProject/getStorageObjects:getStorageObjects", args ?? new GetStorageObjectsArgs(), options.WithDefaults());

        /// <summary>
        /// Get objects of S3™* compatible storage containers. \* S3 is a trademark filed by Amazon Technologies,Inc. OVHcloud's service is not sponsored by, endorsed by, or otherwise affiliated with Amazon Technologies,Inc.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objects = Ovh.CloudProject.GetStorageObjects.Invoke(new()
        ///     {
        ///         Name = "&lt;bucket name&gt;",
        ///         RegionName = "GRA",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStorageObjectsResult> Invoke(GetStorageObjectsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageObjectsResult>("ovh:CloudProject/getStorageObjects:getStorageObjects", args ?? new GetStorageObjectsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get objects of S3™* compatible storage containers. \* S3 is a trademark filed by Amazon Technologies,Inc. OVHcloud's service is not sponsored by, endorsed by, or otherwise affiliated with Amazon Technologies,Inc.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var objects = Ovh.CloudProject.GetStorageObjects.Invoke(new()
        ///     {
        ///         Name = "&lt;bucket name&gt;",
        ///         RegionName = "GRA",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStorageObjectsResult> Invoke(GetStorageObjectsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageObjectsResult>("ovh:CloudProject/getStorageObjects:getStorageObjects", args ?? new GetStorageObjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageObjectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        [Input("keyMarker")]
        public string? KeyMarker { get; set; }

        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        [Input("limit")]
        public double? Limit { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        [Input("prefix")]
        public string? Prefix { get; set; }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("regionName", required: true)]
        public string RegionName { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        /// <summary>
        /// Version ID to start listing from
        /// </summary>
        [Input("versionIdMarker")]
        public string? VersionIdMarker { get; set; }

        /// <summary>
        /// List object versions
        /// </summary>
        [Input("withVersions")]
        public bool? WithVersions { get; set; }

        public GetStorageObjectsArgs()
        {
        }
        public static new GetStorageObjectsArgs Empty => new GetStorageObjectsArgs();
    }

    public sealed class GetStorageObjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        [Input("keyMarker")]
        public Input<string>? KeyMarker { get; set; }

        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        [Input("limit")]
        public Input<double>? Limit { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("regionName", required: true)]
        public Input<string> RegionName { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Version ID to start listing from
        /// </summary>
        [Input("versionIdMarker")]
        public Input<string>? VersionIdMarker { get; set; }

        /// <summary>
        /// List object versions
        /// </summary>
        [Input("withVersions")]
        public Input<bool>? WithVersions { get; set; }

        public GetStorageObjectsInvokeArgs()
        {
        }
        public static new GetStorageObjectsInvokeArgs Empty => new GetStorageObjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageObjectsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        public readonly string? KeyMarker;
        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        public readonly double? Limit;
        /// <summary>
        /// Name
        /// </summary>
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetStorageObjectsObjectResult> Objects;
        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        public readonly string? Prefix;
        /// <summary>
        /// Region name
        /// </summary>
        public readonly string RegionName;
        /// <summary>
        /// Service name
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// Version ID to start listing from
        /// </summary>
        public readonly string? VersionIdMarker;
        /// <summary>
        /// List object versions
        /// </summary>
        public readonly bool? WithVersions;

        [OutputConstructor]
        private GetStorageObjectsResult(
            string id,

            string? keyMarker,

            double? limit,

            string name,

            ImmutableArray<Outputs.GetStorageObjectsObjectResult> objects,

            string? prefix,

            string regionName,

            string serviceName,

            string? versionIdMarker,

            bool? withVersions)
        {
            Id = id;
            KeyMarker = keyMarker;
            Limit = limit;
            Name = name;
            Objects = objects;
            Prefix = prefix;
            RegionName = regionName;
            ServiceName = serviceName;
            VersionIdMarker = versionIdMarker;
            WithVersions = withVersions;
        }
    }
}
