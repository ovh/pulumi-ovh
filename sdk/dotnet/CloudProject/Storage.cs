// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var storage = new Ovh.CloudProject.Storage("storage", new()
    ///     {
    ///         RegionName = "GRA",
    ///         ServiceName = "&lt;public cloud project ID&gt;",
    ///         Versioning = new Ovh.CloudProject.Inputs.StorageVersioningArgs
    ///         {
    ///             Status = "enabled",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A storage in a public cloud project can be imported using the `service_name`, `region_name` and `name` attributes. Using the following configuration:
    /// 
    /// terraform
    /// 
    /// import {
    /// 
    ///   id = "&lt;service_name&gt;/&lt;region_name&gt;/&lt;name&gt;"
    /// 
    ///   to = ovh_cloud_project_storage.storage
    /// 
    /// }
    /// 
    /// You can then run:
    /// 
    /// bash
    /// 
    /// $ pulumi preview -generate-config-out=storage.tf
    /// 
    /// $ pulumi up
    /// 
    /// The file `storage.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
    /// </summary>
    [OvhResourceType("ovh:CloudProject/storage:Storage")]
    public partial class Storage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date and timestamp when the resource was created
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Encryption configuration
        /// </summary>
        [Output("encryption")]
        public Output<Outputs.StorageEncryption> Encryption { get; private set; } = null!;

        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        [Output("limit")]
        public Output<double> Limit { get; private set; } = null!;

        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        [Output("marker")]
        public Output<string> Marker { get; private set; } = null!;

        /// <summary>
        /// Container name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Container objects
        /// </summary>
        [Output("objects")]
        public Output<ImmutableArray<Outputs.StorageObject>> Objects { get; private set; } = null!;

        /// <summary>
        /// Container total objects count
        /// </summary>
        [Output("objectsCount")]
        public Output<double> ObjectsCount { get; private set; } = null!;

        /// <summary>
        /// Container total objects size (bytes)
        /// </summary>
        [Output("objectsSize")]
        public Output<double> ObjectsSize { get; private set; } = null!;

        /// <summary>
        /// Container owner user ID
        /// </summary>
        [Output("ownerId")]
        public Output<double> OwnerId { get; private set; } = null!;

        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        [Output("prefix")]
        public Output<string> Prefix { get; private set; } = null!;

        /// <summary>
        /// Container region
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Region name
        /// </summary>
        [Output("regionName")]
        public Output<string> RegionName { get; private set; } = null!;

        /// <summary>
        /// Replication configuration
        /// </summary>
        [Output("replication")]
        public Output<Outputs.StorageReplication> Replication { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Versioning configuration
        /// </summary>
        [Output("versioning")]
        public Output<Outputs.StorageVersioning> Versioning { get; private set; } = null!;

        /// <summary>
        /// Container virtual host
        /// </summary>
        [Output("virtualHost")]
        public Output<string> VirtualHost { get; private set; } = null!;


        /// <summary>
        /// Create a Storage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Storage(string name, StorageArgs args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/storage:Storage", name, args ?? new StorageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Storage(string name, Input<string> id, StorageState? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/storage:Storage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Storage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Storage Get(string name, Input<string> id, StorageState? state = null, CustomResourceOptions? options = null)
        {
            return new Storage(name, id, state, options);
        }
    }

    public sealed class StorageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Encryption configuration
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.StorageEncryptionArgs>? Encryption { get; set; }

        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        [Input("limit")]
        public Input<double>? Limit { get; set; }

        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        [Input("marker")]
        public Input<string>? Marker { get; set; }

        /// <summary>
        /// Container name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Container owner user ID
        /// </summary>
        [Input("ownerId")]
        public Input<double>? OwnerId { get; set; }

        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("regionName", required: true)]
        public Input<string> RegionName { get; set; } = null!;

        /// <summary>
        /// Replication configuration
        /// </summary>
        [Input("replication")]
        public Input<Inputs.StorageReplicationArgs>? Replication { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Versioning configuration
        /// </summary>
        [Input("versioning")]
        public Input<Inputs.StorageVersioningArgs>? Versioning { get; set; }

        public StorageArgs()
        {
        }
        public static new StorageArgs Empty => new StorageArgs();
    }

    public sealed class StorageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date and timestamp when the resource was created
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Encryption configuration
        /// </summary>
        [Input("encryption")]
        public Input<Inputs.StorageEncryptionGetArgs>? Encryption { get; set; }

        /// <summary>
        /// Limit the number of objects returned (1000 maximum, defaults to 1000)
        /// </summary>
        [Input("limit")]
        public Input<double>? Limit { get; set; }

        /// <summary>
        /// Key to start with when listing objects
        /// </summary>
        [Input("marker")]
        public Input<string>? Marker { get; set; }

        /// <summary>
        /// Container name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("objects")]
        private InputList<Inputs.StorageObjectGetArgs>? _objects;

        /// <summary>
        /// Container objects
        /// </summary>
        public InputList<Inputs.StorageObjectGetArgs> Objects
        {
            get => _objects ?? (_objects = new InputList<Inputs.StorageObjectGetArgs>());
            set => _objects = value;
        }

        /// <summary>
        /// Container total objects count
        /// </summary>
        [Input("objectsCount")]
        public Input<double>? ObjectsCount { get; set; }

        /// <summary>
        /// Container total objects size (bytes)
        /// </summary>
        [Input("objectsSize")]
        public Input<double>? ObjectsSize { get; set; }

        /// <summary>
        /// Container owner user ID
        /// </summary>
        [Input("ownerId")]
        public Input<double>? OwnerId { get; set; }

        /// <summary>
        /// List objects whose key begins with this prefix
        /// </summary>
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        /// <summary>
        /// Container region
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        /// <summary>
        /// Replication configuration
        /// </summary>
        [Input("replication")]
        public Input<Inputs.StorageReplicationGetArgs>? Replication { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Versioning configuration
        /// </summary>
        [Input("versioning")]
        public Input<Inputs.StorageVersioningGetArgs>? Versioning { get; set; }

        /// <summary>
        /// Container virtual host
        /// </summary>
        [Input("virtualHost")]
        public Input<string>? VirtualHost { get; set; }

        public StorageState()
        {
        }
        public static new StorageState Empty => new StorageState();
    }
}
