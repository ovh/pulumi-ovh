// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    public static class GetStorage
    {
        public static Task<GetStorageResult> InvokeAsync(GetStorageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStorageResult>("ovh:CloudProject/getStorage:getStorage", args ?? new GetStorageArgs(), options.WithDefaults());

        public static Output<GetStorageResult> Invoke(GetStorageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageResult>("ovh:CloudProject/getStorage:getStorage", args ?? new GetStorageInvokeArgs(), options.WithDefaults());

        public static Output<GetStorageResult> Invoke(GetStorageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStorageResult>("ovh:CloudProject/getStorage:getStorage", args ?? new GetStorageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStorageArgs : global::Pulumi.InvokeArgs
    {
        [Input("limit")]
        public double? Limit { get; set; }

        [Input("marker")]
        public string? Marker { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("prefix")]
        public string? Prefix { get; set; }

        [Input("regionName", required: true)]
        public string RegionName { get; set; } = null!;

        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetStorageArgs()
        {
        }
        public static new GetStorageArgs Empty => new GetStorageArgs();
    }

    public sealed class GetStorageInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("limit")]
        public Input<double>? Limit { get; set; }

        [Input("marker")]
        public Input<string>? Marker { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("regionName", required: true)]
        public Input<string> RegionName { get; set; } = null!;

        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetStorageInvokeArgs()
        {
        }
        public static new GetStorageInvokeArgs Empty => new GetStorageInvokeArgs();
    }


    [OutputType]
    public sealed class GetStorageResult
    {
        public readonly string CreatedAt;
        public readonly Outputs.GetStorageEncryptionResult Encryption;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly double Limit;
        public readonly string Marker;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetStorageObjectResult> Objects;
        public readonly double ObjectsCount;
        public readonly double ObjectsSize;
        public readonly double OwnerId;
        public readonly string Prefix;
        public readonly string Region;
        public readonly string RegionName;
        public readonly Outputs.GetStorageReplicationResult Replication;
        public readonly string ServiceName;
        public readonly ImmutableDictionary<string, string> Tags;
        public readonly Outputs.GetStorageVersioningResult Versioning;
        public readonly string VirtualHost;

        [OutputConstructor]
        private GetStorageResult(
            string createdAt,

            Outputs.GetStorageEncryptionResult encryption,

            string id,

            double limit,

            string marker,

            string name,

            ImmutableArray<Outputs.GetStorageObjectResult> objects,

            double objectsCount,

            double objectsSize,

            double ownerId,

            string prefix,

            string region,

            string regionName,

            Outputs.GetStorageReplicationResult replication,

            string serviceName,

            ImmutableDictionary<string, string> tags,

            Outputs.GetStorageVersioningResult versioning,

            string virtualHost)
        {
            CreatedAt = createdAt;
            Encryption = encryption;
            Id = id;
            Limit = limit;
            Marker = marker;
            Name = name;
            Objects = objects;
            ObjectsCount = objectsCount;
            ObjectsSize = objectsSize;
            OwnerId = ownerId;
            Prefix = prefix;
            Region = region;
            RegionName = regionName;
            Replication = replication;
            ServiceName = serviceName;
            Tags = tags;
            Versioning = versioning;
            VirtualHost = virtualHost;
        }
    }
}
