// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// Create and manage snapshots for an instance in a public cloud project.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var snapshot = new Ovh.CloudProject.InstanceSnapshot("snapshot", new()
    ///     {
    ///         InstanceId = "&lt;instance ID&gt;",
    ///         ServiceName = "&lt;public cloud project ID&gt;",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:CloudProject/instanceSnapshot:InstanceSnapshot")]
    public partial class InstanceSnapshot : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Image creation date
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// Image usable only for this type of flavor if not null
        /// </summary>
        [Output("flavorType")]
        public Output<string> FlavorType { get; private set; } = null!;

        /// <summary>
        /// Instance ID
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Minimum disks required to use image
        /// </summary>
        [Output("minDisk")]
        public Output<double> MinDisk { get; private set; } = null!;

        /// <summary>
        /// Minimum RAM required to use image
        /// </summary>
        [Output("minRam")]
        public Output<double> MinRam { get; private set; } = null!;

        /// <summary>
        /// Snapshot name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Order plan code
        /// </summary>
        [Output("planCode")]
        public Output<string> PlanCode { get; private set; } = null!;

        /// <summary>
        /// Image region
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Image size (in GiB)
        /// </summary>
        [Output("size")]
        public Output<double> Size { get; private set; } = null!;

        /// <summary>
        /// Image status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags about the image
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Image type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// User to connect with
        /// </summary>
        [Output("user")]
        public Output<string> User { get; private set; } = null!;

        /// <summary>
        /// Image visibility
        /// </summary>
        [Output("visibility")]
        public Output<string> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceSnapshot resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceSnapshot(string name, InstanceSnapshotArgs args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/instanceSnapshot:InstanceSnapshot", name, args ?? new InstanceSnapshotArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceSnapshot(string name, Input<string> id, InstanceSnapshotState? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/instanceSnapshot:InstanceSnapshot", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceSnapshot resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceSnapshot Get(string name, Input<string> id, InstanceSnapshotState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceSnapshot(name, id, state, options);
        }
    }

    public sealed class InstanceSnapshotArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Instance ID
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Snapshot name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public InstanceSnapshotArgs()
        {
        }
        public static new InstanceSnapshotArgs Empty => new InstanceSnapshotArgs();
    }

    public sealed class InstanceSnapshotState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Image creation date
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// Image usable only for this type of flavor if not null
        /// </summary>
        [Input("flavorType")]
        public Input<string>? FlavorType { get; set; }

        /// <summary>
        /// Instance ID
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Minimum disks required to use image
        /// </summary>
        [Input("minDisk")]
        public Input<double>? MinDisk { get; set; }

        /// <summary>
        /// Minimum RAM required to use image
        /// </summary>
        [Input("minRam")]
        public Input<double>? MinRam { get; set; }

        /// <summary>
        /// Snapshot name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Order plan code
        /// </summary>
        [Input("planCode")]
        public Input<string>? PlanCode { get; set; }

        /// <summary>
        /// Image region
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Image size (in GiB)
        /// </summary>
        [Input("size")]
        public Input<double>? Size { get; set; }

        /// <summary>
        /// Image status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// Tags about the image
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Image type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// User to connect with
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        /// <summary>
        /// Image visibility
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public InstanceSnapshotState()
        {
        }
        public static new InstanceSnapshotState Empty => new InstanceSnapshotState();
    }
}
