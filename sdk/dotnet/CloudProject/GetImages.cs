// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    public static class GetImages
    {
        /// <summary>
        /// Get available images in the given public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var images = Ovh.CloudProject.GetImages.Invoke(new()
        ///     {
        ///         OsType = "linux",
        ///         Region = "WAW1",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetImagesResult> InvokeAsync(GetImagesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetImagesResult>("ovh:CloudProject/getImages:getImages", args ?? new GetImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Get available images in the given public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var images = Ovh.CloudProject.GetImages.Invoke(new()
        ///     {
        ///         OsType = "linux",
        ///         Region = "WAW1",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("ovh:CloudProject/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Get available images in the given public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var images = Ovh.CloudProject.GetImages.Invoke(new()
        ///     {
        ///         OsType = "linux",
        ///         Region = "WAW1",
        ///         ServiceName = "&lt;public cloud project ID&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetImagesResult> Invoke(GetImagesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetImagesResult>("ovh:CloudProject/getImages:getImages", args ?? new GetImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImagesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Get compatible images with flavor type
        /// </summary>
        [Input("flavorType")]
        public string? FlavorType { get; set; }

        /// <summary>
        /// Image OS (Allowed values: baremetal-linux ┃ bsd ┃ linux ┃ windows)
        /// </summary>
        [Input("osType")]
        public string? OsType { get; set; }

        /// <summary>
        /// Image region
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// Public cloud project ID
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetImagesArgs()
        {
        }
        public static new GetImagesArgs Empty => new GetImagesArgs();
    }

    public sealed class GetImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Get compatible images with flavor type
        /// </summary>
        [Input("flavorType")]
        public Input<string>? FlavorType { get; set; }

        /// <summary>
        /// Image OS (Allowed values: baremetal-linux ┃ bsd ┃ linux ┃ windows)
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// Image region
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Public cloud project ID
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetImagesInvokeArgs()
        {
        }
        public static new GetImagesInvokeArgs Empty => new GetImagesInvokeArgs();
    }


    [OutputType]
    public sealed class GetImagesResult
    {
        /// <summary>
        /// Get compatible images with flavor type
        /// </summary>
        public readonly string FlavorType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetImagesImageResult> Images;
        /// <summary>
        /// Image OS (Allowed values: baremetal-linux ┃ bsd ┃ linux ┃ windows)
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// Image region
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Public cloud project ID
        /// </summary>
        public readonly string ServiceName;

        [OutputConstructor]
        private GetImagesResult(
            string flavorType,

            string id,

            ImmutableArray<Outputs.GetImagesImageResult> images,

            string osType,

            string region,

            string serviceName)
        {
            FlavorType = flavorType;
            Id = id;
            Images = images;
            OsType = osType;
            Region = region;
            ServiceName = serviceName;
        }
    }
}
