// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var region = new Ovh.CloudProject.ProjectRegion("region", new()
    ///     {
    ///         ServiceName = "&lt;public cloud project ID&gt;",
    ///         Region = "EU-WEST-LZ-LUX-A",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:CloudProject/projectRegion:ProjectRegion")]
    public partial class ProjectRegion : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Availability zones of the region
        /// </summary>
        [Output("availabilityZones")]
        public Output<ImmutableArray<string>> AvailabilityZones { get; private set; } = null!;

        /// <summary>
        /// Region continent code
        /// </summary>
        [Output("continentCode")]
        public Output<string> ContinentCode { get; private set; } = null!;

        /// <summary>
        /// Region country code
        /// </summary>
        [Output("countryCode")]
        public Output<string> CountryCode { get; private set; } = null!;

        /// <summary>
        /// Location of the datacenter where the region is
        /// </summary>
        [Output("datacenterLocation")]
        public Output<string> DatacenterLocation { get; private set; } = null!;

        /// <summary>
        /// Allowed countries for failover ip
        /// </summary>
        [Output("ipCountries")]
        public Output<ImmutableArray<string>> IpCountries { get; private set; } = null!;

        /// <summary>
        /// Region name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Region to add to your project
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Region name
        /// </summary>
        [Output("regionName")]
        public Output<string> RegionName { get; private set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Details about components status
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.ProjectRegionService>> Services { get; private set; } = null!;

        /// <summary>
        /// Openstack region status
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Region type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectRegion resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectRegion(string name, ProjectRegionArgs args, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/projectRegion:ProjectRegion", name, args ?? new ProjectRegionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectRegion(string name, Input<string> id, ProjectRegionState? state = null, CustomResourceOptions? options = null)
            : base("ovh:CloudProject/projectRegion:ProjectRegion", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectRegion resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectRegion Get(string name, Input<string> id, ProjectRegionState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectRegion(name, id, state, options);
        }
    }

    public sealed class ProjectRegionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Region to add to your project
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public ProjectRegionArgs()
        {
        }
        public static new ProjectRegionArgs Empty => new ProjectRegionArgs();
    }

    public sealed class ProjectRegionState : global::Pulumi.ResourceArgs
    {
        [Input("availabilityZones")]
        private InputList<string>? _availabilityZones;

        /// <summary>
        /// Availability zones of the region
        /// </summary>
        public InputList<string> AvailabilityZones
        {
            get => _availabilityZones ?? (_availabilityZones = new InputList<string>());
            set => _availabilityZones = value;
        }

        /// <summary>
        /// Region continent code
        /// </summary>
        [Input("continentCode")]
        public Input<string>? ContinentCode { get; set; }

        /// <summary>
        /// Region country code
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// Location of the datacenter where the region is
        /// </summary>
        [Input("datacenterLocation")]
        public Input<string>? DatacenterLocation { get; set; }

        [Input("ipCountries")]
        private InputList<string>? _ipCountries;

        /// <summary>
        /// Allowed countries for failover ip
        /// </summary>
        public InputList<string> IpCountries
        {
            get => _ipCountries ?? (_ipCountries = new InputList<string>());
            set => _ipCountries = value;
        }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region to add to your project
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Region name
        /// </summary>
        [Input("regionName")]
        public Input<string>? RegionName { get; set; }

        /// <summary>
        /// Service name
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("services")]
        private InputList<Inputs.ProjectRegionServiceGetArgs>? _services;

        /// <summary>
        /// Details about components status
        /// </summary>
        public InputList<Inputs.ProjectRegionServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ProjectRegionServiceGetArgs>());
            set => _services = value;
        }

        /// <summary>
        /// Openstack region status
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Region type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ProjectRegionState()
        {
        }
        public static new ProjectRegionState Empty => new ProjectRegionState();
    }
}
