// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject.Outputs
{

    [OutputType]
    public sealed class RegionNetworkSubnet
    {
        /// <summary>
        /// List of IP pools allocated in subnet
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionNetworkSubnetAllocationPool> AllocationPools;
        /// <summary>
        /// Subnet range in CIDR notation
        /// </summary>
        public readonly string Cidr;
        /// <summary>
        /// DNS nameservers
        /// </summary>
        public readonly ImmutableArray<string> DnsNameServers;
        /// <summary>
        /// Enable DHCP for the subnet
        /// </summary>
        public readonly bool EnableDhcp;
        /// <summary>
        /// Set a gateway ip for the subnet
        /// </summary>
        public readonly bool EnableGatewayIp;
        /// <summary>
        /// Gateway IP
        /// </summary>
        public readonly string? GatewayIp;
        /// <summary>
        /// Host routes
        /// </summary>
        public readonly ImmutableArray<Outputs.RegionNetworkSubnetHostRoute> HostRoutes;
        /// <summary>
        /// IP version
        /// </summary>
        public readonly double IpVersion;
        /// <summary>
        /// Subnet name
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// Use default DNS
        /// </summary>
        public readonly bool? UseDefaultPublicDnsresolver;

        [OutputConstructor]
        private RegionNetworkSubnet(
            ImmutableArray<Outputs.RegionNetworkSubnetAllocationPool> allocationPools,

            string cidr,

            ImmutableArray<string> dnsNameServers,

            bool enableDhcp,

            bool enableGatewayIp,

            string? gatewayIp,

            ImmutableArray<Outputs.RegionNetworkSubnetHostRoute> hostRoutes,

            double ipVersion,

            string? name,

            bool? useDefaultPublicDnsresolver)
        {
            AllocationPools = allocationPools;
            Cidr = cidr;
            DnsNameServers = dnsNameServers;
            EnableDhcp = enableDhcp;
            EnableGatewayIp = enableGatewayIp;
            GatewayIp = gatewayIp;
            HostRoutes = hostRoutes;
            IpVersion = ipVersion;
            Name = name;
            UseDefaultPublicDnsresolver = useDefaultPublicDnsresolver;
        }
    }
}
