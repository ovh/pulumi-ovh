// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject.Outputs
{

    [OutputType]
    public sealed class InstanceNetworkPrivate
    {
        /// <summary>
        /// Existing floating IP
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateFloatingIp? FloatingIp;
        /// <summary>
        /// Information to create a new floating IP
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateFloatingIpCreate? FloatingIpCreate;
        /// <summary>
        /// Existing gateway
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateGateway? Gateway;
        /// <summary>
        /// Information to create a new gateway
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateGatewayCreate? GatewayCreate;
        /// <summary>
        /// Instance IP in the private network
        /// </summary>
        public readonly string? Ip;
        /// <summary>
        /// Existing private network
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateNetwork? Network;
        /// <summary>
        /// Information to create a new private network
        /// </summary>
        public readonly Outputs.InstanceNetworkPrivateNetworkCreate? NetworkCreate;

        [OutputConstructor]
        private InstanceNetworkPrivate(
            Outputs.InstanceNetworkPrivateFloatingIp? floatingIp,

            Outputs.InstanceNetworkPrivateFloatingIpCreate? floatingIpCreate,

            Outputs.InstanceNetworkPrivateGateway? gateway,

            Outputs.InstanceNetworkPrivateGatewayCreate? gatewayCreate,

            string? ip,

            Outputs.InstanceNetworkPrivateNetwork? network,

            Outputs.InstanceNetworkPrivateNetworkCreate? networkCreate)
        {
            FloatingIp = floatingIp;
            FloatingIpCreate = floatingIpCreate;
            Gateway = gateway;
            GatewayCreate = gatewayCreate;
            Ip = ip;
            Network = network;
            NetworkCreate = networkCreate;
        }
    }
}
