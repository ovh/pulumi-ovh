// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject
{
    public static class GetKubeOidc
    {
        /// <summary>
        /// Use this data source to get a OVHcloud Managed Kubernetes Service cluster OIDC.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Ovh.CloudProject.GetKubeOidc.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///         KubeId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidc-val"] = oidc.Apply(getKubeOidcResult =&gt; getKubeOidcResult.ClientId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetKubeOidcResult> InvokeAsync(GetKubeOidcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubeOidcResult>("ovh:CloudProject/getKubeOidc:getKubeOidc", args ?? new GetKubeOidcArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a OVHcloud Managed Kubernetes Service cluster OIDC.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Ovh.CloudProject.GetKubeOidc.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///         KubeId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidc-val"] = oidc.Apply(getKubeOidcResult =&gt; getKubeOidcResult.ClientId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetKubeOidcResult> Invoke(GetKubeOidcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubeOidcResult>("ovh:CloudProject/getKubeOidc:getKubeOidc", args ?? new GetKubeOidcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a OVHcloud Managed Kubernetes Service cluster OIDC.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var oidc = Ovh.CloudProject.GetKubeOidc.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///         KubeId = "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxx",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["oidc-val"] = oidc.Apply(getKubeOidcResult =&gt; getKubeOidcResult.ClientId),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetKubeOidcResult> Invoke(GetKubeOidcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubeOidcResult>("ovh:CloudProject/getKubeOidc:getKubeOidc", args ?? new GetKubeOidcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubeOidcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OIDC client ID.
        /// </summary>
        [Input("clientId")]
        public string? ClientId { get; set; }

        /// <summary>
        /// The OIDC issuer url.
        /// </summary>
        [Input("issuerUrl")]
        public string? IssuerUrl { get; set; }

        /// <summary>
        /// The id of the managed kubernetes cluster.
        /// </summary>
        [Input("kubeId", required: true)]
        public string KubeId { get; set; } = null!;

        /// <summary>
        /// Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs.
        /// </summary>
        [Input("oidcCaContent")]
        public string? OidcCaContent { get; set; }

        [Input("oidcGroupsClaims")]
        private List<string>? _oidcGroupsClaims;

        /// <summary>
        /// Array of JWT claim to use as the user's group. If the claim is present it must be an array of strings.
        /// </summary>
        public List<string> OidcGroupsClaims
        {
            get => _oidcGroupsClaims ?? (_oidcGroupsClaims = new List<string>());
            set => _oidcGroupsClaims = value;
        }

        /// <summary>
        /// Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        /// </summary>
        [Input("oidcGroupsPrefix")]
        public string? OidcGroupsPrefix { get; set; }

        [Input("oidcRequiredClaims")]
        private List<string>? _oidcRequiredClaims;

        /// <summary>
        /// Array of key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value."
        /// </summary>
        public List<string> OidcRequiredClaims
        {
            get => _oidcRequiredClaims ?? (_oidcRequiredClaims = new List<string>());
            set => _oidcRequiredClaims = value;
        }

        [Input("oidcSigningAlgs")]
        private List<string>? _oidcSigningAlgs;

        /// <summary>
        /// Array of signing algorithms accepted. Default is \"RS256\".
        /// </summary>
        public List<string> OidcSigningAlgs
        {
            get => _oidcSigningAlgs ?? (_oidcSigningAlgs = new List<string>());
            set => _oidcSigningAlgs = value;
        }

        /// <summary>
        /// JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
        /// </summary>
        [Input("oidcUsernameClaim")]
        public string? OidcUsernameClaim { get; set; }

        /// <summary>
        /// Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and `oidc_username_claim` is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing.
        /// </summary>
        [Input("oidcUsernamePrefix")]
        public string? OidcUsernamePrefix { get; set; }

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetKubeOidcArgs()
        {
        }
        public static new GetKubeOidcArgs Empty => new GetKubeOidcArgs();
    }

    public sealed class GetKubeOidcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OIDC client ID.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The OIDC issuer url.
        /// </summary>
        [Input("issuerUrl")]
        public Input<string>? IssuerUrl { get; set; }

        /// <summary>
        /// The id of the managed kubernetes cluster.
        /// </summary>
        [Input("kubeId", required: true)]
        public Input<string> KubeId { get; set; } = null!;

        /// <summary>
        /// Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs.
        /// </summary>
        [Input("oidcCaContent")]
        public Input<string>? OidcCaContent { get; set; }

        [Input("oidcGroupsClaims")]
        private InputList<string>? _oidcGroupsClaims;

        /// <summary>
        /// Array of JWT claim to use as the user's group. If the claim is present it must be an array of strings.
        /// </summary>
        public InputList<string> OidcGroupsClaims
        {
            get => _oidcGroupsClaims ?? (_oidcGroupsClaims = new InputList<string>());
            set => _oidcGroupsClaims = value;
        }

        /// <summary>
        /// Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        /// </summary>
        [Input("oidcGroupsPrefix")]
        public Input<string>? OidcGroupsPrefix { get; set; }

        [Input("oidcRequiredClaims")]
        private InputList<string>? _oidcRequiredClaims;

        /// <summary>
        /// Array of key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value."
        /// </summary>
        public InputList<string> OidcRequiredClaims
        {
            get => _oidcRequiredClaims ?? (_oidcRequiredClaims = new InputList<string>());
            set => _oidcRequiredClaims = value;
        }

        [Input("oidcSigningAlgs")]
        private InputList<string>? _oidcSigningAlgs;

        /// <summary>
        /// Array of signing algorithms accepted. Default is \"RS256\".
        /// </summary>
        public InputList<string> OidcSigningAlgs
        {
            get => _oidcSigningAlgs ?? (_oidcSigningAlgs = new InputList<string>());
            set => _oidcSigningAlgs = value;
        }

        /// <summary>
        /// JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
        /// </summary>
        [Input("oidcUsernameClaim")]
        public Input<string>? OidcUsernameClaim { get; set; }

        /// <summary>
        /// Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and `oidc_username_claim` is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing.
        /// </summary>
        [Input("oidcUsernamePrefix")]
        public Input<string>? OidcUsernamePrefix { get; set; }

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetKubeOidcInvokeArgs()
        {
        }
        public static new GetKubeOidcInvokeArgs Empty => new GetKubeOidcInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubeOidcResult
    {
        /// <summary>
        /// The OIDC client ID.
        /// </summary>
        public readonly string? ClientId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OIDC issuer url.
        /// </summary>
        public readonly string? IssuerUrl;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string KubeId;
        /// <summary>
        /// Content of the certificate for the CA, in base64 format, that signed your identity provider's web certificate. Defaults to the host's root CAs.
        /// </summary>
        public readonly string? OidcCaContent;
        /// <summary>
        /// Array of JWT claim to use as the user's group. If the claim is present it must be an array of strings.
        /// </summary>
        public readonly ImmutableArray<string> OidcGroupsClaims;
        /// <summary>
        /// Prefix prepended to group claims to prevent clashes with existing names (such as system: groups). For example, the value oidc: will create group names like oidc:engineering and oidc:infra.
        /// </summary>
        public readonly string? OidcGroupsPrefix;
        /// <summary>
        /// Array of key=value pairs that describe required claims in the ID Token. If set, the claims are verified to be present in the ID Token with a matching value."
        /// </summary>
        public readonly ImmutableArray<string> OidcRequiredClaims;
        /// <summary>
        /// Array of signing algorithms accepted. Default is \"RS256\".
        /// </summary>
        public readonly ImmutableArray<string> OidcSigningAlgs;
        /// <summary>
        /// JWT claim to use as the user name. By default sub, which is expected to be a unique identifier of the end user. Admins can choose other claims, such as email or name, depending on their provider. However, claims other than email will be prefixed with the issuer URL to prevent naming clashes with other plugins.
        /// </summary>
        public readonly string? OidcUsernameClaim;
        /// <summary>
        /// Prefix prepended to username claims to prevent clashes with existing names (such as system: users). For example, the value oidc: will create usernames like oidc:jane.doe. If this field isn't set and `oidc_username_claim` is a value other than email the prefix defaults to ( Issuer URL )# where ( Issuer URL ) is the value of oidcIssuerUrl. The value - can be used to disable all prefixing.
        /// </summary>
        public readonly string? OidcUsernamePrefix;
        /// <summary>
        /// See Argument Reference above.
        /// </summary>
        public readonly string ServiceName;

        [OutputConstructor]
        private GetKubeOidcResult(
            string? clientId,

            string id,

            string? issuerUrl,

            string kubeId,

            string? oidcCaContent,

            ImmutableArray<string> oidcGroupsClaims,

            string? oidcGroupsPrefix,

            ImmutableArray<string> oidcRequiredClaims,

            ImmutableArray<string> oidcSigningAlgs,

            string? oidcUsernameClaim,

            string? oidcUsernamePrefix,

            string serviceName)
        {
            ClientId = clientId;
            Id = id;
            IssuerUrl = issuerUrl;
            KubeId = kubeId;
            OidcCaContent = oidcCaContent;
            OidcGroupsClaims = oidcGroupsClaims;
            OidcGroupsPrefix = oidcGroupsPrefix;
            OidcRequiredClaims = oidcRequiredClaims;
            OidcSigningAlgs = oidcSigningAlgs;
            OidcUsernameClaim = oidcUsernameClaim;
            OidcUsernamePrefix = oidcUsernamePrefix;
            ServiceName = serviceName;
        }
    }
}
