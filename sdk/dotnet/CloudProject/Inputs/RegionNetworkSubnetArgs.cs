// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProject.Inputs
{

    public sealed class RegionNetworkSubnetArgs : global::Pulumi.ResourceArgs
    {
        [Input("allocationPools")]
        private InputList<Inputs.RegionNetworkSubnetAllocationPoolArgs>? _allocationPools;

        /// <summary>
        /// List of IP pools allocated in subnet
        /// </summary>
        public InputList<Inputs.RegionNetworkSubnetAllocationPoolArgs> AllocationPools
        {
            get => _allocationPools ?? (_allocationPools = new InputList<Inputs.RegionNetworkSubnetAllocationPoolArgs>());
            set => _allocationPools = value;
        }

        /// <summary>
        /// Subnet range in CIDR notation
        /// </summary>
        [Input("cidr", required: true)]
        public Input<string> Cidr { get; set; } = null!;

        [Input("dnsNameServers")]
        private InputList<string>? _dnsNameServers;

        /// <summary>
        /// DNS nameservers
        /// </summary>
        public InputList<string> DnsNameServers
        {
            get => _dnsNameServers ?? (_dnsNameServers = new InputList<string>());
            set => _dnsNameServers = value;
        }

        /// <summary>
        /// Enable DHCP for the subnet
        /// </summary>
        [Input("enableDhcp", required: true)]
        public Input<bool> EnableDhcp { get; set; } = null!;

        /// <summary>
        /// Set a gateway ip for the subnet
        /// </summary>
        [Input("enableGatewayIp", required: true)]
        public Input<bool> EnableGatewayIp { get; set; } = null!;

        /// <summary>
        /// Gateway IP
        /// </summary>
        [Input("gatewayIp")]
        public Input<string>? GatewayIp { get; set; }

        [Input("hostRoutes")]
        private InputList<Inputs.RegionNetworkSubnetHostRouteArgs>? _hostRoutes;

        /// <summary>
        /// Host routes
        /// </summary>
        public InputList<Inputs.RegionNetworkSubnetHostRouteArgs> HostRoutes
        {
            get => _hostRoutes ?? (_hostRoutes = new InputList<Inputs.RegionNetworkSubnetHostRouteArgs>());
            set => _hostRoutes = value;
        }

        /// <summary>
        /// IP version
        /// </summary>
        [Input("ipVersion", required: true)]
        public Input<double> IpVersion { get; set; } = null!;

        /// <summary>
        /// Subnet name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Use default DNS
        /// </summary>
        [Input("useDefaultPublicDnsresolver")]
        public Input<bool>? UseDefaultPublicDnsresolver { get; set; }

        public RegionNetworkSubnetArgs()
        {
        }
        public static new RegionNetworkSubnetArgs Empty => new RegionNetworkSubnetArgs();
    }
}
