// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.SavingsPlan
{
    /// <summary>
    /// Create and manage an OVHcloud Savings Plan
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var plan = new Ovh.SavingsPlan.SavingsPlan("plan", new()
    ///     {
    ///         AutoRenewal = true,
    ///         DisplayName = "one_month_rancher_savings_plan",
    ///         Flavor = "Rancher",
    ///         Period = "P1M",
    ///         ServiceName = "&lt;public cloud project ID&gt;",
    ///         Size = 2,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A savings plan can be imported using the following format: `service_name` and `id` of the savings plan, separated by "/" e.g.
    /// </summary>
    [OvhResourceType("ovh:SavingsPlan/savingsPlan:SavingsPlan")]
    public partial class SavingsPlan : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether Savings Plan should be renewed at the end of the period (defaults to false)
        /// </summary>
        [Output("autoRenewal")]
        public Output<bool> AutoRenewal { get; private set; } = null!;

        /// <summary>
        /// Custom display name, used in invoices
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// End date of the Savings Plan
        /// </summary>
        [Output("endDate")]
        public Output<string> EndDate { get; private set; } = null!;

        /// <summary>
        /// Savings Plan flavor. The list of available flavors can be retrieved in the next section.
        /// </summary>
        [Output("flavor")]
        public Output<string> Flavor { get; private set; } = null!;

        /// <summary>
        /// Periodicity of the Savings Plan
        /// </summary>
        [Output("period")]
        public Output<string> Period { get; private set; } = null!;

        /// <summary>
        /// Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
        /// </summary>
        [Output("periodEndAction")]
        public Output<string> PeriodEndAction { get; private set; } = null!;

        /// <summary>
        /// End date of the current period
        /// </summary>
        [Output("periodEndDate")]
        public Output<string> PeriodEndDate { get; private set; } = null!;

        /// <summary>
        /// Start date of the current period
        /// </summary>
        [Output("periodStartDate")]
        public Output<string> PeriodStartDate { get; private set; } = null!;

        /// <summary>
        /// Billing ID of the service
        /// </summary>
        [Output("serviceId")]
        public Output<int> ServiceId { get; private set; } = null!;

        /// <summary>
        /// ID of the public cloud project
        /// </summary>
        [Output("serviceName")]
        public Output<string> ServiceName { get; private set; } = null!;

        /// <summary>
        /// Size of the Savings Plan
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Start date of the Savings Plan
        /// </summary>
        [Output("startDate")]
        public Output<string> StartDate { get; private set; } = null!;

        /// <summary>
        /// Status of the Savings Plan
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a SavingsPlan resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SavingsPlan(string name, SavingsPlanArgs args, CustomResourceOptions? options = null)
            : base("ovh:SavingsPlan/savingsPlan:SavingsPlan", name, args ?? new SavingsPlanArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SavingsPlan(string name, Input<string> id, SavingsPlanState? state = null, CustomResourceOptions? options = null)
            : base("ovh:SavingsPlan/savingsPlan:SavingsPlan", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SavingsPlan resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SavingsPlan Get(string name, Input<string> id, SavingsPlanState? state = null, CustomResourceOptions? options = null)
        {
            return new SavingsPlan(name, id, state, options);
        }
    }

    public sealed class SavingsPlanArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether Savings Plan should be renewed at the end of the period (defaults to false)
        /// </summary>
        [Input("autoRenewal")]
        public Input<bool>? AutoRenewal { get; set; }

        /// <summary>
        /// Custom display name, used in invoices
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// Savings Plan flavor. The list of available flavors can be retrieved in the next section.
        /// </summary>
        [Input("flavor", required: true)]
        public Input<string> Flavor { get; set; } = null!;

        /// <summary>
        /// Periodicity of the Savings Plan
        /// </summary>
        [Input("period", required: true)]
        public Input<string> Period { get; set; } = null!;

        /// <summary>
        /// ID of the public cloud project
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        /// <summary>
        /// Size of the Savings Plan
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        public SavingsPlanArgs()
        {
        }
        public static new SavingsPlanArgs Empty => new SavingsPlanArgs();
    }

    public sealed class SavingsPlanState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether Savings Plan should be renewed at the end of the period (defaults to false)
        /// </summary>
        [Input("autoRenewal")]
        public Input<bool>? AutoRenewal { get; set; }

        /// <summary>
        /// Custom display name, used in invoices
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// End date of the Savings Plan
        /// </summary>
        [Input("endDate")]
        public Input<string>? EndDate { get; set; }

        /// <summary>
        /// Savings Plan flavor. The list of available flavors can be retrieved in the next section.
        /// </summary>
        [Input("flavor")]
        public Input<string>? Flavor { get; set; }

        /// <summary>
        /// Periodicity of the Savings Plan
        /// </summary>
        [Input("period")]
        public Input<string>? Period { get; set; }

        /// <summary>
        /// Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
        /// </summary>
        [Input("periodEndAction")]
        public Input<string>? PeriodEndAction { get; set; }

        /// <summary>
        /// End date of the current period
        /// </summary>
        [Input("periodEndDate")]
        public Input<string>? PeriodEndDate { get; set; }

        /// <summary>
        /// Start date of the current period
        /// </summary>
        [Input("periodStartDate")]
        public Input<string>? PeriodStartDate { get; set; }

        /// <summary>
        /// Billing ID of the service
        /// </summary>
        [Input("serviceId")]
        public Input<int>? ServiceId { get; set; }

        /// <summary>
        /// ID of the public cloud project
        /// </summary>
        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        /// <summary>
        /// Size of the Savings Plan
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Start date of the Savings Plan
        /// </summary>
        [Input("startDate")]
        public Input<string>? StartDate { get; set; }

        /// <summary>
        /// Status of the Savings Plan
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SavingsPlanState()
        {
        }
        public static new SavingsPlanState Empty => new SavingsPlanState();
    }
}
