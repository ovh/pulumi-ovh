// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Ip
{
    /// <summary>
    /// Use this resource to manage a rule on an IP firewall.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myFirewallRule = new Ovh.Ip.FirewallRule("myFirewallRule", new()
    ///     {
    ///         Action = "deny",
    ///         Ip = "XXXXXX",
    ///         IpOnFirewall = "XXXXXX",
    ///         Protocol = "tcp",
    ///         Sequence = 0,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The resource can be imported using the properties `ip`, `ip_on_firewall` and `sequence`, separated by "|" E.g.,
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import ovh:Ip/firewallRule:FirewallRule my_firewall_rule '127.0.0.1|127.0.0.2|0'
    /// ```
    /// </summary>
    [OvhResourceType("ovh:Ip/firewallRule:FirewallRule")]
    public partial class FirewallRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Possible values for action (deny|permit)
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Creation date of the rule
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// Destination IP for your rule
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// Destination port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Output("destinationPort")]
        public Output<double> DestinationPort { get; private set; } = null!;

        /// <summary>
        /// String description of field `destination_port`
        /// </summary>
        [Output("destinationPortDesc")]
        public Output<string> DestinationPortDesc { get; private set; } = null!;

        /// <summary>
        /// Fragments option
        /// </summary>
        [Output("fragments")]
        public Output<bool> Fragments { get; private set; } = null!;

        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// IPv4 address
        /// </summary>
        [Output("ipOnFirewall")]
        public Output<string> IpOnFirewall { get; private set; } = null!;

        /// <summary>
        /// Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Output("rule")]
        public Output<string> Rule { get; private set; } = null!;

        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        [Output("sequence")]
        public Output<double> Sequence { get; private set; } = null!;

        /// <summary>
        /// IPv4 CIDR notation (e.g., 192.0.2.0/24)
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;

        /// <summary>
        /// Source port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Output("sourcePort")]
        public Output<double> SourcePort { get; private set; } = null!;

        /// <summary>
        /// String description of field `source_port`
        /// </summary>
        [Output("sourcePortDesc")]
        public Output<string> SourcePortDesc { get; private set; } = null!;

        /// <summary>
        /// Current state of your rule
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// TCP option on your rule (syn|established)
        /// </summary>
        [Output("tcpOption")]
        public Output<string> TcpOption { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallRule(string name, FirewallRuleArgs args, CustomResourceOptions? options = null)
            : base("ovh:Ip/firewallRule:FirewallRule", name, args ?? new FirewallRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallRule(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Ip/firewallRule:FirewallRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallRule Get(string name, Input<string> id, FirewallRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallRule(name, id, state, options);
        }
    }

    public sealed class FirewallRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible values for action (deny|permit)
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Destination port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Input("destinationPort")]
        public Input<double>? DestinationPort { get; set; }

        /// <summary>
        /// Fragments option
        /// </summary>
        [Input("fragments")]
        public Input<bool>? Fragments { get; set; }

        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        /// <summary>
        /// IPv4 address
        /// </summary>
        [Input("ipOnFirewall", required: true)]
        public Input<string> IpOnFirewall { get; set; } = null!;

        /// <summary>
        /// Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        [Input("sequence", required: true)]
        public Input<double> Sequence { get; set; } = null!;

        /// <summary>
        /// IPv4 CIDR notation (e.g., 192.0.2.0/24)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Source port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Input("sourcePort")]
        public Input<double>? SourcePort { get; set; }

        /// <summary>
        /// TCP option on your rule (syn|established)
        /// </summary>
        [Input("tcpOption")]
        public Input<string>? TcpOption { get; set; }

        public FirewallRuleArgs()
        {
        }
        public static new FirewallRuleArgs Empty => new FirewallRuleArgs();
    }

    public sealed class FirewallRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Possible values for action (deny|permit)
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Creation date of the rule
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// Destination IP for your rule
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// Destination port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Input("destinationPort")]
        public Input<double>? DestinationPort { get; set; }

        /// <summary>
        /// String description of field `destination_port`
        /// </summary>
        [Input("destinationPortDesc")]
        public Input<string>? DestinationPortDesc { get; set; }

        /// <summary>
        /// Fragments option
        /// </summary>
        [Input("fragments")]
        public Input<bool>? Fragments { get; set; }

        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// IPv4 address
        /// </summary>
        [Input("ipOnFirewall")]
        public Input<string>? IpOnFirewall { get; set; }

        /// <summary>
        /// Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Description of the rule
        /// </summary>
        [Input("rule")]
        public Input<string>? Rule { get; set; }

        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        [Input("sequence")]
        public Input<double>? Sequence { get; set; }

        /// <summary>
        /// IPv4 CIDR notation (e.g., 192.0.2.0/24)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Source port for your rule. Only with TCP/UDP protocol
        /// </summary>
        [Input("sourcePort")]
        public Input<double>? SourcePort { get; set; }

        /// <summary>
        /// String description of field `source_port`
        /// </summary>
        [Input("sourcePortDesc")]
        public Input<string>? SourcePortDesc { get; set; }

        /// <summary>
        /// Current state of your rule
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// TCP option on your rule (syn|established)
        /// </summary>
        [Input("tcpOption")]
        public Input<string>? TcpOption { get; set; }

        public FirewallRuleState()
        {
        }
        public static new FirewallRuleState Empty => new FirewallRuleState();
    }
}
