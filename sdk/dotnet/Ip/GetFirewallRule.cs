// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Ip
{
    public static class GetFirewallRule
    {
        /// <summary>
        /// Use this data source to retrieve information about a rule on an IP firewall.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFirewallRule = Ovh.Ip.GetFirewallRule.Invoke(new()
        ///     {
        ///         Ip = "XXXXXX",
        ///         IpOnFirewall = "XXXXXX",
        ///         Sequence = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFirewallRuleResult> InvokeAsync(GetFirewallRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a rule on an IP firewall.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFirewallRule = Ovh.Ip.GetFirewallRule.Invoke(new()
        ///     {
        ///         Ip = "XXXXXX",
        ///         IpOnFirewall = "XXXXXX",
        ///         Sequence = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirewallRuleResult> Invoke(GetFirewallRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a rule on an IP firewall.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var myFirewallRule = Ovh.Ip.GetFirewallRule.Invoke(new()
        ///     {
        ///         Ip = "XXXXXX",
        ///         IpOnFirewall = "XXXXXX",
        ///         Sequence = 0,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFirewallRuleResult> Invoke(GetFirewallRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip", required: true)]
        public string Ip { get; set; } = null!;

        /// <summary>
        /// IPv4 address
        /// </summary>
        [Input("ipOnFirewall", required: true)]
        public string IpOnFirewall { get; set; } = null!;

        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        [Input("sequence", required: true)]
        public double Sequence { get; set; }

        public GetFirewallRuleArgs()
        {
        }
        public static new GetFirewallRuleArgs Empty => new GetFirewallRuleArgs();
    }

    public sealed class GetFirewallRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        /// <summary>
        /// IPv4 address
        /// </summary>
        [Input("ipOnFirewall", required: true)]
        public Input<string> IpOnFirewall { get; set; } = null!;

        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        [Input("sequence", required: true)]
        public Input<double> Sequence { get; set; } = null!;

        public GetFirewallRuleInvokeArgs()
        {
        }
        public static new GetFirewallRuleInvokeArgs Empty => new GetFirewallRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallRuleResult
    {
        /// <summary>
        /// Possible values for action (deny|permit)
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Creation date of the rule
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// Destination IP for your rule
        /// </summary>
        public readonly string Destination;
        /// <summary>
        /// Destination port for your rule. Only with TCP/UDP protocol
        /// </summary>
        public readonly string DestinationPort;
        /// <summary>
        /// Fragments option
        /// </summary>
        public readonly bool Fragments;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        public readonly string Ip;
        /// <summary>
        /// IPv4 address
        /// </summary>
        public readonly string IpOnFirewall;
        /// <summary>
        /// Possible values for protocol (ah|esp|gre|icmp|ipv4|tcp|udp)
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// Description of the rule
        /// </summary>
        public readonly string Rule;
        /// <summary>
        /// Rule position in the rules array
        /// </summary>
        public readonly double Sequence;
        /// <summary>
        /// IPv4 CIDR notation (e.g., 192.0.2.0/24)
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Source port for your rule. Only with TCP/UDP protocol
        /// </summary>
        public readonly string SourcePort;
        /// <summary>
        /// Current state of your rule
        /// </summary>
        public readonly string State;
        /// <summary>
        /// TCP option on your rule (syn|established)
        /// </summary>
        public readonly string TcpOption;

        [OutputConstructor]
        private GetFirewallRuleResult(
            string action,

            string creationDate,

            string destination,

            string destinationPort,

            bool fragments,

            string id,

            string ip,

            string ipOnFirewall,

            string protocol,

            string rule,

            double sequence,

            string source,

            string sourcePort,

            string state,

            string tcpOption)
        {
            Action = action;
            CreationDate = creationDate;
            Destination = destination;
            DestinationPort = destinationPort;
            Fragments = fragments;
            Id = id;
            Ip = ip;
            IpOnFirewall = ipOnFirewall;
            Protocol = protocol;
            Rule = rule;
            Sequence = sequence;
            Source = source;
            SourcePort = sourcePort;
            State = state;
            TcpOption = tcpOption;
        }
    }
}
