// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Ip
{
    public static class GetFirewallRule
    {
        public static Task<GetFirewallRuleResult> InvokeAsync(GetFirewallRuleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleArgs(), options.WithDefaults());

        public static Output<GetFirewallRuleResult> Invoke(GetFirewallRuleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleInvokeArgs(), options.WithDefaults());

        public static Output<GetFirewallRuleResult> Invoke(GetFirewallRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallRuleResult>("ovh:Ip/getFirewallRule:getFirewallRule", args ?? new GetFirewallRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallRuleArgs : global::Pulumi.InvokeArgs
    {
        [Input("ip", required: true)]
        public string Ip { get; set; } = null!;

        [Input("ipOnFirewall", required: true)]
        public string IpOnFirewall { get; set; } = null!;

        [Input("sequence", required: true)]
        public double Sequence { get; set; }

        public GetFirewallRuleArgs()
        {
        }
        public static new GetFirewallRuleArgs Empty => new GetFirewallRuleArgs();
    }

    public sealed class GetFirewallRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        [Input("ipOnFirewall", required: true)]
        public Input<string> IpOnFirewall { get; set; } = null!;

        [Input("sequence", required: true)]
        public Input<double> Sequence { get; set; } = null!;

        public GetFirewallRuleInvokeArgs()
        {
        }
        public static new GetFirewallRuleInvokeArgs Empty => new GetFirewallRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallRuleResult
    {
        public readonly string Action;
        public readonly string CreationDate;
        public readonly string Destination;
        public readonly string DestinationPort;
        public readonly bool Fragments;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ip;
        public readonly string IpOnFirewall;
        public readonly string Protocol;
        public readonly string Rule;
        public readonly double Sequence;
        public readonly string Source;
        public readonly string SourcePort;
        public readonly string State;
        public readonly string TcpOption;

        [OutputConstructor]
        private GetFirewallRuleResult(
            string action,

            string creationDate,

            string destination,

            string destinationPort,

            bool fragments,

            string id,

            string ip,

            string ipOnFirewall,

            string protocol,

            string rule,

            double sequence,

            string source,

            string sourcePort,

            string state,

            string tcpOption)
        {
            Action = action;
            CreationDate = creationDate;
            Destination = destination;
            DestinationPort = destinationPort;
            Fragments = fragments;
            Id = id;
            Ip = ip;
            IpOnFirewall = ipOnFirewall;
            Protocol = protocol;
            Rule = rule;
            Sequence = sequence;
            Source = source;
            SourcePort = sourcePort;
            State = state;
            TcpOption = tcpOption;
        }
    }
}
