// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Ip
{
    /// <summary>
    /// Use this resource to manage an IP permanent mitigation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mitigation = new Ovh.Ip.Mitigation("mitigation", new()
    ///     {
    ///         Ip = "XXXXXX",
    ///         IpOnMitigation = "XXXXXX",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:Ip/mitigation:Mitigation")]
    public partial class Mitigation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set on true if the IP is on auto-mitigation
        /// </summary>
        [Output("auto")]
        public Output<bool> Auto { get; private set; } = null!;

        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Output("ip")]
        public Output<string> Ip { get; private set; } = null!;

        /// <summary>
        /// IPv4 address
        /// * `permanent ` - Set on true if the IP is on permanent mitigation
        /// </summary>
        [Output("ipOnMitigation")]
        public Output<string> IpOnMitigation { get; private set; } = null!;

        /// <summary>
        /// Set on true if your ip is on permanent mitigation
        /// </summary>
        [Output("permanent")]
        public Output<bool> Permanent { get; private set; } = null!;

        /// <summary>
        /// Current state of the IP on mitigation
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;


        /// <summary>
        /// Create a Mitigation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mitigation(string name, MitigationArgs args, CustomResourceOptions? options = null)
            : base("ovh:Ip/mitigation:Mitigation", name, args ?? new MitigationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mitigation(string name, Input<string> id, MitigationState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Ip/mitigation:Mitigation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mitigation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mitigation Get(string name, Input<string> id, MitigationState? state = null, CustomResourceOptions? options = null)
        {
            return new Mitigation(name, id, state, options);
        }
    }

    public sealed class MitigationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip", required: true)]
        public Input<string> Ip { get; set; } = null!;

        /// <summary>
        /// IPv4 address
        /// * `permanent ` - Set on true if the IP is on permanent mitigation
        /// </summary>
        [Input("ipOnMitigation", required: true)]
        public Input<string> IpOnMitigation { get; set; } = null!;

        /// <summary>
        /// Set on true if your ip is on permanent mitigation
        /// </summary>
        [Input("permanent")]
        public Input<bool>? Permanent { get; set; }

        public MitigationArgs()
        {
        }
        public static new MitigationArgs Empty => new MitigationArgs();
    }

    public sealed class MitigationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set on true if the IP is on auto-mitigation
        /// </summary>
        [Input("auto")]
        public Input<bool>? Auto { get; set; }

        /// <summary>
        /// The IP or the CIDR
        /// </summary>
        [Input("ip")]
        public Input<string>? Ip { get; set; }

        /// <summary>
        /// IPv4 address
        /// * `permanent ` - Set on true if the IP is on permanent mitigation
        /// </summary>
        [Input("ipOnMitigation")]
        public Input<string>? IpOnMitigation { get; set; }

        /// <summary>
        /// Set on true if your ip is on permanent mitigation
        /// </summary>
        [Input("permanent")]
        public Input<bool>? Permanent { get; set; }

        /// <summary>
        /// Current state of the IP on mitigation
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        public MitigationState()
        {
        }
        public static new MitigationState Empty => new MitigationState();
    }
}
