// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Domain
{
    /// <summary>
    /// Create a dynhost login for a given domain zone.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dynhostUser = new Ovh.Domain.DynhostLogin("dynhost_user", new()
    ///     {
    ///         ZoneName = "mydomain.ovh",
    ///         SubDomain = "dynhost",
    ///         LoginSuffix = "dynhostUser",
    ///         Password = "thisIsMyPassword",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [OvhResourceType("ovh:Domain/dynhostLogin:DynhostLogin")]
    public partial class DynhostLogin : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Login name
        /// </summary>
        [Output("login")]
        public Output<string> Login { get; private set; } = null!;

        /// <summary>
        /// Suffix that will be concatenated to the zoneName to create the login
        /// </summary>
        [Output("loginSuffix")]
        public Output<string> LoginSuffix { get; private set; } = null!;

        /// <summary>
        /// Password of the login
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Subdomain that the login will be allowed to update (use * to allow all)
        /// </summary>
        [Output("subDomain")]
        public Output<string> SubDomain { get; private set; } = null!;

        /// <summary>
        /// Login zone
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;

        /// <summary>
        /// Zone name
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a DynhostLogin resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DynhostLogin(string name, DynhostLoginArgs args, CustomResourceOptions? options = null)
            : base("ovh:Domain/dynhostLogin:DynhostLogin", name, args ?? new DynhostLoginArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DynhostLogin(string name, Input<string> id, DynhostLoginState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Domain/dynhostLogin:DynhostLogin", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DynhostLogin resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DynhostLogin Get(string name, Input<string> id, DynhostLoginState? state = null, CustomResourceOptions? options = null)
        {
            return new DynhostLogin(name, id, state, options);
        }
    }

    public sealed class DynhostLoginArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Suffix that will be concatenated to the zoneName to create the login
        /// </summary>
        [Input("loginSuffix", required: true)]
        public Input<string> LoginSuffix { get; set; } = null!;

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// Password of the login
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Subdomain that the login will be allowed to update (use * to allow all)
        /// </summary>
        [Input("subDomain", required: true)]
        public Input<string> SubDomain { get; set; } = null!;

        /// <summary>
        /// Zone name
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public DynhostLoginArgs()
        {
        }
        public static new DynhostLoginArgs Empty => new DynhostLoginArgs();
    }

    public sealed class DynhostLoginState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Login name
        /// </summary>
        [Input("login")]
        public Input<string>? Login { get; set; }

        /// <summary>
        /// Suffix that will be concatenated to the zoneName to create the login
        /// </summary>
        [Input("loginSuffix")]
        public Input<string>? LoginSuffix { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// Password of the login
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Subdomain that the login will be allowed to update (use * to allow all)
        /// </summary>
        [Input("subDomain")]
        public Input<string>? SubDomain { get; set; }

        /// <summary>
        /// Login zone
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        /// <summary>
        /// Zone name
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public DynhostLoginState()
        {
        }
        public static new DynhostLoginState Empty => new DynhostLoginState();
    }
}
