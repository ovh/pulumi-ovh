// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.Domain
{
    /// <summary>
    /// Use this resource to manage a domain's DS records.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Ovh = Pulumi.Ovh;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var dsRecords = new Ovh.Domain.DSRecords("dsRecords", new()
    ///     {
    ///         Domain = "mydomain.ovh",
    ///         DsRecords = new[]
    ///         {
    ///             new Ovh.Domain.Inputs.DSRecordsDsRecordArgs
    ///             {
    ///                 Algorithm = "RSASHA1_NSEC3_SHA1",
    ///                 Flags = "KEY_SIGNING_KEY",
    ///                 PublicKey = "my_base64_encoded_public_key",
    ///                 Tag = 12345,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DS records can be imported using their `domain`.
    /// 
    /// Using the following configuration:
    /// 
    /// hcl
    /// 
    /// import {
    /// 
    ///   to = ovh_domain_ds_records.ds_records
    /// 
    ///   id = "&lt;domain name&gt;"
    /// 
    /// }
    /// 
    /// You can then run:
    /// 
    /// bash
    /// 
    /// $ pulumi preview -generate-config-out=ds_records.tf
    /// 
    /// $ pulumi up
    /// 
    /// The file `ds_records.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above.
    /// 
    /// See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
    /// </summary>
    [OvhResourceType("ovh:Domain/dSRecords:DSRecords")]
    public partial class DSRecords : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Domain name for which to manage DS records
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// Details about a DS record
        /// </summary>
        [Output("dsRecords")]
        public Output<ImmutableArray<Outputs.DSRecordsDsRecord>> DsRecords { get; private set; } = null!;


        /// <summary>
        /// Create a DSRecords resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DSRecords(string name, DSRecordsArgs args, CustomResourceOptions? options = null)
            : base("ovh:Domain/dSRecords:DSRecords", name, args ?? new DSRecordsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DSRecords(string name, Input<string> id, DSRecordsState? state = null, CustomResourceOptions? options = null)
            : base("ovh:Domain/dSRecords:DSRecords", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/ovh/pulumi-ovh",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DSRecords resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DSRecords Get(string name, Input<string> id, DSRecordsState? state = null, CustomResourceOptions? options = null)
        {
            return new DSRecords(name, id, state, options);
        }
    }

    public sealed class DSRecordsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Domain name for which to manage DS records
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("dsRecords", required: true)]
        private InputList<Inputs.DSRecordsDsRecordArgs>? _dsRecords;

        /// <summary>
        /// Details about a DS record
        /// </summary>
        public InputList<Inputs.DSRecordsDsRecordArgs> DsRecords
        {
            get => _dsRecords ?? (_dsRecords = new InputList<Inputs.DSRecordsDsRecordArgs>());
            set => _dsRecords = value;
        }

        public DSRecordsArgs()
        {
        }
        public static new DSRecordsArgs Empty => new DSRecordsArgs();
    }

    public sealed class DSRecordsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Domain name for which to manage DS records
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("dsRecords")]
        private InputList<Inputs.DSRecordsDsRecordGetArgs>? _dsRecords;

        /// <summary>
        /// Details about a DS record
        /// </summary>
        public InputList<Inputs.DSRecordsDsRecordGetArgs> DsRecords
        {
            get => _dsRecords ?? (_dsRecords = new InputList<Inputs.DSRecordsDsRecordGetArgs>());
            set => _dsRecords = value;
        }

        public DSRecordsState()
        {
        }
        public static new DSRecordsState Empty => new DSRecordsState();
    }
}
