// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh.CloudProjectDatabase
{
    public static class GetPostgresSqlConnectionPool
    {
        /// <summary>
        /// Use this data source to get information about a connection pool of a postgresql cluster associated with a public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPoolPostgresSqlConnectionPool = Ovh.CloudProjectDatabase.GetPostgresSqlConnectionPool.Invoke(new()
        ///     {
        ///         ServiceName = "XXX",
        ///         ClusterId = "YYY",
        ///         Name = "ZZZ",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["testPool"] = 
        ///         {
        ///             { "service_name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ServiceName) },
        ///             { "cluster_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ClusterId) },
        ///             { "name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Name) },
        ///             { "database_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.DatabaseId) },
        ///             { "mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Mode) },
        ///             { "size", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Size) },
        ///             { "port", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Port) },
        ///             { "ssl_mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.SslMode) },
        ///             { "uri", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Uri) },
        ///             { "user_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.UserId) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetPostgresSqlConnectionPoolResult> InvokeAsync(GetPostgresSqlConnectionPoolArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPostgresSqlConnectionPoolResult>("ovh:CloudProjectDatabase/getPostgresSqlConnectionPool:getPostgresSqlConnectionPool", args ?? new GetPostgresSqlConnectionPoolArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a connection pool of a postgresql cluster associated with a public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPoolPostgresSqlConnectionPool = Ovh.CloudProjectDatabase.GetPostgresSqlConnectionPool.Invoke(new()
        ///     {
        ///         ServiceName = "XXX",
        ///         ClusterId = "YYY",
        ///         Name = "ZZZ",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["testPool"] = 
        ///         {
        ///             { "service_name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ServiceName) },
        ///             { "cluster_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ClusterId) },
        ///             { "name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Name) },
        ///             { "database_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.DatabaseId) },
        ///             { "mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Mode) },
        ///             { "size", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Size) },
        ///             { "port", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Port) },
        ///             { "ssl_mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.SslMode) },
        ///             { "uri", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Uri) },
        ///             { "user_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.UserId) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPostgresSqlConnectionPoolResult> Invoke(GetPostgresSqlConnectionPoolInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPostgresSqlConnectionPoolResult>("ovh:CloudProjectDatabase/getPostgresSqlConnectionPool:getPostgresSqlConnectionPool", args ?? new GetPostgresSqlConnectionPoolInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information about a connection pool of a postgresql cluster associated with a public cloud project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testPoolPostgresSqlConnectionPool = Ovh.CloudProjectDatabase.GetPostgresSqlConnectionPool.Invoke(new()
        ///     {
        ///         ServiceName = "XXX",
        ///         ClusterId = "YYY",
        ///         Name = "ZZZ",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["testPool"] = 
        ///         {
        ///             { "service_name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ServiceName) },
        ///             { "cluster_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.ClusterId) },
        ///             { "name", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Name) },
        ///             { "database_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.DatabaseId) },
        ///             { "mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Mode) },
        ///             { "size", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Size) },
        ///             { "port", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Port) },
        ///             { "ssl_mode", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.SslMode) },
        ///             { "uri", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.Uri) },
        ///             { "user_id", testPoolPostgresSqlConnectionPool.Apply(getPostgresSqlConnectionPoolResult =&gt; getPostgresSqlConnectionPoolResult.UserId) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetPostgresSqlConnectionPoolResult> Invoke(GetPostgresSqlConnectionPoolInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPostgresSqlConnectionPoolResult>("ovh:CloudProjectDatabase/getPostgresSqlConnectionPool:getPostgresSqlConnectionPool", args ?? new GetPostgresSqlConnectionPoolInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPostgresSqlConnectionPoolArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the Connection pool.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetPostgresSqlConnectionPoolArgs()
        {
        }
        public static new GetPostgresSqlConnectionPoolArgs Empty => new GetPostgresSqlConnectionPoolArgs();
    }

    public sealed class GetPostgresSqlConnectionPoolInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Cluster ID.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// Name of the Connection pool.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The id of the public cloud project. If omitted,
        /// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetPostgresSqlConnectionPoolInvokeArgs()
        {
        }
        public static new GetPostgresSqlConnectionPoolInvokeArgs Empty => new GetPostgresSqlConnectionPoolInvokeArgs();
    }


    [OutputType]
    public sealed class GetPostgresSqlConnectionPoolResult
    {
        /// <summary>
        /// See Argument Reference above
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// Database ID for a database that belongs to the Database cluster given above.
        /// </summary>
        public readonly string DatabaseId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Connection mode to the connection pool
        /// Available modes:
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// See Argument Reference above
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Port of the connection pool.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// See Argument Reference above
        /// </summary>
        public readonly string ServiceName;
        /// <summary>
        /// Size of the connection pool.
        /// </summary>
        public readonly int Size;
        /// <summary>
        /// Ssl connection mode for the pool.
        /// </summary>
        public readonly string SslMode;
        /// <summary>
        /// Connection URI to the pool.
        /// </summary>
        public readonly string Uri;
        /// <summary>
        /// Database user authorized to connect to the pool, if none all the users are allowed.
        /// </summary>
        public readonly string UserId;

        [OutputConstructor]
        private GetPostgresSqlConnectionPoolResult(
            string clusterId,

            string databaseId,

            string id,

            string mode,

            string name,

            int port,

            string serviceName,

            int size,

            string sslMode,

            string uri,

            string userId)
        {
            ClusterId = clusterId;
            DatabaseId = databaseId;
            Id = id;
            Mode = mode;
            Name = name;
            Port = port;
            ServiceName = serviceName;
            Size = size;
            SslMode = sslMode;
            Uri = uri;
            UserId = userId;
        }
    }
}
