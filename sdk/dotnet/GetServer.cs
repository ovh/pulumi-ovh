// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetServer
    {
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());

        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        public readonly string ServerURN;
        public readonly string AvailabilityZone;
        public readonly int BootId;
        public readonly string BootScript;
        public readonly string CommercialRange;
        public readonly string Datacenter;
        public readonly string DisplayName;
        public readonly string EfiBootloaderPath;
        public readonly ImmutableArray<string> EnabledPublicVnis;
        public readonly ImmutableArray<string> EnabledVrackAggregationVnis;
        public readonly ImmutableArray<string> EnabledVrackVnis;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Ip;
        public readonly ImmutableArray<string> Ips;
        public readonly int LinkSpeed;
        public readonly bool Monitoring;
        public readonly string Name;
        public readonly bool NewUpgradeSystem;
        public readonly bool NoIntervention;
        public readonly string Os;
        public readonly string PowerState;
        public readonly bool ProfessionalUse;
        public readonly string Rack;
        public readonly string Region;
        public readonly string RescueMail;
        public readonly string RescueSshKey;
        public readonly string Reverse;
        public readonly string RootDevice;
        public readonly int ServerId;
        public readonly string ServiceName;
        public readonly string State;
        public readonly string SupportLevel;
        public readonly ImmutableArray<Outputs.GetServerVniResult> Vnis;

        [OutputConstructor]
        private GetServerResult(
            string ServerURN,

            string availabilityZone,

            int bootId,

            string bootScript,

            string commercialRange,

            string datacenter,

            string displayName,

            string efiBootloaderPath,

            ImmutableArray<string> enabledPublicVnis,

            ImmutableArray<string> enabledVrackAggregationVnis,

            ImmutableArray<string> enabledVrackVnis,

            string id,

            string ip,

            ImmutableArray<string> ips,

            int linkSpeed,

            bool monitoring,

            string name,

            bool newUpgradeSystem,

            bool noIntervention,

            string os,

            string powerState,

            bool professionalUse,

            string rack,

            string region,

            string rescueMail,

            string rescueSshKey,

            string reverse,

            string rootDevice,

            int serverId,

            string serviceName,

            string state,

            string supportLevel,

            ImmutableArray<Outputs.GetServerVniResult> vnis)
        {
            this.ServerURN = ServerURN;
            AvailabilityZone = availabilityZone;
            BootId = bootId;
            BootScript = bootScript;
            CommercialRange = commercialRange;
            Datacenter = datacenter;
            DisplayName = displayName;
            EfiBootloaderPath = efiBootloaderPath;
            EnabledPublicVnis = enabledPublicVnis;
            EnabledVrackAggregationVnis = enabledVrackAggregationVnis;
            EnabledVrackVnis = enabledVrackVnis;
            Id = id;
            Ip = ip;
            Ips = ips;
            LinkSpeed = linkSpeed;
            Monitoring = monitoring;
            Name = name;
            NewUpgradeSystem = newUpgradeSystem;
            NoIntervention = noIntervention;
            Os = os;
            PowerState = powerState;
            ProfessionalUse = professionalUse;
            Rack = rack;
            Region = region;
            RescueMail = rescueMail;
            RescueSshKey = rescueSshKey;
            Reverse = reverse;
            RootDevice = rootDevice;
            ServerId = serverId;
            ServiceName = serviceName;
            State = state;
            SupportLevel = supportLevel;
            Vnis = vnis;
        }
    }
}
