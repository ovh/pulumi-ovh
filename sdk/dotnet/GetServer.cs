// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Ovh
{
    public static class GetServer
    {
        /// <summary>
        /// Use this data source to retrieve information about a dedicated server associated with your OVHcloud Account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var server = Ovh.GetServer.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerResult> InvokeAsync(GetServerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a dedicated server associated with your OVHcloud Account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var server = Ovh.GetServer.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about a dedicated server associated with your OVHcloud Account.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Ovh = Pulumi.Ovh;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var server = Ovh.GetServer.Invoke(new()
        ///     {
        ///         ServiceName = "XXXXXX",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerResult> Invoke(GetServerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerResult>("ovh:index/getServer:getServer", args ?? new GetServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service_name of your dedicated server.
        /// </summary>
        [Input("serviceName", required: true)]
        public string ServiceName { get; set; } = null!;

        public GetServerArgs()
        {
        }
        public static new GetServerArgs Empty => new GetServerArgs();
    }

    public sealed class GetServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The service_name of your dedicated server.
        /// </summary>
        [Input("serviceName", required: true)]
        public Input<string> ServiceName { get; set; } = null!;

        public GetServerInvokeArgs()
        {
        }
        public static new GetServerInvokeArgs Empty => new GetServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerResult
    {
        /// <summary>
        /// URN of the dedicated server instance
        /// </summary>
        public readonly string ServerURN;
        /// <summary>
        /// Dedicated AZ localisation
        /// </summary>
        public readonly string AvailabilityZone;
        /// <summary>
        /// Boot id of the server
        /// </summary>
        public readonly int BootId;
        /// <summary>
        /// Boot script of the server
        /// </summary>
        public readonly string BootScript;
        /// <summary>
        /// Dedicated server commercial range
        /// </summary>
        public readonly string CommercialRange;
        /// <summary>
        /// Dedicated datacenter localisation (bhs1,bhs2,...)
        /// </summary>
        public readonly string Datacenter;
        /// <summary>
        /// Dedicated server display name
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Path of the EFI bootloader of the dedicated server
        /// </summary>
        public readonly string EfiBootloaderPath;
        /// <summary>
        /// List of enabled public VNI uuids
        /// </summary>
        public readonly ImmutableArray<string> EnabledPublicVnis;
        /// <summary>
        /// List of enabled vrack_aggregation VNI uuids
        /// </summary>
        public readonly ImmutableArray<string> EnabledVrackAggregationVnis;
        /// <summary>
        /// List of enabled vrack VNI uuids
        /// </summary>
        public readonly ImmutableArray<string> EnabledVrackVnis;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Dedicated server ip (IPv4)
        /// </summary>
        public readonly string Ip;
        /// <summary>
        /// Dedicated server ip blocks
        /// </summary>
        public readonly ImmutableArray<string> Ips;
        /// <summary>
        /// Link speed of the server
        /// </summary>
        public readonly int LinkSpeed;
        /// <summary>
        /// Icmp monitoring state
        /// </summary>
        public readonly bool Monitoring;
        /// <summary>
        /// User defined VirtualNetworkInterface name
        /// </summary>
        public readonly string Name;
        public readonly bool NewUpgradeSystem;
        /// <summary>
        /// Prevent datacenter intervention
        /// </summary>
        public readonly bool NoIntervention;
        /// <summary>
        /// Operating system
        /// </summary>
        public readonly string Os;
        /// <summary>
        /// Power state of the server (poweroff, poweron)
        /// </summary>
        public readonly string PowerState;
        /// <summary>
        /// Does this server have professional use option
        /// </summary>
        public readonly bool ProfessionalUse;
        /// <summary>
        /// Rack id of the server
        /// </summary>
        public readonly string Rack;
        /// <summary>
        /// Dedicated region localisation
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// Rescue mail of the server
        /// </summary>
        public readonly string RescueMail;
        /// <summary>
        /// Public SSH Key used in the rescue mode
        /// </summary>
        public readonly string RescueSshKey;
        /// <summary>
        /// Dedicated server reverse
        /// </summary>
        public readonly string Reverse;
        /// <summary>
        /// Root device of the server
        /// </summary>
        public readonly string RootDevice;
        /// <summary>
        /// Server id
        /// </summary>
        public readonly int ServerId;
        public readonly string ServiceName;
        /// <summary>
        /// Error, hacked, hackedBlocked, ok
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Dedicated server support level (critical, fastpath, gs, pro)
        /// </summary>
        public readonly string SupportLevel;
        /// <summary>
        /// The list of Virtualnetworkinterface associated with this server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerVniResult> Vnis;

        [OutputConstructor]
        private GetServerResult(
            string ServerURN,

            string availabilityZone,

            int bootId,

            string bootScript,

            string commercialRange,

            string datacenter,

            string displayName,

            string efiBootloaderPath,

            ImmutableArray<string> enabledPublicVnis,

            ImmutableArray<string> enabledVrackAggregationVnis,

            ImmutableArray<string> enabledVrackVnis,

            string id,

            string ip,

            ImmutableArray<string> ips,

            int linkSpeed,

            bool monitoring,

            string name,

            bool newUpgradeSystem,

            bool noIntervention,

            string os,

            string powerState,

            bool professionalUse,

            string rack,

            string region,

            string rescueMail,

            string rescueSshKey,

            string reverse,

            string rootDevice,

            int serverId,

            string serviceName,

            string state,

            string supportLevel,

            ImmutableArray<Outputs.GetServerVniResult> vnis)
        {
            this.ServerURN = ServerURN;
            AvailabilityZone = availabilityZone;
            BootId = bootId;
            BootScript = bootScript;
            CommercialRange = commercialRange;
            Datacenter = datacenter;
            DisplayName = displayName;
            EfiBootloaderPath = efiBootloaderPath;
            EnabledPublicVnis = enabledPublicVnis;
            EnabledVrackAggregationVnis = enabledVrackAggregationVnis;
            EnabledVrackVnis = enabledVrackVnis;
            Id = id;
            Ip = ip;
            Ips = ips;
            LinkSpeed = linkSpeed;
            Monitoring = monitoring;
            Name = name;
            NewUpgradeSystem = newUpgradeSystem;
            NoIntervention = noIntervention;
            Os = os;
            PowerState = powerState;
            ProfessionalUse = professionalUse;
            Rack = rack;
            Region = region;
            RescueMail = rescueMail;
            RescueSshKey = rescueSshKey;
            Reverse = reverse;
            RootDevice = rootDevice;
            ServerId = serverId;
            ServiceName = serviceName;
            State = state;
            SupportLevel = supportLevel;
            Vnis = vnis;
        }
    }
}
