// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicated

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource for managing access rights to partitions on HA-NAS services
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/dedicated"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dedicated.NewNasHAPartitionAccess(ctx, "myPartition", &dedicated.NasHAPartitionAccessArgs{
//				AclDescription: pulumi.String("Description of the ACL"),
//				Ip:             pulumi.String("123.123.123.123/32"),
//				PartitionName:  pulumi.String("my-partition"),
//				ServiceName:    pulumi.String("zpool-12345"),
//				Type:           pulumi.String("readwrite"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HA-NAS partition access can be imported using the `{service_name}/{partition_name}/{ip}`, e.g.
//
// ```sh
// $ pulumi import ovh:Dedicated/nasHAPartitionAccess:NasHAPartitionAccess my-partition zpool-12345/my-partition/123.123.123.123%2F32`
// ```
type NasHAPartitionAccess struct {
	pulumi.CustomResourceState

	// A brief description of the acl
	AclDescription pulumi.StringPtrOutput `pulumi:"aclDescription"`
	// IP block in x.x.x.x/x format
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Name of the partition
	PartitionName pulumi.StringOutput `pulumi:"partitionName"`
	// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// One of "readwrite", "readonly"
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewNasHAPartitionAccess registers a new resource with the given unique name, arguments, and options.
func NewNasHAPartitionAccess(ctx *pulumi.Context,
	name string, args *NasHAPartitionAccessArgs, opts ...pulumi.ResourceOption) (*NasHAPartitionAccess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ip == nil {
		return nil, errors.New("invalid value for required argument 'Ip'")
	}
	if args.PartitionName == nil {
		return nil, errors.New("invalid value for required argument 'PartitionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NasHAPartitionAccess
	err := ctx.RegisterResource("ovh:Dedicated/nasHAPartitionAccess:NasHAPartitionAccess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNasHAPartitionAccess gets an existing NasHAPartitionAccess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNasHAPartitionAccess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NasHAPartitionAccessState, opts ...pulumi.ResourceOption) (*NasHAPartitionAccess, error) {
	var resource NasHAPartitionAccess
	err := ctx.ReadResource("ovh:Dedicated/nasHAPartitionAccess:NasHAPartitionAccess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NasHAPartitionAccess resources.
type nasHAPartitionAccessState struct {
	// A brief description of the acl
	AclDescription *string `pulumi:"aclDescription"`
	// IP block in x.x.x.x/x format
	Ip *string `pulumi:"ip"`
	// Name of the partition
	PartitionName *string `pulumi:"partitionName"`
	// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
	ServiceName *string `pulumi:"serviceName"`
	// One of "readwrite", "readonly"
	Type *string `pulumi:"type"`
}

type NasHAPartitionAccessState struct {
	// A brief description of the acl
	AclDescription pulumi.StringPtrInput
	// IP block in x.x.x.x/x format
	Ip pulumi.StringPtrInput
	// Name of the partition
	PartitionName pulumi.StringPtrInput
	// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
	ServiceName pulumi.StringPtrInput
	// One of "readwrite", "readonly"
	Type pulumi.StringPtrInput
}

func (NasHAPartitionAccessState) ElementType() reflect.Type {
	return reflect.TypeOf((*nasHAPartitionAccessState)(nil)).Elem()
}

type nasHAPartitionAccessArgs struct {
	// A brief description of the acl
	AclDescription *string `pulumi:"aclDescription"`
	// IP block in x.x.x.x/x format
	Ip string `pulumi:"ip"`
	// Name of the partition
	PartitionName string `pulumi:"partitionName"`
	// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
	ServiceName string `pulumi:"serviceName"`
	// One of "readwrite", "readonly"
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NasHAPartitionAccess resource.
type NasHAPartitionAccessArgs struct {
	// A brief description of the acl
	AclDescription pulumi.StringPtrInput
	// IP block in x.x.x.x/x format
	Ip pulumi.StringInput
	// Name of the partition
	PartitionName pulumi.StringInput
	// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
	ServiceName pulumi.StringInput
	// One of "readwrite", "readonly"
	Type pulumi.StringPtrInput
}

func (NasHAPartitionAccessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nasHAPartitionAccessArgs)(nil)).Elem()
}

type NasHAPartitionAccessInput interface {
	pulumi.Input

	ToNasHAPartitionAccessOutput() NasHAPartitionAccessOutput
	ToNasHAPartitionAccessOutputWithContext(ctx context.Context) NasHAPartitionAccessOutput
}

func (*NasHAPartitionAccess) ElementType() reflect.Type {
	return reflect.TypeOf((**NasHAPartitionAccess)(nil)).Elem()
}

func (i *NasHAPartitionAccess) ToNasHAPartitionAccessOutput() NasHAPartitionAccessOutput {
	return i.ToNasHAPartitionAccessOutputWithContext(context.Background())
}

func (i *NasHAPartitionAccess) ToNasHAPartitionAccessOutputWithContext(ctx context.Context) NasHAPartitionAccessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasHAPartitionAccessOutput)
}

// NasHAPartitionAccessArrayInput is an input type that accepts NasHAPartitionAccessArray and NasHAPartitionAccessArrayOutput values.
// You can construct a concrete instance of `NasHAPartitionAccessArrayInput` via:
//
//	NasHAPartitionAccessArray{ NasHAPartitionAccessArgs{...} }
type NasHAPartitionAccessArrayInput interface {
	pulumi.Input

	ToNasHAPartitionAccessArrayOutput() NasHAPartitionAccessArrayOutput
	ToNasHAPartitionAccessArrayOutputWithContext(context.Context) NasHAPartitionAccessArrayOutput
}

type NasHAPartitionAccessArray []NasHAPartitionAccessInput

func (NasHAPartitionAccessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NasHAPartitionAccess)(nil)).Elem()
}

func (i NasHAPartitionAccessArray) ToNasHAPartitionAccessArrayOutput() NasHAPartitionAccessArrayOutput {
	return i.ToNasHAPartitionAccessArrayOutputWithContext(context.Background())
}

func (i NasHAPartitionAccessArray) ToNasHAPartitionAccessArrayOutputWithContext(ctx context.Context) NasHAPartitionAccessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasHAPartitionAccessArrayOutput)
}

// NasHAPartitionAccessMapInput is an input type that accepts NasHAPartitionAccessMap and NasHAPartitionAccessMapOutput values.
// You can construct a concrete instance of `NasHAPartitionAccessMapInput` via:
//
//	NasHAPartitionAccessMap{ "key": NasHAPartitionAccessArgs{...} }
type NasHAPartitionAccessMapInput interface {
	pulumi.Input

	ToNasHAPartitionAccessMapOutput() NasHAPartitionAccessMapOutput
	ToNasHAPartitionAccessMapOutputWithContext(context.Context) NasHAPartitionAccessMapOutput
}

type NasHAPartitionAccessMap map[string]NasHAPartitionAccessInput

func (NasHAPartitionAccessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NasHAPartitionAccess)(nil)).Elem()
}

func (i NasHAPartitionAccessMap) ToNasHAPartitionAccessMapOutput() NasHAPartitionAccessMapOutput {
	return i.ToNasHAPartitionAccessMapOutputWithContext(context.Background())
}

func (i NasHAPartitionAccessMap) ToNasHAPartitionAccessMapOutputWithContext(ctx context.Context) NasHAPartitionAccessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NasHAPartitionAccessMapOutput)
}

type NasHAPartitionAccessOutput struct{ *pulumi.OutputState }

func (NasHAPartitionAccessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NasHAPartitionAccess)(nil)).Elem()
}

func (o NasHAPartitionAccessOutput) ToNasHAPartitionAccessOutput() NasHAPartitionAccessOutput {
	return o
}

func (o NasHAPartitionAccessOutput) ToNasHAPartitionAccessOutputWithContext(ctx context.Context) NasHAPartitionAccessOutput {
	return o
}

// A brief description of the acl
func (o NasHAPartitionAccessOutput) AclDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NasHAPartitionAccess) pulumi.StringPtrOutput { return v.AclDescription }).(pulumi.StringPtrOutput)
}

// IP block in x.x.x.x/x format
func (o NasHAPartitionAccessOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *NasHAPartitionAccess) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Name of the partition
func (o NasHAPartitionAccessOutput) PartitionName() pulumi.StringOutput {
	return o.ApplyT(func(v *NasHAPartitionAccess) pulumi.StringOutput { return v.PartitionName }).(pulumi.StringOutput)
}

// The internal name of your HA-NAS (it has to be ordered via OVHcloud interface)
func (o NasHAPartitionAccessOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *NasHAPartitionAccess) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// One of "readwrite", "readonly"
func (o NasHAPartitionAccessOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NasHAPartitionAccess) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type NasHAPartitionAccessArrayOutput struct{ *pulumi.OutputState }

func (NasHAPartitionAccessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NasHAPartitionAccess)(nil)).Elem()
}

func (o NasHAPartitionAccessArrayOutput) ToNasHAPartitionAccessArrayOutput() NasHAPartitionAccessArrayOutput {
	return o
}

func (o NasHAPartitionAccessArrayOutput) ToNasHAPartitionAccessArrayOutputWithContext(ctx context.Context) NasHAPartitionAccessArrayOutput {
	return o
}

func (o NasHAPartitionAccessArrayOutput) Index(i pulumi.IntInput) NasHAPartitionAccessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NasHAPartitionAccess {
		return vs[0].([]*NasHAPartitionAccess)[vs[1].(int)]
	}).(NasHAPartitionAccessOutput)
}

type NasHAPartitionAccessMapOutput struct{ *pulumi.OutputState }

func (NasHAPartitionAccessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NasHAPartitionAccess)(nil)).Elem()
}

func (o NasHAPartitionAccessMapOutput) ToNasHAPartitionAccessMapOutput() NasHAPartitionAccessMapOutput {
	return o
}

func (o NasHAPartitionAccessMapOutput) ToNasHAPartitionAccessMapOutputWithContext(ctx context.Context) NasHAPartitionAccessMapOutput {
	return o
}

func (o NasHAPartitionAccessMapOutput) MapIndex(k pulumi.StringInput) NasHAPartitionAccessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NasHAPartitionAccess {
		return vs[0].(map[string]*NasHAPartitionAccess)[vs[1].(string)]
	}).(NasHAPartitionAccessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NasHAPartitionAccessInput)(nil)).Elem(), &NasHAPartitionAccess{})
	pulumi.RegisterInputType(reflect.TypeOf((*NasHAPartitionAccessArrayInput)(nil)).Elem(), NasHAPartitionAccessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NasHAPartitionAccessMapInput)(nil)).Elem(), NasHAPartitionAccessMap{})
	pulumi.RegisterOutputType(NasHAPartitionAccessOutput{})
	pulumi.RegisterOutputType(NasHAPartitionAccessArrayOutput{})
	pulumi.RegisterOutputType(NasHAPartitionAccessMapOutput{})
}
