// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dedicated

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Server struct {
	pulumi.CustomResourceState

	// dedicated AZ localisation
	AvailabilityZone pulumi.StringOutput  `pulumi:"availabilityZone"`
	BootId           pulumi.Float64Output `pulumi:"bootId"`
	// Ipxe script served on boot
	BootScript pulumi.StringOutput `pulumi:"bootScript"`
	// dedicater server commercial range
	CommercialRange pulumi.StringOutput `pulumi:"commercialRange"`
	// OS reinstallation customizations
	Customizations ServerCustomizationsPtrOutput `pulumi:"customizations"`
	// dedicated datacenter localisation
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// The display name of your dedicated server
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Path of the EFI bootloader served on boot
	EfiBootloaderPath pulumi.StringOutput `pulumi:"efiBootloaderPath"`
	// IAM resource metadata
	Iam ServerIamOutput `pulumi:"iam"`
	// dedicated server ip
	Ip        pulumi.StringOutput  `pulumi:"ip"`
	LinkSpeed pulumi.Float64Output `pulumi:"linkSpeed"`
	// Icmp monitoring state
	Monitoring pulumi.BoolOutput `pulumi:"monitoring"`
	// dedicated server name
	Name             pulumi.StringOutput `pulumi:"name"`
	NewUpgradeSystem pulumi.BoolOutput   `pulumi:"newUpgradeSystem"`
	// Prevent datacenter intervention
	NoIntervention pulumi.BoolOutput `pulumi:"noIntervention"`
	// Details about an Order
	Order ServerOrderOutput `pulumi:"order"`
	// Operating system
	Os pulumi.StringOutput `pulumi:"os"`
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrOutput      `pulumi:"ovhSubsidiary"`
	PlanOptions   ServerPlanOptionArrayOutput `pulumi:"planOptions"`
	Plans         ServerPlanArrayOutput       `pulumi:"plans"`
	// Power state of the server
	PowerState pulumi.StringOutput `pulumi:"powerState"`
	// Does this server have professional use option
	ProfessionalUse pulumi.BoolOutput `pulumi:"professionalUse"`
	// Arbitrary properties to pass to cloud-init's config drive datasource
	Properties pulumi.StringMapOutput `pulumi:"properties"`
	Rack       pulumi.StringOutput    `pulumi:"rack"`
	// dedicated region localisation
	Region pulumi.StringOutput `pulumi:"region"`
	// Custom email used to receive rescue credentials
	RescueMail pulumi.StringOutput `pulumi:"rescueMail"`
	// Public SSH Key used in the rescue mode
	RescueSshKey pulumi.StringOutput `pulumi:"rescueSshKey"`
	// dedicated server reverse
	Reverse    pulumi.StringOutput `pulumi:"reverse"`
	RootDevice pulumi.StringOutput `pulumi:"rootDevice"`
	// Server id
	ServerId pulumi.Float64Output `pulumi:"serverId"`
	// The internal name of your dedicated server
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// All states a Dedicated can be in
	State pulumi.StringOutput `pulumi:"state"`
	// OS reinstallation storage configurations
	Storages ServerStorageArrayOutput `pulumi:"storages"`
	// Dedicated server support level
	SupportLevel pulumi.StringOutput `pulumi:"supportLevel"`
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOption) (*Server, error) {
	if args == nil {
		args = &ServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Server
	err := ctx.RegisterResource("ovh:Dedicated/server:Server", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerState, opts ...pulumi.ResourceOption) (*Server, error) {
	var resource Server
	err := ctx.ReadResource("ovh:Dedicated/server:Server", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Server resources.
type serverState struct {
	// dedicated AZ localisation
	AvailabilityZone *string  `pulumi:"availabilityZone"`
	BootId           *float64 `pulumi:"bootId"`
	// Ipxe script served on boot
	BootScript *string `pulumi:"bootScript"`
	// dedicater server commercial range
	CommercialRange *string `pulumi:"commercialRange"`
	// OS reinstallation customizations
	Customizations *ServerCustomizations `pulumi:"customizations"`
	// dedicated datacenter localisation
	Datacenter *string `pulumi:"datacenter"`
	// The display name of your dedicated server
	DisplayName *string `pulumi:"displayName"`
	// Path of the EFI bootloader served on boot
	EfiBootloaderPath *string `pulumi:"efiBootloaderPath"`
	// IAM resource metadata
	Iam *ServerIam `pulumi:"iam"`
	// dedicated server ip
	Ip        *string  `pulumi:"ip"`
	LinkSpeed *float64 `pulumi:"linkSpeed"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// dedicated server name
	Name             *string `pulumi:"name"`
	NewUpgradeSystem *bool   `pulumi:"newUpgradeSystem"`
	// Prevent datacenter intervention
	NoIntervention *bool `pulumi:"noIntervention"`
	// Details about an Order
	Order *ServerOrder `pulumi:"order"`
	// Operating system
	Os *string `pulumi:"os"`
	// OVH subsidiaries
	OvhSubsidiary *string            `pulumi:"ovhSubsidiary"`
	PlanOptions   []ServerPlanOption `pulumi:"planOptions"`
	Plans         []ServerPlan       `pulumi:"plans"`
	// Power state of the server
	PowerState *string `pulumi:"powerState"`
	// Does this server have professional use option
	ProfessionalUse *bool `pulumi:"professionalUse"`
	// Arbitrary properties to pass to cloud-init's config drive datasource
	Properties map[string]string `pulumi:"properties"`
	Rack       *string           `pulumi:"rack"`
	// dedicated region localisation
	Region *string `pulumi:"region"`
	// Custom email used to receive rescue credentials
	RescueMail *string `pulumi:"rescueMail"`
	// Public SSH Key used in the rescue mode
	RescueSshKey *string `pulumi:"rescueSshKey"`
	// dedicated server reverse
	Reverse    *string `pulumi:"reverse"`
	RootDevice *string `pulumi:"rootDevice"`
	// Server id
	ServerId *float64 `pulumi:"serverId"`
	// The internal name of your dedicated server
	ServiceName *string `pulumi:"serviceName"`
	// All states a Dedicated can be in
	State *string `pulumi:"state"`
	// OS reinstallation storage configurations
	Storages []ServerStorage `pulumi:"storages"`
	// Dedicated server support level
	SupportLevel *string `pulumi:"supportLevel"`
}

type ServerState struct {
	// dedicated AZ localisation
	AvailabilityZone pulumi.StringPtrInput
	BootId           pulumi.Float64PtrInput
	// Ipxe script served on boot
	BootScript pulumi.StringPtrInput
	// dedicater server commercial range
	CommercialRange pulumi.StringPtrInput
	// OS reinstallation customizations
	Customizations ServerCustomizationsPtrInput
	// dedicated datacenter localisation
	Datacenter pulumi.StringPtrInput
	// The display name of your dedicated server
	DisplayName pulumi.StringPtrInput
	// Path of the EFI bootloader served on boot
	EfiBootloaderPath pulumi.StringPtrInput
	// IAM resource metadata
	Iam ServerIamPtrInput
	// dedicated server ip
	Ip        pulumi.StringPtrInput
	LinkSpeed pulumi.Float64PtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// dedicated server name
	Name             pulumi.StringPtrInput
	NewUpgradeSystem pulumi.BoolPtrInput
	// Prevent datacenter intervention
	NoIntervention pulumi.BoolPtrInput
	// Details about an Order
	Order ServerOrderPtrInput
	// Operating system
	Os pulumi.StringPtrInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrInput
	PlanOptions   ServerPlanOptionArrayInput
	Plans         ServerPlanArrayInput
	// Power state of the server
	PowerState pulumi.StringPtrInput
	// Does this server have professional use option
	ProfessionalUse pulumi.BoolPtrInput
	// Arbitrary properties to pass to cloud-init's config drive datasource
	Properties pulumi.StringMapInput
	Rack       pulumi.StringPtrInput
	// dedicated region localisation
	Region pulumi.StringPtrInput
	// Custom email used to receive rescue credentials
	RescueMail pulumi.StringPtrInput
	// Public SSH Key used in the rescue mode
	RescueSshKey pulumi.StringPtrInput
	// dedicated server reverse
	Reverse    pulumi.StringPtrInput
	RootDevice pulumi.StringPtrInput
	// Server id
	ServerId pulumi.Float64PtrInput
	// The internal name of your dedicated server
	ServiceName pulumi.StringPtrInput
	// All states a Dedicated can be in
	State pulumi.StringPtrInput
	// OS reinstallation storage configurations
	Storages ServerStorageArrayInput
	// Dedicated server support level
	SupportLevel pulumi.StringPtrInput
}

func (ServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverState)(nil)).Elem()
}

type serverArgs struct {
	BootId *float64 `pulumi:"bootId"`
	// Ipxe script served on boot
	BootScript *string `pulumi:"bootScript"`
	// OS reinstallation customizations
	Customizations *ServerCustomizations `pulumi:"customizations"`
	// The display name of your dedicated server
	DisplayName *string `pulumi:"displayName"`
	// Path of the EFI bootloader served on boot
	EfiBootloaderPath *string `pulumi:"efiBootloaderPath"`
	// Icmp monitoring state
	Monitoring *bool `pulumi:"monitoring"`
	// Prevent datacenter intervention
	NoIntervention *bool `pulumi:"noIntervention"`
	// Operating system
	Os *string `pulumi:"os"`
	// OVH subsidiaries
	OvhSubsidiary *string            `pulumi:"ovhSubsidiary"`
	PlanOptions   []ServerPlanOption `pulumi:"planOptions"`
	Plans         []ServerPlan       `pulumi:"plans"`
	// Arbitrary properties to pass to cloud-init's config drive datasource
	Properties map[string]string `pulumi:"properties"`
	// Custom email used to receive rescue credentials
	RescueMail *string `pulumi:"rescueMail"`
	// Public SSH Key used in the rescue mode
	RescueSshKey *string `pulumi:"rescueSshKey"`
	RootDevice   *string `pulumi:"rootDevice"`
	// All states a Dedicated can be in
	State *string `pulumi:"state"`
	// OS reinstallation storage configurations
	Storages []ServerStorage `pulumi:"storages"`
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	BootId pulumi.Float64PtrInput
	// Ipxe script served on boot
	BootScript pulumi.StringPtrInput
	// OS reinstallation customizations
	Customizations ServerCustomizationsPtrInput
	// The display name of your dedicated server
	DisplayName pulumi.StringPtrInput
	// Path of the EFI bootloader served on boot
	EfiBootloaderPath pulumi.StringPtrInput
	// Icmp monitoring state
	Monitoring pulumi.BoolPtrInput
	// Prevent datacenter intervention
	NoIntervention pulumi.BoolPtrInput
	// Operating system
	Os pulumi.StringPtrInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrInput
	PlanOptions   ServerPlanOptionArrayInput
	Plans         ServerPlanArrayInput
	// Arbitrary properties to pass to cloud-init's config drive datasource
	Properties pulumi.StringMapInput
	// Custom email used to receive rescue credentials
	RescueMail pulumi.StringPtrInput
	// Public SSH Key used in the rescue mode
	RescueSshKey pulumi.StringPtrInput
	RootDevice   pulumi.StringPtrInput
	// All states a Dedicated can be in
	State pulumi.StringPtrInput
	// OS reinstallation storage configurations
	Storages ServerStorageArrayInput
}

func (ServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverArgs)(nil)).Elem()
}

type ServerInput interface {
	pulumi.Input

	ToServerOutput() ServerOutput
	ToServerOutputWithContext(ctx context.Context) ServerOutput
}

func (*Server) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (i *Server) ToServerOutput() ServerOutput {
	return i.ToServerOutputWithContext(context.Background())
}

func (i *Server) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerOutput)
}

// ServerArrayInput is an input type that accepts ServerArray and ServerArrayOutput values.
// You can construct a concrete instance of `ServerArrayInput` via:
//
//	ServerArray{ ServerArgs{...} }
type ServerArrayInput interface {
	pulumi.Input

	ToServerArrayOutput() ServerArrayOutput
	ToServerArrayOutputWithContext(context.Context) ServerArrayOutput
}

type ServerArray []ServerInput

func (ServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (i ServerArray) ToServerArrayOutput() ServerArrayOutput {
	return i.ToServerArrayOutputWithContext(context.Background())
}

func (i ServerArray) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerArrayOutput)
}

// ServerMapInput is an input type that accepts ServerMap and ServerMapOutput values.
// You can construct a concrete instance of `ServerMapInput` via:
//
//	ServerMap{ "key": ServerArgs{...} }
type ServerMapInput interface {
	pulumi.Input

	ToServerMapOutput() ServerMapOutput
	ToServerMapOutputWithContext(context.Context) ServerMapOutput
}

type ServerMap map[string]ServerInput

func (ServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (i ServerMap) ToServerMapOutput() ServerMapOutput {
	return i.ToServerMapOutputWithContext(context.Background())
}

func (i ServerMap) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerMapOutput)
}

type ServerOutput struct{ *pulumi.OutputState }

func (ServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Server)(nil)).Elem()
}

func (o ServerOutput) ToServerOutput() ServerOutput {
	return o
}

func (o ServerOutput) ToServerOutputWithContext(ctx context.Context) ServerOutput {
	return o
}

// dedicated AZ localisation
func (o ServerOutput) AvailabilityZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.AvailabilityZone }).(pulumi.StringOutput)
}

func (o ServerOutput) BootId() pulumi.Float64Output {
	return o.ApplyT(func(v *Server) pulumi.Float64Output { return v.BootId }).(pulumi.Float64Output)
}

// Ipxe script served on boot
func (o ServerOutput) BootScript() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.BootScript }).(pulumi.StringOutput)
}

// dedicater server commercial range
func (o ServerOutput) CommercialRange() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.CommercialRange }).(pulumi.StringOutput)
}

// OS reinstallation customizations
func (o ServerOutput) Customizations() ServerCustomizationsPtrOutput {
	return o.ApplyT(func(v *Server) ServerCustomizationsPtrOutput { return v.Customizations }).(ServerCustomizationsPtrOutput)
}

// dedicated datacenter localisation
func (o ServerOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Datacenter }).(pulumi.StringOutput)
}

// The display name of your dedicated server
func (o ServerOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Path of the EFI bootloader served on boot
func (o ServerOutput) EfiBootloaderPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.EfiBootloaderPath }).(pulumi.StringOutput)
}

// IAM resource metadata
func (o ServerOutput) Iam() ServerIamOutput {
	return o.ApplyT(func(v *Server) ServerIamOutput { return v.Iam }).(ServerIamOutput)
}

// dedicated server ip
func (o ServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

func (o ServerOutput) LinkSpeed() pulumi.Float64Output {
	return o.ApplyT(func(v *Server) pulumi.Float64Output { return v.LinkSpeed }).(pulumi.Float64Output)
}

// Icmp monitoring state
func (o ServerOutput) Monitoring() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.Monitoring }).(pulumi.BoolOutput)
}

// dedicated server name
func (o ServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServerOutput) NewUpgradeSystem() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.NewUpgradeSystem }).(pulumi.BoolOutput)
}

// Prevent datacenter intervention
func (o ServerOutput) NoIntervention() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.NoIntervention }).(pulumi.BoolOutput)
}

// Details about an Order
func (o ServerOutput) Order() ServerOrderOutput {
	return o.ApplyT(func(v *Server) ServerOrderOutput { return v.Order }).(ServerOrderOutput)
}

// Operating system
func (o ServerOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Os }).(pulumi.StringOutput)
}

// OVH subsidiaries
func (o ServerOutput) OvhSubsidiary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Server) pulumi.StringPtrOutput { return v.OvhSubsidiary }).(pulumi.StringPtrOutput)
}

func (o ServerOutput) PlanOptions() ServerPlanOptionArrayOutput {
	return o.ApplyT(func(v *Server) ServerPlanOptionArrayOutput { return v.PlanOptions }).(ServerPlanOptionArrayOutput)
}

func (o ServerOutput) Plans() ServerPlanArrayOutput {
	return o.ApplyT(func(v *Server) ServerPlanArrayOutput { return v.Plans }).(ServerPlanArrayOutput)
}

// Power state of the server
func (o ServerOutput) PowerState() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.PowerState }).(pulumi.StringOutput)
}

// Does this server have professional use option
func (o ServerOutput) ProfessionalUse() pulumi.BoolOutput {
	return o.ApplyT(func(v *Server) pulumi.BoolOutput { return v.ProfessionalUse }).(pulumi.BoolOutput)
}

// Arbitrary properties to pass to cloud-init's config drive datasource
func (o ServerOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Server) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

func (o ServerOutput) Rack() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Rack }).(pulumi.StringOutput)
}

// dedicated region localisation
func (o ServerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Custom email used to receive rescue credentials
func (o ServerOutput) RescueMail() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.RescueMail }).(pulumi.StringOutput)
}

// Public SSH Key used in the rescue mode
func (o ServerOutput) RescueSshKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.RescueSshKey }).(pulumi.StringOutput)
}

// dedicated server reverse
func (o ServerOutput) Reverse() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.Reverse }).(pulumi.StringOutput)
}

func (o ServerOutput) RootDevice() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.RootDevice }).(pulumi.StringOutput)
}

// Server id
func (o ServerOutput) ServerId() pulumi.Float64Output {
	return o.ApplyT(func(v *Server) pulumi.Float64Output { return v.ServerId }).(pulumi.Float64Output)
}

// The internal name of your dedicated server
func (o ServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// All states a Dedicated can be in
func (o ServerOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// OS reinstallation storage configurations
func (o ServerOutput) Storages() ServerStorageArrayOutput {
	return o.ApplyT(func(v *Server) ServerStorageArrayOutput { return v.Storages }).(ServerStorageArrayOutput)
}

// Dedicated server support level
func (o ServerOutput) SupportLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Server) pulumi.StringOutput { return v.SupportLevel }).(pulumi.StringOutput)
}

type ServerArrayOutput struct{ *pulumi.OutputState }

func (ServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Server)(nil)).Elem()
}

func (o ServerArrayOutput) ToServerArrayOutput() ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) ToServerArrayOutputWithContext(ctx context.Context) ServerArrayOutput {
	return o
}

func (o ServerArrayOutput) Index(i pulumi.IntInput) ServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Server {
		return vs[0].([]*Server)[vs[1].(int)]
	}).(ServerOutput)
}

type ServerMapOutput struct{ *pulumi.OutputState }

func (ServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Server)(nil)).Elem()
}

func (o ServerMapOutput) ToServerMapOutput() ServerMapOutput {
	return o
}

func (o ServerMapOutput) ToServerMapOutputWithContext(ctx context.Context) ServerMapOutput {
	return o
}

func (o ServerMapOutput) MapIndex(k pulumi.StringInput) ServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Server {
		return vs[0].(map[string]*Server)[vs[1].(string)]
	}).(ServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerInput)(nil)).Elem(), &Server{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerArrayInput)(nil)).Elem(), ServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerMapInput)(nil)).Elem(), ServerMap{})
	pulumi.RegisterOutputType(ServerOutput{})
	pulumi.RegisterOutputType(ServerArrayOutput{})
	pulumi.RegisterOutputType(ServerMapOutput{})
}
