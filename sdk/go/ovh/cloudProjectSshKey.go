// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a SSH key in the given public cloud project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewCloudProjectSshKey(ctx, "key", &ovh.CloudProjectSshKeyArgs{
//				ServiceName: pulumi.String("<public cloud project ID>"),
//				PublicKey:   pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQC9xPpdqP3sx2H+gcBm65tJEaUbuifQ1uGkgrWtNY0PRKNNPdy+3yoVOtxk6Vjo4YZ0EU/JhmQfnrK7X7Q5vhqYxmozi0LiTRt0BxgqHJ+4hWTWMIOgr+C2jLx7ZsCReRk+fy5AHr6h0PHQEuXVLXeUy/TDyuY2JPtUZ5jcqvLYgQ== my-key"),
//				Name:        pulumi.String("new_key"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type CloudProjectSshKey struct {
	pulumi.CustomResourceState

	// SSH key fingerprint
	FingerPrint pulumi.StringOutput `pulumi:"fingerPrint"`
	// SSH key name
	Name pulumi.StringOutput `pulumi:"name"`
	// SSH public key
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// Region to create SSH key
	Region pulumi.StringOutput `pulumi:"region"`
	// SSH key regions
	Regions pulumi.StringArrayOutput `pulumi:"regions"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewCloudProjectSshKey registers a new resource with the given unique name, arguments, and options.
func NewCloudProjectSshKey(ctx *pulumi.Context,
	name string, args *CloudProjectSshKeyArgs, opts ...pulumi.ResourceOption) (*CloudProjectSshKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudProjectSshKey
	err := ctx.RegisterResource("ovh:index/cloudProjectSshKey:CloudProjectSshKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProjectSshKey gets an existing CloudProjectSshKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProjectSshKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProjectSshKeyState, opts ...pulumi.ResourceOption) (*CloudProjectSshKey, error) {
	var resource CloudProjectSshKey
	err := ctx.ReadResource("ovh:index/cloudProjectSshKey:CloudProjectSshKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProjectSshKey resources.
type cloudProjectSshKeyState struct {
	// SSH key fingerprint
	FingerPrint *string `pulumi:"fingerPrint"`
	// SSH key name
	Name *string `pulumi:"name"`
	// SSH public key
	PublicKey *string `pulumi:"publicKey"`
	// Region to create SSH key
	Region *string `pulumi:"region"`
	// SSH key regions
	Regions []string `pulumi:"regions"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
}

type CloudProjectSshKeyState struct {
	// SSH key fingerprint
	FingerPrint pulumi.StringPtrInput
	// SSH key name
	Name pulumi.StringPtrInput
	// SSH public key
	PublicKey pulumi.StringPtrInput
	// Region to create SSH key
	Region pulumi.StringPtrInput
	// SSH key regions
	Regions pulumi.StringArrayInput
	// Service name
	ServiceName pulumi.StringPtrInput
}

func (CloudProjectSshKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectSshKeyState)(nil)).Elem()
}

type cloudProjectSshKeyArgs struct {
	// SSH key name
	Name *string `pulumi:"name"`
	// SSH public key
	PublicKey string `pulumi:"publicKey"`
	// Region to create SSH key
	Region *string `pulumi:"region"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a CloudProjectSshKey resource.
type CloudProjectSshKeyArgs struct {
	// SSH key name
	Name pulumi.StringPtrInput
	// SSH public key
	PublicKey pulumi.StringInput
	// Region to create SSH key
	Region pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringInput
}

func (CloudProjectSshKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProjectSshKeyArgs)(nil)).Elem()
}

type CloudProjectSshKeyInput interface {
	pulumi.Input

	ToCloudProjectSshKeyOutput() CloudProjectSshKeyOutput
	ToCloudProjectSshKeyOutputWithContext(ctx context.Context) CloudProjectSshKeyOutput
}

func (*CloudProjectSshKey) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectSshKey)(nil)).Elem()
}

func (i *CloudProjectSshKey) ToCloudProjectSshKeyOutput() CloudProjectSshKeyOutput {
	return i.ToCloudProjectSshKeyOutputWithContext(context.Background())
}

func (i *CloudProjectSshKey) ToCloudProjectSshKeyOutputWithContext(ctx context.Context) CloudProjectSshKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectSshKeyOutput)
}

// CloudProjectSshKeyArrayInput is an input type that accepts CloudProjectSshKeyArray and CloudProjectSshKeyArrayOutput values.
// You can construct a concrete instance of `CloudProjectSshKeyArrayInput` via:
//
//	CloudProjectSshKeyArray{ CloudProjectSshKeyArgs{...} }
type CloudProjectSshKeyArrayInput interface {
	pulumi.Input

	ToCloudProjectSshKeyArrayOutput() CloudProjectSshKeyArrayOutput
	ToCloudProjectSshKeyArrayOutputWithContext(context.Context) CloudProjectSshKeyArrayOutput
}

type CloudProjectSshKeyArray []CloudProjectSshKeyInput

func (CloudProjectSshKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectSshKey)(nil)).Elem()
}

func (i CloudProjectSshKeyArray) ToCloudProjectSshKeyArrayOutput() CloudProjectSshKeyArrayOutput {
	return i.ToCloudProjectSshKeyArrayOutputWithContext(context.Background())
}

func (i CloudProjectSshKeyArray) ToCloudProjectSshKeyArrayOutputWithContext(ctx context.Context) CloudProjectSshKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectSshKeyArrayOutput)
}

// CloudProjectSshKeyMapInput is an input type that accepts CloudProjectSshKeyMap and CloudProjectSshKeyMapOutput values.
// You can construct a concrete instance of `CloudProjectSshKeyMapInput` via:
//
//	CloudProjectSshKeyMap{ "key": CloudProjectSshKeyArgs{...} }
type CloudProjectSshKeyMapInput interface {
	pulumi.Input

	ToCloudProjectSshKeyMapOutput() CloudProjectSshKeyMapOutput
	ToCloudProjectSshKeyMapOutputWithContext(context.Context) CloudProjectSshKeyMapOutput
}

type CloudProjectSshKeyMap map[string]CloudProjectSshKeyInput

func (CloudProjectSshKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectSshKey)(nil)).Elem()
}

func (i CloudProjectSshKeyMap) ToCloudProjectSshKeyMapOutput() CloudProjectSshKeyMapOutput {
	return i.ToCloudProjectSshKeyMapOutputWithContext(context.Background())
}

func (i CloudProjectSshKeyMap) ToCloudProjectSshKeyMapOutputWithContext(ctx context.Context) CloudProjectSshKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProjectSshKeyMapOutput)
}

type CloudProjectSshKeyOutput struct{ *pulumi.OutputState }

func (CloudProjectSshKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProjectSshKey)(nil)).Elem()
}

func (o CloudProjectSshKeyOutput) ToCloudProjectSshKeyOutput() CloudProjectSshKeyOutput {
	return o
}

func (o CloudProjectSshKeyOutput) ToCloudProjectSshKeyOutputWithContext(ctx context.Context) CloudProjectSshKeyOutput {
	return o
}

// SSH key fingerprint
func (o CloudProjectSshKeyOutput) FingerPrint() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringOutput { return v.FingerPrint }).(pulumi.StringOutput)
}

// SSH key name
func (o CloudProjectSshKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// SSH public key
func (o CloudProjectSshKeyOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// Region to create SSH key
func (o CloudProjectSshKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// SSH key regions
func (o CloudProjectSshKeyOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringArrayOutput { return v.Regions }).(pulumi.StringArrayOutput)
}

// Service name
func (o CloudProjectSshKeyOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProjectSshKey) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type CloudProjectSshKeyArrayOutput struct{ *pulumi.OutputState }

func (CloudProjectSshKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProjectSshKey)(nil)).Elem()
}

func (o CloudProjectSshKeyArrayOutput) ToCloudProjectSshKeyArrayOutput() CloudProjectSshKeyArrayOutput {
	return o
}

func (o CloudProjectSshKeyArrayOutput) ToCloudProjectSshKeyArrayOutputWithContext(ctx context.Context) CloudProjectSshKeyArrayOutput {
	return o
}

func (o CloudProjectSshKeyArrayOutput) Index(i pulumi.IntInput) CloudProjectSshKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProjectSshKey {
		return vs[0].([]*CloudProjectSshKey)[vs[1].(int)]
	}).(CloudProjectSshKeyOutput)
}

type CloudProjectSshKeyMapOutput struct{ *pulumi.OutputState }

func (CloudProjectSshKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProjectSshKey)(nil)).Elem()
}

func (o CloudProjectSshKeyMapOutput) ToCloudProjectSshKeyMapOutput() CloudProjectSshKeyMapOutput {
	return o
}

func (o CloudProjectSshKeyMapOutput) ToCloudProjectSshKeyMapOutputWithContext(ctx context.Context) CloudProjectSshKeyMapOutput {
	return o
}

func (o CloudProjectSshKeyMapOutput) MapIndex(k pulumi.StringInput) CloudProjectSshKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProjectSshKey {
		return vs[0].(map[string]*CloudProjectSshKey)[vs[1].(string)]
	}).(CloudProjectSshKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectSshKeyInput)(nil)).Elem(), &CloudProjectSshKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectSshKeyArrayInput)(nil)).Elem(), CloudProjectSshKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProjectSshKeyMapInput)(nil)).Elem(), CloudProjectSshKeyMap{})
	pulumi.RegisterOutputType(CloudProjectSshKeyOutput{})
	pulumi.RegisterOutputType(CloudProjectSshKeyArrayOutput{})
	pulumi.RegisterOutputType(CloudProjectSshKeyMapOutput{})
}
