// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Retrieves the given flavor in a public cloud project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.GetCloudProjectFlavor(ctx, &ovh.GetCloudProjectFlavorArgs{
//				ServiceName: "YYYY",
//				Id:          "XXXX",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCloudProjectFlavor(ctx *pulumi.Context, args *GetCloudProjectFlavorArgs, opts ...pulumi.InvokeOption) (*GetCloudProjectFlavorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCloudProjectFlavorResult
	err := ctx.Invoke("ovh:index/getCloudProjectFlavor:getCloudProjectFlavor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudProjectFlavor.
type GetCloudProjectFlavorArgs struct {
	// Flavor id
	Id string `pulumi:"id"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getCloudProjectFlavor.
type GetCloudProjectFlavorResult struct {
	// Available in stock
	Available bool `pulumi:"available"`
	// Capabilities of the flavor
	Capabilities []GetCloudProjectFlavorCapability `pulumi:"capabilities"`
	// Number of disks
	Disk float64 `pulumi:"disk"`
	// Flavor id
	Id string `pulumi:"id"`
	// Max capacity of inbound traffic in Mbit/s
	InboundBandwidth float64 `pulumi:"inboundBandwidth"`
	// Flavor name
	Name string `pulumi:"name"`
	// OS to install on
	OsType string `pulumi:"osType"`
	// Max capacity of outbound traffic in Mbit/s
	OutboundBandwidth float64 `pulumi:"outboundBandwidth"`
	// Plan codes to order instances
	PlanCodes GetCloudProjectFlavorPlanCodes `pulumi:"planCodes"`
	// Number instance you can spawn with your actual quota
	Quota float64 `pulumi:"quota"`
	// Ram quantity (Gio)
	Ram float64 `pulumi:"ram"`
	// Flavor region
	Region string `pulumi:"region"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
	// Flavor type
	Type string `pulumi:"type"`
	// Number of VCPUs
	Vcpus float64 `pulumi:"vcpus"`
}

func GetCloudProjectFlavorOutput(ctx *pulumi.Context, args GetCloudProjectFlavorOutputArgs, opts ...pulumi.InvokeOption) GetCloudProjectFlavorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCloudProjectFlavorResultOutput, error) {
			args := v.(GetCloudProjectFlavorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ovh:index/getCloudProjectFlavor:getCloudProjectFlavor", args, GetCloudProjectFlavorResultOutput{}, options).(GetCloudProjectFlavorResultOutput), nil
		}).(GetCloudProjectFlavorResultOutput)
}

// A collection of arguments for invoking getCloudProjectFlavor.
type GetCloudProjectFlavorOutputArgs struct {
	// Flavor id
	Id pulumi.StringInput `pulumi:"id"`
	// Service name
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (GetCloudProjectFlavorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudProjectFlavorArgs)(nil)).Elem()
}

// A collection of values returned by getCloudProjectFlavor.
type GetCloudProjectFlavorResultOutput struct{ *pulumi.OutputState }

func (GetCloudProjectFlavorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudProjectFlavorResult)(nil)).Elem()
}

func (o GetCloudProjectFlavorResultOutput) ToGetCloudProjectFlavorResultOutput() GetCloudProjectFlavorResultOutput {
	return o
}

func (o GetCloudProjectFlavorResultOutput) ToGetCloudProjectFlavorResultOutputWithContext(ctx context.Context) GetCloudProjectFlavorResultOutput {
	return o
}

// Available in stock
func (o GetCloudProjectFlavorResultOutput) Available() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) bool { return v.Available }).(pulumi.BoolOutput)
}

// Capabilities of the flavor
func (o GetCloudProjectFlavorResultOutput) Capabilities() GetCloudProjectFlavorCapabilityArrayOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) []GetCloudProjectFlavorCapability { return v.Capabilities }).(GetCloudProjectFlavorCapabilityArrayOutput)
}

// Number of disks
func (o GetCloudProjectFlavorResultOutput) Disk() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.Disk }).(pulumi.Float64Output)
}

// Flavor id
func (o GetCloudProjectFlavorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Max capacity of inbound traffic in Mbit/s
func (o GetCloudProjectFlavorResultOutput) InboundBandwidth() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.InboundBandwidth }).(pulumi.Float64Output)
}

// Flavor name
func (o GetCloudProjectFlavorResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.Name }).(pulumi.StringOutput)
}

// OS to install on
func (o GetCloudProjectFlavorResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.OsType }).(pulumi.StringOutput)
}

// Max capacity of outbound traffic in Mbit/s
func (o GetCloudProjectFlavorResultOutput) OutboundBandwidth() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.OutboundBandwidth }).(pulumi.Float64Output)
}

// Plan codes to order instances
func (o GetCloudProjectFlavorResultOutput) PlanCodes() GetCloudProjectFlavorPlanCodesOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) GetCloudProjectFlavorPlanCodes { return v.PlanCodes }).(GetCloudProjectFlavorPlanCodesOutput)
}

// Number instance you can spawn with your actual quota
func (o GetCloudProjectFlavorResultOutput) Quota() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.Quota }).(pulumi.Float64Output)
}

// Ram quantity (Gio)
func (o GetCloudProjectFlavorResultOutput) Ram() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.Ram }).(pulumi.Float64Output)
}

// Flavor region
func (o GetCloudProjectFlavorResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.Region }).(pulumi.StringOutput)
}

// Service name
func (o GetCloudProjectFlavorResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Flavor type
func (o GetCloudProjectFlavorResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) string { return v.Type }).(pulumi.StringOutput)
}

// Number of VCPUs
func (o GetCloudProjectFlavorResultOutput) Vcpus() pulumi.Float64Output {
	return o.ApplyT(func(v GetCloudProjectFlavorResult) float64 { return v.Vcpus }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(GetCloudProjectFlavorResultOutput{})
}
