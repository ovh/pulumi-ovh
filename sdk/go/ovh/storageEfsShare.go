// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a share for an EFS service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			efs, err := ovh.GetStorageEfs(ctx, &ovh.GetStorageEfsArgs{
//				ServiceName: "XXX",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = ovh.NewStorageEfsShare(ctx, "share", &ovh.StorageEfsShareArgs{
//				ServiceName: pulumi.String(efs.ServiceName),
//				Name:        pulumi.String("share"),
//				Description: pulumi.String("My share"),
//				Protocol:    pulumi.String("NFS"),
//				Size:        pulumi.Float64(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StorageEfsShare struct {
	pulumi.CustomResourceState

	// Share creation date
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Share description
	Description pulumi.StringOutput `pulumi:"description"`
	// User-defined name used to generate human readable access path for the share
	MountPointName pulumi.StringOutput `pulumi:"mountPointName"`
	// Share name
	Name pulumi.StringOutput `pulumi:"name"`
	// Share protocol
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Share size in Gigabytes
	Size pulumi.Float64Output `pulumi:"size"`
	// Snapshot ID used to create the share
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// Share status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewStorageEfsShare registers a new resource with the given unique name, arguments, and options.
func NewStorageEfsShare(ctx *pulumi.Context,
	name string, args *StorageEfsShareArgs, opts ...pulumi.ResourceOption) (*StorageEfsShare, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageEfsShare
	err := ctx.RegisterResource("ovh:index/storageEfsShare:StorageEfsShare", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageEfsShare gets an existing StorageEfsShare resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageEfsShare(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageEfsShareState, opts ...pulumi.ResourceOption) (*StorageEfsShare, error) {
	var resource StorageEfsShare
	err := ctx.ReadResource("ovh:index/storageEfsShare:StorageEfsShare", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageEfsShare resources.
type storageEfsShareState struct {
	// Share creation date
	CreatedAt *string `pulumi:"createdAt"`
	// Share description
	Description *string `pulumi:"description"`
	// User-defined name used to generate human readable access path for the share
	MountPointName *string `pulumi:"mountPointName"`
	// Share name
	Name *string `pulumi:"name"`
	// Share protocol
	Protocol *string `pulumi:"protocol"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Share size in Gigabytes
	Size *float64 `pulumi:"size"`
	// Snapshot ID used to create the share
	SnapshotId *string `pulumi:"snapshotId"`
	// Share status
	Status *string `pulumi:"status"`
}

type StorageEfsShareState struct {
	// Share creation date
	CreatedAt pulumi.StringPtrInput
	// Share description
	Description pulumi.StringPtrInput
	// User-defined name used to generate human readable access path for the share
	MountPointName pulumi.StringPtrInput
	// Share name
	Name pulumi.StringPtrInput
	// Share protocol
	Protocol pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// Share size in Gigabytes
	Size pulumi.Float64PtrInput
	// Snapshot ID used to create the share
	SnapshotId pulumi.StringPtrInput
	// Share status
	Status pulumi.StringPtrInput
}

func (StorageEfsShareState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageEfsShareState)(nil)).Elem()
}

type storageEfsShareArgs struct {
	// Share description
	Description *string `pulumi:"description"`
	// User-defined name used to generate human readable access path for the share
	MountPointName *string `pulumi:"mountPointName"`
	// Share name
	Name *string `pulumi:"name"`
	// Share protocol
	Protocol string `pulumi:"protocol"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
	// Share size in Gigabytes
	Size float64 `pulumi:"size"`
	// Snapshot ID used to create the share
	SnapshotId *string `pulumi:"snapshotId"`
}

// The set of arguments for constructing a StorageEfsShare resource.
type StorageEfsShareArgs struct {
	// Share description
	Description pulumi.StringPtrInput
	// User-defined name used to generate human readable access path for the share
	MountPointName pulumi.StringPtrInput
	// Share name
	Name pulumi.StringPtrInput
	// Share protocol
	Protocol pulumi.StringInput
	// Service name
	ServiceName pulumi.StringInput
	// Share size in Gigabytes
	Size pulumi.Float64Input
	// Snapshot ID used to create the share
	SnapshotId pulumi.StringPtrInput
}

func (StorageEfsShareArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageEfsShareArgs)(nil)).Elem()
}

type StorageEfsShareInput interface {
	pulumi.Input

	ToStorageEfsShareOutput() StorageEfsShareOutput
	ToStorageEfsShareOutputWithContext(ctx context.Context) StorageEfsShareOutput
}

func (*StorageEfsShare) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageEfsShare)(nil)).Elem()
}

func (i *StorageEfsShare) ToStorageEfsShareOutput() StorageEfsShareOutput {
	return i.ToStorageEfsShareOutputWithContext(context.Background())
}

func (i *StorageEfsShare) ToStorageEfsShareOutputWithContext(ctx context.Context) StorageEfsShareOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareOutput)
}

// StorageEfsShareArrayInput is an input type that accepts StorageEfsShareArray and StorageEfsShareArrayOutput values.
// You can construct a concrete instance of `StorageEfsShareArrayInput` via:
//
//	StorageEfsShareArray{ StorageEfsShareArgs{...} }
type StorageEfsShareArrayInput interface {
	pulumi.Input

	ToStorageEfsShareArrayOutput() StorageEfsShareArrayOutput
	ToStorageEfsShareArrayOutputWithContext(context.Context) StorageEfsShareArrayOutput
}

type StorageEfsShareArray []StorageEfsShareInput

func (StorageEfsShareArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageEfsShare)(nil)).Elem()
}

func (i StorageEfsShareArray) ToStorageEfsShareArrayOutput() StorageEfsShareArrayOutput {
	return i.ToStorageEfsShareArrayOutputWithContext(context.Background())
}

func (i StorageEfsShareArray) ToStorageEfsShareArrayOutputWithContext(ctx context.Context) StorageEfsShareArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareArrayOutput)
}

// StorageEfsShareMapInput is an input type that accepts StorageEfsShareMap and StorageEfsShareMapOutput values.
// You can construct a concrete instance of `StorageEfsShareMapInput` via:
//
//	StorageEfsShareMap{ "key": StorageEfsShareArgs{...} }
type StorageEfsShareMapInput interface {
	pulumi.Input

	ToStorageEfsShareMapOutput() StorageEfsShareMapOutput
	ToStorageEfsShareMapOutputWithContext(context.Context) StorageEfsShareMapOutput
}

type StorageEfsShareMap map[string]StorageEfsShareInput

func (StorageEfsShareMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageEfsShare)(nil)).Elem()
}

func (i StorageEfsShareMap) ToStorageEfsShareMapOutput() StorageEfsShareMapOutput {
	return i.ToStorageEfsShareMapOutputWithContext(context.Background())
}

func (i StorageEfsShareMap) ToStorageEfsShareMapOutputWithContext(ctx context.Context) StorageEfsShareMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareMapOutput)
}

type StorageEfsShareOutput struct{ *pulumi.OutputState }

func (StorageEfsShareOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageEfsShare)(nil)).Elem()
}

func (o StorageEfsShareOutput) ToStorageEfsShareOutput() StorageEfsShareOutput {
	return o
}

func (o StorageEfsShareOutput) ToStorageEfsShareOutputWithContext(ctx context.Context) StorageEfsShareOutput {
	return o
}

// Share creation date
func (o StorageEfsShareOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Share description
func (o StorageEfsShareOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// User-defined name used to generate human readable access path for the share
func (o StorageEfsShareOutput) MountPointName() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.MountPointName }).(pulumi.StringOutput)
}

// Share name
func (o StorageEfsShareOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Share protocol
func (o StorageEfsShareOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// Service name
func (o StorageEfsShareOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Share size in Gigabytes
func (o StorageEfsShareOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// Snapshot ID used to create the share
func (o StorageEfsShareOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// Share status
func (o StorageEfsShareOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShare) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type StorageEfsShareArrayOutput struct{ *pulumi.OutputState }

func (StorageEfsShareArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageEfsShare)(nil)).Elem()
}

func (o StorageEfsShareArrayOutput) ToStorageEfsShareArrayOutput() StorageEfsShareArrayOutput {
	return o
}

func (o StorageEfsShareArrayOutput) ToStorageEfsShareArrayOutputWithContext(ctx context.Context) StorageEfsShareArrayOutput {
	return o
}

func (o StorageEfsShareArrayOutput) Index(i pulumi.IntInput) StorageEfsShareOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageEfsShare {
		return vs[0].([]*StorageEfsShare)[vs[1].(int)]
	}).(StorageEfsShareOutput)
}

type StorageEfsShareMapOutput struct{ *pulumi.OutputState }

func (StorageEfsShareMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageEfsShare)(nil)).Elem()
}

func (o StorageEfsShareMapOutput) ToStorageEfsShareMapOutput() StorageEfsShareMapOutput {
	return o
}

func (o StorageEfsShareMapOutput) ToStorageEfsShareMapOutputWithContext(ctx context.Context) StorageEfsShareMapOutput {
	return o
}

func (o StorageEfsShareMapOutput) MapIndex(k pulumi.StringInput) StorageEfsShareOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageEfsShare {
		return vs[0].(map[string]*StorageEfsShare)[vs[1].(string)]
	}).(StorageEfsShareOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareInput)(nil)).Elem(), &StorageEfsShare{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareArrayInput)(nil)).Elem(), StorageEfsShareArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareMapInput)(nil)).Elem(), StorageEfsShareMap{})
	pulumi.RegisterOutputType(StorageEfsShareOutput{})
	pulumi.RegisterOutputType(StorageEfsShareArrayOutput{})
	pulumi.RegisterOutputType(StorageEfsShareMapOutput{})
}
