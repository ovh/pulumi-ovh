// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vrack

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Move a Dedicated Cloud Datacenter to a vrack.
//
// ## Example Usage
//
// > **WARNING** You have to import the resource first as it cannot be created, see Import section below.
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/vrack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vrack.NewDedicatedCloudDatacenter(ctx, "vrack-dedicatedCloudDatacenter", &vrack.DedicatedCloudDatacenterArgs{
//				ServiceName: pulumi.String("<vRack service name>"),
//				Datacenter:  pulumi.String("<Dedicated Cloud Datacenter service name>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Datacenter will always be in a vRack, first import the resource, this will move the Dedicated Cloud Datacenter to the vRack target.
//
// bash
//
// ```sh
// $ pulumi import ovh:Vrack/dedicatedCloudDatacenter:DedicatedCloudDatacenter vrack-dedicatedCloudDatacenter "<vRack service name>/<Dedicated Cloud Datacener service name>/<vRack target service name>"
// ```
type DedicatedCloudDatacenter struct {
	pulumi.CustomResourceState

	// Your Dedicated Cloud Datacenter.
	Datacenter pulumi.StringOutput `pulumi:"datacenter"`
	// Your dedicatedCloud name
	DedicatedCloud pulumi.StringOutput `pulumi:"dedicatedCloud"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The internal name of your target vrack
	TargetServiceName pulumi.StringOutput `pulumi:"targetServiceName"`
}

// NewDedicatedCloudDatacenter registers a new resource with the given unique name, arguments, and options.
func NewDedicatedCloudDatacenter(ctx *pulumi.Context,
	name string, args *DedicatedCloudDatacenterArgs, opts ...pulumi.ResourceOption) (*DedicatedCloudDatacenter, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datacenter == nil {
		return nil, errors.New("invalid value for required argument 'Datacenter'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DedicatedCloudDatacenter
	err := ctx.RegisterResource("ovh:Vrack/dedicatedCloudDatacenter:DedicatedCloudDatacenter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDedicatedCloudDatacenter gets an existing DedicatedCloudDatacenter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDedicatedCloudDatacenter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DedicatedCloudDatacenterState, opts ...pulumi.ResourceOption) (*DedicatedCloudDatacenter, error) {
	var resource DedicatedCloudDatacenter
	err := ctx.ReadResource("ovh:Vrack/dedicatedCloudDatacenter:DedicatedCloudDatacenter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DedicatedCloudDatacenter resources.
type dedicatedCloudDatacenterState struct {
	// Your Dedicated Cloud Datacenter.
	Datacenter *string `pulumi:"datacenter"`
	// Your dedicatedCloud name
	DedicatedCloud *string `pulumi:"dedicatedCloud"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// The internal name of your target vrack
	TargetServiceName *string `pulumi:"targetServiceName"`
}

type DedicatedCloudDatacenterState struct {
	// Your Dedicated Cloud Datacenter.
	Datacenter pulumi.StringPtrInput
	// Your dedicatedCloud name
	DedicatedCloud pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// The internal name of your target vrack
	TargetServiceName pulumi.StringPtrInput
}

func (DedicatedCloudDatacenterState) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedCloudDatacenterState)(nil)).Elem()
}

type dedicatedCloudDatacenterArgs struct {
	// Your Dedicated Cloud Datacenter.
	Datacenter string `pulumi:"datacenter"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a DedicatedCloudDatacenter resource.
type DedicatedCloudDatacenterArgs struct {
	// Your Dedicated Cloud Datacenter.
	Datacenter pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (DedicatedCloudDatacenterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dedicatedCloudDatacenterArgs)(nil)).Elem()
}

type DedicatedCloudDatacenterInput interface {
	pulumi.Input

	ToDedicatedCloudDatacenterOutput() DedicatedCloudDatacenterOutput
	ToDedicatedCloudDatacenterOutputWithContext(ctx context.Context) DedicatedCloudDatacenterOutput
}

func (*DedicatedCloudDatacenter) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCloudDatacenter)(nil)).Elem()
}

func (i *DedicatedCloudDatacenter) ToDedicatedCloudDatacenterOutput() DedicatedCloudDatacenterOutput {
	return i.ToDedicatedCloudDatacenterOutputWithContext(context.Background())
}

func (i *DedicatedCloudDatacenter) ToDedicatedCloudDatacenterOutputWithContext(ctx context.Context) DedicatedCloudDatacenterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCloudDatacenterOutput)
}

// DedicatedCloudDatacenterArrayInput is an input type that accepts DedicatedCloudDatacenterArray and DedicatedCloudDatacenterArrayOutput values.
// You can construct a concrete instance of `DedicatedCloudDatacenterArrayInput` via:
//
//	DedicatedCloudDatacenterArray{ DedicatedCloudDatacenterArgs{...} }
type DedicatedCloudDatacenterArrayInput interface {
	pulumi.Input

	ToDedicatedCloudDatacenterArrayOutput() DedicatedCloudDatacenterArrayOutput
	ToDedicatedCloudDatacenterArrayOutputWithContext(context.Context) DedicatedCloudDatacenterArrayOutput
}

type DedicatedCloudDatacenterArray []DedicatedCloudDatacenterInput

func (DedicatedCloudDatacenterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedCloudDatacenter)(nil)).Elem()
}

func (i DedicatedCloudDatacenterArray) ToDedicatedCloudDatacenterArrayOutput() DedicatedCloudDatacenterArrayOutput {
	return i.ToDedicatedCloudDatacenterArrayOutputWithContext(context.Background())
}

func (i DedicatedCloudDatacenterArray) ToDedicatedCloudDatacenterArrayOutputWithContext(ctx context.Context) DedicatedCloudDatacenterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCloudDatacenterArrayOutput)
}

// DedicatedCloudDatacenterMapInput is an input type that accepts DedicatedCloudDatacenterMap and DedicatedCloudDatacenterMapOutput values.
// You can construct a concrete instance of `DedicatedCloudDatacenterMapInput` via:
//
//	DedicatedCloudDatacenterMap{ "key": DedicatedCloudDatacenterArgs{...} }
type DedicatedCloudDatacenterMapInput interface {
	pulumi.Input

	ToDedicatedCloudDatacenterMapOutput() DedicatedCloudDatacenterMapOutput
	ToDedicatedCloudDatacenterMapOutputWithContext(context.Context) DedicatedCloudDatacenterMapOutput
}

type DedicatedCloudDatacenterMap map[string]DedicatedCloudDatacenterInput

func (DedicatedCloudDatacenterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedCloudDatacenter)(nil)).Elem()
}

func (i DedicatedCloudDatacenterMap) ToDedicatedCloudDatacenterMapOutput() DedicatedCloudDatacenterMapOutput {
	return i.ToDedicatedCloudDatacenterMapOutputWithContext(context.Background())
}

func (i DedicatedCloudDatacenterMap) ToDedicatedCloudDatacenterMapOutputWithContext(ctx context.Context) DedicatedCloudDatacenterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DedicatedCloudDatacenterMapOutput)
}

type DedicatedCloudDatacenterOutput struct{ *pulumi.OutputState }

func (DedicatedCloudDatacenterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DedicatedCloudDatacenter)(nil)).Elem()
}

func (o DedicatedCloudDatacenterOutput) ToDedicatedCloudDatacenterOutput() DedicatedCloudDatacenterOutput {
	return o
}

func (o DedicatedCloudDatacenterOutput) ToDedicatedCloudDatacenterOutputWithContext(ctx context.Context) DedicatedCloudDatacenterOutput {
	return o
}

// Your Dedicated Cloud Datacenter.
func (o DedicatedCloudDatacenterOutput) Datacenter() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCloudDatacenter) pulumi.StringOutput { return v.Datacenter }).(pulumi.StringOutput)
}

// Your dedicatedCloud name
func (o DedicatedCloudDatacenterOutput) DedicatedCloud() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCloudDatacenter) pulumi.StringOutput { return v.DedicatedCloud }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o DedicatedCloudDatacenterOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCloudDatacenter) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The internal name of your target vrack
func (o DedicatedCloudDatacenterOutput) TargetServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *DedicatedCloudDatacenter) pulumi.StringOutput { return v.TargetServiceName }).(pulumi.StringOutput)
}

type DedicatedCloudDatacenterArrayOutput struct{ *pulumi.OutputState }

func (DedicatedCloudDatacenterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DedicatedCloudDatacenter)(nil)).Elem()
}

func (o DedicatedCloudDatacenterArrayOutput) ToDedicatedCloudDatacenterArrayOutput() DedicatedCloudDatacenterArrayOutput {
	return o
}

func (o DedicatedCloudDatacenterArrayOutput) ToDedicatedCloudDatacenterArrayOutputWithContext(ctx context.Context) DedicatedCloudDatacenterArrayOutput {
	return o
}

func (o DedicatedCloudDatacenterArrayOutput) Index(i pulumi.IntInput) DedicatedCloudDatacenterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DedicatedCloudDatacenter {
		return vs[0].([]*DedicatedCloudDatacenter)[vs[1].(int)]
	}).(DedicatedCloudDatacenterOutput)
}

type DedicatedCloudDatacenterMapOutput struct{ *pulumi.OutputState }

func (DedicatedCloudDatacenterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DedicatedCloudDatacenter)(nil)).Elem()
}

func (o DedicatedCloudDatacenterMapOutput) ToDedicatedCloudDatacenterMapOutput() DedicatedCloudDatacenterMapOutput {
	return o
}

func (o DedicatedCloudDatacenterMapOutput) ToDedicatedCloudDatacenterMapOutputWithContext(ctx context.Context) DedicatedCloudDatacenterMapOutput {
	return o
}

func (o DedicatedCloudDatacenterMapOutput) MapIndex(k pulumi.StringInput) DedicatedCloudDatacenterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DedicatedCloudDatacenter {
		return vs[0].(map[string]*DedicatedCloudDatacenter)[vs[1].(string)]
	}).(DedicatedCloudDatacenterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedCloudDatacenterInput)(nil)).Elem(), &DedicatedCloudDatacenter{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedCloudDatacenterArrayInput)(nil)).Elem(), DedicatedCloudDatacenterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DedicatedCloudDatacenterMapInput)(nil)).Elem(), DedicatedCloudDatacenterMap{})
	pulumi.RegisterOutputType(DedicatedCloudDatacenterOutput{})
	pulumi.RegisterOutputType(DedicatedCloudDatacenterArrayOutput{})
	pulumi.RegisterOutputType(DedicatedCloudDatacenterMapOutput{})
}
