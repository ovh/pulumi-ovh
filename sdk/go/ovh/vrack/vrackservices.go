// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vrack

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach a vrackServices to the vrack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/vrack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vrack.NewVrackservices(ctx, "vrackVrackservices", &vrack.VrackservicesArgs{
//				ServiceName:   pulumi.String("<vRack service name>"),
//				VrackServices: pulumi.String("<vrackServices service name>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Attachment of a vrackServices and a vRack can be imported using the `service_name` (vRack identifier) and the `vrack_services` (vrackServices service name), separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:Vrack/vrackservices:Vrackservices myattach "<service_name>/<vrackServices service name>"
// ```
type Vrackservices struct {
	pulumi.CustomResourceState

	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Your vrackServices service name.
	VrackServices pulumi.StringOutput `pulumi:"vrackServices"`
}

// NewVrackservices registers a new resource with the given unique name, arguments, and options.
func NewVrackservices(ctx *pulumi.Context,
	name string, args *VrackservicesArgs, opts ...pulumi.ResourceOption) (*Vrackservices, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.VrackServices == nil {
		return nil, errors.New("invalid value for required argument 'VrackServices'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vrackservices
	err := ctx.RegisterResource("ovh:Vrack/vrackservices:Vrackservices", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackservices gets an existing Vrackservices resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackservices(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackservicesState, opts ...pulumi.ResourceOption) (*Vrackservices, error) {
	var resource Vrackservices
	err := ctx.ReadResource("ovh:Vrack/vrackservices:Vrackservices", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vrackservices resources.
type vrackservicesState struct {
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
	// Your vrackServices service name.
	VrackServices *string `pulumi:"vrackServices"`
}

type VrackservicesState struct {
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
	// Your vrackServices service name.
	VrackServices pulumi.StringPtrInput
}

func (VrackservicesState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackservicesState)(nil)).Elem()
}

type vrackservicesArgs struct {
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
	// Your vrackServices service name.
	VrackServices string `pulumi:"vrackServices"`
}

// The set of arguments for constructing a Vrackservices resource.
type VrackservicesArgs struct {
	// The internal name of your vrack
	ServiceName pulumi.StringInput
	// Your vrackServices service name.
	VrackServices pulumi.StringInput
}

func (VrackservicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackservicesArgs)(nil)).Elem()
}

type VrackservicesInput interface {
	pulumi.Input

	ToVrackservicesOutput() VrackservicesOutput
	ToVrackservicesOutputWithContext(ctx context.Context) VrackservicesOutput
}

func (*Vrackservices) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrackservices)(nil)).Elem()
}

func (i *Vrackservices) ToVrackservicesOutput() VrackservicesOutput {
	return i.ToVrackservicesOutputWithContext(context.Background())
}

func (i *Vrackservices) ToVrackservicesOutputWithContext(ctx context.Context) VrackservicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackservicesOutput)
}

// VrackservicesArrayInput is an input type that accepts VrackservicesArray and VrackservicesArrayOutput values.
// You can construct a concrete instance of `VrackservicesArrayInput` via:
//
//	VrackservicesArray{ VrackservicesArgs{...} }
type VrackservicesArrayInput interface {
	pulumi.Input

	ToVrackservicesArrayOutput() VrackservicesArrayOutput
	ToVrackservicesArrayOutputWithContext(context.Context) VrackservicesArrayOutput
}

type VrackservicesArray []VrackservicesInput

func (VrackservicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrackservices)(nil)).Elem()
}

func (i VrackservicesArray) ToVrackservicesArrayOutput() VrackservicesArrayOutput {
	return i.ToVrackservicesArrayOutputWithContext(context.Background())
}

func (i VrackservicesArray) ToVrackservicesArrayOutputWithContext(ctx context.Context) VrackservicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackservicesArrayOutput)
}

// VrackservicesMapInput is an input type that accepts VrackservicesMap and VrackservicesMapOutput values.
// You can construct a concrete instance of `VrackservicesMapInput` via:
//
//	VrackservicesMap{ "key": VrackservicesArgs{...} }
type VrackservicesMapInput interface {
	pulumi.Input

	ToVrackservicesMapOutput() VrackservicesMapOutput
	ToVrackservicesMapOutputWithContext(context.Context) VrackservicesMapOutput
}

type VrackservicesMap map[string]VrackservicesInput

func (VrackservicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrackservices)(nil)).Elem()
}

func (i VrackservicesMap) ToVrackservicesMapOutput() VrackservicesMapOutput {
	return i.ToVrackservicesMapOutputWithContext(context.Background())
}

func (i VrackservicesMap) ToVrackservicesMapOutputWithContext(ctx context.Context) VrackservicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackservicesMapOutput)
}

type VrackservicesOutput struct{ *pulumi.OutputState }

func (VrackservicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrackservices)(nil)).Elem()
}

func (o VrackservicesOutput) ToVrackservicesOutput() VrackservicesOutput {
	return o
}

func (o VrackservicesOutput) ToVrackservicesOutputWithContext(ctx context.Context) VrackservicesOutput {
	return o
}

// The internal name of your vrack
func (o VrackservicesOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrackservices) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Your vrackServices service name.
func (o VrackservicesOutput) VrackServices() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrackservices) pulumi.StringOutput { return v.VrackServices }).(pulumi.StringOutput)
}

type VrackservicesArrayOutput struct{ *pulumi.OutputState }

func (VrackservicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrackservices)(nil)).Elem()
}

func (o VrackservicesArrayOutput) ToVrackservicesArrayOutput() VrackservicesArrayOutput {
	return o
}

func (o VrackservicesArrayOutput) ToVrackservicesArrayOutputWithContext(ctx context.Context) VrackservicesArrayOutput {
	return o
}

func (o VrackservicesArrayOutput) Index(i pulumi.IntInput) VrackservicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vrackservices {
		return vs[0].([]*Vrackservices)[vs[1].(int)]
	}).(VrackservicesOutput)
}

type VrackservicesMapOutput struct{ *pulumi.OutputState }

func (VrackservicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrackservices)(nil)).Elem()
}

func (o VrackservicesMapOutput) ToVrackservicesMapOutput() VrackservicesMapOutput {
	return o
}

func (o VrackservicesMapOutput) ToVrackservicesMapOutputWithContext(ctx context.Context) VrackservicesMapOutput {
	return o
}

func (o VrackservicesMapOutput) MapIndex(k pulumi.StringInput) VrackservicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vrackservices {
		return vs[0].(map[string]*Vrackservices)[vs[1].(string)]
	}).(VrackservicesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackservicesInput)(nil)).Elem(), &Vrackservices{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackservicesArrayInput)(nil)).Elem(), VrackservicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackservicesMapInput)(nil)).Elem(), VrackservicesMap{})
	pulumi.RegisterOutputType(VrackservicesOutput{})
	pulumi.RegisterOutputType(VrackservicesArrayOutput{})
	pulumi.RegisterOutputType(VrackservicesMapOutput{})
}
