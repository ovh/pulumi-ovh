// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vrack

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Ipv6Address struct {
	pulumi.CustomResourceState

	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	Block pulumi.StringOutput `pulumi:"block"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewIpv6Address registers a new resource with the given unique name, arguments, and options.
func NewIpv6Address(ctx *pulumi.Context,
	name string, args *Ipv6AddressArgs, opts ...pulumi.ResourceOption) (*Ipv6Address, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ipv6Address
	err := ctx.RegisterResource("ovh:Vrack/ipv6Address:Ipv6Address", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv6Address gets an existing Ipv6Address resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv6Address(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv6AddressState, opts ...pulumi.ResourceOption) (*Ipv6Address, error) {
	var resource Ipv6Address
	err := ctx.ReadResource("ovh:Vrack/ipv6Address:Ipv6Address", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv6Address resources.
type ipv6AddressState struct {
	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	Block *string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type Ipv6AddressState struct {
	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	Block pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (Ipv6AddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressState)(nil)).Elem()
}

type ipv6AddressArgs struct {
	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a Ipv6Address resource.
type Ipv6AddressArgs struct {
	// IPv6 CIDR notation (e.g., 2001:41d0::/128)
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (Ipv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressArgs)(nil)).Elem()
}

type Ipv6AddressInput interface {
	pulumi.Input

	ToIpv6AddressOutput() Ipv6AddressOutput
	ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput
}

func (*Ipv6Address) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6Address)(nil)).Elem()
}

func (i *Ipv6Address) ToIpv6AddressOutput() Ipv6AddressOutput {
	return i.ToIpv6AddressOutputWithContext(context.Background())
}

func (i *Ipv6Address) ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressOutput)
}

// Ipv6AddressArrayInput is an input type that accepts Ipv6AddressArray and Ipv6AddressArrayOutput values.
// You can construct a concrete instance of `Ipv6AddressArrayInput` via:
//
//	Ipv6AddressArray{ Ipv6AddressArgs{...} }
type Ipv6AddressArrayInput interface {
	pulumi.Input

	ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput
	ToIpv6AddressArrayOutputWithContext(context.Context) Ipv6AddressArrayOutput
}

type Ipv6AddressArray []Ipv6AddressInput

func (Ipv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6Address)(nil)).Elem()
}

func (i Ipv6AddressArray) ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput {
	return i.ToIpv6AddressArrayOutputWithContext(context.Background())
}

func (i Ipv6AddressArray) ToIpv6AddressArrayOutputWithContext(ctx context.Context) Ipv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressArrayOutput)
}

// Ipv6AddressMapInput is an input type that accepts Ipv6AddressMap and Ipv6AddressMapOutput values.
// You can construct a concrete instance of `Ipv6AddressMapInput` via:
//
//	Ipv6AddressMap{ "key": Ipv6AddressArgs{...} }
type Ipv6AddressMapInput interface {
	pulumi.Input

	ToIpv6AddressMapOutput() Ipv6AddressMapOutput
	ToIpv6AddressMapOutputWithContext(context.Context) Ipv6AddressMapOutput
}

type Ipv6AddressMap map[string]Ipv6AddressInput

func (Ipv6AddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6Address)(nil)).Elem()
}

func (i Ipv6AddressMap) ToIpv6AddressMapOutput() Ipv6AddressMapOutput {
	return i.ToIpv6AddressMapOutputWithContext(context.Background())
}

func (i Ipv6AddressMap) ToIpv6AddressMapOutputWithContext(ctx context.Context) Ipv6AddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressMapOutput)
}

type Ipv6AddressOutput struct{ *pulumi.OutputState }

func (Ipv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressOutput) ToIpv6AddressOutput() Ipv6AddressOutput {
	return o
}

func (o Ipv6AddressOutput) ToIpv6AddressOutputWithContext(ctx context.Context) Ipv6AddressOutput {
	return o
}

// IPv6 CIDR notation (e.g., 2001:41d0::/128)
func (o Ipv6AddressOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6Address) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o Ipv6AddressOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6Address) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type Ipv6AddressArrayOutput struct{ *pulumi.OutputState }

func (Ipv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressArrayOutput) ToIpv6AddressArrayOutput() Ipv6AddressArrayOutput {
	return o
}

func (o Ipv6AddressArrayOutput) ToIpv6AddressArrayOutputWithContext(ctx context.Context) Ipv6AddressArrayOutput {
	return o
}

func (o Ipv6AddressArrayOutput) Index(i pulumi.IntInput) Ipv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv6Address {
		return vs[0].([]*Ipv6Address)[vs[1].(int)]
	}).(Ipv6AddressOutput)
}

type Ipv6AddressMapOutput struct{ *pulumi.OutputState }

func (Ipv6AddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6Address)(nil)).Elem()
}

func (o Ipv6AddressMapOutput) ToIpv6AddressMapOutput() Ipv6AddressMapOutput {
	return o
}

func (o Ipv6AddressMapOutput) ToIpv6AddressMapOutputWithContext(ctx context.Context) Ipv6AddressMapOutput {
	return o
}

func (o Ipv6AddressMapOutput) MapIndex(k pulumi.StringInput) Ipv6AddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv6Address {
		return vs[0].(map[string]*Ipv6Address)[vs[1].(string)]
	}).(Ipv6AddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressInput)(nil)).Elem(), &Ipv6Address{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressArrayInput)(nil)).Elem(), Ipv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressMapInput)(nil)).Elem(), Ipv6AddressMap{})
	pulumi.RegisterOutputType(Ipv6AddressOutput{})
	pulumi.RegisterOutputType(Ipv6AddressArrayOutput{})
	pulumi.RegisterOutputType(Ipv6AddressMapOutput{})
}
