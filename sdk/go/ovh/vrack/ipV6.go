// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vrack

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Attach an IPv6 block to a VRack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/vrack"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vrack.NewIpV6(ctx, "vrackBlock", &vrack.IpV6Args{
//				Block:       pulumi.String("<ipv6 block>"),
//				ServiceName: pulumi.String("<vRack service name>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Attachment of an IPv6 block and a VRack can be imported using the `service_name` (vRack identifier) and the `block` (IPv6 block), separated by "," E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:Vrack/ipV6:IpV6 myattach "<service_name>,<block>"
// ```
type IpV6 struct {
	pulumi.CustomResourceState

	// Your IPv6 block.
	Block pulumi.StringOutput `pulumi:"block"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewIpV6 registers a new resource with the given unique name, arguments, and options.
func NewIpV6(ctx *pulumi.Context,
	name string, args *IpV6Args, opts ...pulumi.ResourceOption) (*IpV6, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpV6
	err := ctx.RegisterResource("ovh:Vrack/ipV6:IpV6", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpV6 gets an existing IpV6 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpV6(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpV6State, opts ...pulumi.ResourceOption) (*IpV6, error) {
	var resource IpV6
	err := ctx.ReadResource("ovh:Vrack/ipV6:IpV6", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpV6 resources.
type ipV6State struct {
	// Your IPv6 block.
	Block *string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type IpV6State struct {
	// Your IPv6 block.
	Block pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (IpV6State) ElementType() reflect.Type {
	return reflect.TypeOf((*ipV6State)(nil)).Elem()
}

type ipV6Args struct {
	// Your IPv6 block.
	Block string `pulumi:"block"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a IpV6 resource.
type IpV6Args struct {
	// Your IPv6 block.
	Block pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (IpV6Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ipV6Args)(nil)).Elem()
}

type IpV6Input interface {
	pulumi.Input

	ToIpV6Output() IpV6Output
	ToIpV6OutputWithContext(ctx context.Context) IpV6Output
}

func (*IpV6) ElementType() reflect.Type {
	return reflect.TypeOf((**IpV6)(nil)).Elem()
}

func (i *IpV6) ToIpV6Output() IpV6Output {
	return i.ToIpV6OutputWithContext(context.Background())
}

func (i *IpV6) ToIpV6OutputWithContext(ctx context.Context) IpV6Output {
	return pulumi.ToOutputWithContext(ctx, i).(IpV6Output)
}

// IpV6ArrayInput is an input type that accepts IpV6Array and IpV6ArrayOutput values.
// You can construct a concrete instance of `IpV6ArrayInput` via:
//
//	IpV6Array{ IpV6Args{...} }
type IpV6ArrayInput interface {
	pulumi.Input

	ToIpV6ArrayOutput() IpV6ArrayOutput
	ToIpV6ArrayOutputWithContext(context.Context) IpV6ArrayOutput
}

type IpV6Array []IpV6Input

func (IpV6Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpV6)(nil)).Elem()
}

func (i IpV6Array) ToIpV6ArrayOutput() IpV6ArrayOutput {
	return i.ToIpV6ArrayOutputWithContext(context.Background())
}

func (i IpV6Array) ToIpV6ArrayOutputWithContext(ctx context.Context) IpV6ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpV6ArrayOutput)
}

// IpV6MapInput is an input type that accepts IpV6Map and IpV6MapOutput values.
// You can construct a concrete instance of `IpV6MapInput` via:
//
//	IpV6Map{ "key": IpV6Args{...} }
type IpV6MapInput interface {
	pulumi.Input

	ToIpV6MapOutput() IpV6MapOutput
	ToIpV6MapOutputWithContext(context.Context) IpV6MapOutput
}

type IpV6Map map[string]IpV6Input

func (IpV6Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpV6)(nil)).Elem()
}

func (i IpV6Map) ToIpV6MapOutput() IpV6MapOutput {
	return i.ToIpV6MapOutputWithContext(context.Background())
}

func (i IpV6Map) ToIpV6MapOutputWithContext(ctx context.Context) IpV6MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpV6MapOutput)
}

type IpV6Output struct{ *pulumi.OutputState }

func (IpV6Output) ElementType() reflect.Type {
	return reflect.TypeOf((**IpV6)(nil)).Elem()
}

func (o IpV6Output) ToIpV6Output() IpV6Output {
	return o
}

func (o IpV6Output) ToIpV6OutputWithContext(ctx context.Context) IpV6Output {
	return o
}

// Your IPv6 block.
func (o IpV6Output) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *IpV6) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o IpV6Output) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpV6) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type IpV6ArrayOutput struct{ *pulumi.OutputState }

func (IpV6ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpV6)(nil)).Elem()
}

func (o IpV6ArrayOutput) ToIpV6ArrayOutput() IpV6ArrayOutput {
	return o
}

func (o IpV6ArrayOutput) ToIpV6ArrayOutputWithContext(ctx context.Context) IpV6ArrayOutput {
	return o
}

func (o IpV6ArrayOutput) Index(i pulumi.IntInput) IpV6Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpV6 {
		return vs[0].([]*IpV6)[vs[1].(int)]
	}).(IpV6Output)
}

type IpV6MapOutput struct{ *pulumi.OutputState }

func (IpV6MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpV6)(nil)).Elem()
}

func (o IpV6MapOutput) ToIpV6MapOutput() IpV6MapOutput {
	return o
}

func (o IpV6MapOutput) ToIpV6MapOutputWithContext(ctx context.Context) IpV6MapOutput {
	return o
}

func (o IpV6MapOutput) MapIndex(k pulumi.StringInput) IpV6Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpV6 {
		return vs[0].(map[string]*IpV6)[vs[1].(string)]
	}).(IpV6Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpV6Input)(nil)).Elem(), &IpV6{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpV6ArrayInput)(nil)).Elem(), IpV6Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpV6MapInput)(nil)).Elem(), IpV6Map{})
	pulumi.RegisterOutputType(IpV6Output{})
	pulumi.RegisterOutputType(IpV6ArrayOutput{})
	pulumi.RegisterOutputType(IpV6MapOutput{})
}
