// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new Gateway Interface for existing subnet in the specified public cloud project.
//
// ## Import
//
// A gateway interface can be imported using the `service_name`, `region`, `id` (identifier of the gateway) and `interface_id` properties, separated by a `/`.
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProject/gatewayInterface:GatewayInterface gateway service_name/region/id/interface_id
// ```
type GatewayInterface struct {
	pulumi.CustomResourceState

	// ID of the interface
	InterfaceId pulumi.StringOutput `pulumi:"interfaceId"`
	// IP of the interface
	Ip pulumi.StringOutput `pulumi:"ip"`
	// Network ID of the interface
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Region of the gateway
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the cloud project
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// ID of the subnet to add
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewGatewayInterface registers a new resource with the given unique name, arguments, and options.
func NewGatewayInterface(ctx *pulumi.Context,
	name string, args *GatewayInterfaceArgs, opts ...pulumi.ResourceOption) (*GatewayInterface, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayInterface
	err := ctx.RegisterResource("ovh:CloudProject/gatewayInterface:GatewayInterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayInterface gets an existing GatewayInterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayInterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayInterfaceState, opts ...pulumi.ResourceOption) (*GatewayInterface, error) {
	var resource GatewayInterface
	err := ctx.ReadResource("ovh:CloudProject/gatewayInterface:GatewayInterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayInterface resources.
type gatewayInterfaceState struct {
	// ID of the interface
	InterfaceId *string `pulumi:"interfaceId"`
	// IP of the interface
	Ip *string `pulumi:"ip"`
	// Network ID of the interface
	NetworkId *string `pulumi:"networkId"`
	// Region of the gateway
	Region *string `pulumi:"region"`
	// ID of the cloud project
	ServiceName *string `pulumi:"serviceName"`
	// ID of the subnet to add
	SubnetId *string `pulumi:"subnetId"`
}

type GatewayInterfaceState struct {
	// ID of the interface
	InterfaceId pulumi.StringPtrInput
	// IP of the interface
	Ip pulumi.StringPtrInput
	// Network ID of the interface
	NetworkId pulumi.StringPtrInput
	// Region of the gateway
	Region pulumi.StringPtrInput
	// ID of the cloud project
	ServiceName pulumi.StringPtrInput
	// ID of the subnet to add
	SubnetId pulumi.StringPtrInput
}

func (GatewayInterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayInterfaceState)(nil)).Elem()
}

type gatewayInterfaceArgs struct {
	// ID of the interface
	InterfaceId *string `pulumi:"interfaceId"`
	// Region of the gateway
	Region string `pulumi:"region"`
	// ID of the cloud project
	ServiceName string `pulumi:"serviceName"`
	// ID of the subnet to add
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a GatewayInterface resource.
type GatewayInterfaceArgs struct {
	// ID of the interface
	InterfaceId pulumi.StringPtrInput
	// Region of the gateway
	Region pulumi.StringInput
	// ID of the cloud project
	ServiceName pulumi.StringInput
	// ID of the subnet to add
	SubnetId pulumi.StringInput
}

func (GatewayInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayInterfaceArgs)(nil)).Elem()
}

type GatewayInterfaceInput interface {
	pulumi.Input

	ToGatewayInterfaceOutput() GatewayInterfaceOutput
	ToGatewayInterfaceOutputWithContext(ctx context.Context) GatewayInterfaceOutput
}

func (*GatewayInterface) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayInterface)(nil)).Elem()
}

func (i *GatewayInterface) ToGatewayInterfaceOutput() GatewayInterfaceOutput {
	return i.ToGatewayInterfaceOutputWithContext(context.Background())
}

func (i *GatewayInterface) ToGatewayInterfaceOutputWithContext(ctx context.Context) GatewayInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInterfaceOutput)
}

// GatewayInterfaceArrayInput is an input type that accepts GatewayInterfaceArray and GatewayInterfaceArrayOutput values.
// You can construct a concrete instance of `GatewayInterfaceArrayInput` via:
//
//	GatewayInterfaceArray{ GatewayInterfaceArgs{...} }
type GatewayInterfaceArrayInput interface {
	pulumi.Input

	ToGatewayInterfaceArrayOutput() GatewayInterfaceArrayOutput
	ToGatewayInterfaceArrayOutputWithContext(context.Context) GatewayInterfaceArrayOutput
}

type GatewayInterfaceArray []GatewayInterfaceInput

func (GatewayInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayInterface)(nil)).Elem()
}

func (i GatewayInterfaceArray) ToGatewayInterfaceArrayOutput() GatewayInterfaceArrayOutput {
	return i.ToGatewayInterfaceArrayOutputWithContext(context.Background())
}

func (i GatewayInterfaceArray) ToGatewayInterfaceArrayOutputWithContext(ctx context.Context) GatewayInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInterfaceArrayOutput)
}

// GatewayInterfaceMapInput is an input type that accepts GatewayInterfaceMap and GatewayInterfaceMapOutput values.
// You can construct a concrete instance of `GatewayInterfaceMapInput` via:
//
//	GatewayInterfaceMap{ "key": GatewayInterfaceArgs{...} }
type GatewayInterfaceMapInput interface {
	pulumi.Input

	ToGatewayInterfaceMapOutput() GatewayInterfaceMapOutput
	ToGatewayInterfaceMapOutputWithContext(context.Context) GatewayInterfaceMapOutput
}

type GatewayInterfaceMap map[string]GatewayInterfaceInput

func (GatewayInterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayInterface)(nil)).Elem()
}

func (i GatewayInterfaceMap) ToGatewayInterfaceMapOutput() GatewayInterfaceMapOutput {
	return i.ToGatewayInterfaceMapOutputWithContext(context.Background())
}

func (i GatewayInterfaceMap) ToGatewayInterfaceMapOutputWithContext(ctx context.Context) GatewayInterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayInterfaceMapOutput)
}

type GatewayInterfaceOutput struct{ *pulumi.OutputState }

func (GatewayInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayInterface)(nil)).Elem()
}

func (o GatewayInterfaceOutput) ToGatewayInterfaceOutput() GatewayInterfaceOutput {
	return o
}

func (o GatewayInterfaceOutput) ToGatewayInterfaceOutputWithContext(ctx context.Context) GatewayInterfaceOutput {
	return o
}

// ID of the interface
func (o GatewayInterfaceOutput) InterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.InterfaceId }).(pulumi.StringOutput)
}

// IP of the interface
func (o GatewayInterfaceOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.Ip }).(pulumi.StringOutput)
}

// Network ID of the interface
func (o GatewayInterfaceOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Region of the gateway
func (o GatewayInterfaceOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the cloud project
func (o GatewayInterfaceOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// ID of the subnet to add
func (o GatewayInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayInterface) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type GatewayInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GatewayInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayInterface)(nil)).Elem()
}

func (o GatewayInterfaceArrayOutput) ToGatewayInterfaceArrayOutput() GatewayInterfaceArrayOutput {
	return o
}

func (o GatewayInterfaceArrayOutput) ToGatewayInterfaceArrayOutputWithContext(ctx context.Context) GatewayInterfaceArrayOutput {
	return o
}

func (o GatewayInterfaceArrayOutput) Index(i pulumi.IntInput) GatewayInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayInterface {
		return vs[0].([]*GatewayInterface)[vs[1].(int)]
	}).(GatewayInterfaceOutput)
}

type GatewayInterfaceMapOutput struct{ *pulumi.OutputState }

func (GatewayInterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayInterface)(nil)).Elem()
}

func (o GatewayInterfaceMapOutput) ToGatewayInterfaceMapOutput() GatewayInterfaceMapOutput {
	return o
}

func (o GatewayInterfaceMapOutput) ToGatewayInterfaceMapOutputWithContext(ctx context.Context) GatewayInterfaceMapOutput {
	return o
}

func (o GatewayInterfaceMapOutput) MapIndex(k pulumi.StringInput) GatewayInterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayInterface {
		return vs[0].(map[string]*GatewayInterface)[vs[1].(string)]
	}).(GatewayInterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInterfaceInput)(nil)).Elem(), &GatewayInterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInterfaceArrayInput)(nil)).Elem(), GatewayInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInterfaceMapInput)(nil)).Elem(), GatewayInterfaceMap{})
	pulumi.RegisterOutputType(GatewayInterfaceOutput{})
	pulumi.RegisterOutputType(GatewayInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GatewayInterfaceMapOutput{})
}
