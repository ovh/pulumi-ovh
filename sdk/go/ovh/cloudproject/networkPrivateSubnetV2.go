// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NetworkPrivateSubnetV2 struct {
	pulumi.CustomResourceState

	// DHCP allocation pools of subnet
	AllocationPools NetworkPrivateSubnetV2AllocationPoolArrayOutput `pulumi:"allocationPools"`
	// CIDR of subnet
	Cidr pulumi.StringOutput `pulumi:"cidr"`
	// Enable DHCP in subnet
	Dhcp pulumi.BoolPtrOutput `pulumi:"dhcp"`
	// List of DNS nameservers, default: 213.186.33.99
	DnsNameservers pulumi.StringArrayOutput `pulumi:"dnsNameservers"`
	// Enable gateway IP in subnet
	EnableGatewayIp pulumi.BoolPtrOutput `pulumi:"enableGatewayIp"`
	// Gateway IP of subnet
	GatewayIp pulumi.StringOutput `pulumi:"gatewayIp"`
	// Static host routes of subnet
	HostRoutes NetworkPrivateSubnetV2HostRouteArrayOutput `pulumi:"hostRoutes"`
	// Name of subnet
	Name pulumi.StringOutput `pulumi:"name"`
	// Network ID of subnet
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Region of network/subnet
	Region pulumi.StringOutput `pulumi:"region"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Use OVH default DNS
	UseDefaultPublicDnsResolver pulumi.BoolPtrOutput `pulumi:"useDefaultPublicDnsResolver"`
}

// NewNetworkPrivateSubnetV2 registers a new resource with the given unique name, arguments, and options.
func NewNetworkPrivateSubnetV2(ctx *pulumi.Context,
	name string, args *NetworkPrivateSubnetV2Args, opts ...pulumi.ResourceOption) (*NetworkPrivateSubnetV2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cidr == nil {
		return nil, errors.New("invalid value for required argument 'Cidr'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkPrivateSubnetV2
	err := ctx.RegisterResource("ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkPrivateSubnetV2 gets an existing NetworkPrivateSubnetV2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkPrivateSubnetV2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkPrivateSubnetV2State, opts ...pulumi.ResourceOption) (*NetworkPrivateSubnetV2, error) {
	var resource NetworkPrivateSubnetV2
	err := ctx.ReadResource("ovh:CloudProject/networkPrivateSubnetV2:NetworkPrivateSubnetV2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkPrivateSubnetV2 resources.
type networkPrivateSubnetV2State struct {
	// DHCP allocation pools of subnet
	AllocationPools []NetworkPrivateSubnetV2AllocationPool `pulumi:"allocationPools"`
	// CIDR of subnet
	Cidr *string `pulumi:"cidr"`
	// Enable DHCP in subnet
	Dhcp *bool `pulumi:"dhcp"`
	// List of DNS nameservers, default: 213.186.33.99
	DnsNameservers []string `pulumi:"dnsNameservers"`
	// Enable gateway IP in subnet
	EnableGatewayIp *bool `pulumi:"enableGatewayIp"`
	// Gateway IP of subnet
	GatewayIp *string `pulumi:"gatewayIp"`
	// Static host routes of subnet
	HostRoutes []NetworkPrivateSubnetV2HostRoute `pulumi:"hostRoutes"`
	// Name of subnet
	Name *string `pulumi:"name"`
	// Network ID of subnet
	NetworkId *string `pulumi:"networkId"`
	// Region of network/subnet
	Region *string `pulumi:"region"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName *string `pulumi:"serviceName"`
	// Use OVH default DNS
	UseDefaultPublicDnsResolver *bool `pulumi:"useDefaultPublicDnsResolver"`
}

type NetworkPrivateSubnetV2State struct {
	// DHCP allocation pools of subnet
	AllocationPools NetworkPrivateSubnetV2AllocationPoolArrayInput
	// CIDR of subnet
	Cidr pulumi.StringPtrInput
	// Enable DHCP in subnet
	Dhcp pulumi.BoolPtrInput
	// List of DNS nameservers, default: 213.186.33.99
	DnsNameservers pulumi.StringArrayInput
	// Enable gateway IP in subnet
	EnableGatewayIp pulumi.BoolPtrInput
	// Gateway IP of subnet
	GatewayIp pulumi.StringPtrInput
	// Static host routes of subnet
	HostRoutes NetworkPrivateSubnetV2HostRouteArrayInput
	// Name of subnet
	Name pulumi.StringPtrInput
	// Network ID of subnet
	NetworkId pulumi.StringPtrInput
	// Region of network/subnet
	Region pulumi.StringPtrInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringPtrInput
	// Use OVH default DNS
	UseDefaultPublicDnsResolver pulumi.BoolPtrInput
}

func (NetworkPrivateSubnetV2State) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPrivateSubnetV2State)(nil)).Elem()
}

type networkPrivateSubnetV2Args struct {
	// DHCP allocation pools of subnet
	AllocationPools []NetworkPrivateSubnetV2AllocationPool `pulumi:"allocationPools"`
	// CIDR of subnet
	Cidr string `pulumi:"cidr"`
	// Enable DHCP in subnet
	Dhcp *bool `pulumi:"dhcp"`
	// List of DNS nameservers, default: 213.186.33.99
	DnsNameservers []string `pulumi:"dnsNameservers"`
	// Enable gateway IP in subnet
	EnableGatewayIp *bool `pulumi:"enableGatewayIp"`
	// Gateway IP of subnet
	GatewayIp *string `pulumi:"gatewayIp"`
	// Static host routes of subnet
	HostRoutes []NetworkPrivateSubnetV2HostRoute `pulumi:"hostRoutes"`
	// Name of subnet
	Name *string `pulumi:"name"`
	// Network ID of subnet
	NetworkId string `pulumi:"networkId"`
	// Region of network/subnet
	Region string `pulumi:"region"`
	// Service name of the resource representing the id of the cloud project.
	ServiceName string `pulumi:"serviceName"`
	// Use OVH default DNS
	UseDefaultPublicDnsResolver *bool `pulumi:"useDefaultPublicDnsResolver"`
}

// The set of arguments for constructing a NetworkPrivateSubnetV2 resource.
type NetworkPrivateSubnetV2Args struct {
	// DHCP allocation pools of subnet
	AllocationPools NetworkPrivateSubnetV2AllocationPoolArrayInput
	// CIDR of subnet
	Cidr pulumi.StringInput
	// Enable DHCP in subnet
	Dhcp pulumi.BoolPtrInput
	// List of DNS nameservers, default: 213.186.33.99
	DnsNameservers pulumi.StringArrayInput
	// Enable gateway IP in subnet
	EnableGatewayIp pulumi.BoolPtrInput
	// Gateway IP of subnet
	GatewayIp pulumi.StringPtrInput
	// Static host routes of subnet
	HostRoutes NetworkPrivateSubnetV2HostRouteArrayInput
	// Name of subnet
	Name pulumi.StringPtrInput
	// Network ID of subnet
	NetworkId pulumi.StringInput
	// Region of network/subnet
	Region pulumi.StringInput
	// Service name of the resource representing the id of the cloud project.
	ServiceName pulumi.StringInput
	// Use OVH default DNS
	UseDefaultPublicDnsResolver pulumi.BoolPtrInput
}

func (NetworkPrivateSubnetV2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*networkPrivateSubnetV2Args)(nil)).Elem()
}

type NetworkPrivateSubnetV2Input interface {
	pulumi.Input

	ToNetworkPrivateSubnetV2Output() NetworkPrivateSubnetV2Output
	ToNetworkPrivateSubnetV2OutputWithContext(ctx context.Context) NetworkPrivateSubnetV2Output
}

func (*NetworkPrivateSubnetV2) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPrivateSubnetV2)(nil)).Elem()
}

func (i *NetworkPrivateSubnetV2) ToNetworkPrivateSubnetV2Output() NetworkPrivateSubnetV2Output {
	return i.ToNetworkPrivateSubnetV2OutputWithContext(context.Background())
}

func (i *NetworkPrivateSubnetV2) ToNetworkPrivateSubnetV2OutputWithContext(ctx context.Context) NetworkPrivateSubnetV2Output {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPrivateSubnetV2Output)
}

// NetworkPrivateSubnetV2ArrayInput is an input type that accepts NetworkPrivateSubnetV2Array and NetworkPrivateSubnetV2ArrayOutput values.
// You can construct a concrete instance of `NetworkPrivateSubnetV2ArrayInput` via:
//
//	NetworkPrivateSubnetV2Array{ NetworkPrivateSubnetV2Args{...} }
type NetworkPrivateSubnetV2ArrayInput interface {
	pulumi.Input

	ToNetworkPrivateSubnetV2ArrayOutput() NetworkPrivateSubnetV2ArrayOutput
	ToNetworkPrivateSubnetV2ArrayOutputWithContext(context.Context) NetworkPrivateSubnetV2ArrayOutput
}

type NetworkPrivateSubnetV2Array []NetworkPrivateSubnetV2Input

func (NetworkPrivateSubnetV2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPrivateSubnetV2)(nil)).Elem()
}

func (i NetworkPrivateSubnetV2Array) ToNetworkPrivateSubnetV2ArrayOutput() NetworkPrivateSubnetV2ArrayOutput {
	return i.ToNetworkPrivateSubnetV2ArrayOutputWithContext(context.Background())
}

func (i NetworkPrivateSubnetV2Array) ToNetworkPrivateSubnetV2ArrayOutputWithContext(ctx context.Context) NetworkPrivateSubnetV2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPrivateSubnetV2ArrayOutput)
}

// NetworkPrivateSubnetV2MapInput is an input type that accepts NetworkPrivateSubnetV2Map and NetworkPrivateSubnetV2MapOutput values.
// You can construct a concrete instance of `NetworkPrivateSubnetV2MapInput` via:
//
//	NetworkPrivateSubnetV2Map{ "key": NetworkPrivateSubnetV2Args{...} }
type NetworkPrivateSubnetV2MapInput interface {
	pulumi.Input

	ToNetworkPrivateSubnetV2MapOutput() NetworkPrivateSubnetV2MapOutput
	ToNetworkPrivateSubnetV2MapOutputWithContext(context.Context) NetworkPrivateSubnetV2MapOutput
}

type NetworkPrivateSubnetV2Map map[string]NetworkPrivateSubnetV2Input

func (NetworkPrivateSubnetV2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPrivateSubnetV2)(nil)).Elem()
}

func (i NetworkPrivateSubnetV2Map) ToNetworkPrivateSubnetV2MapOutput() NetworkPrivateSubnetV2MapOutput {
	return i.ToNetworkPrivateSubnetV2MapOutputWithContext(context.Background())
}

func (i NetworkPrivateSubnetV2Map) ToNetworkPrivateSubnetV2MapOutputWithContext(ctx context.Context) NetworkPrivateSubnetV2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkPrivateSubnetV2MapOutput)
}

type NetworkPrivateSubnetV2Output struct{ *pulumi.OutputState }

func (NetworkPrivateSubnetV2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkPrivateSubnetV2)(nil)).Elem()
}

func (o NetworkPrivateSubnetV2Output) ToNetworkPrivateSubnetV2Output() NetworkPrivateSubnetV2Output {
	return o
}

func (o NetworkPrivateSubnetV2Output) ToNetworkPrivateSubnetV2OutputWithContext(ctx context.Context) NetworkPrivateSubnetV2Output {
	return o
}

// DHCP allocation pools of subnet
func (o NetworkPrivateSubnetV2Output) AllocationPools() NetworkPrivateSubnetV2AllocationPoolArrayOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) NetworkPrivateSubnetV2AllocationPoolArrayOutput {
		return v.AllocationPools
	}).(NetworkPrivateSubnetV2AllocationPoolArrayOutput)
}

// CIDR of subnet
func (o NetworkPrivateSubnetV2Output) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.Cidr }).(pulumi.StringOutput)
}

// Enable DHCP in subnet
func (o NetworkPrivateSubnetV2Output) Dhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.BoolPtrOutput { return v.Dhcp }).(pulumi.BoolPtrOutput)
}

// List of DNS nameservers, default: 213.186.33.99
func (o NetworkPrivateSubnetV2Output) DnsNameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringArrayOutput { return v.DnsNameservers }).(pulumi.StringArrayOutput)
}

// Enable gateway IP in subnet
func (o NetworkPrivateSubnetV2Output) EnableGatewayIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.BoolPtrOutput { return v.EnableGatewayIp }).(pulumi.BoolPtrOutput)
}

// Gateway IP of subnet
func (o NetworkPrivateSubnetV2Output) GatewayIp() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.GatewayIp }).(pulumi.StringOutput)
}

// Static host routes of subnet
func (o NetworkPrivateSubnetV2Output) HostRoutes() NetworkPrivateSubnetV2HostRouteArrayOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) NetworkPrivateSubnetV2HostRouteArrayOutput { return v.HostRoutes }).(NetworkPrivateSubnetV2HostRouteArrayOutput)
}

// Name of subnet
func (o NetworkPrivateSubnetV2Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network ID of subnet
func (o NetworkPrivateSubnetV2Output) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Region of network/subnet
func (o NetworkPrivateSubnetV2Output) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Service name of the resource representing the id of the cloud project.
func (o NetworkPrivateSubnetV2Output) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Use OVH default DNS
func (o NetworkPrivateSubnetV2Output) UseDefaultPublicDnsResolver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NetworkPrivateSubnetV2) pulumi.BoolPtrOutput { return v.UseDefaultPublicDnsResolver }).(pulumi.BoolPtrOutput)
}

type NetworkPrivateSubnetV2ArrayOutput struct{ *pulumi.OutputState }

func (NetworkPrivateSubnetV2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkPrivateSubnetV2)(nil)).Elem()
}

func (o NetworkPrivateSubnetV2ArrayOutput) ToNetworkPrivateSubnetV2ArrayOutput() NetworkPrivateSubnetV2ArrayOutput {
	return o
}

func (o NetworkPrivateSubnetV2ArrayOutput) ToNetworkPrivateSubnetV2ArrayOutputWithContext(ctx context.Context) NetworkPrivateSubnetV2ArrayOutput {
	return o
}

func (o NetworkPrivateSubnetV2ArrayOutput) Index(i pulumi.IntInput) NetworkPrivateSubnetV2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkPrivateSubnetV2 {
		return vs[0].([]*NetworkPrivateSubnetV2)[vs[1].(int)]
	}).(NetworkPrivateSubnetV2Output)
}

type NetworkPrivateSubnetV2MapOutput struct{ *pulumi.OutputState }

func (NetworkPrivateSubnetV2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkPrivateSubnetV2)(nil)).Elem()
}

func (o NetworkPrivateSubnetV2MapOutput) ToNetworkPrivateSubnetV2MapOutput() NetworkPrivateSubnetV2MapOutput {
	return o
}

func (o NetworkPrivateSubnetV2MapOutput) ToNetworkPrivateSubnetV2MapOutputWithContext(ctx context.Context) NetworkPrivateSubnetV2MapOutput {
	return o
}

func (o NetworkPrivateSubnetV2MapOutput) MapIndex(k pulumi.StringInput) NetworkPrivateSubnetV2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkPrivateSubnetV2 {
		return vs[0].(map[string]*NetworkPrivateSubnetV2)[vs[1].(string)]
	}).(NetworkPrivateSubnetV2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPrivateSubnetV2Input)(nil)).Elem(), &NetworkPrivateSubnetV2{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPrivateSubnetV2ArrayInput)(nil)).Elem(), NetworkPrivateSubnetV2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkPrivateSubnetV2MapInput)(nil)).Elem(), NetworkPrivateSubnetV2Map{})
	pulumi.RegisterOutputType(NetworkPrivateSubnetV2Output{})
	pulumi.RegisterOutputType(NetworkPrivateSubnetV2ArrayOutput{})
	pulumi.RegisterOutputType(NetworkPrivateSubnetV2MapOutput{})
}
