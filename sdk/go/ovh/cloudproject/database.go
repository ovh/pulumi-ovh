// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Database struct {
	pulumi.CustomResourceState

	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapOutput `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayOutput `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime pulumi.StringOutput `pulumi:"backupTime"`
	// Date of the creation of the cluster
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the cluster
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize pulumi.IntOutput `pulumi:"diskSize"`
	// Disk type attributes of the cluster
	DiskType pulumi.StringOutput `pulumi:"diskType"`
	// List of all endpoints of the service
	Endpoints DatabaseEndpointArrayOutput `pulumi:"endpoints"`
	// Name of the engine of the service
	Engine pulumi.StringOutput `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor pulumi.StringOutput `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions DatabaseIpRestrictionArrayOutput `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrOutput `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrOutput `pulumi:"kafkaSchemaRegistry"`
	// Time on which maintenances can start every day
	MaintenanceTime pulumi.StringOutput `pulumi:"maintenanceTime"`
	// Type of network of the cluster
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// List of nodes composing the service
	Nodes DatabaseNodeArrayOutput `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrOutput `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        pulumi.StringOutput `pulumi:"plan"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Current status of the cluster
	Status pulumi.StringOutput `pulumi:"status"`
	// Version of the engine deployed on the cluster
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatabase registers a new resource with the given unique name, arguments, and options.
func NewDatabase(ctx *pulumi.Context,
	name string, args *DatabaseArgs, opts ...pulumi.ResourceOption) (*Database, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.Flavor == nil {
		return nil, errors.New("invalid value for required argument 'Flavor'")
	}
	if args.Nodes == nil {
		return nil, errors.New("invalid value for required argument 'Nodes'")
	}
	if args.Plan == nil {
		return nil, errors.New("invalid value for required argument 'Plan'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Database
	err := ctx.RegisterResource("ovh:CloudProject/database:Database", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabase gets an existing Database resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabase(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseState, opts ...pulumi.ResourceOption) (*Database, error) {
	var resource Database
	err := ctx.ReadResource("ovh:CloudProject/database:Database", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Database resources.
type databaseState struct {
	// Advanced configuration key / value
	AdvancedConfiguration map[string]string `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions []string `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime *string `pulumi:"backupTime"`
	// Date of the creation of the cluster
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the cluster
	Description *string `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize *int `pulumi:"diskSize"`
	// Disk type attributes of the cluster
	DiskType *string `pulumi:"diskType"`
	// List of all endpoints of the service
	Endpoints []DatabaseEndpoint `pulumi:"endpoints"`
	// Name of the engine of the service
	Engine *string `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor *string `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions []DatabaseIpRestriction `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi *bool `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry *bool `pulumi:"kafkaSchemaRegistry"`
	// Time on which maintenances can start every day
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// Type of network of the cluster
	NetworkType *string `pulumi:"networkType"`
	// List of nodes composing the service
	Nodes []DatabaseNode `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled *bool `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        *string `pulumi:"plan"`
	ServiceName *string `pulumi:"serviceName"`
	// Current status of the cluster
	Status *string `pulumi:"status"`
	// Version of the engine deployed on the cluster
	Version *string `pulumi:"version"`
}

type DatabaseState struct {
	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapInput
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayInput
	// Time on which backups start every day
	BackupTime pulumi.StringPtrInput
	// Date of the creation of the cluster
	CreatedAt pulumi.StringPtrInput
	// Description of the cluster
	Description pulumi.StringPtrInput
	// Disk size attributes of the cluster
	DiskSize pulumi.IntPtrInput
	// Disk type attributes of the cluster
	DiskType pulumi.StringPtrInput
	// List of all endpoints of the service
	Endpoints DatabaseEndpointArrayInput
	// Name of the engine of the service
	Engine pulumi.StringPtrInput
	// The node flavor used for this cluster
	Flavor pulumi.StringPtrInput
	// IP Blocks authorized to access to the cluster
	IpRestrictions DatabaseIpRestrictionArrayInput
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrInput
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrInput
	// Time on which maintenances can start every day
	MaintenanceTime pulumi.StringPtrInput
	// Type of network of the cluster
	NetworkType pulumi.StringPtrInput
	// List of nodes composing the service
	Nodes DatabaseNodeArrayInput
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrInput
	// Plan of the cluster
	Plan        pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	// Current status of the cluster
	Status pulumi.StringPtrInput
	// Version of the engine deployed on the cluster
	Version pulumi.StringPtrInput
}

func (DatabaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseState)(nil)).Elem()
}

type databaseArgs struct {
	// Advanced configuration key / value
	AdvancedConfiguration map[string]string `pulumi:"advancedConfiguration"`
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions []string `pulumi:"backupRegions"`
	// Time on which backups start every day
	BackupTime *string `pulumi:"backupTime"`
	// Description of the cluster
	Description *string `pulumi:"description"`
	// Disk size attributes of the cluster
	DiskSize *int `pulumi:"diskSize"`
	// Name of the engine of the service
	Engine string `pulumi:"engine"`
	// The node flavor used for this cluster
	Flavor string `pulumi:"flavor"`
	// IP Blocks authorized to access to the cluster
	IpRestrictions []DatabaseIpRestriction `pulumi:"ipRestrictions"`
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi *bool `pulumi:"kafkaRestApi"`
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry *bool `pulumi:"kafkaSchemaRegistry"`
	// Time on which maintenances can start every day
	MaintenanceTime *string `pulumi:"maintenanceTime"`
	// List of nodes composing the service
	Nodes []DatabaseNode `pulumi:"nodes"`
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled *bool `pulumi:"opensearchAclsEnabled"`
	// Plan of the cluster
	Plan        string `pulumi:"plan"`
	ServiceName string `pulumi:"serviceName"`
	// Version of the engine deployed on the cluster
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a Database resource.
type DatabaseArgs struct {
	// Advanced configuration key / value
	AdvancedConfiguration pulumi.StringMapInput
	// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
	// engines with one being the same as the nodes[].region field
	BackupRegions pulumi.StringArrayInput
	// Time on which backups start every day
	BackupTime pulumi.StringPtrInput
	// Description of the cluster
	Description pulumi.StringPtrInput
	// Disk size attributes of the cluster
	DiskSize pulumi.IntPtrInput
	// Name of the engine of the service
	Engine pulumi.StringInput
	// The node flavor used for this cluster
	Flavor pulumi.StringInput
	// IP Blocks authorized to access to the cluster
	IpRestrictions DatabaseIpRestrictionArrayInput
	// Defines whether the REST API is enabled on a Kafka cluster
	KafkaRestApi pulumi.BoolPtrInput
	// Defines whether the schema registry is enabled on a Kafka cluster
	KafkaSchemaRegistry pulumi.BoolPtrInput
	// Time on which maintenances can start every day
	MaintenanceTime pulumi.StringPtrInput
	// List of nodes composing the service
	Nodes DatabaseNodeArrayInput
	// Defines whether the ACLs are enabled on an Opensearch cluster
	OpensearchAclsEnabled pulumi.BoolPtrInput
	// Plan of the cluster
	Plan        pulumi.StringInput
	ServiceName pulumi.StringInput
	// Version of the engine deployed on the cluster
	Version pulumi.StringInput
}

func (DatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseArgs)(nil)).Elem()
}

type DatabaseInput interface {
	pulumi.Input

	ToDatabaseOutput() DatabaseOutput
	ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput
}

func (*Database) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (i *Database) ToDatabaseOutput() DatabaseOutput {
	return i.ToDatabaseOutputWithContext(context.Background())
}

func (i *Database) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseOutput)
}

// DatabaseArrayInput is an input type that accepts DatabaseArray and DatabaseArrayOutput values.
// You can construct a concrete instance of `DatabaseArrayInput` via:
//
//	DatabaseArray{ DatabaseArgs{...} }
type DatabaseArrayInput interface {
	pulumi.Input

	ToDatabaseArrayOutput() DatabaseArrayOutput
	ToDatabaseArrayOutputWithContext(context.Context) DatabaseArrayOutput
}

type DatabaseArray []DatabaseInput

func (DatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (i DatabaseArray) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return i.ToDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabaseArray) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseArrayOutput)
}

// DatabaseMapInput is an input type that accepts DatabaseMap and DatabaseMapOutput values.
// You can construct a concrete instance of `DatabaseMapInput` via:
//
//	DatabaseMap{ "key": DatabaseArgs{...} }
type DatabaseMapInput interface {
	pulumi.Input

	ToDatabaseMapOutput() DatabaseMapOutput
	ToDatabaseMapOutputWithContext(context.Context) DatabaseMapOutput
}

type DatabaseMap map[string]DatabaseInput

func (DatabaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (i DatabaseMap) ToDatabaseMapOutput() DatabaseMapOutput {
	return i.ToDatabaseMapOutputWithContext(context.Background())
}

func (i DatabaseMap) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMapOutput)
}

type DatabaseOutput struct{ *pulumi.OutputState }

func (DatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Database)(nil)).Elem()
}

func (o DatabaseOutput) ToDatabaseOutput() DatabaseOutput {
	return o
}

func (o DatabaseOutput) ToDatabaseOutputWithContext(ctx context.Context) DatabaseOutput {
	return o
}

// Advanced configuration key / value
func (o DatabaseOutput) AdvancedConfiguration() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Database) pulumi.StringMapOutput { return v.AdvancedConfiguration }).(pulumi.StringMapOutput)
}

// List of region where backups are pushed. Not more than 1 regions for MongoDB. Not more than 2 regions for the other
// engines with one being the same as the nodes[].region field
func (o DatabaseOutput) BackupRegions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Database) pulumi.StringArrayOutput { return v.BackupRegions }).(pulumi.StringArrayOutput)
}

// Time on which backups start every day
func (o DatabaseOutput) BackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.BackupTime }).(pulumi.StringOutput)
}

// Date of the creation of the cluster
func (o DatabaseOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the cluster
func (o DatabaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disk size attributes of the cluster
func (o DatabaseOutput) DiskSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Database) pulumi.IntOutput { return v.DiskSize }).(pulumi.IntOutput)
}

// Disk type attributes of the cluster
func (o DatabaseOutput) DiskType() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.DiskType }).(pulumi.StringOutput)
}

// List of all endpoints of the service
func (o DatabaseOutput) Endpoints() DatabaseEndpointArrayOutput {
	return o.ApplyT(func(v *Database) DatabaseEndpointArrayOutput { return v.Endpoints }).(DatabaseEndpointArrayOutput)
}

// Name of the engine of the service
func (o DatabaseOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// The node flavor used for this cluster
func (o DatabaseOutput) Flavor() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Flavor }).(pulumi.StringOutput)
}

// IP Blocks authorized to access to the cluster
func (o DatabaseOutput) IpRestrictions() DatabaseIpRestrictionArrayOutput {
	return o.ApplyT(func(v *Database) DatabaseIpRestrictionArrayOutput { return v.IpRestrictions }).(DatabaseIpRestrictionArrayOutput)
}

// Defines whether the REST API is enabled on a Kafka cluster
func (o DatabaseOutput) KafkaRestApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.KafkaRestApi }).(pulumi.BoolPtrOutput)
}

// Defines whether the schema registry is enabled on a Kafka cluster
func (o DatabaseOutput) KafkaSchemaRegistry() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.KafkaSchemaRegistry }).(pulumi.BoolPtrOutput)
}

// Time on which maintenances can start every day
func (o DatabaseOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.MaintenanceTime }).(pulumi.StringOutput)
}

// Type of network of the cluster
func (o DatabaseOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// List of nodes composing the service
func (o DatabaseOutput) Nodes() DatabaseNodeArrayOutput {
	return o.ApplyT(func(v *Database) DatabaseNodeArrayOutput { return v.Nodes }).(DatabaseNodeArrayOutput)
}

// Defines whether the ACLs are enabled on an Opensearch cluster
func (o DatabaseOutput) OpensearchAclsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Database) pulumi.BoolPtrOutput { return v.OpensearchAclsEnabled }).(pulumi.BoolPtrOutput)
}

// Plan of the cluster
func (o DatabaseOutput) Plan() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Plan }).(pulumi.StringOutput)
}

func (o DatabaseOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Current status of the cluster
func (o DatabaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Version of the engine deployed on the cluster
func (o DatabaseOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Database) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type DatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Database)(nil)).Elem()
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutput() DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) ToDatabaseArrayOutputWithContext(ctx context.Context) DatabaseArrayOutput {
	return o
}

func (o DatabaseArrayOutput) Index(i pulumi.IntInput) DatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Database {
		return vs[0].([]*Database)[vs[1].(int)]
	}).(DatabaseOutput)
}

type DatabaseMapOutput struct{ *pulumi.OutputState }

func (DatabaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Database)(nil)).Elem()
}

func (o DatabaseMapOutput) ToDatabaseMapOutput() DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) ToDatabaseMapOutputWithContext(ctx context.Context) DatabaseMapOutput {
	return o
}

func (o DatabaseMapOutput) MapIndex(k pulumi.StringInput) DatabaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Database {
		return vs[0].(map[string]*Database)[vs[1].(string)]
	}).(DatabaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseInput)(nil)).Elem(), &Database{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseArrayInput)(nil)).Elem(), DatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseMapInput)(nil)).Elem(), DatabaseMap{})
	pulumi.RegisterOutputType(DatabaseOutput{})
	pulumi.RegisterOutputType(DatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMapOutput{})
}
