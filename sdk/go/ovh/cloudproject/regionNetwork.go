// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type RegionNetwork struct {
	pulumi.CustomResourceState

	// Network name
	Name pulumi.StringOutput `pulumi:"name"`
	// Network region
	Region pulumi.StringOutput `pulumi:"region"`
	// Region name
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Parameters to create a subnet from another resource creation
	Subnet RegionNetworkSubnetOutput `pulumi:"subnet"`
	// Network visibility
	Visibility pulumi.StringOutput `pulumi:"visibility"`
	// VLAN id, between 1 and 4000
	VlanId pulumi.Float64Output `pulumi:"vlanId"`
}

// NewRegionNetwork registers a new resource with the given unique name, arguments, and options.
func NewRegionNetwork(ctx *pulumi.Context,
	name string, args *RegionNetworkArgs, opts ...pulumi.ResourceOption) (*RegionNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Subnet == nil {
		return nil, errors.New("invalid value for required argument 'Subnet'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionNetwork
	err := ctx.RegisterResource("ovh:CloudProject/regionNetwork:RegionNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionNetwork gets an existing RegionNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionNetworkState, opts ...pulumi.ResourceOption) (*RegionNetwork, error) {
	var resource RegionNetwork
	err := ctx.ReadResource("ovh:CloudProject/regionNetwork:RegionNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionNetwork resources.
type regionNetworkState struct {
	// Network name
	Name *string `pulumi:"name"`
	// Network region
	Region *string `pulumi:"region"`
	// Region name
	RegionName *string `pulumi:"regionName"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Parameters to create a subnet from another resource creation
	Subnet *RegionNetworkSubnet `pulumi:"subnet"`
	// Network visibility
	Visibility *string `pulumi:"visibility"`
	// VLAN id, between 1 and 4000
	VlanId *float64 `pulumi:"vlanId"`
}

type RegionNetworkState struct {
	// Network name
	Name pulumi.StringPtrInput
	// Network region
	Region pulumi.StringPtrInput
	// Region name
	RegionName pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// Parameters to create a subnet from another resource creation
	Subnet RegionNetworkSubnetPtrInput
	// Network visibility
	Visibility pulumi.StringPtrInput
	// VLAN id, between 1 and 4000
	VlanId pulumi.Float64PtrInput
}

func (RegionNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkState)(nil)).Elem()
}

type regionNetworkArgs struct {
	// Network name
	Name *string `pulumi:"name"`
	// Region name
	RegionName string `pulumi:"regionName"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
	// Parameters to create a subnet from another resource creation
	Subnet RegionNetworkSubnet `pulumi:"subnet"`
	// VLAN id, between 1 and 4000
	VlanId *float64 `pulumi:"vlanId"`
}

// The set of arguments for constructing a RegionNetwork resource.
type RegionNetworkArgs struct {
	// Network name
	Name pulumi.StringPtrInput
	// Region name
	RegionName pulumi.StringInput
	// Service name
	ServiceName pulumi.StringInput
	// Parameters to create a subnet from another resource creation
	Subnet RegionNetworkSubnetInput
	// VLAN id, between 1 and 4000
	VlanId pulumi.Float64PtrInput
}

func (RegionNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionNetworkArgs)(nil)).Elem()
}

type RegionNetworkInput interface {
	pulumi.Input

	ToRegionNetworkOutput() RegionNetworkOutput
	ToRegionNetworkOutputWithContext(ctx context.Context) RegionNetworkOutput
}

func (*RegionNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetwork)(nil)).Elem()
}

func (i *RegionNetwork) ToRegionNetworkOutput() RegionNetworkOutput {
	return i.ToRegionNetworkOutputWithContext(context.Background())
}

func (i *RegionNetwork) ToRegionNetworkOutputWithContext(ctx context.Context) RegionNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkOutput)
}

// RegionNetworkArrayInput is an input type that accepts RegionNetworkArray and RegionNetworkArrayOutput values.
// You can construct a concrete instance of `RegionNetworkArrayInput` via:
//
//	RegionNetworkArray{ RegionNetworkArgs{...} }
type RegionNetworkArrayInput interface {
	pulumi.Input

	ToRegionNetworkArrayOutput() RegionNetworkArrayOutput
	ToRegionNetworkArrayOutputWithContext(context.Context) RegionNetworkArrayOutput
}

type RegionNetworkArray []RegionNetworkInput

func (RegionNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetwork)(nil)).Elem()
}

func (i RegionNetworkArray) ToRegionNetworkArrayOutput() RegionNetworkArrayOutput {
	return i.ToRegionNetworkArrayOutputWithContext(context.Background())
}

func (i RegionNetworkArray) ToRegionNetworkArrayOutputWithContext(ctx context.Context) RegionNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkArrayOutput)
}

// RegionNetworkMapInput is an input type that accepts RegionNetworkMap and RegionNetworkMapOutput values.
// You can construct a concrete instance of `RegionNetworkMapInput` via:
//
//	RegionNetworkMap{ "key": RegionNetworkArgs{...} }
type RegionNetworkMapInput interface {
	pulumi.Input

	ToRegionNetworkMapOutput() RegionNetworkMapOutput
	ToRegionNetworkMapOutputWithContext(context.Context) RegionNetworkMapOutput
}

type RegionNetworkMap map[string]RegionNetworkInput

func (RegionNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetwork)(nil)).Elem()
}

func (i RegionNetworkMap) ToRegionNetworkMapOutput() RegionNetworkMapOutput {
	return i.ToRegionNetworkMapOutputWithContext(context.Background())
}

func (i RegionNetworkMap) ToRegionNetworkMapOutputWithContext(ctx context.Context) RegionNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionNetworkMapOutput)
}

type RegionNetworkOutput struct{ *pulumi.OutputState }

func (RegionNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionNetwork)(nil)).Elem()
}

func (o RegionNetworkOutput) ToRegionNetworkOutput() RegionNetworkOutput {
	return o
}

func (o RegionNetworkOutput) ToRegionNetworkOutputWithContext(ctx context.Context) RegionNetworkOutput {
	return o
}

// Network name
func (o RegionNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetwork) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network region
func (o RegionNetworkOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetwork) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Region name
func (o RegionNetworkOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetwork) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

// Service name
func (o RegionNetworkOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetwork) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Parameters to create a subnet from another resource creation
func (o RegionNetworkOutput) Subnet() RegionNetworkSubnetOutput {
	return o.ApplyT(func(v *RegionNetwork) RegionNetworkSubnetOutput { return v.Subnet }).(RegionNetworkSubnetOutput)
}

// Network visibility
func (o RegionNetworkOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionNetwork) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

// VLAN id, between 1 and 4000
func (o RegionNetworkOutput) VlanId() pulumi.Float64Output {
	return o.ApplyT(func(v *RegionNetwork) pulumi.Float64Output { return v.VlanId }).(pulumi.Float64Output)
}

type RegionNetworkArrayOutput struct{ *pulumi.OutputState }

func (RegionNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionNetwork)(nil)).Elem()
}

func (o RegionNetworkArrayOutput) ToRegionNetworkArrayOutput() RegionNetworkArrayOutput {
	return o
}

func (o RegionNetworkArrayOutput) ToRegionNetworkArrayOutputWithContext(ctx context.Context) RegionNetworkArrayOutput {
	return o
}

func (o RegionNetworkArrayOutput) Index(i pulumi.IntInput) RegionNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionNetwork {
		return vs[0].([]*RegionNetwork)[vs[1].(int)]
	}).(RegionNetworkOutput)
}

type RegionNetworkMapOutput struct{ *pulumi.OutputState }

func (RegionNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionNetwork)(nil)).Elem()
}

func (o RegionNetworkMapOutput) ToRegionNetworkMapOutput() RegionNetworkMapOutput {
	return o
}

func (o RegionNetworkMapOutput) ToRegionNetworkMapOutputWithContext(ctx context.Context) RegionNetworkMapOutput {
	return o
}

func (o RegionNetworkMapOutput) MapIndex(k pulumi.StringInput) RegionNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionNetwork {
		return vs[0].(map[string]*RegionNetwork)[vs[1].(string)]
	}).(RegionNetworkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkInput)(nil)).Elem(), &RegionNetwork{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkArrayInput)(nil)).Elem(), RegionNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionNetworkMapInput)(nil)).Elem(), RegionNetworkMap{})
	pulumi.RegisterOutputType(RegionNetworkOutput{})
	pulumi.RegisterOutputType(RegionNetworkArrayOutput{})
	pulumi.RegisterOutputType(RegionNetworkMapOutput{})
}
