// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about an image in the given public cloud project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudproject.GetImage(ctx, &cloudproject.GetImageArgs{
//				ImageId:     "<image ID>",
//				ServiceName: "<public cloud project ID>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("ovh:CloudProject/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	// Image ID
	ImageId string `pulumi:"imageId"`
	// Public cloud project ID
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	// Image creation date
	CreationDate string `pulumi:"creationDate"`
	// Image usable only for this type of flavor if not null
	FlavorType string `pulumi:"flavorType"`
	// Image ID
	Id string `pulumi:"id"`
	// Image ID
	ImageId string `pulumi:"imageId"`
	// Minimum disks required to use image
	MinDisk float64 `pulumi:"minDisk"`
	// Minimum RAM required to use image
	MinRam float64 `pulumi:"minRam"`
	// Image name
	Name string `pulumi:"name"`
	// Order plan code
	PlanCode string `pulumi:"planCode"`
	// Image region
	Region string `pulumi:"region"`
	// Public cloud project ID
	ServiceName string `pulumi:"serviceName"`
	// Image size (in GiB)
	Size float64 `pulumi:"size"`
	// Image status
	Status string `pulumi:"status"`
	// Tags about the image
	Tags []string `pulumi:"tags"`
	// Image type
	Type string `pulumi:"type"`
	// User to connect with
	User string `pulumi:"user"`
	// Image visibility
	Visibility string `pulumi:"visibility"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetImageResultOutput, error) {
			args := v.(GetImageArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ovh:CloudProject/getImage:getImage", args, GetImageResultOutput{}, options).(GetImageResultOutput), nil
		}).(GetImageResultOutput)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	// Image ID
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// Public cloud project ID
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (GetImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToGetImageResultOutput() GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) ToGetImageResultOutputWithContext(ctx context.Context) GetImageResultOutput {
	return o
}

// Image creation date
func (o GetImageResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// Image usable only for this type of flavor if not null
func (o GetImageResultOutput) FlavorType() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.FlavorType }).(pulumi.StringOutput)
}

// Image ID
func (o GetImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// Image ID
func (o GetImageResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.ImageId }).(pulumi.StringOutput)
}

// Minimum disks required to use image
func (o GetImageResultOutput) MinDisk() pulumi.Float64Output {
	return o.ApplyT(func(v GetImageResult) float64 { return v.MinDisk }).(pulumi.Float64Output)
}

// Minimum RAM required to use image
func (o GetImageResultOutput) MinRam() pulumi.Float64Output {
	return o.ApplyT(func(v GetImageResult) float64 { return v.MinRam }).(pulumi.Float64Output)
}

// Image name
func (o GetImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Name }).(pulumi.StringOutput)
}

// Order plan code
func (o GetImageResultOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.PlanCode }).(pulumi.StringOutput)
}

// Image region
func (o GetImageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Region }).(pulumi.StringOutput)
}

// Public cloud project ID
func (o GetImageResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Image size (in GiB)
func (o GetImageResultOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v GetImageResult) float64 { return v.Size }).(pulumi.Float64Output)
}

// Image status
func (o GetImageResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Status }).(pulumi.StringOutput)
}

// Tags about the image
func (o GetImageResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetImageResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Image type
func (o GetImageResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Type }).(pulumi.StringOutput)
}

// User to connect with
func (o GetImageResultOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.User }).(pulumi.StringOutput)
}

// Image visibility
func (o GetImageResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Visibility }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageResultOutput{})
}
