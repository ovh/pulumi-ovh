// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRancher(ctx *pulumi.Context, args *LookupRancherArgs, opts ...pulumi.InvokeOption) (*LookupRancherResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRancherResult
	err := ctx.Invoke("ovh:CloudProject/getRancher:getRancher", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRancher.
type LookupRancherArgs struct {
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getRancher.
type LookupRancherResult struct {
	CreatedAt      string                  `pulumi:"createdAt"`
	CurrentState   GetRancherCurrentState  `pulumi:"currentState"`
	CurrentTasks   []GetRancherCurrentTask `pulumi:"currentTasks"`
	Id             string                  `pulumi:"id"`
	ProjectId      string                  `pulumi:"projectId"`
	ResourceStatus string                  `pulumi:"resourceStatus"`
	TargetSpec     GetRancherTargetSpec    `pulumi:"targetSpec"`
	UpdatedAt      string                  `pulumi:"updatedAt"`
}

func LookupRancherOutput(ctx *pulumi.Context, args LookupRancherOutputArgs, opts ...pulumi.InvokeOption) LookupRancherResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRancherResultOutput, error) {
			args := v.(LookupRancherArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ovh:CloudProject/getRancher:getRancher", args, LookupRancherResultOutput{}, options).(LookupRancherResultOutput), nil
		}).(LookupRancherResultOutput)
}

// A collection of arguments for invoking getRancher.
type LookupRancherOutputArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupRancherOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRancherArgs)(nil)).Elem()
}

// A collection of values returned by getRancher.
type LookupRancherResultOutput struct{ *pulumi.OutputState }

func (LookupRancherResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRancherResult)(nil)).Elem()
}

func (o LookupRancherResultOutput) ToLookupRancherResultOutput() LookupRancherResultOutput {
	return o
}

func (o LookupRancherResultOutput) ToLookupRancherResultOutputWithContext(ctx context.Context) LookupRancherResultOutput {
	return o
}

func (o LookupRancherResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRancherResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupRancherResultOutput) CurrentState() GetRancherCurrentStateOutput {
	return o.ApplyT(func(v LookupRancherResult) GetRancherCurrentState { return v.CurrentState }).(GetRancherCurrentStateOutput)
}

func (o LookupRancherResultOutput) CurrentTasks() GetRancherCurrentTaskArrayOutput {
	return o.ApplyT(func(v LookupRancherResult) []GetRancherCurrentTask { return v.CurrentTasks }).(GetRancherCurrentTaskArrayOutput)
}

func (o LookupRancherResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRancherResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRancherResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRancherResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupRancherResultOutput) ResourceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRancherResult) string { return v.ResourceStatus }).(pulumi.StringOutput)
}

func (o LookupRancherResultOutput) TargetSpec() GetRancherTargetSpecOutput {
	return o.ApplyT(func(v LookupRancherResult) GetRancherTargetSpec { return v.TargetSpec }).(GetRancherTargetSpecOutput)
}

func (o LookupRancherResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRancherResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRancherResultOutput{})
}
