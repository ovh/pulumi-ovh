// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type WorkflowBackup struct {
	pulumi.CustomResourceState

	BackupName        pulumi.StringOutput `pulumi:"backupName"`
	CreatedAt         pulumi.StringOutput `pulumi:"createdAt"`
	Cron              pulumi.StringOutput `pulumi:"cron"`
	InstanceId        pulumi.StringOutput `pulumi:"instanceId"`
	MaxExecutionCount pulumi.IntPtrOutput `pulumi:"maxExecutionCount"`
	Name              pulumi.StringOutput `pulumi:"name"`
	// Region name.
	RegionName  pulumi.StringOutput `pulumi:"regionName"`
	Rotation    pulumi.IntOutput    `pulumi:"rotation"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewWorkflowBackup registers a new resource with the given unique name, arguments, and options.
func NewWorkflowBackup(ctx *pulumi.Context,
	name string, args *WorkflowBackupArgs, opts ...pulumi.ResourceOption) (*WorkflowBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cron == nil {
		return nil, errors.New("invalid value for required argument 'Cron'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.Rotation == nil {
		return nil, errors.New("invalid value for required argument 'Rotation'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowBackup
	err := ctx.RegisterResource("ovh:CloudProject/workflowBackup:WorkflowBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowBackup gets an existing WorkflowBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowBackupState, opts ...pulumi.ResourceOption) (*WorkflowBackup, error) {
	var resource WorkflowBackup
	err := ctx.ReadResource("ovh:CloudProject/workflowBackup:WorkflowBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowBackup resources.
type workflowBackupState struct {
	BackupName        *string `pulumi:"backupName"`
	CreatedAt         *string `pulumi:"createdAt"`
	Cron              *string `pulumi:"cron"`
	InstanceId        *string `pulumi:"instanceId"`
	MaxExecutionCount *int    `pulumi:"maxExecutionCount"`
	Name              *string `pulumi:"name"`
	// Region name.
	RegionName  *string `pulumi:"regionName"`
	Rotation    *int    `pulumi:"rotation"`
	ServiceName *string `pulumi:"serviceName"`
}

type WorkflowBackupState struct {
	BackupName        pulumi.StringPtrInput
	CreatedAt         pulumi.StringPtrInput
	Cron              pulumi.StringPtrInput
	InstanceId        pulumi.StringPtrInput
	MaxExecutionCount pulumi.IntPtrInput
	Name              pulumi.StringPtrInput
	// Region name.
	RegionName  pulumi.StringPtrInput
	Rotation    pulumi.IntPtrInput
	ServiceName pulumi.StringPtrInput
}

func (WorkflowBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowBackupState)(nil)).Elem()
}

type workflowBackupArgs struct {
	BackupName        *string `pulumi:"backupName"`
	Cron              string  `pulumi:"cron"`
	InstanceId        string  `pulumi:"instanceId"`
	MaxExecutionCount *int    `pulumi:"maxExecutionCount"`
	Name              *string `pulumi:"name"`
	// Region name.
	RegionName  string `pulumi:"regionName"`
	Rotation    int    `pulumi:"rotation"`
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a WorkflowBackup resource.
type WorkflowBackupArgs struct {
	BackupName        pulumi.StringPtrInput
	Cron              pulumi.StringInput
	InstanceId        pulumi.StringInput
	MaxExecutionCount pulumi.IntPtrInput
	Name              pulumi.StringPtrInput
	// Region name.
	RegionName  pulumi.StringInput
	Rotation    pulumi.IntInput
	ServiceName pulumi.StringInput
}

func (WorkflowBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowBackupArgs)(nil)).Elem()
}

type WorkflowBackupInput interface {
	pulumi.Input

	ToWorkflowBackupOutput() WorkflowBackupOutput
	ToWorkflowBackupOutputWithContext(ctx context.Context) WorkflowBackupOutput
}

func (*WorkflowBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowBackup)(nil)).Elem()
}

func (i *WorkflowBackup) ToWorkflowBackupOutput() WorkflowBackupOutput {
	return i.ToWorkflowBackupOutputWithContext(context.Background())
}

func (i *WorkflowBackup) ToWorkflowBackupOutputWithContext(ctx context.Context) WorkflowBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowBackupOutput)
}

// WorkflowBackupArrayInput is an input type that accepts WorkflowBackupArray and WorkflowBackupArrayOutput values.
// You can construct a concrete instance of `WorkflowBackupArrayInput` via:
//
//	WorkflowBackupArray{ WorkflowBackupArgs{...} }
type WorkflowBackupArrayInput interface {
	pulumi.Input

	ToWorkflowBackupArrayOutput() WorkflowBackupArrayOutput
	ToWorkflowBackupArrayOutputWithContext(context.Context) WorkflowBackupArrayOutput
}

type WorkflowBackupArray []WorkflowBackupInput

func (WorkflowBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowBackup)(nil)).Elem()
}

func (i WorkflowBackupArray) ToWorkflowBackupArrayOutput() WorkflowBackupArrayOutput {
	return i.ToWorkflowBackupArrayOutputWithContext(context.Background())
}

func (i WorkflowBackupArray) ToWorkflowBackupArrayOutputWithContext(ctx context.Context) WorkflowBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowBackupArrayOutput)
}

// WorkflowBackupMapInput is an input type that accepts WorkflowBackupMap and WorkflowBackupMapOutput values.
// You can construct a concrete instance of `WorkflowBackupMapInput` via:
//
//	WorkflowBackupMap{ "key": WorkflowBackupArgs{...} }
type WorkflowBackupMapInput interface {
	pulumi.Input

	ToWorkflowBackupMapOutput() WorkflowBackupMapOutput
	ToWorkflowBackupMapOutputWithContext(context.Context) WorkflowBackupMapOutput
}

type WorkflowBackupMap map[string]WorkflowBackupInput

func (WorkflowBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowBackup)(nil)).Elem()
}

func (i WorkflowBackupMap) ToWorkflowBackupMapOutput() WorkflowBackupMapOutput {
	return i.ToWorkflowBackupMapOutputWithContext(context.Background())
}

func (i WorkflowBackupMap) ToWorkflowBackupMapOutputWithContext(ctx context.Context) WorkflowBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowBackupMapOutput)
}

type WorkflowBackupOutput struct{ *pulumi.OutputState }

func (WorkflowBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowBackup)(nil)).Elem()
}

func (o WorkflowBackupOutput) ToWorkflowBackupOutput() WorkflowBackupOutput {
	return o
}

func (o WorkflowBackupOutput) ToWorkflowBackupOutputWithContext(ctx context.Context) WorkflowBackupOutput {
	return o
}

func (o WorkflowBackupOutput) BackupName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.BackupName }).(pulumi.StringOutput)
}

func (o WorkflowBackupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o WorkflowBackupOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.Cron }).(pulumi.StringOutput)
}

func (o WorkflowBackupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

func (o WorkflowBackupOutput) MaxExecutionCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.IntPtrOutput { return v.MaxExecutionCount }).(pulumi.IntPtrOutput)
}

func (o WorkflowBackupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region name.
func (o WorkflowBackupOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

func (o WorkflowBackupOutput) Rotation() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.IntOutput { return v.Rotation }).(pulumi.IntOutput)
}

func (o WorkflowBackupOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowBackup) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type WorkflowBackupArrayOutput struct{ *pulumi.OutputState }

func (WorkflowBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowBackup)(nil)).Elem()
}

func (o WorkflowBackupArrayOutput) ToWorkflowBackupArrayOutput() WorkflowBackupArrayOutput {
	return o
}

func (o WorkflowBackupArrayOutput) ToWorkflowBackupArrayOutputWithContext(ctx context.Context) WorkflowBackupArrayOutput {
	return o
}

func (o WorkflowBackupArrayOutput) Index(i pulumi.IntInput) WorkflowBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowBackup {
		return vs[0].([]*WorkflowBackup)[vs[1].(int)]
	}).(WorkflowBackupOutput)
}

type WorkflowBackupMapOutput struct{ *pulumi.OutputState }

func (WorkflowBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowBackup)(nil)).Elem()
}

func (o WorkflowBackupMapOutput) ToWorkflowBackupMapOutput() WorkflowBackupMapOutput {
	return o
}

func (o WorkflowBackupMapOutput) ToWorkflowBackupMapOutputWithContext(ctx context.Context) WorkflowBackupMapOutput {
	return o
}

func (o WorkflowBackupMapOutput) MapIndex(k pulumi.StringInput) WorkflowBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowBackup {
		return vs[0].(map[string]*WorkflowBackup)[vs[1].(string)]
	}).(WorkflowBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowBackupInput)(nil)).Elem(), &WorkflowBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowBackupArrayInput)(nil)).Elem(), WorkflowBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowBackupMapInput)(nil)).Elem(), WorkflowBackupMap{})
	pulumi.RegisterOutputType(WorkflowBackupOutput{})
	pulumi.RegisterOutputType(WorkflowBackupArrayOutput{})
	pulumi.RegisterOutputType(WorkflowBackupMapOutput{})
}
