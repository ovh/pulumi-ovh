// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudproject.NewLoadBalancer(ctx, "lb", &cloudproject.LoadBalancerArgs{
//				ServiceName: pulumi.String("<public cloud project ID>"),
//				RegionName:  pulumi.String("GRA9"),
//				FlavorId:    pulumi.String("<loadbalancer flavor ID>"),
//				Network: &cloudproject.LoadBalancerNetworkArgs{
//					Private: &cloudproject.LoadBalancerNetworkPrivateArgs{
//						Network: &cloudproject.LoadBalancerNetworkPrivateNetworkArgs{
//							Id:       "TODO: call element".Openstackid,
//							SubnetId: pulumi.Any(ovh_cloud_project_network_private_subnet.Myprivsub.Id),
//						},
//					},
//				},
//				Description: pulumi.String("My new LB"),
//				Listeners: cloudproject.LoadBalancerListenerArray{
//					&cloudproject.LoadBalancerListenerArgs{
//						Port:     pulumi.Float64(34568),
//						Protocol: pulumi.String("tcp"),
//					},
//					&cloudproject.LoadBalancerListenerArgs{
//						Port:     pulumi.Float64(34569),
//						Protocol: pulumi.String("udp"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example usage with network and subnet creation
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			priv, err := cloudproject.NewNetworkPrivate(ctx, "priv", &cloudproject.NetworkPrivateArgs{
//				ServiceName: pulumi.String("<public cloud project ID>"),
//				VlanId:      pulumi.Int(10),
//				Regions: pulumi.StringArray{
//					pulumi.String("GRA9"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			privsub, err := cloudproject.NewNetworkPrivateSubnet(ctx, "privsub", &cloudproject.NetworkPrivateSubnetArgs{
//				ServiceName: priv.ServiceName,
//				NetworkId:   priv.ID(),
//				Region:      pulumi.String("GRA9"),
//				Start:       pulumi.String("10.0.0.2"),
//				End:         pulumi.String("10.0.255.254"),
//				Network:     pulumi.String("10.0.0.0/16"),
//				Dhcp:        pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudproject.NewLoadBalancer(ctx, "lb", &cloudproject.LoadBalancerArgs{
//				ServiceName: privsub.ServiceName,
//				RegionName:  privsub.Region,
//				FlavorId:    pulumi.String("<loadbalancer flavor ID>"),
//				Network: &cloudproject.LoadBalancerNetworkArgs{
//					Private: &cloudproject.LoadBalancerNetworkPrivateArgs{
//						Network: &cloudproject.LoadBalancerNetworkPrivateNetworkArgs{
//							Id: "TODO: call element".ApplyT(func(regions cloudproject.NetworkPrivateRegionsAttribute) (*string, error) {
//								return regions.Openstackid, nil
//							}).(pulumi.StringPtrOutput),
//							SubnetId: privsub.ID(),
//						},
//					},
//				},
//				Description: pulumi.String("My new LB"),
//				Listeners: cloudproject.LoadBalancerListenerArray{
//					&cloudproject.LoadBalancerListenerArgs{
//						Port:     pulumi.Float64(34568),
//						Protocol: pulumi.String("tcp"),
//					},
//					&cloudproject.LoadBalancerListenerArgs{
//						Port:     pulumi.Float64(34569),
//						Protocol: pulumi.String("udp"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A load balancer in a public cloud project can be imported using the `service_name`, `region_name` and `id` attributes. Using the following configuration:
//
// terraform
//
// import {
//
//	id = "<service_name>/<region_name>/<id>"
//
//	to = ovh_cloud_project_loadbalancer.lb
//
// }
//
// You can then run:
//
// bash
//
// $ pulumi preview -generate-config-out=lb.tf
//
// $ pulumi up
//
// The file `lb.tf` will then contain the imported resource's configuration, that can be copied next to the `import` block above. See https://developer.hashicorp.com/terraform/language/import/generating-configuration for more details.
type LoadBalancer struct {
	pulumi.CustomResourceState

	// The UTC date and timestamp when the resource was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the loadbalancer
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Information about floating IP
	FloatingIp LoadBalancerFloatingIpOutput `pulumi:"floatingIp"`
	// Listeners to create with the loadbalancer
	Listeners LoadBalancerListenerArrayOutput `pulumi:"listeners"`
	// Name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Network information to create the loadbalancer
	Network LoadBalancerNetworkOutput `pulumi:"network"`
	// Operating status of the resource
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// Provisioning status of the resource
	ProvisioningStatus pulumi.StringOutput `pulumi:"provisioningStatus"`
	// Region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// Region name
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// UTC date and timestamp when the resource was created
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// IP address of the Virtual IP
	VipAddress pulumi.StringOutput `pulumi:"vipAddress"`
	// Openstack ID of the network for the Virtual IP
	VipNetworkId pulumi.StringOutput `pulumi:"vipNetworkId"`
	// ID of the subnet for the Virtual IP
	VipSubnetId pulumi.StringOutput `pulumi:"vipSubnetId"`
}

// NewLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancer(ctx *pulumi.Context,
	name string, args *LoadBalancerArgs, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadBalancer
	err := ctx.RegisterResource("ovh:CloudProject/loadBalancer:LoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancer gets an existing LoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerState, opts ...pulumi.ResourceOption) (*LoadBalancer, error) {
	var resource LoadBalancer
	err := ctx.ReadResource("ovh:CloudProject/loadBalancer:LoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancer resources.
type loadBalancerState struct {
	// The UTC date and timestamp when the resource was created
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the loadbalancer
	Description *string `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId *string `pulumi:"flavorId"`
	// Information about floating IP
	FloatingIp *LoadBalancerFloatingIp `pulumi:"floatingIp"`
	// Listeners to create with the loadbalancer
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// Name of the resource
	Name *string `pulumi:"name"`
	// Network information to create the loadbalancer
	Network *LoadBalancerNetwork `pulumi:"network"`
	// Operating status of the resource
	OperatingStatus *string `pulumi:"operatingStatus"`
	// Provisioning status of the resource
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Region of the resource
	Region *string `pulumi:"region"`
	// Region name
	RegionName *string `pulumi:"regionName"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// UTC date and timestamp when the resource was created
	UpdatedAt *string `pulumi:"updatedAt"`
	// IP address of the Virtual IP
	VipAddress *string `pulumi:"vipAddress"`
	// Openstack ID of the network for the Virtual IP
	VipNetworkId *string `pulumi:"vipNetworkId"`
	// ID of the subnet for the Virtual IP
	VipSubnetId *string `pulumi:"vipSubnetId"`
}

type LoadBalancerState struct {
	// The UTC date and timestamp when the resource was created
	CreatedAt pulumi.StringPtrInput
	// Description of the loadbalancer
	Description pulumi.StringPtrInput
	// Loadbalancer flavor id
	FlavorId pulumi.StringPtrInput
	// Information about floating IP
	FloatingIp LoadBalancerFloatingIpPtrInput
	// Listeners to create with the loadbalancer
	Listeners LoadBalancerListenerArrayInput
	// Name of the resource
	Name pulumi.StringPtrInput
	// Network information to create the loadbalancer
	Network LoadBalancerNetworkPtrInput
	// Operating status of the resource
	OperatingStatus pulumi.StringPtrInput
	// Provisioning status of the resource
	ProvisioningStatus pulumi.StringPtrInput
	// Region of the resource
	Region pulumi.StringPtrInput
	// Region name
	RegionName pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// UTC date and timestamp when the resource was created
	UpdatedAt pulumi.StringPtrInput
	// IP address of the Virtual IP
	VipAddress pulumi.StringPtrInput
	// Openstack ID of the network for the Virtual IP
	VipNetworkId pulumi.StringPtrInput
	// ID of the subnet for the Virtual IP
	VipSubnetId pulumi.StringPtrInput
}

func (LoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerState)(nil)).Elem()
}

type loadBalancerArgs struct {
	// Description of the loadbalancer
	Description *string `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId string `pulumi:"flavorId"`
	// Listeners to create with the loadbalancer
	Listeners []LoadBalancerListener `pulumi:"listeners"`
	// Name of the resource
	Name *string `pulumi:"name"`
	// Network information to create the loadbalancer
	Network LoadBalancerNetwork `pulumi:"network"`
	// Region name
	RegionName string `pulumi:"regionName"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a LoadBalancer resource.
type LoadBalancerArgs struct {
	// Description of the loadbalancer
	Description pulumi.StringPtrInput
	// Loadbalancer flavor id
	FlavorId pulumi.StringInput
	// Listeners to create with the loadbalancer
	Listeners LoadBalancerListenerArrayInput
	// Name of the resource
	Name pulumi.StringPtrInput
	// Network information to create the loadbalancer
	Network LoadBalancerNetworkInput
	// Region name
	RegionName pulumi.StringInput
	// Service name
	ServiceName pulumi.StringInput
}

func (LoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerArgs)(nil)).Elem()
}

type LoadBalancerInput interface {
	pulumi.Input

	ToLoadBalancerOutput() LoadBalancerOutput
	ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput
}

func (*LoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (i *LoadBalancer) ToLoadBalancerOutput() LoadBalancerOutput {
	return i.ToLoadBalancerOutputWithContext(context.Background())
}

func (i *LoadBalancer) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOutput)
}

// LoadBalancerArrayInput is an input type that accepts LoadBalancerArray and LoadBalancerArrayOutput values.
// You can construct a concrete instance of `LoadBalancerArrayInput` via:
//
//	LoadBalancerArray{ LoadBalancerArgs{...} }
type LoadBalancerArrayInput interface {
	pulumi.Input

	ToLoadBalancerArrayOutput() LoadBalancerArrayOutput
	ToLoadBalancerArrayOutputWithContext(context.Context) LoadBalancerArrayOutput
}

type LoadBalancerArray []LoadBalancerInput

func (LoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return i.ToLoadBalancerArrayOutputWithContext(context.Background())
}

func (i LoadBalancerArray) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerArrayOutput)
}

// LoadBalancerMapInput is an input type that accepts LoadBalancerMap and LoadBalancerMapOutput values.
// You can construct a concrete instance of `LoadBalancerMapInput` via:
//
//	LoadBalancerMap{ "key": LoadBalancerArgs{...} }
type LoadBalancerMapInput interface {
	pulumi.Input

	ToLoadBalancerMapOutput() LoadBalancerMapOutput
	ToLoadBalancerMapOutputWithContext(context.Context) LoadBalancerMapOutput
}

type LoadBalancerMap map[string]LoadBalancerInput

func (LoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (i LoadBalancerMap) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return i.ToLoadBalancerMapOutputWithContext(context.Background())
}

func (i LoadBalancerMap) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerMapOutput)
}

type LoadBalancerOutput struct{ *pulumi.OutputState }

func (LoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerOutput) ToLoadBalancerOutput() LoadBalancerOutput {
	return o
}

func (o LoadBalancerOutput) ToLoadBalancerOutputWithContext(ctx context.Context) LoadBalancerOutput {
	return o
}

// The UTC date and timestamp when the resource was created
func (o LoadBalancerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the loadbalancer
func (o LoadBalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Loadbalancer flavor id
func (o LoadBalancerOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Information about floating IP
func (o LoadBalancerOutput) FloatingIp() LoadBalancerFloatingIpOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerFloatingIpOutput { return v.FloatingIp }).(LoadBalancerFloatingIpOutput)
}

// Listeners to create with the loadbalancer
func (o LoadBalancerOutput) Listeners() LoadBalancerListenerArrayOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerListenerArrayOutput { return v.Listeners }).(LoadBalancerListenerArrayOutput)
}

// Name of the resource
func (o LoadBalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network information to create the loadbalancer
func (o LoadBalancerOutput) Network() LoadBalancerNetworkOutput {
	return o.ApplyT(func(v *LoadBalancer) LoadBalancerNetworkOutput { return v.Network }).(LoadBalancerNetworkOutput)
}

// Operating status of the resource
func (o LoadBalancerOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// Provisioning status of the resource
func (o LoadBalancerOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Region of the resource
func (o LoadBalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Region name
func (o LoadBalancerOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

// Service name
func (o LoadBalancerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// UTC date and timestamp when the resource was created
func (o LoadBalancerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// IP address of the Virtual IP
func (o LoadBalancerOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipAddress }).(pulumi.StringOutput)
}

// Openstack ID of the network for the Virtual IP
func (o LoadBalancerOutput) VipNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipNetworkId }).(pulumi.StringOutput)
}

// ID of the subnet for the Virtual IP
func (o LoadBalancerOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadBalancer) pulumi.StringOutput { return v.VipSubnetId }).(pulumi.StringOutput)
}

type LoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutput() LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) ToLoadBalancerArrayOutputWithContext(ctx context.Context) LoadBalancerArrayOutput {
	return o
}

func (o LoadBalancerArrayOutput) Index(i pulumi.IntInput) LoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].([]*LoadBalancer)[vs[1].(int)]
	}).(LoadBalancerOutput)
}

type LoadBalancerMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancer)(nil)).Elem()
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutput() LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) ToLoadBalancerMapOutputWithContext(ctx context.Context) LoadBalancerMapOutput {
	return o
}

func (o LoadBalancerMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadBalancer {
		return vs[0].(map[string]*LoadBalancer)[vs[1].(string)]
	}).(LoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerInput)(nil)).Elem(), &LoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerArrayInput)(nil)).Elem(), LoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerMapInput)(nil)).Elem(), LoadBalancerMap{})
	pulumi.RegisterOutputType(LoadBalancerOutput{})
	pulumi.RegisterOutputType(LoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerMapOutput{})
}
