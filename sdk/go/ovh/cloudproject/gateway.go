// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new Gateway for existing subnet in the specified public cloud project.
//
// ## Import
//
// A gateway can be imported using the `service_name`, `region` and `id` (identifier of the gateway) properties, separated by a `/`.
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProject/gateway:Gateway gateway service_name/region/id
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// List of External Information of the gateway.
	ExternalInformations GatewayExternalInformationArrayOutput `pulumi:"externalInformations"`
	// Interfaces list of the gateway.
	Interfaces GatewayInterfaceTypeArrayOutput `pulumi:"interfaces"`
	// Model of the gateway.
	Model pulumi.StringOutput `pulumi:"model"`
	// Name of the gateway.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the private network.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Region of the gateway.
	Region pulumi.StringOutput `pulumi:"region"`
	// ID of the private network.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Status of the gateway.
	Status pulumi.StringOutput `pulumi:"status"`
	// ID of the subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Model == nil {
		return nil, errors.New("invalid value for required argument 'Model'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("ovh:CloudProject/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("ovh:CloudProject/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// List of External Information of the gateway.
	ExternalInformations []GatewayExternalInformation `pulumi:"externalInformations"`
	// Interfaces list of the gateway.
	Interfaces []GatewayInterfaceType `pulumi:"interfaces"`
	// Model of the gateway.
	Model *string `pulumi:"model"`
	// Name of the gateway.
	Name *string `pulumi:"name"`
	// ID of the private network.
	NetworkId *string `pulumi:"networkId"`
	// Region of the gateway.
	Region *string `pulumi:"region"`
	// ID of the private network.
	ServiceName *string `pulumi:"serviceName"`
	// Status of the gateway.
	Status *string `pulumi:"status"`
	// ID of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type GatewayState struct {
	// List of External Information of the gateway.
	ExternalInformations GatewayExternalInformationArrayInput
	// Interfaces list of the gateway.
	Interfaces GatewayInterfaceTypeArrayInput
	// Model of the gateway.
	Model pulumi.StringPtrInput
	// Name of the gateway.
	Name pulumi.StringPtrInput
	// ID of the private network.
	NetworkId pulumi.StringPtrInput
	// Region of the gateway.
	Region pulumi.StringPtrInput
	// ID of the private network.
	ServiceName pulumi.StringPtrInput
	// Status of the gateway.
	Status pulumi.StringPtrInput
	// ID of the subnet.
	SubnetId pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// Model of the gateway.
	Model string `pulumi:"model"`
	// Name of the gateway.
	Name *string `pulumi:"name"`
	// ID of the private network.
	NetworkId string `pulumi:"networkId"`
	// Region of the gateway.
	Region string `pulumi:"region"`
	// ID of the private network.
	ServiceName string `pulumi:"serviceName"`
	// ID of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// Model of the gateway.
	Model pulumi.StringInput
	// Name of the gateway.
	Name pulumi.StringPtrInput
	// ID of the private network.
	NetworkId pulumi.StringInput
	// Region of the gateway.
	Region pulumi.StringInput
	// ID of the private network.
	ServiceName pulumi.StringInput
	// ID of the subnet.
	SubnetId pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// List of External Information of the gateway.
func (o GatewayOutput) ExternalInformations() GatewayExternalInformationArrayOutput {
	return o.ApplyT(func(v *Gateway) GatewayExternalInformationArrayOutput { return v.ExternalInformations }).(GatewayExternalInformationArrayOutput)
}

// Interfaces list of the gateway.
func (o GatewayOutput) Interfaces() GatewayInterfaceTypeArrayOutput {
	return o.ApplyT(func(v *Gateway) GatewayInterfaceTypeArrayOutput { return v.Interfaces }).(GatewayInterfaceTypeArrayOutput)
}

// Model of the gateway.
func (o GatewayOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Model }).(pulumi.StringOutput)
}

// Name of the gateway.
func (o GatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the private network.
func (o GatewayOutput) NetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.NetworkId }).(pulumi.StringOutput)
}

// Region of the gateway.
func (o GatewayOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// ID of the private network.
func (o GatewayOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Status of the gateway.
func (o GatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// ID of the subnet.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}
