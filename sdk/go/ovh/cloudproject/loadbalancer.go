// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Loadbalancer struct {
	pulumi.CustomResourceState

	// The UTC date and timestamp when the resource was created
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the loadbalancer
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId pulumi.StringOutput `pulumi:"flavorId"`
	// Information about floating IP
	FloatingIp LoadbalancerFloatingIpOutput `pulumi:"floatingIp"`
	// Listeners to create with the loadbalancer
	Listeners LoadbalancerListenerArrayOutput `pulumi:"listeners"`
	// Name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// Network information to create the loadbalancer
	Network LoadbalancerNetworkOutput `pulumi:"network"`
	// Operating status of the resource
	OperatingStatus pulumi.StringOutput `pulumi:"operatingStatus"`
	// Provisioning status of the resource
	ProvisioningStatus pulumi.StringOutput `pulumi:"provisioningStatus"`
	// Region of the resource
	Region pulumi.StringOutput `pulumi:"region"`
	// Region name
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// UTC date and timestamp when the resource was created
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// IP address of the Virtual IP
	VipAddress pulumi.StringOutput `pulumi:"vipAddress"`
	// Openstack ID of the network for the Virtual IP
	VipNetworkId pulumi.StringOutput `pulumi:"vipNetworkId"`
	// ID of the subnet for the Virtual IP
	VipSubnetId pulumi.StringOutput `pulumi:"vipSubnetId"`
}

// NewLoadbalancer registers a new resource with the given unique name, arguments, and options.
func NewLoadbalancer(ctx *pulumi.Context,
	name string, args *LoadbalancerArgs, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlavorId == nil {
		return nil, errors.New("invalid value for required argument 'FlavorId'")
	}
	if args.Network == nil {
		return nil, errors.New("invalid value for required argument 'Network'")
	}
	if args.RegionName == nil {
		return nil, errors.New("invalid value for required argument 'RegionName'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Loadbalancer
	err := ctx.RegisterResource("ovh:CloudProject/loadbalancer:Loadbalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadbalancer gets an existing Loadbalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadbalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadbalancerState, opts ...pulumi.ResourceOption) (*Loadbalancer, error) {
	var resource Loadbalancer
	err := ctx.ReadResource("ovh:CloudProject/loadbalancer:Loadbalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Loadbalancer resources.
type loadbalancerState struct {
	// The UTC date and timestamp when the resource was created
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the loadbalancer
	Description *string `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId *string `pulumi:"flavorId"`
	// Information about floating IP
	FloatingIp *LoadbalancerFloatingIp `pulumi:"floatingIp"`
	// Listeners to create with the loadbalancer
	Listeners []LoadbalancerListener `pulumi:"listeners"`
	// Name of the resource
	Name *string `pulumi:"name"`
	// Network information to create the loadbalancer
	Network *LoadbalancerNetwork `pulumi:"network"`
	// Operating status of the resource
	OperatingStatus *string `pulumi:"operatingStatus"`
	// Provisioning status of the resource
	ProvisioningStatus *string `pulumi:"provisioningStatus"`
	// Region of the resource
	Region *string `pulumi:"region"`
	// Region name
	RegionName *string `pulumi:"regionName"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// UTC date and timestamp when the resource was created
	UpdatedAt *string `pulumi:"updatedAt"`
	// IP address of the Virtual IP
	VipAddress *string `pulumi:"vipAddress"`
	// Openstack ID of the network for the Virtual IP
	VipNetworkId *string `pulumi:"vipNetworkId"`
	// ID of the subnet for the Virtual IP
	VipSubnetId *string `pulumi:"vipSubnetId"`
}

type LoadbalancerState struct {
	// The UTC date and timestamp when the resource was created
	CreatedAt pulumi.StringPtrInput
	// Description of the loadbalancer
	Description pulumi.StringPtrInput
	// Loadbalancer flavor id
	FlavorId pulumi.StringPtrInput
	// Information about floating IP
	FloatingIp LoadbalancerFloatingIpPtrInput
	// Listeners to create with the loadbalancer
	Listeners LoadbalancerListenerArrayInput
	// Name of the resource
	Name pulumi.StringPtrInput
	// Network information to create the loadbalancer
	Network LoadbalancerNetworkPtrInput
	// Operating status of the resource
	OperatingStatus pulumi.StringPtrInput
	// Provisioning status of the resource
	ProvisioningStatus pulumi.StringPtrInput
	// Region of the resource
	Region pulumi.StringPtrInput
	// Region name
	RegionName pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// UTC date and timestamp when the resource was created
	UpdatedAt pulumi.StringPtrInput
	// IP address of the Virtual IP
	VipAddress pulumi.StringPtrInput
	// Openstack ID of the network for the Virtual IP
	VipNetworkId pulumi.StringPtrInput
	// ID of the subnet for the Virtual IP
	VipSubnetId pulumi.StringPtrInput
}

func (LoadbalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerState)(nil)).Elem()
}

type loadbalancerArgs struct {
	// Description of the loadbalancer
	Description *string `pulumi:"description"`
	// Loadbalancer flavor id
	FlavorId string `pulumi:"flavorId"`
	// Listeners to create with the loadbalancer
	Listeners []LoadbalancerListener `pulumi:"listeners"`
	// Name of the resource
	Name *string `pulumi:"name"`
	// Network information to create the loadbalancer
	Network LoadbalancerNetwork `pulumi:"network"`
	// Region name
	RegionName string `pulumi:"regionName"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a Loadbalancer resource.
type LoadbalancerArgs struct {
	// Description of the loadbalancer
	Description pulumi.StringPtrInput
	// Loadbalancer flavor id
	FlavorId pulumi.StringInput
	// Listeners to create with the loadbalancer
	Listeners LoadbalancerListenerArrayInput
	// Name of the resource
	Name pulumi.StringPtrInput
	// Network information to create the loadbalancer
	Network LoadbalancerNetworkInput
	// Region name
	RegionName pulumi.StringInput
	// Service name
	ServiceName pulumi.StringInput
}

func (LoadbalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadbalancerArgs)(nil)).Elem()
}

type LoadbalancerInput interface {
	pulumi.Input

	ToLoadbalancerOutput() LoadbalancerOutput
	ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput
}

func (*Loadbalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (i *Loadbalancer) ToLoadbalancerOutput() LoadbalancerOutput {
	return i.ToLoadbalancerOutputWithContext(context.Background())
}

func (i *Loadbalancer) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerOutput)
}

// LoadbalancerArrayInput is an input type that accepts LoadbalancerArray and LoadbalancerArrayOutput values.
// You can construct a concrete instance of `LoadbalancerArrayInput` via:
//
//	LoadbalancerArray{ LoadbalancerArgs{...} }
type LoadbalancerArrayInput interface {
	pulumi.Input

	ToLoadbalancerArrayOutput() LoadbalancerArrayOutput
	ToLoadbalancerArrayOutputWithContext(context.Context) LoadbalancerArrayOutput
}

type LoadbalancerArray []LoadbalancerInput

func (LoadbalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return i.ToLoadbalancerArrayOutputWithContext(context.Background())
}

func (i LoadbalancerArray) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerArrayOutput)
}

// LoadbalancerMapInput is an input type that accepts LoadbalancerMap and LoadbalancerMapOutput values.
// You can construct a concrete instance of `LoadbalancerMapInput` via:
//
//	LoadbalancerMap{ "key": LoadbalancerArgs{...} }
type LoadbalancerMapInput interface {
	pulumi.Input

	ToLoadbalancerMapOutput() LoadbalancerMapOutput
	ToLoadbalancerMapOutputWithContext(context.Context) LoadbalancerMapOutput
}

type LoadbalancerMap map[string]LoadbalancerInput

func (LoadbalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (i LoadbalancerMap) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return i.ToLoadbalancerMapOutputWithContext(context.Background())
}

func (i LoadbalancerMap) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadbalancerMapOutput)
}

type LoadbalancerOutput struct{ *pulumi.OutputState }

func (LoadbalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerOutput) ToLoadbalancerOutput() LoadbalancerOutput {
	return o
}

func (o LoadbalancerOutput) ToLoadbalancerOutputWithContext(ctx context.Context) LoadbalancerOutput {
	return o
}

// The UTC date and timestamp when the resource was created
func (o LoadbalancerOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the loadbalancer
func (o LoadbalancerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Loadbalancer flavor id
func (o LoadbalancerOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.FlavorId }).(pulumi.StringOutput)
}

// Information about floating IP
func (o LoadbalancerOutput) FloatingIp() LoadbalancerFloatingIpOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerFloatingIpOutput { return v.FloatingIp }).(LoadbalancerFloatingIpOutput)
}

// Listeners to create with the loadbalancer
func (o LoadbalancerOutput) Listeners() LoadbalancerListenerArrayOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerListenerArrayOutput { return v.Listeners }).(LoadbalancerListenerArrayOutput)
}

// Name of the resource
func (o LoadbalancerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network information to create the loadbalancer
func (o LoadbalancerOutput) Network() LoadbalancerNetworkOutput {
	return o.ApplyT(func(v *Loadbalancer) LoadbalancerNetworkOutput { return v.Network }).(LoadbalancerNetworkOutput)
}

// Operating status of the resource
func (o LoadbalancerOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.OperatingStatus }).(pulumi.StringOutput)
}

// Provisioning status of the resource
func (o LoadbalancerOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Region of the resource
func (o LoadbalancerOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Region name
func (o LoadbalancerOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

// Service name
func (o LoadbalancerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// UTC date and timestamp when the resource was created
func (o LoadbalancerOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// IP address of the Virtual IP
func (o LoadbalancerOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipAddress }).(pulumi.StringOutput)
}

// Openstack ID of the network for the Virtual IP
func (o LoadbalancerOutput) VipNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipNetworkId }).(pulumi.StringOutput)
}

// ID of the subnet for the Virtual IP
func (o LoadbalancerOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Loadbalancer) pulumi.StringOutput { return v.VipSubnetId }).(pulumi.StringOutput)
}

type LoadbalancerArrayOutput struct{ *pulumi.OutputState }

func (LoadbalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutput() LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) ToLoadbalancerArrayOutputWithContext(ctx context.Context) LoadbalancerArrayOutput {
	return o
}

func (o LoadbalancerArrayOutput) Index(i pulumi.IntInput) LoadbalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].([]*Loadbalancer)[vs[1].(int)]
	}).(LoadbalancerOutput)
}

type LoadbalancerMapOutput struct{ *pulumi.OutputState }

func (LoadbalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Loadbalancer)(nil)).Elem()
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutput() LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) ToLoadbalancerMapOutputWithContext(ctx context.Context) LoadbalancerMapOutput {
	return o
}

func (o LoadbalancerMapOutput) MapIndex(k pulumi.StringInput) LoadbalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Loadbalancer {
		return vs[0].(map[string]*Loadbalancer)[vs[1].(string)]
	}).(LoadbalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerInput)(nil)).Elem(), &Loadbalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerArrayInput)(nil)).Elem(), LoadbalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadbalancerMapInput)(nil)).Elem(), LoadbalancerMap{})
	pulumi.RegisterOutputType(LoadbalancerOutput{})
	pulumi.RegisterOutputType(LoadbalancerArrayOutput{})
	pulumi.RegisterOutputType(LoadbalancerMapOutput{})
}
