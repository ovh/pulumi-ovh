// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an S3 Credential for a user in a public cloud project.
//
// ## Import
//
// OVHcloud User S3 Credentials can be imported using the `service_name`, `user_id` and `access_key_id` of the credential, separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProject/s3Credential:S3Credential s3_credential service_name/user_id/access_key_id
// ```
type S3Credential struct {
	pulumi.CustomResourceState

	// the Access Key ID
	AccessKeyId    pulumi.StringOutput `pulumi:"accessKeyId"`
	InternalUserId pulumi.StringOutput `pulumi:"internalUserId"`
	// (Sensitive) the Secret Access Key
	SecretAccessKey pulumi.StringOutput `pulumi:"secretAccessKey"`
	// The ID of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The ID of a public cloud project's user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewS3Credential registers a new resource with the given unique name, arguments, and options.
func NewS3Credential(ctx *pulumi.Context,
	name string, args *S3CredentialArgs, opts ...pulumi.ResourceOption) (*S3Credential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretAccessKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource S3Credential
	err := ctx.RegisterResource("ovh:CloudProject/s3Credential:S3Credential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetS3Credential gets an existing S3Credential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetS3Credential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *S3CredentialState, opts ...pulumi.ResourceOption) (*S3Credential, error) {
	var resource S3Credential
	err := ctx.ReadResource("ovh:CloudProject/s3Credential:S3Credential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering S3Credential resources.
type s3credentialState struct {
	// the Access Key ID
	AccessKeyId    *string `pulumi:"accessKeyId"`
	InternalUserId *string `pulumi:"internalUserId"`
	// (Sensitive) the Secret Access Key
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// The ID of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// The ID of a public cloud project's user.
	UserId *string `pulumi:"userId"`
}

type S3CredentialState struct {
	// the Access Key ID
	AccessKeyId    pulumi.StringPtrInput
	InternalUserId pulumi.StringPtrInput
	// (Sensitive) the Secret Access Key
	SecretAccessKey pulumi.StringPtrInput
	// The ID of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// The ID of a public cloud project's user.
	UserId pulumi.StringPtrInput
}

func (S3CredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*s3credentialState)(nil)).Elem()
}

type s3credentialArgs struct {
	// The ID of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
	// The ID of a public cloud project's user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a S3Credential resource.
type S3CredentialArgs struct {
	// The ID of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
	// The ID of a public cloud project's user.
	UserId pulumi.StringInput
}

func (S3CredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*s3credentialArgs)(nil)).Elem()
}

type S3CredentialInput interface {
	pulumi.Input

	ToS3CredentialOutput() S3CredentialOutput
	ToS3CredentialOutputWithContext(ctx context.Context) S3CredentialOutput
}

func (*S3Credential) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Credential)(nil)).Elem()
}

func (i *S3Credential) ToS3CredentialOutput() S3CredentialOutput {
	return i.ToS3CredentialOutputWithContext(context.Background())
}

func (i *S3Credential) ToS3CredentialOutputWithContext(ctx context.Context) S3CredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CredentialOutput)
}

// S3CredentialArrayInput is an input type that accepts S3CredentialArray and S3CredentialArrayOutput values.
// You can construct a concrete instance of `S3CredentialArrayInput` via:
//
//	S3CredentialArray{ S3CredentialArgs{...} }
type S3CredentialArrayInput interface {
	pulumi.Input

	ToS3CredentialArrayOutput() S3CredentialArrayOutput
	ToS3CredentialArrayOutputWithContext(context.Context) S3CredentialArrayOutput
}

type S3CredentialArray []S3CredentialInput

func (S3CredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Credential)(nil)).Elem()
}

func (i S3CredentialArray) ToS3CredentialArrayOutput() S3CredentialArrayOutput {
	return i.ToS3CredentialArrayOutputWithContext(context.Background())
}

func (i S3CredentialArray) ToS3CredentialArrayOutputWithContext(ctx context.Context) S3CredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CredentialArrayOutput)
}

// S3CredentialMapInput is an input type that accepts S3CredentialMap and S3CredentialMapOutput values.
// You can construct a concrete instance of `S3CredentialMapInput` via:
//
//	S3CredentialMap{ "key": S3CredentialArgs{...} }
type S3CredentialMapInput interface {
	pulumi.Input

	ToS3CredentialMapOutput() S3CredentialMapOutput
	ToS3CredentialMapOutputWithContext(context.Context) S3CredentialMapOutput
}

type S3CredentialMap map[string]S3CredentialInput

func (S3CredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Credential)(nil)).Elem()
}

func (i S3CredentialMap) ToS3CredentialMapOutput() S3CredentialMapOutput {
	return i.ToS3CredentialMapOutputWithContext(context.Background())
}

func (i S3CredentialMap) ToS3CredentialMapOutputWithContext(ctx context.Context) S3CredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(S3CredentialMapOutput)
}

type S3CredentialOutput struct{ *pulumi.OutputState }

func (S3CredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**S3Credential)(nil)).Elem()
}

func (o S3CredentialOutput) ToS3CredentialOutput() S3CredentialOutput {
	return o
}

func (o S3CredentialOutput) ToS3CredentialOutputWithContext(ctx context.Context) S3CredentialOutput {
	return o
}

// the Access Key ID
func (o S3CredentialOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Credential) pulumi.StringOutput { return v.AccessKeyId }).(pulumi.StringOutput)
}

func (o S3CredentialOutput) InternalUserId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Credential) pulumi.StringOutput { return v.InternalUserId }).(pulumi.StringOutput)
}

// (Sensitive) the Secret Access Key
func (o S3CredentialOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Credential) pulumi.StringOutput { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// The ID of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o S3CredentialOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Credential) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The ID of a public cloud project's user.
func (o S3CredentialOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *S3Credential) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type S3CredentialArrayOutput struct{ *pulumi.OutputState }

func (S3CredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*S3Credential)(nil)).Elem()
}

func (o S3CredentialArrayOutput) ToS3CredentialArrayOutput() S3CredentialArrayOutput {
	return o
}

func (o S3CredentialArrayOutput) ToS3CredentialArrayOutputWithContext(ctx context.Context) S3CredentialArrayOutput {
	return o
}

func (o S3CredentialArrayOutput) Index(i pulumi.IntInput) S3CredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *S3Credential {
		return vs[0].([]*S3Credential)[vs[1].(int)]
	}).(S3CredentialOutput)
}

type S3CredentialMapOutput struct{ *pulumi.OutputState }

func (S3CredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*S3Credential)(nil)).Elem()
}

func (o S3CredentialMapOutput) ToS3CredentialMapOutput() S3CredentialMapOutput {
	return o
}

func (o S3CredentialMapOutput) ToS3CredentialMapOutputWithContext(ctx context.Context) S3CredentialMapOutput {
	return o
}

func (o S3CredentialMapOutput) MapIndex(k pulumi.StringInput) S3CredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *S3Credential {
		return vs[0].(map[string]*S3Credential)[vs[1].(string)]
	}).(S3CredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*S3CredentialInput)(nil)).Elem(), &S3Credential{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CredentialArrayInput)(nil)).Elem(), S3CredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*S3CredentialMapInput)(nil)).Elem(), S3CredentialMap{})
	pulumi.RegisterOutputType(S3CredentialOutput{})
	pulumi.RegisterOutputType(S3CredentialArrayOutput{})
	pulumi.RegisterOutputType(S3CredentialMapOutput{})
}
