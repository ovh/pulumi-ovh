// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create and manage snapshots for an instance in a public cloud project.
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudproject.NewInstanceSnapshot(ctx, "snapshot", &cloudproject.InstanceSnapshotArgs{
//				InstanceId:  pulumi.String("<instance ID>"),
//				ServiceName: pulumi.String("<public cloud project ID>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type InstanceSnapshot struct {
	pulumi.CustomResourceState

	// Image creation date
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// Image usable only for this type of flavor if not null
	FlavorType pulumi.StringOutput `pulumi:"flavorType"`
	// Instance ID
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Minimum disks required to use image
	MinDisk pulumi.Float64Output `pulumi:"minDisk"`
	// Minimum RAM required to use image
	MinRam pulumi.Float64Output `pulumi:"minRam"`
	// Snapshot name
	Name pulumi.StringOutput `pulumi:"name"`
	// Order plan code
	PlanCode pulumi.StringOutput `pulumi:"planCode"`
	// Image region
	Region pulumi.StringOutput `pulumi:"region"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Image size (in GiB)
	Size pulumi.Float64Output `pulumi:"size"`
	// Image status
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags about the image
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Image type
	Type pulumi.StringOutput `pulumi:"type"`
	// User to connect with
	User pulumi.StringOutput `pulumi:"user"`
	// Image visibility
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewInstanceSnapshot registers a new resource with the given unique name, arguments, and options.
func NewInstanceSnapshot(ctx *pulumi.Context,
	name string, args *InstanceSnapshotArgs, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceSnapshot
	err := ctx.RegisterResource("ovh:CloudProject/instanceSnapshot:InstanceSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceSnapshot gets an existing InstanceSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceSnapshotState, opts ...pulumi.ResourceOption) (*InstanceSnapshot, error) {
	var resource InstanceSnapshot
	err := ctx.ReadResource("ovh:CloudProject/instanceSnapshot:InstanceSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceSnapshot resources.
type instanceSnapshotState struct {
	// Image creation date
	CreationDate *string `pulumi:"creationDate"`
	// Image usable only for this type of flavor if not null
	FlavorType *string `pulumi:"flavorType"`
	// Instance ID
	InstanceId *string `pulumi:"instanceId"`
	// Minimum disks required to use image
	MinDisk *float64 `pulumi:"minDisk"`
	// Minimum RAM required to use image
	MinRam *float64 `pulumi:"minRam"`
	// Snapshot name
	Name *string `pulumi:"name"`
	// Order plan code
	PlanCode *string `pulumi:"planCode"`
	// Image region
	Region *string `pulumi:"region"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Image size (in GiB)
	Size *float64 `pulumi:"size"`
	// Image status
	Status *string `pulumi:"status"`
	// Tags about the image
	Tags []string `pulumi:"tags"`
	// Image type
	Type *string `pulumi:"type"`
	// User to connect with
	User *string `pulumi:"user"`
	// Image visibility
	Visibility *string `pulumi:"visibility"`
}

type InstanceSnapshotState struct {
	// Image creation date
	CreationDate pulumi.StringPtrInput
	// Image usable only for this type of flavor if not null
	FlavorType pulumi.StringPtrInput
	// Instance ID
	InstanceId pulumi.StringPtrInput
	// Minimum disks required to use image
	MinDisk pulumi.Float64PtrInput
	// Minimum RAM required to use image
	MinRam pulumi.Float64PtrInput
	// Snapshot name
	Name pulumi.StringPtrInput
	// Order plan code
	PlanCode pulumi.StringPtrInput
	// Image region
	Region pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// Image size (in GiB)
	Size pulumi.Float64PtrInput
	// Image status
	Status pulumi.StringPtrInput
	// Tags about the image
	Tags pulumi.StringArrayInput
	// Image type
	Type pulumi.StringPtrInput
	// User to connect with
	User pulumi.StringPtrInput
	// Image visibility
	Visibility pulumi.StringPtrInput
}

func (InstanceSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotState)(nil)).Elem()
}

type instanceSnapshotArgs struct {
	// Instance ID
	InstanceId string `pulumi:"instanceId"`
	// Snapshot name
	Name *string `pulumi:"name"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a InstanceSnapshot resource.
type InstanceSnapshotArgs struct {
	// Instance ID
	InstanceId pulumi.StringInput
	// Snapshot name
	Name pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringInput
}

func (InstanceSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceSnapshotArgs)(nil)).Elem()
}

type InstanceSnapshotInput interface {
	pulumi.Input

	ToInstanceSnapshotOutput() InstanceSnapshotOutput
	ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput
}

func (*InstanceSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return i.ToInstanceSnapshotOutputWithContext(context.Background())
}

func (i *InstanceSnapshot) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotOutput)
}

// InstanceSnapshotArrayInput is an input type that accepts InstanceSnapshotArray and InstanceSnapshotArrayOutput values.
// You can construct a concrete instance of `InstanceSnapshotArrayInput` via:
//
//	InstanceSnapshotArray{ InstanceSnapshotArgs{...} }
type InstanceSnapshotArrayInput interface {
	pulumi.Input

	ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput
	ToInstanceSnapshotArrayOutputWithContext(context.Context) InstanceSnapshotArrayOutput
}

type InstanceSnapshotArray []InstanceSnapshotInput

func (InstanceSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSnapshot)(nil)).Elem()
}

func (i InstanceSnapshotArray) ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput {
	return i.ToInstanceSnapshotArrayOutputWithContext(context.Background())
}

func (i InstanceSnapshotArray) ToInstanceSnapshotArrayOutputWithContext(ctx context.Context) InstanceSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotArrayOutput)
}

// InstanceSnapshotMapInput is an input type that accepts InstanceSnapshotMap and InstanceSnapshotMapOutput values.
// You can construct a concrete instance of `InstanceSnapshotMapInput` via:
//
//	InstanceSnapshotMap{ "key": InstanceSnapshotArgs{...} }
type InstanceSnapshotMapInput interface {
	pulumi.Input

	ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput
	ToInstanceSnapshotMapOutputWithContext(context.Context) InstanceSnapshotMapOutput
}

type InstanceSnapshotMap map[string]InstanceSnapshotInput

func (InstanceSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSnapshot)(nil)).Elem()
}

func (i InstanceSnapshotMap) ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput {
	return i.ToInstanceSnapshotMapOutputWithContext(context.Background())
}

func (i InstanceSnapshotMap) ToInstanceSnapshotMapOutputWithContext(ctx context.Context) InstanceSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSnapshotMapOutput)
}

type InstanceSnapshotOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutput() InstanceSnapshotOutput {
	return o
}

func (o InstanceSnapshotOutput) ToInstanceSnapshotOutputWithContext(ctx context.Context) InstanceSnapshotOutput {
	return o
}

// Image creation date
func (o InstanceSnapshotOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// Image usable only for this type of flavor if not null
func (o InstanceSnapshotOutput) FlavorType() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.FlavorType }).(pulumi.StringOutput)
}

// Instance ID
func (o InstanceSnapshotOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Minimum disks required to use image
func (o InstanceSnapshotOutput) MinDisk() pulumi.Float64Output {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.Float64Output { return v.MinDisk }).(pulumi.Float64Output)
}

// Minimum RAM required to use image
func (o InstanceSnapshotOutput) MinRam() pulumi.Float64Output {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.Float64Output { return v.MinRam }).(pulumi.Float64Output)
}

// Snapshot name
func (o InstanceSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Order plan code
func (o InstanceSnapshotOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.PlanCode }).(pulumi.StringOutput)
}

// Image region
func (o InstanceSnapshotOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Service name
func (o InstanceSnapshotOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Image size (in GiB)
func (o InstanceSnapshotOutput) Size() pulumi.Float64Output {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.Float64Output { return v.Size }).(pulumi.Float64Output)
}

// Image status
func (o InstanceSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags about the image
func (o InstanceSnapshotOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Image type
func (o InstanceSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// User to connect with
func (o InstanceSnapshotOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

// Image visibility
func (o InstanceSnapshotOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *InstanceSnapshot) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type InstanceSnapshotArrayOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotArrayOutput) ToInstanceSnapshotArrayOutput() InstanceSnapshotArrayOutput {
	return o
}

func (o InstanceSnapshotArrayOutput) ToInstanceSnapshotArrayOutputWithContext(ctx context.Context) InstanceSnapshotArrayOutput {
	return o
}

func (o InstanceSnapshotArrayOutput) Index(i pulumi.IntInput) InstanceSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceSnapshot {
		return vs[0].([]*InstanceSnapshot)[vs[1].(int)]
	}).(InstanceSnapshotOutput)
}

type InstanceSnapshotMapOutput struct{ *pulumi.OutputState }

func (InstanceSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceSnapshot)(nil)).Elem()
}

func (o InstanceSnapshotMapOutput) ToInstanceSnapshotMapOutput() InstanceSnapshotMapOutput {
	return o
}

func (o InstanceSnapshotMapOutput) ToInstanceSnapshotMapOutputWithContext(ctx context.Context) InstanceSnapshotMapOutput {
	return o
}

func (o InstanceSnapshotMapOutput) MapIndex(k pulumi.StringInput) InstanceSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceSnapshot {
		return vs[0].(map[string]*InstanceSnapshot)[vs[1].(string)]
	}).(InstanceSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotInput)(nil)).Elem(), &InstanceSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotArrayInput)(nil)).Elem(), InstanceSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSnapshotMapInput)(nil)).Elem(), InstanceSnapshotMap{})
	pulumi.RegisterOutputType(InstanceSnapshotOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotArrayOutput{})
	pulumi.RegisterOutputType(InstanceSnapshotMapOutput{})
}
