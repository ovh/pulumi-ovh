// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get the details of a public cloud project loadbalancer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			lbLoadBalancer, err := cloudproject.GetLoadBalancer(ctx, &cloudproject.GetLoadBalancerArgs{
//				ServiceName: "XXXXXX",
//				RegionName:  "XXX",
//				Id:          "XXX",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("lb", lbLoadBalancer)
//			return nil
//		})
//	}
//
// ```
func LookupLoadBalancer(ctx *pulumi.Context, args *LookupLoadBalancerArgs, opts ...pulumi.InvokeOption) (*LookupLoadBalancerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadBalancerResult
	err := ctx.Invoke("ovh:CloudProject/getLoadBalancer:getLoadBalancer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerArgs struct {
	// ID of the loadbalancer
	Id string `pulumi:"id"`
	// Region of the loadbalancer.
	RegionName string `pulumi:"regionName"`
	// The ID of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResult struct {
	// Date of creation of the loadbalancer
	CreatedAt string `pulumi:"createdAt"`
	// ID of the flavor
	FlavorId string `pulumi:"flavorId"`
	// Information about the floating IP
	FloatingIp GetLoadBalancerFloatingIp `pulumi:"floatingIp"`
	// ID of the floating IP
	Id string `pulumi:"id"`
	// Name of the loadbalancer
	Name string `pulumi:"name"`
	// Operating status of the loadbalancer
	OperatingStatus string `pulumi:"operatingStatus"`
	// Provisioning status of the loadbalancer
	ProvisioningStatus string `pulumi:"provisioningStatus"`
	// Region of the loadbalancer
	RegionName string `pulumi:"regionName"`
	// ID of the public cloud project
	ServiceName string `pulumi:"serviceName"`
	// Last update date of the loadbalancer
	UpdatedAt string `pulumi:"updatedAt"`
	// IP address of the Virtual IP
	VipAddress string `pulumi:"vipAddress"`
	// Openstack ID of the network for the Virtual IP
	VipNetworkId string `pulumi:"vipNetworkId"`
	// ID of the subnet for the Virtual IP
	VipSubnetId string `pulumi:"vipSubnetId"`
}

func LookupLoadBalancerOutput(ctx *pulumi.Context, args LookupLoadBalancerOutputArgs, opts ...pulumi.InvokeOption) LookupLoadBalancerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadBalancerResultOutput, error) {
			args := v.(LookupLoadBalancerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ovh:CloudProject/getLoadBalancer:getLoadBalancer", args, LookupLoadBalancerResultOutput{}, options).(LookupLoadBalancerResultOutput), nil
		}).(LookupLoadBalancerResultOutput)
}

// A collection of arguments for invoking getLoadBalancer.
type LookupLoadBalancerOutputArgs struct {
	// ID of the loadbalancer
	Id pulumi.StringInput `pulumi:"id"`
	// Region of the loadbalancer.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The ID of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (LookupLoadBalancerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerArgs)(nil)).Elem()
}

// A collection of values returned by getLoadBalancer.
type LookupLoadBalancerResultOutput struct{ *pulumi.OutputState }

func (LookupLoadBalancerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadBalancerResult)(nil)).Elem()
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutput() LookupLoadBalancerResultOutput {
	return o
}

func (o LookupLoadBalancerResultOutput) ToLookupLoadBalancerResultOutputWithContext(ctx context.Context) LookupLoadBalancerResultOutput {
	return o
}

// Date of creation of the loadbalancer
func (o LookupLoadBalancerResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the flavor
func (o LookupLoadBalancerResultOutput) FlavorId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.FlavorId }).(pulumi.StringOutput)
}

// Information about the floating IP
func (o LookupLoadBalancerResultOutput) FloatingIp() GetLoadBalancerFloatingIpOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) GetLoadBalancerFloatingIp { return v.FloatingIp }).(GetLoadBalancerFloatingIpOutput)
}

// ID of the floating IP
func (o LookupLoadBalancerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the loadbalancer
func (o LookupLoadBalancerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.Name }).(pulumi.StringOutput)
}

// Operating status of the loadbalancer
func (o LookupLoadBalancerResultOutput) OperatingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.OperatingStatus }).(pulumi.StringOutput)
}

// Provisioning status of the loadbalancer
func (o LookupLoadBalancerResultOutput) ProvisioningStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.ProvisioningStatus }).(pulumi.StringOutput)
}

// Region of the loadbalancer
func (o LookupLoadBalancerResultOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.RegionName }).(pulumi.StringOutput)
}

// ID of the public cloud project
func (o LookupLoadBalancerResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

// Last update date of the loadbalancer
func (o LookupLoadBalancerResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// IP address of the Virtual IP
func (o LookupLoadBalancerResultOutput) VipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.VipAddress }).(pulumi.StringOutput)
}

// Openstack ID of the network for the Virtual IP
func (o LookupLoadBalancerResultOutput) VipNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.VipNetworkId }).(pulumi.StringOutput)
}

// ID of the subnet for the Virtual IP
func (o LookupLoadBalancerResultOutput) VipSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadBalancerResult) string { return v.VipSubnetId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadBalancerResultOutput{})
}
