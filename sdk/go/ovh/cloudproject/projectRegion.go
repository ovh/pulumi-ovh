// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudproject

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/cloudproject"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloudproject.NewProjectRegion(ctx, "region", &cloudproject.ProjectRegionArgs{
//				ServiceName: pulumi.String("<public cloud project ID>"),
//				Region:      pulumi.String("EU-WEST-LZ-LUX-A"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ProjectRegion struct {
	pulumi.CustomResourceState

	// Availability zones of the region
	AvailabilityZones pulumi.StringArrayOutput `pulumi:"availabilityZones"`
	// Region continent code
	ContinentCode pulumi.StringOutput `pulumi:"continentCode"`
	// Region country code
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// Location of the datacenter where the region is
	DatacenterLocation pulumi.StringOutput `pulumi:"datacenterLocation"`
	// Allowed countries for failover ip
	IpCountries pulumi.StringArrayOutput `pulumi:"ipCountries"`
	// Region name
	Name pulumi.StringOutput `pulumi:"name"`
	// Region to add to your project
	Region pulumi.StringOutput `pulumi:"region"`
	// Region name
	RegionName pulumi.StringOutput `pulumi:"regionName"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Details about components status
	Services ProjectRegionServiceArrayOutput `pulumi:"services"`
	// Openstack region status
	Status pulumi.StringOutput `pulumi:"status"`
	// Region type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewProjectRegion registers a new resource with the given unique name, arguments, and options.
func NewProjectRegion(ctx *pulumi.Context,
	name string, args *ProjectRegionArgs, opts ...pulumi.ResourceOption) (*ProjectRegion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectRegion
	err := ctx.RegisterResource("ovh:CloudProject/projectRegion:ProjectRegion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectRegion gets an existing ProjectRegion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectRegion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectRegionState, opts ...pulumi.ResourceOption) (*ProjectRegion, error) {
	var resource ProjectRegion
	err := ctx.ReadResource("ovh:CloudProject/projectRegion:ProjectRegion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectRegion resources.
type projectRegionState struct {
	// Availability zones of the region
	AvailabilityZones []string `pulumi:"availabilityZones"`
	// Region continent code
	ContinentCode *string `pulumi:"continentCode"`
	// Region country code
	CountryCode *string `pulumi:"countryCode"`
	// Location of the datacenter where the region is
	DatacenterLocation *string `pulumi:"datacenterLocation"`
	// Allowed countries for failover ip
	IpCountries []string `pulumi:"ipCountries"`
	// Region name
	Name *string `pulumi:"name"`
	// Region to add to your project
	Region *string `pulumi:"region"`
	// Region name
	RegionName *string `pulumi:"regionName"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Details about components status
	Services []ProjectRegionService `pulumi:"services"`
	// Openstack region status
	Status *string `pulumi:"status"`
	// Region type
	Type *string `pulumi:"type"`
}

type ProjectRegionState struct {
	// Availability zones of the region
	AvailabilityZones pulumi.StringArrayInput
	// Region continent code
	ContinentCode pulumi.StringPtrInput
	// Region country code
	CountryCode pulumi.StringPtrInput
	// Location of the datacenter where the region is
	DatacenterLocation pulumi.StringPtrInput
	// Allowed countries for failover ip
	IpCountries pulumi.StringArrayInput
	// Region name
	Name pulumi.StringPtrInput
	// Region to add to your project
	Region pulumi.StringPtrInput
	// Region name
	RegionName pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// Details about components status
	Services ProjectRegionServiceArrayInput
	// Openstack region status
	Status pulumi.StringPtrInput
	// Region type
	Type pulumi.StringPtrInput
}

func (ProjectRegionState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRegionState)(nil)).Elem()
}

type projectRegionArgs struct {
	// Region to add to your project
	Region string `pulumi:"region"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a ProjectRegion resource.
type ProjectRegionArgs struct {
	// Region to add to your project
	Region pulumi.StringInput
	// Service name
	ServiceName pulumi.StringInput
}

func (ProjectRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectRegionArgs)(nil)).Elem()
}

type ProjectRegionInput interface {
	pulumi.Input

	ToProjectRegionOutput() ProjectRegionOutput
	ToProjectRegionOutputWithContext(ctx context.Context) ProjectRegionOutput
}

func (*ProjectRegion) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRegion)(nil)).Elem()
}

func (i *ProjectRegion) ToProjectRegionOutput() ProjectRegionOutput {
	return i.ToProjectRegionOutputWithContext(context.Background())
}

func (i *ProjectRegion) ToProjectRegionOutputWithContext(ctx context.Context) ProjectRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegionOutput)
}

// ProjectRegionArrayInput is an input type that accepts ProjectRegionArray and ProjectRegionArrayOutput values.
// You can construct a concrete instance of `ProjectRegionArrayInput` via:
//
//	ProjectRegionArray{ ProjectRegionArgs{...} }
type ProjectRegionArrayInput interface {
	pulumi.Input

	ToProjectRegionArrayOutput() ProjectRegionArrayOutput
	ToProjectRegionArrayOutputWithContext(context.Context) ProjectRegionArrayOutput
}

type ProjectRegionArray []ProjectRegionInput

func (ProjectRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRegion)(nil)).Elem()
}

func (i ProjectRegionArray) ToProjectRegionArrayOutput() ProjectRegionArrayOutput {
	return i.ToProjectRegionArrayOutputWithContext(context.Background())
}

func (i ProjectRegionArray) ToProjectRegionArrayOutputWithContext(ctx context.Context) ProjectRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegionArrayOutput)
}

// ProjectRegionMapInput is an input type that accepts ProjectRegionMap and ProjectRegionMapOutput values.
// You can construct a concrete instance of `ProjectRegionMapInput` via:
//
//	ProjectRegionMap{ "key": ProjectRegionArgs{...} }
type ProjectRegionMapInput interface {
	pulumi.Input

	ToProjectRegionMapOutput() ProjectRegionMapOutput
	ToProjectRegionMapOutputWithContext(context.Context) ProjectRegionMapOutput
}

type ProjectRegionMap map[string]ProjectRegionInput

func (ProjectRegionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRegion)(nil)).Elem()
}

func (i ProjectRegionMap) ToProjectRegionMapOutput() ProjectRegionMapOutput {
	return i.ToProjectRegionMapOutputWithContext(context.Background())
}

func (i ProjectRegionMap) ToProjectRegionMapOutputWithContext(ctx context.Context) ProjectRegionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectRegionMapOutput)
}

type ProjectRegionOutput struct{ *pulumi.OutputState }

func (ProjectRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectRegion)(nil)).Elem()
}

func (o ProjectRegionOutput) ToProjectRegionOutput() ProjectRegionOutput {
	return o
}

func (o ProjectRegionOutput) ToProjectRegionOutputWithContext(ctx context.Context) ProjectRegionOutput {
	return o
}

// Availability zones of the region
func (o ProjectRegionOutput) AvailabilityZones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringArrayOutput { return v.AvailabilityZones }).(pulumi.StringArrayOutput)
}

// Region continent code
func (o ProjectRegionOutput) ContinentCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.ContinentCode }).(pulumi.StringOutput)
}

// Region country code
func (o ProjectRegionOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.CountryCode }).(pulumi.StringOutput)
}

// Location of the datacenter where the region is
func (o ProjectRegionOutput) DatacenterLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.DatacenterLocation }).(pulumi.StringOutput)
}

// Allowed countries for failover ip
func (o ProjectRegionOutput) IpCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringArrayOutput { return v.IpCountries }).(pulumi.StringArrayOutput)
}

// Region name
func (o ProjectRegionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region to add to your project
func (o ProjectRegionOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Region name
func (o ProjectRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.RegionName }).(pulumi.StringOutput)
}

// Service name
func (o ProjectRegionOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Details about components status
func (o ProjectRegionOutput) Services() ProjectRegionServiceArrayOutput {
	return o.ApplyT(func(v *ProjectRegion) ProjectRegionServiceArrayOutput { return v.Services }).(ProjectRegionServiceArrayOutput)
}

// Openstack region status
func (o ProjectRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Region type
func (o ProjectRegionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectRegion) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ProjectRegionArrayOutput struct{ *pulumi.OutputState }

func (ProjectRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectRegion)(nil)).Elem()
}

func (o ProjectRegionArrayOutput) ToProjectRegionArrayOutput() ProjectRegionArrayOutput {
	return o
}

func (o ProjectRegionArrayOutput) ToProjectRegionArrayOutputWithContext(ctx context.Context) ProjectRegionArrayOutput {
	return o
}

func (o ProjectRegionArrayOutput) Index(i pulumi.IntInput) ProjectRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectRegion {
		return vs[0].([]*ProjectRegion)[vs[1].(int)]
	}).(ProjectRegionOutput)
}

type ProjectRegionMapOutput struct{ *pulumi.OutputState }

func (ProjectRegionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectRegion)(nil)).Elem()
}

func (o ProjectRegionMapOutput) ToProjectRegionMapOutput() ProjectRegionMapOutput {
	return o
}

func (o ProjectRegionMapOutput) ToProjectRegionMapOutputWithContext(ctx context.Context) ProjectRegionMapOutput {
	return o
}

func (o ProjectRegionMapOutput) MapIndex(k pulumi.StringInput) ProjectRegionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectRegion {
		return vs[0].(map[string]*ProjectRegion)[vs[1].(string)]
	}).(ProjectRegionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRegionInput)(nil)).Elem(), &ProjectRegion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRegionArrayInput)(nil)).Elem(), ProjectRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectRegionMapInput)(nil)).Elem(), ProjectRegionMap{})
	pulumi.RegisterOutputType(ProjectRegionOutput{})
	pulumi.RegisterOutputType(ProjectRegionArrayOutput{})
	pulumi.RegisterOutputType(ProjectRegionMapOutput{})
}
