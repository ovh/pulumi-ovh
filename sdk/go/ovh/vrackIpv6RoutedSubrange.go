// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Route a subrange of your IP v6 block into your vrack.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ovh.NewVrackIpv6RoutedSubrange(ctx, "vrack_routed_subrange", &ovh.VrackIpv6RoutedSubrangeArgs{
//				ServiceName:    pulumi.String("<vRack service name>"),
//				Block:          pulumi.String("<ipv6 block>"),
//				RoutedSubrange: pulumi.String("<routed subrange>"),
//				Nexthop:        pulumi.String("<nexthop>"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Routing of an subrange into your vRack can be imported using the `service_name` (vRack identifier), the `block` (IPv6 block) and the `routed_subrange (IPv6 block)`, separated by "," E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange myroutedsubrange "<service_name>,<block>,<routed_subrange>"
// ```
type VrackIpv6RoutedSubrange struct {
	pulumi.CustomResourceState

	// Your IPv6 block.
	Block pulumi.StringOutput `pulumi:"block"`
	// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop pulumi.StringOutput `pulumi:"nexthop"`
	// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange pulumi.StringOutput `pulumi:"routedSubrange"`
	// The internal name of your vrack
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
}

// NewVrackIpv6RoutedSubrange registers a new resource with the given unique name, arguments, and options.
func NewVrackIpv6RoutedSubrange(ctx *pulumi.Context,
	name string, args *VrackIpv6RoutedSubrangeArgs, opts ...pulumi.ResourceOption) (*VrackIpv6RoutedSubrange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Block == nil {
		return nil, errors.New("invalid value for required argument 'Block'")
	}
	if args.Nexthop == nil {
		return nil, errors.New("invalid value for required argument 'Nexthop'")
	}
	if args.RoutedSubrange == nil {
		return nil, errors.New("invalid value for required argument 'RoutedSubrange'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VrackIpv6RoutedSubrange
	err := ctx.RegisterResource("ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrackIpv6RoutedSubrange gets an existing VrackIpv6RoutedSubrange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrackIpv6RoutedSubrange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrackIpv6RoutedSubrangeState, opts ...pulumi.ResourceOption) (*VrackIpv6RoutedSubrange, error) {
	var resource VrackIpv6RoutedSubrange
	err := ctx.ReadResource("ovh:index/vrackIpv6RoutedSubrange:VrackIpv6RoutedSubrange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VrackIpv6RoutedSubrange resources.
type vrackIpv6RoutedSubrangeState struct {
	// Your IPv6 block.
	Block *string `pulumi:"block"`
	// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop *string `pulumi:"nexthop"`
	// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange *string `pulumi:"routedSubrange"`
	// The internal name of your vrack
	ServiceName *string `pulumi:"serviceName"`
}

type VrackIpv6RoutedSubrangeState struct {
	// Your IPv6 block.
	Block pulumi.StringPtrInput
	// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop pulumi.StringPtrInput
	// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange pulumi.StringPtrInput
	// The internal name of your vrack
	ServiceName pulumi.StringPtrInput
}

func (VrackIpv6RoutedSubrangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpv6RoutedSubrangeState)(nil)).Elem()
}

type vrackIpv6RoutedSubrangeArgs struct {
	// Your IPv6 block.
	Block string `pulumi:"block"`
	// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop string `pulumi:"nexthop"`
	// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange string `pulumi:"routedSubrange"`
	// The internal name of your vrack
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a VrackIpv6RoutedSubrange resource.
type VrackIpv6RoutedSubrangeArgs struct {
	// Your IPv6 block.
	Block pulumi.StringInput
	// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
	Nexthop pulumi.StringInput
	// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
	RoutedSubrange pulumi.StringInput
	// The internal name of your vrack
	ServiceName pulumi.StringInput
}

func (VrackIpv6RoutedSubrangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrackIpv6RoutedSubrangeArgs)(nil)).Elem()
}

type VrackIpv6RoutedSubrangeInput interface {
	pulumi.Input

	ToVrackIpv6RoutedSubrangeOutput() VrackIpv6RoutedSubrangeOutput
	ToVrackIpv6RoutedSubrangeOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeOutput
}

func (*VrackIpv6RoutedSubrange) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (i *VrackIpv6RoutedSubrange) ToVrackIpv6RoutedSubrangeOutput() VrackIpv6RoutedSubrangeOutput {
	return i.ToVrackIpv6RoutedSubrangeOutputWithContext(context.Background())
}

func (i *VrackIpv6RoutedSubrange) ToVrackIpv6RoutedSubrangeOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpv6RoutedSubrangeOutput)
}

// VrackIpv6RoutedSubrangeArrayInput is an input type that accepts VrackIpv6RoutedSubrangeArray and VrackIpv6RoutedSubrangeArrayOutput values.
// You can construct a concrete instance of `VrackIpv6RoutedSubrangeArrayInput` via:
//
//	VrackIpv6RoutedSubrangeArray{ VrackIpv6RoutedSubrangeArgs{...} }
type VrackIpv6RoutedSubrangeArrayInput interface {
	pulumi.Input

	ToVrackIpv6RoutedSubrangeArrayOutput() VrackIpv6RoutedSubrangeArrayOutput
	ToVrackIpv6RoutedSubrangeArrayOutputWithContext(context.Context) VrackIpv6RoutedSubrangeArrayOutput
}

type VrackIpv6RoutedSubrangeArray []VrackIpv6RoutedSubrangeInput

func (VrackIpv6RoutedSubrangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (i VrackIpv6RoutedSubrangeArray) ToVrackIpv6RoutedSubrangeArrayOutput() VrackIpv6RoutedSubrangeArrayOutput {
	return i.ToVrackIpv6RoutedSubrangeArrayOutputWithContext(context.Background())
}

func (i VrackIpv6RoutedSubrangeArray) ToVrackIpv6RoutedSubrangeArrayOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpv6RoutedSubrangeArrayOutput)
}

// VrackIpv6RoutedSubrangeMapInput is an input type that accepts VrackIpv6RoutedSubrangeMap and VrackIpv6RoutedSubrangeMapOutput values.
// You can construct a concrete instance of `VrackIpv6RoutedSubrangeMapInput` via:
//
//	VrackIpv6RoutedSubrangeMap{ "key": VrackIpv6RoutedSubrangeArgs{...} }
type VrackIpv6RoutedSubrangeMapInput interface {
	pulumi.Input

	ToVrackIpv6RoutedSubrangeMapOutput() VrackIpv6RoutedSubrangeMapOutput
	ToVrackIpv6RoutedSubrangeMapOutputWithContext(context.Context) VrackIpv6RoutedSubrangeMapOutput
}

type VrackIpv6RoutedSubrangeMap map[string]VrackIpv6RoutedSubrangeInput

func (VrackIpv6RoutedSubrangeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (i VrackIpv6RoutedSubrangeMap) ToVrackIpv6RoutedSubrangeMapOutput() VrackIpv6RoutedSubrangeMapOutput {
	return i.ToVrackIpv6RoutedSubrangeMapOutputWithContext(context.Background())
}

func (i VrackIpv6RoutedSubrangeMap) ToVrackIpv6RoutedSubrangeMapOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrackIpv6RoutedSubrangeMapOutput)
}

type VrackIpv6RoutedSubrangeOutput struct{ *pulumi.OutputState }

func (VrackIpv6RoutedSubrangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (o VrackIpv6RoutedSubrangeOutput) ToVrackIpv6RoutedSubrangeOutput() VrackIpv6RoutedSubrangeOutput {
	return o
}

func (o VrackIpv6RoutedSubrangeOutput) ToVrackIpv6RoutedSubrangeOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeOutput {
	return o
}

// Your IPv6 block.
func (o VrackIpv6RoutedSubrangeOutput) Block() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIpv6RoutedSubrange) pulumi.StringOutput { return v.Block }).(pulumi.StringOutput)
}

// Next-hop IPv6 address (e.g., 2001:41d0:1:1994::1)
func (o VrackIpv6RoutedSubrangeOutput) Nexthop() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIpv6RoutedSubrange) pulumi.StringOutput { return v.Nexthop }).(pulumi.StringOutput)
}

// The subrange to route into your vRack, IPv6 CIDR notation (e.g., 2001:41d0::/128)
func (o VrackIpv6RoutedSubrangeOutput) RoutedSubrange() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIpv6RoutedSubrange) pulumi.StringOutput { return v.RoutedSubrange }).(pulumi.StringOutput)
}

// The internal name of your vrack
func (o VrackIpv6RoutedSubrangeOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *VrackIpv6RoutedSubrange) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type VrackIpv6RoutedSubrangeArrayOutput struct{ *pulumi.OutputState }

func (VrackIpv6RoutedSubrangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (o VrackIpv6RoutedSubrangeArrayOutput) ToVrackIpv6RoutedSubrangeArrayOutput() VrackIpv6RoutedSubrangeArrayOutput {
	return o
}

func (o VrackIpv6RoutedSubrangeArrayOutput) ToVrackIpv6RoutedSubrangeArrayOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeArrayOutput {
	return o
}

func (o VrackIpv6RoutedSubrangeArrayOutput) Index(i pulumi.IntInput) VrackIpv6RoutedSubrangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VrackIpv6RoutedSubrange {
		return vs[0].([]*VrackIpv6RoutedSubrange)[vs[1].(int)]
	}).(VrackIpv6RoutedSubrangeOutput)
}

type VrackIpv6RoutedSubrangeMapOutput struct{ *pulumi.OutputState }

func (VrackIpv6RoutedSubrangeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VrackIpv6RoutedSubrange)(nil)).Elem()
}

func (o VrackIpv6RoutedSubrangeMapOutput) ToVrackIpv6RoutedSubrangeMapOutput() VrackIpv6RoutedSubrangeMapOutput {
	return o
}

func (o VrackIpv6RoutedSubrangeMapOutput) ToVrackIpv6RoutedSubrangeMapOutputWithContext(ctx context.Context) VrackIpv6RoutedSubrangeMapOutput {
	return o
}

func (o VrackIpv6RoutedSubrangeMapOutput) MapIndex(k pulumi.StringInput) VrackIpv6RoutedSubrangeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VrackIpv6RoutedSubrange {
		return vs[0].(map[string]*VrackIpv6RoutedSubrange)[vs[1].(string)]
	}).(VrackIpv6RoutedSubrangeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrackIpv6RoutedSubrangeInput)(nil)).Elem(), &VrackIpv6RoutedSubrange{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackIpv6RoutedSubrangeArrayInput)(nil)).Elem(), VrackIpv6RoutedSubrangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrackIpv6RoutedSubrangeMapInput)(nil)).Elem(), VrackIpv6RoutedSubrangeMap{})
	pulumi.RegisterOutputType(VrackIpv6RoutedSubrangeOutput{})
	pulumi.RegisterOutputType(VrackIpv6RoutedSubrangeArrayOutput{})
	pulumi.RegisterOutputType(VrackIpv6RoutedSubrangeMapOutput{})
}
