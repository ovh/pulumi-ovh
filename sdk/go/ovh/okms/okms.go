// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package okms

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/okms"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := okms.NewOkms(ctx, "newKms", &okms.OkmsArgs{
//				DisplayName:   pulumi.String("terraformed KMS"),
//				OvhSubsidiary: pulumi.String("FR"),
//				Region:        pulumi.String("eu-west-rbx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Okms struct {
	pulumi.CustomResourceState

	// (String) Resource display name
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Attributes) IAM resource metadata (see below for nested schema)
	Iam OkmsIamOutput `pulumi:"iam"`
	// (String) KMS kmip API endpoint
	KmipEndpoint pulumi.StringOutput `pulumi:"kmipEndpoint"`
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringOutput `pulumi:"ovhSubsidiary"`
	// (String) KMS public CA (Certificate Authority)
	PublicCa pulumi.StringOutput `pulumi:"publicCa"`
	// KMS region
	Region pulumi.StringOutput `pulumi:"region"`
	// (String) KMS rest API endpoint
	RestEndpoint pulumi.StringOutput `pulumi:"restEndpoint"`
	// (String) KMS rest API swagger UI
	SwaggerEndpoint pulumi.StringOutput `pulumi:"swaggerEndpoint"`
}

// NewOkms registers a new resource with the given unique name, arguments, and options.
func NewOkms(ctx *pulumi.Context,
	name string, args *OkmsArgs, opts ...pulumi.ResourceOption) (*Okms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OvhSubsidiary == nil {
		return nil, errors.New("invalid value for required argument 'OvhSubsidiary'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Okms
	err := ctx.RegisterResource("ovh:Okms/okms:Okms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOkms gets an existing Okms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOkms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OkmsState, opts ...pulumi.ResourceOption) (*Okms, error) {
	var resource Okms
	err := ctx.ReadResource("ovh:Okms/okms:Okms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Okms resources.
type okmsState struct {
	// (String) Resource display name
	DisplayName *string `pulumi:"displayName"`
	// (Attributes) IAM resource metadata (see below for nested schema)
	Iam *OkmsIam `pulumi:"iam"`
	// (String) KMS kmip API endpoint
	KmipEndpoint *string `pulumi:"kmipEndpoint"`
	// OVH subsidiaries
	OvhSubsidiary *string `pulumi:"ovhSubsidiary"`
	// (String) KMS public CA (Certificate Authority)
	PublicCa *string `pulumi:"publicCa"`
	// KMS region
	Region *string `pulumi:"region"`
	// (String) KMS rest API endpoint
	RestEndpoint *string `pulumi:"restEndpoint"`
	// (String) KMS rest API swagger UI
	SwaggerEndpoint *string `pulumi:"swaggerEndpoint"`
}

type OkmsState struct {
	// (String) Resource display name
	DisplayName pulumi.StringPtrInput
	// (Attributes) IAM resource metadata (see below for nested schema)
	Iam OkmsIamPtrInput
	// (String) KMS kmip API endpoint
	KmipEndpoint pulumi.StringPtrInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrInput
	// (String) KMS public CA (Certificate Authority)
	PublicCa pulumi.StringPtrInput
	// KMS region
	Region pulumi.StringPtrInput
	// (String) KMS rest API endpoint
	RestEndpoint pulumi.StringPtrInput
	// (String) KMS rest API swagger UI
	SwaggerEndpoint pulumi.StringPtrInput
}

func (OkmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*okmsState)(nil)).Elem()
}

type okmsArgs struct {
	// (String) Resource display name
	DisplayName *string `pulumi:"displayName"`
	// OVH subsidiaries
	OvhSubsidiary string `pulumi:"ovhSubsidiary"`
	// KMS region
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a Okms resource.
type OkmsArgs struct {
	// (String) Resource display name
	DisplayName pulumi.StringPtrInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringInput
	// KMS region
	Region pulumi.StringInput
}

func (OkmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*okmsArgs)(nil)).Elem()
}

type OkmsInput interface {
	pulumi.Input

	ToOkmsOutput() OkmsOutput
	ToOkmsOutputWithContext(ctx context.Context) OkmsOutput
}

func (*Okms) ElementType() reflect.Type {
	return reflect.TypeOf((**Okms)(nil)).Elem()
}

func (i *Okms) ToOkmsOutput() OkmsOutput {
	return i.ToOkmsOutputWithContext(context.Background())
}

func (i *Okms) ToOkmsOutputWithContext(ctx context.Context) OkmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OkmsOutput)
}

// OkmsArrayInput is an input type that accepts OkmsArray and OkmsArrayOutput values.
// You can construct a concrete instance of `OkmsArrayInput` via:
//
//	OkmsArray{ OkmsArgs{...} }
type OkmsArrayInput interface {
	pulumi.Input

	ToOkmsArrayOutput() OkmsArrayOutput
	ToOkmsArrayOutputWithContext(context.Context) OkmsArrayOutput
}

type OkmsArray []OkmsInput

func (OkmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Okms)(nil)).Elem()
}

func (i OkmsArray) ToOkmsArrayOutput() OkmsArrayOutput {
	return i.ToOkmsArrayOutputWithContext(context.Background())
}

func (i OkmsArray) ToOkmsArrayOutputWithContext(ctx context.Context) OkmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OkmsArrayOutput)
}

// OkmsMapInput is an input type that accepts OkmsMap and OkmsMapOutput values.
// You can construct a concrete instance of `OkmsMapInput` via:
//
//	OkmsMap{ "key": OkmsArgs{...} }
type OkmsMapInput interface {
	pulumi.Input

	ToOkmsMapOutput() OkmsMapOutput
	ToOkmsMapOutputWithContext(context.Context) OkmsMapOutput
}

type OkmsMap map[string]OkmsInput

func (OkmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Okms)(nil)).Elem()
}

func (i OkmsMap) ToOkmsMapOutput() OkmsMapOutput {
	return i.ToOkmsMapOutputWithContext(context.Background())
}

func (i OkmsMap) ToOkmsMapOutputWithContext(ctx context.Context) OkmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OkmsMapOutput)
}

type OkmsOutput struct{ *pulumi.OutputState }

func (OkmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Okms)(nil)).Elem()
}

func (o OkmsOutput) ToOkmsOutput() OkmsOutput {
	return o
}

func (o OkmsOutput) ToOkmsOutputWithContext(ctx context.Context) OkmsOutput {
	return o
}

// (String) Resource display name
func (o OkmsOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// (Attributes) IAM resource metadata (see below for nested schema)
func (o OkmsOutput) Iam() OkmsIamOutput {
	return o.ApplyT(func(v *Okms) OkmsIamOutput { return v.Iam }).(OkmsIamOutput)
}

// (String) KMS kmip API endpoint
func (o OkmsOutput) KmipEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.KmipEndpoint }).(pulumi.StringOutput)
}

// OVH subsidiaries
func (o OkmsOutput) OvhSubsidiary() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.OvhSubsidiary }).(pulumi.StringOutput)
}

// (String) KMS public CA (Certificate Authority)
func (o OkmsOutput) PublicCa() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.PublicCa }).(pulumi.StringOutput)
}

// KMS region
func (o OkmsOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// (String) KMS rest API endpoint
func (o OkmsOutput) RestEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.RestEndpoint }).(pulumi.StringOutput)
}

// (String) KMS rest API swagger UI
func (o OkmsOutput) SwaggerEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Okms) pulumi.StringOutput { return v.SwaggerEndpoint }).(pulumi.StringOutput)
}

type OkmsArrayOutput struct{ *pulumi.OutputState }

func (OkmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Okms)(nil)).Elem()
}

func (o OkmsArrayOutput) ToOkmsArrayOutput() OkmsArrayOutput {
	return o
}

func (o OkmsArrayOutput) ToOkmsArrayOutputWithContext(ctx context.Context) OkmsArrayOutput {
	return o
}

func (o OkmsArrayOutput) Index(i pulumi.IntInput) OkmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Okms {
		return vs[0].([]*Okms)[vs[1].(int)]
	}).(OkmsOutput)
}

type OkmsMapOutput struct{ *pulumi.OutputState }

func (OkmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Okms)(nil)).Elem()
}

func (o OkmsMapOutput) ToOkmsMapOutput() OkmsMapOutput {
	return o
}

func (o OkmsMapOutput) ToOkmsMapOutputWithContext(ctx context.Context) OkmsMapOutput {
	return o
}

func (o OkmsMapOutput) MapIndex(k pulumi.StringInput) OkmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Okms {
		return vs[0].(map[string]*Okms)[vs[1].(string)]
	}).(OkmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OkmsInput)(nil)).Elem(), &Okms{})
	pulumi.RegisterInputType(reflect.TypeOf((*OkmsArrayInput)(nil)).Elem(), OkmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OkmsMapInput)(nil)).Elem(), OkmsMap{})
	pulumi.RegisterOutputType(OkmsOutput{})
	pulumi.RegisterOutputType(OkmsArrayOutput{})
	pulumi.RegisterOutputType(OkmsMapOutput{})
}
