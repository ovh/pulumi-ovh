// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create am IAM permissions group.
type PermissionsGroup struct {
	pulumi.CustomResourceState

	// Set of actions allowed by the permissions group.
	Allows pulumi.StringArrayOutput `pulumi:"allows"`
	// Creation date of this group.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Set of actions that will be denied no matter what permissions group exists.
	Denies pulumi.StringArrayOutput `pulumi:"denies"`
	// Group description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Set of actions that will be subtracted from the `allow` list.
	Excepts pulumi.StringArrayOutput `pulumi:"excepts"`
	// Name of the permissions group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Owner of the permissions group.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Date of the last update of this group.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// URN of the permissions group.
	Urn pulumi.StringOutput `pulumi:"urn"`
}

// NewPermissionsGroup registers a new resource with the given unique name, arguments, and options.
func NewPermissionsGroup(ctx *pulumi.Context,
	name string, args *PermissionsGroupArgs, opts ...pulumi.ResourceOption) (*PermissionsGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PermissionsGroup
	err := ctx.RegisterResource("ovh:Iam/permissionsGroup:PermissionsGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionsGroup gets an existing PermissionsGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionsGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionsGroupState, opts ...pulumi.ResourceOption) (*PermissionsGroup, error) {
	var resource PermissionsGroup
	err := ctx.ReadResource("ovh:Iam/permissionsGroup:PermissionsGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionsGroup resources.
type permissionsGroupState struct {
	// Set of actions allowed by the permissions group.
	Allows []string `pulumi:"allows"`
	// Creation date of this group.
	CreatedAt *string `pulumi:"createdAt"`
	// Set of actions that will be denied no matter what permissions group exists.
	Denies []string `pulumi:"denies"`
	// Group description.
	Description *string `pulumi:"description"`
	// Set of actions that will be subtracted from the `allow` list.
	Excepts []string `pulumi:"excepts"`
	// Name of the permissions group.
	Name *string `pulumi:"name"`
	// Owner of the permissions group.
	Owner *string `pulumi:"owner"`
	// Date of the last update of this group.
	UpdatedAt *string `pulumi:"updatedAt"`
	// URN of the permissions group.
	Urn *string `pulumi:"urn"`
}

type PermissionsGroupState struct {
	// Set of actions allowed by the permissions group.
	Allows pulumi.StringArrayInput
	// Creation date of this group.
	CreatedAt pulumi.StringPtrInput
	// Set of actions that will be denied no matter what permissions group exists.
	Denies pulumi.StringArrayInput
	// Group description.
	Description pulumi.StringPtrInput
	// Set of actions that will be subtracted from the `allow` list.
	Excepts pulumi.StringArrayInput
	// Name of the permissions group.
	Name pulumi.StringPtrInput
	// Owner of the permissions group.
	Owner pulumi.StringPtrInput
	// Date of the last update of this group.
	UpdatedAt pulumi.StringPtrInput
	// URN of the permissions group.
	Urn pulumi.StringPtrInput
}

func (PermissionsGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsGroupState)(nil)).Elem()
}

type permissionsGroupArgs struct {
	// Set of actions allowed by the permissions group.
	Allows []string `pulumi:"allows"`
	// Set of actions that will be denied no matter what permissions group exists.
	Denies []string `pulumi:"denies"`
	// Group description.
	Description string `pulumi:"description"`
	// Set of actions that will be subtracted from the `allow` list.
	Excepts []string `pulumi:"excepts"`
	// Name of the permissions group.
	Name *string `pulumi:"name"`
	// Date of the last update of this group.
	UpdatedAt *string `pulumi:"updatedAt"`
}

// The set of arguments for constructing a PermissionsGroup resource.
type PermissionsGroupArgs struct {
	// Set of actions allowed by the permissions group.
	Allows pulumi.StringArrayInput
	// Set of actions that will be denied no matter what permissions group exists.
	Denies pulumi.StringArrayInput
	// Group description.
	Description pulumi.StringInput
	// Set of actions that will be subtracted from the `allow` list.
	Excepts pulumi.StringArrayInput
	// Name of the permissions group.
	Name pulumi.StringPtrInput
	// Date of the last update of this group.
	UpdatedAt pulumi.StringPtrInput
}

func (PermissionsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionsGroupArgs)(nil)).Elem()
}

type PermissionsGroupInput interface {
	pulumi.Input

	ToPermissionsGroupOutput() PermissionsGroupOutput
	ToPermissionsGroupOutputWithContext(ctx context.Context) PermissionsGroupOutput
}

func (*PermissionsGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsGroup)(nil)).Elem()
}

func (i *PermissionsGroup) ToPermissionsGroupOutput() PermissionsGroupOutput {
	return i.ToPermissionsGroupOutputWithContext(context.Background())
}

func (i *PermissionsGroup) ToPermissionsGroupOutputWithContext(ctx context.Context) PermissionsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsGroupOutput)
}

// PermissionsGroupArrayInput is an input type that accepts PermissionsGroupArray and PermissionsGroupArrayOutput values.
// You can construct a concrete instance of `PermissionsGroupArrayInput` via:
//
//	PermissionsGroupArray{ PermissionsGroupArgs{...} }
type PermissionsGroupArrayInput interface {
	pulumi.Input

	ToPermissionsGroupArrayOutput() PermissionsGroupArrayOutput
	ToPermissionsGroupArrayOutputWithContext(context.Context) PermissionsGroupArrayOutput
}

type PermissionsGroupArray []PermissionsGroupInput

func (PermissionsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionsGroup)(nil)).Elem()
}

func (i PermissionsGroupArray) ToPermissionsGroupArrayOutput() PermissionsGroupArrayOutput {
	return i.ToPermissionsGroupArrayOutputWithContext(context.Background())
}

func (i PermissionsGroupArray) ToPermissionsGroupArrayOutputWithContext(ctx context.Context) PermissionsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsGroupArrayOutput)
}

// PermissionsGroupMapInput is an input type that accepts PermissionsGroupMap and PermissionsGroupMapOutput values.
// You can construct a concrete instance of `PermissionsGroupMapInput` via:
//
//	PermissionsGroupMap{ "key": PermissionsGroupArgs{...} }
type PermissionsGroupMapInput interface {
	pulumi.Input

	ToPermissionsGroupMapOutput() PermissionsGroupMapOutput
	ToPermissionsGroupMapOutputWithContext(context.Context) PermissionsGroupMapOutput
}

type PermissionsGroupMap map[string]PermissionsGroupInput

func (PermissionsGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionsGroup)(nil)).Elem()
}

func (i PermissionsGroupMap) ToPermissionsGroupMapOutput() PermissionsGroupMapOutput {
	return i.ToPermissionsGroupMapOutputWithContext(context.Background())
}

func (i PermissionsGroupMap) ToPermissionsGroupMapOutputWithContext(ctx context.Context) PermissionsGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsGroupMapOutput)
}

type PermissionsGroupOutput struct{ *pulumi.OutputState }

func (PermissionsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsGroup)(nil)).Elem()
}

func (o PermissionsGroupOutput) ToPermissionsGroupOutput() PermissionsGroupOutput {
	return o
}

func (o PermissionsGroupOutput) ToPermissionsGroupOutputWithContext(ctx context.Context) PermissionsGroupOutput {
	return o
}

// Set of actions allowed by the permissions group.
func (o PermissionsGroupOutput) Allows() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringArrayOutput { return v.Allows }).(pulumi.StringArrayOutput)
}

// Creation date of this group.
func (o PermissionsGroupOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Set of actions that will be denied no matter what permissions group exists.
func (o PermissionsGroupOutput) Denies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringArrayOutput { return v.Denies }).(pulumi.StringArrayOutput)
}

// Group description.
func (o PermissionsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Set of actions that will be subtracted from the `allow` list.
func (o PermissionsGroupOutput) Excepts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringArrayOutput { return v.Excepts }).(pulumi.StringArrayOutput)
}

// Name of the permissions group.
func (o PermissionsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Owner of the permissions group.
func (o PermissionsGroupOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Date of the last update of this group.
func (o PermissionsGroupOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// URN of the permissions group.
func (o PermissionsGroupOutput) Urn() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionsGroup) pulumi.StringOutput { return v.Urn }).(pulumi.StringOutput)
}

type PermissionsGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionsGroup)(nil)).Elem()
}

func (o PermissionsGroupArrayOutput) ToPermissionsGroupArrayOutput() PermissionsGroupArrayOutput {
	return o
}

func (o PermissionsGroupArrayOutput) ToPermissionsGroupArrayOutputWithContext(ctx context.Context) PermissionsGroupArrayOutput {
	return o
}

func (o PermissionsGroupArrayOutput) Index(i pulumi.IntInput) PermissionsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionsGroup {
		return vs[0].([]*PermissionsGroup)[vs[1].(int)]
	}).(PermissionsGroupOutput)
}

type PermissionsGroupMapOutput struct{ *pulumi.OutputState }

func (PermissionsGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionsGroup)(nil)).Elem()
}

func (o PermissionsGroupMapOutput) ToPermissionsGroupMapOutput() PermissionsGroupMapOutput {
	return o
}

func (o PermissionsGroupMapOutput) ToPermissionsGroupMapOutputWithContext(ctx context.Context) PermissionsGroupMapOutput {
	return o
}

func (o PermissionsGroupMapOutput) MapIndex(k pulumi.StringInput) PermissionsGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionsGroup {
		return vs[0].(map[string]*PermissionsGroup)[vs[1].(string)]
	}).(PermissionsGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsGroupInput)(nil)).Elem(), &PermissionsGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsGroupArrayInput)(nil)).Elem(), PermissionsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsGroupMapInput)(nil)).Elem(), PermissionsGroupMap{})
	pulumi.RegisterOutputType(PermissionsGroupOutput{})
	pulumi.RegisterOutputType(PermissionsGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionsGroupMapOutput{})
}
