// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hosting

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a new user on your private cloud database instance.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/hosting"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := hosting.NewPrivateDatabaseUser(ctx, "user", &hosting.PrivateDatabaseUserArgs{
//				Password:    pulumi.String("XXXXXX"),
//				ServiceName: pulumi.String("XXXXXX"),
//				UserName:    pulumi.String("XXXXXX"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OVHcloud database user can be imported using the `service_name` and the `user_name`, separated by "/" E.g.,
//
// ```sh
// $ pulumi import ovh:Hosting/privateDatabaseUser:PrivateDatabaseUser user service_name/user_name
// ```
type PrivateDatabaseUser struct {
	pulumi.CustomResourceState

	// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
	Password pulumi.StringOutput `pulumi:"password"`
	// The internal name of your private database.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewPrivateDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewPrivateDatabaseUser(ctx *pulumi.Context,
	name string, args *PrivateDatabaseUserArgs, opts ...pulumi.ResourceOption) (*PrivateDatabaseUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateDatabaseUser
	err := ctx.RegisterResource("ovh:Hosting/privateDatabaseUser:PrivateDatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateDatabaseUser gets an existing PrivateDatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateDatabaseUserState, opts ...pulumi.ResourceOption) (*PrivateDatabaseUser, error) {
	var resource PrivateDatabaseUser
	err := ctx.ReadResource("ovh:Hosting/privateDatabaseUser:PrivateDatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateDatabaseUser resources.
type privateDatabaseUserState struct {
	// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
	Password *string `pulumi:"password"`
	// The internal name of your private database.
	ServiceName *string `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName *string `pulumi:"userName"`
}

type PrivateDatabaseUserState struct {
	// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
	Password pulumi.StringPtrInput
	// The internal name of your private database.
	ServiceName pulumi.StringPtrInput
	// User name used to connect on your databases
	UserName pulumi.StringPtrInput
}

func (PrivateDatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateDatabaseUserState)(nil)).Elem()
}

type privateDatabaseUserArgs struct {
	// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
	Password string `pulumi:"password"`
	// The internal name of your private database.
	ServiceName string `pulumi:"serviceName"`
	// User name used to connect on your databases
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a PrivateDatabaseUser resource.
type PrivateDatabaseUserArgs struct {
	// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
	Password pulumi.StringInput
	// The internal name of your private database.
	ServiceName pulumi.StringInput
	// User name used to connect on your databases
	UserName pulumi.StringInput
}

func (PrivateDatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateDatabaseUserArgs)(nil)).Elem()
}

type PrivateDatabaseUserInput interface {
	pulumi.Input

	ToPrivateDatabaseUserOutput() PrivateDatabaseUserOutput
	ToPrivateDatabaseUserOutputWithContext(ctx context.Context) PrivateDatabaseUserOutput
}

func (*PrivateDatabaseUser) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateDatabaseUser)(nil)).Elem()
}

func (i *PrivateDatabaseUser) ToPrivateDatabaseUserOutput() PrivateDatabaseUserOutput {
	return i.ToPrivateDatabaseUserOutputWithContext(context.Background())
}

func (i *PrivateDatabaseUser) ToPrivateDatabaseUserOutputWithContext(ctx context.Context) PrivateDatabaseUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDatabaseUserOutput)
}

// PrivateDatabaseUserArrayInput is an input type that accepts PrivateDatabaseUserArray and PrivateDatabaseUserArrayOutput values.
// You can construct a concrete instance of `PrivateDatabaseUserArrayInput` via:
//
//	PrivateDatabaseUserArray{ PrivateDatabaseUserArgs{...} }
type PrivateDatabaseUserArrayInput interface {
	pulumi.Input

	ToPrivateDatabaseUserArrayOutput() PrivateDatabaseUserArrayOutput
	ToPrivateDatabaseUserArrayOutputWithContext(context.Context) PrivateDatabaseUserArrayOutput
}

type PrivateDatabaseUserArray []PrivateDatabaseUserInput

func (PrivateDatabaseUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateDatabaseUser)(nil)).Elem()
}

func (i PrivateDatabaseUserArray) ToPrivateDatabaseUserArrayOutput() PrivateDatabaseUserArrayOutput {
	return i.ToPrivateDatabaseUserArrayOutputWithContext(context.Background())
}

func (i PrivateDatabaseUserArray) ToPrivateDatabaseUserArrayOutputWithContext(ctx context.Context) PrivateDatabaseUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDatabaseUserArrayOutput)
}

// PrivateDatabaseUserMapInput is an input type that accepts PrivateDatabaseUserMap and PrivateDatabaseUserMapOutput values.
// You can construct a concrete instance of `PrivateDatabaseUserMapInput` via:
//
//	PrivateDatabaseUserMap{ "key": PrivateDatabaseUserArgs{...} }
type PrivateDatabaseUserMapInput interface {
	pulumi.Input

	ToPrivateDatabaseUserMapOutput() PrivateDatabaseUserMapOutput
	ToPrivateDatabaseUserMapOutputWithContext(context.Context) PrivateDatabaseUserMapOutput
}

type PrivateDatabaseUserMap map[string]PrivateDatabaseUserInput

func (PrivateDatabaseUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateDatabaseUser)(nil)).Elem()
}

func (i PrivateDatabaseUserMap) ToPrivateDatabaseUserMapOutput() PrivateDatabaseUserMapOutput {
	return i.ToPrivateDatabaseUserMapOutputWithContext(context.Background())
}

func (i PrivateDatabaseUserMap) ToPrivateDatabaseUserMapOutputWithContext(ctx context.Context) PrivateDatabaseUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDatabaseUserMapOutput)
}

type PrivateDatabaseUserOutput struct{ *pulumi.OutputState }

func (PrivateDatabaseUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateDatabaseUser)(nil)).Elem()
}

func (o PrivateDatabaseUserOutput) ToPrivateDatabaseUserOutput() PrivateDatabaseUserOutput {
	return o
}

func (o PrivateDatabaseUserOutput) ToPrivateDatabaseUserOutputWithContext(ctx context.Context) PrivateDatabaseUserOutput {
	return o
}

// Password for the new user (alphanumeric, minimum one number and 8 characters minimum)
func (o PrivateDatabaseUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDatabaseUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The internal name of your private database.
func (o PrivateDatabaseUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDatabaseUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// User name used to connect on your databases
func (o PrivateDatabaseUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDatabaseUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type PrivateDatabaseUserArrayOutput struct{ *pulumi.OutputState }

func (PrivateDatabaseUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateDatabaseUser)(nil)).Elem()
}

func (o PrivateDatabaseUserArrayOutput) ToPrivateDatabaseUserArrayOutput() PrivateDatabaseUserArrayOutput {
	return o
}

func (o PrivateDatabaseUserArrayOutput) ToPrivateDatabaseUserArrayOutputWithContext(ctx context.Context) PrivateDatabaseUserArrayOutput {
	return o
}

func (o PrivateDatabaseUserArrayOutput) Index(i pulumi.IntInput) PrivateDatabaseUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateDatabaseUser {
		return vs[0].([]*PrivateDatabaseUser)[vs[1].(int)]
	}).(PrivateDatabaseUserOutput)
}

type PrivateDatabaseUserMapOutput struct{ *pulumi.OutputState }

func (PrivateDatabaseUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateDatabaseUser)(nil)).Elem()
}

func (o PrivateDatabaseUserMapOutput) ToPrivateDatabaseUserMapOutput() PrivateDatabaseUserMapOutput {
	return o
}

func (o PrivateDatabaseUserMapOutput) ToPrivateDatabaseUserMapOutputWithContext(ctx context.Context) PrivateDatabaseUserMapOutput {
	return o
}

func (o PrivateDatabaseUserMapOutput) MapIndex(k pulumi.StringInput) PrivateDatabaseUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateDatabaseUser {
		return vs[0].(map[string]*PrivateDatabaseUser)[vs[1].(string)]
	}).(PrivateDatabaseUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDatabaseUserInput)(nil)).Elem(), &PrivateDatabaseUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDatabaseUserArrayInput)(nil)).Elem(), PrivateDatabaseUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDatabaseUserMapInput)(nil)).Elem(), PrivateDatabaseUserMap{})
	pulumi.RegisterOutputType(PrivateDatabaseUserOutput{})
	pulumi.RegisterOutputType(PrivateDatabaseUserArrayOutput{})
	pulumi.RegisterOutputType(PrivateDatabaseUserMapOutput{})
}
