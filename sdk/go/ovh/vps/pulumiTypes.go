// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vps

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type VpsIam struct {
	// Custom display name
	DisplayName *string `pulumi:"displayName"`
	// Unique identifier of the resource in the IAM
	Id *string `pulumi:"id"`
	// Resource tags. Tags that were internally computed are prefixed with `ovh:`
	Tags map[string]string `pulumi:"tags"`
	// URN of the private database, used when writing IAM policies
	Urn *string `pulumi:"urn"`
}

// VpsIamInput is an input type that accepts VpsIamArgs and VpsIamOutput values.
// You can construct a concrete instance of `VpsIamInput` via:
//
//	VpsIamArgs{...}
type VpsIamInput interface {
	pulumi.Input

	ToVpsIamOutput() VpsIamOutput
	ToVpsIamOutputWithContext(context.Context) VpsIamOutput
}

type VpsIamArgs struct {
	// Custom display name
	DisplayName pulumi.StringPtrInput `pulumi:"displayName"`
	// Unique identifier of the resource in the IAM
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Resource tags. Tags that were internally computed are prefixed with `ovh:`
	Tags pulumi.StringMapInput `pulumi:"tags"`
	// URN of the private database, used when writing IAM policies
	Urn pulumi.StringPtrInput `pulumi:"urn"`
}

func (VpsIamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsIam)(nil)).Elem()
}

func (i VpsIamArgs) ToVpsIamOutput() VpsIamOutput {
	return i.ToVpsIamOutputWithContext(context.Background())
}

func (i VpsIamArgs) ToVpsIamOutputWithContext(ctx context.Context) VpsIamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsIamOutput)
}

func (i VpsIamArgs) ToVpsIamPtrOutput() VpsIamPtrOutput {
	return i.ToVpsIamPtrOutputWithContext(context.Background())
}

func (i VpsIamArgs) ToVpsIamPtrOutputWithContext(ctx context.Context) VpsIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsIamOutput).ToVpsIamPtrOutputWithContext(ctx)
}

// VpsIamPtrInput is an input type that accepts VpsIamArgs, VpsIamPtr and VpsIamPtrOutput values.
// You can construct a concrete instance of `VpsIamPtrInput` via:
//
//	        VpsIamArgs{...}
//
//	or:
//
//	        nil
type VpsIamPtrInput interface {
	pulumi.Input

	ToVpsIamPtrOutput() VpsIamPtrOutput
	ToVpsIamPtrOutputWithContext(context.Context) VpsIamPtrOutput
}

type vpsIamPtrType VpsIamArgs

func VpsIamPtr(v *VpsIamArgs) VpsIamPtrInput {
	return (*vpsIamPtrType)(v)
}

func (*vpsIamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsIam)(nil)).Elem()
}

func (i *vpsIamPtrType) ToVpsIamPtrOutput() VpsIamPtrOutput {
	return i.ToVpsIamPtrOutputWithContext(context.Background())
}

func (i *vpsIamPtrType) ToVpsIamPtrOutputWithContext(ctx context.Context) VpsIamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsIamPtrOutput)
}

type VpsIamOutput struct{ *pulumi.OutputState }

func (VpsIamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsIam)(nil)).Elem()
}

func (o VpsIamOutput) ToVpsIamOutput() VpsIamOutput {
	return o
}

func (o VpsIamOutput) ToVpsIamOutputWithContext(ctx context.Context) VpsIamOutput {
	return o
}

func (o VpsIamOutput) ToVpsIamPtrOutput() VpsIamPtrOutput {
	return o.ToVpsIamPtrOutputWithContext(context.Background())
}

func (o VpsIamOutput) ToVpsIamPtrOutputWithContext(ctx context.Context) VpsIamPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpsIam) *VpsIam {
		return &v
	}).(VpsIamPtrOutput)
}

// Custom display name
func (o VpsIamOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsIam) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource in the IAM
func (o VpsIamOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsIam) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Resource tags. Tags that were internally computed are prefixed with `ovh:`
func (o VpsIamOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v VpsIam) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// URN of the private database, used when writing IAM policies
func (o VpsIamOutput) Urn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsIam) *string { return v.Urn }).(pulumi.StringPtrOutput)
}

type VpsIamPtrOutput struct{ *pulumi.OutputState }

func (VpsIamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsIam)(nil)).Elem()
}

func (o VpsIamPtrOutput) ToVpsIamPtrOutput() VpsIamPtrOutput {
	return o
}

func (o VpsIamPtrOutput) ToVpsIamPtrOutputWithContext(ctx context.Context) VpsIamPtrOutput {
	return o
}

func (o VpsIamPtrOutput) Elem() VpsIamOutput {
	return o.ApplyT(func(v *VpsIam) VpsIam {
		if v != nil {
			return *v
		}
		var ret VpsIam
		return ret
	}).(VpsIamOutput)
}

// Custom display name
func (o VpsIamPtrOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsIam) *string {
		if v == nil {
			return nil
		}
		return v.DisplayName
	}).(pulumi.StringPtrOutput)
}

// Unique identifier of the resource in the IAM
func (o VpsIamPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsIam) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// Resource tags. Tags that were internally computed are prefixed with `ovh:`
func (o VpsIamPtrOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VpsIam) map[string]string {
		if v == nil {
			return nil
		}
		return v.Tags
	}).(pulumi.StringMapOutput)
}

// URN of the private database, used when writing IAM policies
func (o VpsIamPtrOutput) Urn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsIam) *string {
		if v == nil {
			return nil
		}
		return v.Urn
	}).(pulumi.StringPtrOutput)
}

type VpsModel struct {
	// All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
	AvailableOptions []string `pulumi:"availableOptions"`
	// Datacenters where this model is available
	Datacenters []string `pulumi:"datacenters"`
	// Disk capacity of this VPS
	Disk *float64 `pulumi:"disk"`
	// Maximum number of additional IPs
	MaximumAdditionnalIp *float64 `pulumi:"maximumAdditionnalIp"`
	// RAM of the VPS
	Memory *float64 `pulumi:"memory"`
	// Name of the VPS
	Name *string `pulumi:"name"`
	// Description of this VPS offer
	Offer *string `pulumi:"offer"`
	// Number of vcores
	Vcore *float64 `pulumi:"vcore"`
	// All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
	Version *string `pulumi:"version"`
}

// VpsModelInput is an input type that accepts VpsModelArgs and VpsModelOutput values.
// You can construct a concrete instance of `VpsModelInput` via:
//
//	VpsModelArgs{...}
type VpsModelInput interface {
	pulumi.Input

	ToVpsModelOutput() VpsModelOutput
	ToVpsModelOutputWithContext(context.Context) VpsModelOutput
}

type VpsModelArgs struct {
	// All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
	AvailableOptions pulumi.StringArrayInput `pulumi:"availableOptions"`
	// Datacenters where this model is available
	Datacenters pulumi.StringArrayInput `pulumi:"datacenters"`
	// Disk capacity of this VPS
	Disk pulumi.Float64PtrInput `pulumi:"disk"`
	// Maximum number of additional IPs
	MaximumAdditionnalIp pulumi.Float64PtrInput `pulumi:"maximumAdditionnalIp"`
	// RAM of the VPS
	Memory pulumi.Float64PtrInput `pulumi:"memory"`
	// Name of the VPS
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Description of this VPS offer
	Offer pulumi.StringPtrInput `pulumi:"offer"`
	// Number of vcores
	Vcore pulumi.Float64PtrInput `pulumi:"vcore"`
	// All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (VpsModelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsModel)(nil)).Elem()
}

func (i VpsModelArgs) ToVpsModelOutput() VpsModelOutput {
	return i.ToVpsModelOutputWithContext(context.Background())
}

func (i VpsModelArgs) ToVpsModelOutputWithContext(ctx context.Context) VpsModelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsModelOutput)
}

func (i VpsModelArgs) ToVpsModelPtrOutput() VpsModelPtrOutput {
	return i.ToVpsModelPtrOutputWithContext(context.Background())
}

func (i VpsModelArgs) ToVpsModelPtrOutputWithContext(ctx context.Context) VpsModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsModelOutput).ToVpsModelPtrOutputWithContext(ctx)
}

// VpsModelPtrInput is an input type that accepts VpsModelArgs, VpsModelPtr and VpsModelPtrOutput values.
// You can construct a concrete instance of `VpsModelPtrInput` via:
//
//	        VpsModelArgs{...}
//
//	or:
//
//	        nil
type VpsModelPtrInput interface {
	pulumi.Input

	ToVpsModelPtrOutput() VpsModelPtrOutput
	ToVpsModelPtrOutputWithContext(context.Context) VpsModelPtrOutput
}

type vpsModelPtrType VpsModelArgs

func VpsModelPtr(v *VpsModelArgs) VpsModelPtrInput {
	return (*vpsModelPtrType)(v)
}

func (*vpsModelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsModel)(nil)).Elem()
}

func (i *vpsModelPtrType) ToVpsModelPtrOutput() VpsModelPtrOutput {
	return i.ToVpsModelPtrOutputWithContext(context.Background())
}

func (i *vpsModelPtrType) ToVpsModelPtrOutputWithContext(ctx context.Context) VpsModelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsModelPtrOutput)
}

type VpsModelOutput struct{ *pulumi.OutputState }

func (VpsModelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsModel)(nil)).Elem()
}

func (o VpsModelOutput) ToVpsModelOutput() VpsModelOutput {
	return o
}

func (o VpsModelOutput) ToVpsModelOutputWithContext(ctx context.Context) VpsModelOutput {
	return o
}

func (o VpsModelOutput) ToVpsModelPtrOutput() VpsModelPtrOutput {
	return o.ToVpsModelPtrOutputWithContext(context.Background())
}

func (o VpsModelOutput) ToVpsModelPtrOutputWithContext(ctx context.Context) VpsModelPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpsModel) *VpsModel {
		return &v
	}).(VpsModelPtrOutput)
}

// All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
func (o VpsModelOutput) AvailableOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpsModel) []string { return v.AvailableOptions }).(pulumi.StringArrayOutput)
}

// Datacenters where this model is available
func (o VpsModelOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v VpsModel) []string { return v.Datacenters }).(pulumi.StringArrayOutput)
}

// Disk capacity of this VPS
func (o VpsModelOutput) Disk() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsModel) *float64 { return v.Disk }).(pulumi.Float64PtrOutput)
}

// Maximum number of additional IPs
func (o VpsModelOutput) MaximumAdditionnalIp() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsModel) *float64 { return v.MaximumAdditionnalIp }).(pulumi.Float64PtrOutput)
}

// RAM of the VPS
func (o VpsModelOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsModel) *float64 { return v.Memory }).(pulumi.Float64PtrOutput)
}

// Name of the VPS
func (o VpsModelOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsModel) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Description of this VPS offer
func (o VpsModelOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsModel) *string { return v.Offer }).(pulumi.StringPtrOutput)
}

// Number of vcores
func (o VpsModelOutput) Vcore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsModel) *float64 { return v.Vcore }).(pulumi.Float64PtrOutput)
}

// All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
func (o VpsModelOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsModel) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type VpsModelPtrOutput struct{ *pulumi.OutputState }

func (VpsModelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsModel)(nil)).Elem()
}

func (o VpsModelPtrOutput) ToVpsModelPtrOutput() VpsModelPtrOutput {
	return o
}

func (o VpsModelPtrOutput) ToVpsModelPtrOutputWithContext(ctx context.Context) VpsModelPtrOutput {
	return o
}

func (o VpsModelPtrOutput) Elem() VpsModelOutput {
	return o.ApplyT(func(v *VpsModel) VpsModel {
		if v != nil {
			return *v
		}
		var ret VpsModel
		return ret
	}).(VpsModelOutput)
}

// All options the VPS can have (additionalDisk┃automatedBackup┃cpanel┃ftpbackup┃plesk┃snapshot┃veeam┃windows)
func (o VpsModelPtrOutput) AvailableOptions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpsModel) []string {
		if v == nil {
			return nil
		}
		return v.AvailableOptions
	}).(pulumi.StringArrayOutput)
}

// Datacenters where this model is available
func (o VpsModelPtrOutput) Datacenters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *VpsModel) []string {
		if v == nil {
			return nil
		}
		return v.Datacenters
	}).(pulumi.StringArrayOutput)
}

// Disk capacity of this VPS
func (o VpsModelPtrOutput) Disk() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpsModel) *float64 {
		if v == nil {
			return nil
		}
		return v.Disk
	}).(pulumi.Float64PtrOutput)
}

// Maximum number of additional IPs
func (o VpsModelPtrOutput) MaximumAdditionnalIp() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpsModel) *float64 {
		if v == nil {
			return nil
		}
		return v.MaximumAdditionnalIp
	}).(pulumi.Float64PtrOutput)
}

// RAM of the VPS
func (o VpsModelPtrOutput) Memory() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpsModel) *float64 {
		if v == nil {
			return nil
		}
		return v.Memory
	}).(pulumi.Float64PtrOutput)
}

// Name of the VPS
func (o VpsModelPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsModel) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Description of this VPS offer
func (o VpsModelPtrOutput) Offer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsModel) *string {
		if v == nil {
			return nil
		}
		return v.Offer
	}).(pulumi.StringPtrOutput)
}

// Number of vcores
func (o VpsModelPtrOutput) Vcore() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpsModel) *float64 {
		if v == nil {
			return nil
		}
		return v.Vcore
	}).(pulumi.Float64PtrOutput)
}

// All versions that VPS can have (2013v1┃2014v1┃2015v1┃2017v1┃2017v2┃2017v3┃2018v1┃2018v2┃2019v1)
func (o VpsModelPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsModel) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type VpsOrder struct {
	Date           *string          `pulumi:"date"`
	Details        []VpsOrderDetail `pulumi:"details"`
	ExpirationDate *string          `pulumi:"expirationDate"`
	OrderId        *float64         `pulumi:"orderId"`
}

// VpsOrderInput is an input type that accepts VpsOrderArgs and VpsOrderOutput values.
// You can construct a concrete instance of `VpsOrderInput` via:
//
//	VpsOrderArgs{...}
type VpsOrderInput interface {
	pulumi.Input

	ToVpsOrderOutput() VpsOrderOutput
	ToVpsOrderOutputWithContext(context.Context) VpsOrderOutput
}

type VpsOrderArgs struct {
	Date           pulumi.StringPtrInput    `pulumi:"date"`
	Details        VpsOrderDetailArrayInput `pulumi:"details"`
	ExpirationDate pulumi.StringPtrInput    `pulumi:"expirationDate"`
	OrderId        pulumi.Float64PtrInput   `pulumi:"orderId"`
}

func (VpsOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsOrder)(nil)).Elem()
}

func (i VpsOrderArgs) ToVpsOrderOutput() VpsOrderOutput {
	return i.ToVpsOrderOutputWithContext(context.Background())
}

func (i VpsOrderArgs) ToVpsOrderOutputWithContext(ctx context.Context) VpsOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsOrderOutput)
}

func (i VpsOrderArgs) ToVpsOrderPtrOutput() VpsOrderPtrOutput {
	return i.ToVpsOrderPtrOutputWithContext(context.Background())
}

func (i VpsOrderArgs) ToVpsOrderPtrOutputWithContext(ctx context.Context) VpsOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsOrderOutput).ToVpsOrderPtrOutputWithContext(ctx)
}

// VpsOrderPtrInput is an input type that accepts VpsOrderArgs, VpsOrderPtr and VpsOrderPtrOutput values.
// You can construct a concrete instance of `VpsOrderPtrInput` via:
//
//	        VpsOrderArgs{...}
//
//	or:
//
//	        nil
type VpsOrderPtrInput interface {
	pulumi.Input

	ToVpsOrderPtrOutput() VpsOrderPtrOutput
	ToVpsOrderPtrOutputWithContext(context.Context) VpsOrderPtrOutput
}

type vpsOrderPtrType VpsOrderArgs

func VpsOrderPtr(v *VpsOrderArgs) VpsOrderPtrInput {
	return (*vpsOrderPtrType)(v)
}

func (*vpsOrderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsOrder)(nil)).Elem()
}

func (i *vpsOrderPtrType) ToVpsOrderPtrOutput() VpsOrderPtrOutput {
	return i.ToVpsOrderPtrOutputWithContext(context.Background())
}

func (i *vpsOrderPtrType) ToVpsOrderPtrOutputWithContext(ctx context.Context) VpsOrderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsOrderPtrOutput)
}

type VpsOrderOutput struct{ *pulumi.OutputState }

func (VpsOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsOrder)(nil)).Elem()
}

func (o VpsOrderOutput) ToVpsOrderOutput() VpsOrderOutput {
	return o
}

func (o VpsOrderOutput) ToVpsOrderOutputWithContext(ctx context.Context) VpsOrderOutput {
	return o
}

func (o VpsOrderOutput) ToVpsOrderPtrOutput() VpsOrderPtrOutput {
	return o.ToVpsOrderPtrOutputWithContext(context.Background())
}

func (o VpsOrderOutput) ToVpsOrderPtrOutputWithContext(ctx context.Context) VpsOrderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VpsOrder) *VpsOrder {
		return &v
	}).(VpsOrderPtrOutput)
}

func (o VpsOrderOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrder) *string { return v.Date }).(pulumi.StringPtrOutput)
}

func (o VpsOrderOutput) Details() VpsOrderDetailArrayOutput {
	return o.ApplyT(func(v VpsOrder) []VpsOrderDetail { return v.Details }).(VpsOrderDetailArrayOutput)
}

func (o VpsOrderOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrder) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

func (o VpsOrderOutput) OrderId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsOrder) *float64 { return v.OrderId }).(pulumi.Float64PtrOutput)
}

type VpsOrderPtrOutput struct{ *pulumi.OutputState }

func (VpsOrderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpsOrder)(nil)).Elem()
}

func (o VpsOrderPtrOutput) ToVpsOrderPtrOutput() VpsOrderPtrOutput {
	return o
}

func (o VpsOrderPtrOutput) ToVpsOrderPtrOutputWithContext(ctx context.Context) VpsOrderPtrOutput {
	return o
}

func (o VpsOrderPtrOutput) Elem() VpsOrderOutput {
	return o.ApplyT(func(v *VpsOrder) VpsOrder {
		if v != nil {
			return *v
		}
		var ret VpsOrder
		return ret
	}).(VpsOrderOutput)
}

func (o VpsOrderPtrOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsOrder) *string {
		if v == nil {
			return nil
		}
		return v.Date
	}).(pulumi.StringPtrOutput)
}

func (o VpsOrderPtrOutput) Details() VpsOrderDetailArrayOutput {
	return o.ApplyT(func(v *VpsOrder) []VpsOrderDetail {
		if v == nil {
			return nil
		}
		return v.Details
	}).(VpsOrderDetailArrayOutput)
}

func (o VpsOrderPtrOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VpsOrder) *string {
		if v == nil {
			return nil
		}
		return v.ExpirationDate
	}).(pulumi.StringPtrOutput)
}

func (o VpsOrderPtrOutput) OrderId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VpsOrder) *float64 {
		if v == nil {
			return nil
		}
		return v.OrderId
	}).(pulumi.Float64PtrOutput)
}

type VpsOrderDetail struct {
	Description *string `pulumi:"description"`
	// Product type of item in order
	DetailType    *string  `pulumi:"detailType"`
	Domain        *string  `pulumi:"domain"`
	OrderDetailId *float64 `pulumi:"orderDetailId"`
	Quantity      *string  `pulumi:"quantity"`
}

// VpsOrderDetailInput is an input type that accepts VpsOrderDetailArgs and VpsOrderDetailOutput values.
// You can construct a concrete instance of `VpsOrderDetailInput` via:
//
//	VpsOrderDetailArgs{...}
type VpsOrderDetailInput interface {
	pulumi.Input

	ToVpsOrderDetailOutput() VpsOrderDetailOutput
	ToVpsOrderDetailOutputWithContext(context.Context) VpsOrderDetailOutput
}

type VpsOrderDetailArgs struct {
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Product type of item in order
	DetailType    pulumi.StringPtrInput  `pulumi:"detailType"`
	Domain        pulumi.StringPtrInput  `pulumi:"domain"`
	OrderDetailId pulumi.Float64PtrInput `pulumi:"orderDetailId"`
	Quantity      pulumi.StringPtrInput  `pulumi:"quantity"`
}

func (VpsOrderDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsOrderDetail)(nil)).Elem()
}

func (i VpsOrderDetailArgs) ToVpsOrderDetailOutput() VpsOrderDetailOutput {
	return i.ToVpsOrderDetailOutputWithContext(context.Background())
}

func (i VpsOrderDetailArgs) ToVpsOrderDetailOutputWithContext(ctx context.Context) VpsOrderDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsOrderDetailOutput)
}

// VpsOrderDetailArrayInput is an input type that accepts VpsOrderDetailArray and VpsOrderDetailArrayOutput values.
// You can construct a concrete instance of `VpsOrderDetailArrayInput` via:
//
//	VpsOrderDetailArray{ VpsOrderDetailArgs{...} }
type VpsOrderDetailArrayInput interface {
	pulumi.Input

	ToVpsOrderDetailArrayOutput() VpsOrderDetailArrayOutput
	ToVpsOrderDetailArrayOutputWithContext(context.Context) VpsOrderDetailArrayOutput
}

type VpsOrderDetailArray []VpsOrderDetailInput

func (VpsOrderDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsOrderDetail)(nil)).Elem()
}

func (i VpsOrderDetailArray) ToVpsOrderDetailArrayOutput() VpsOrderDetailArrayOutput {
	return i.ToVpsOrderDetailArrayOutputWithContext(context.Background())
}

func (i VpsOrderDetailArray) ToVpsOrderDetailArrayOutputWithContext(ctx context.Context) VpsOrderDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsOrderDetailArrayOutput)
}

type VpsOrderDetailOutput struct{ *pulumi.OutputState }

func (VpsOrderDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsOrderDetail)(nil)).Elem()
}

func (o VpsOrderDetailOutput) ToVpsOrderDetailOutput() VpsOrderDetailOutput {
	return o
}

func (o VpsOrderDetailOutput) ToVpsOrderDetailOutputWithContext(ctx context.Context) VpsOrderDetailOutput {
	return o
}

func (o VpsOrderDetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrderDetail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Product type of item in order
func (o VpsOrderDetailOutput) DetailType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrderDetail) *string { return v.DetailType }).(pulumi.StringPtrOutput)
}

func (o VpsOrderDetailOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrderDetail) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o VpsOrderDetailOutput) OrderDetailId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsOrderDetail) *float64 { return v.OrderDetailId }).(pulumi.Float64PtrOutput)
}

func (o VpsOrderDetailOutput) Quantity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpsOrderDetail) *string { return v.Quantity }).(pulumi.StringPtrOutput)
}

type VpsOrderDetailArrayOutput struct{ *pulumi.OutputState }

func (VpsOrderDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsOrderDetail)(nil)).Elem()
}

func (o VpsOrderDetailArrayOutput) ToVpsOrderDetailArrayOutput() VpsOrderDetailArrayOutput {
	return o
}

func (o VpsOrderDetailArrayOutput) ToVpsOrderDetailArrayOutputWithContext(ctx context.Context) VpsOrderDetailArrayOutput {
	return o
}

func (o VpsOrderDetailArrayOutput) Index(i pulumi.IntInput) VpsOrderDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpsOrderDetail {
		return vs[0].([]VpsOrderDetail)[vs[1].(int)]
	}).(VpsOrderDetailOutput)
}

type VpsPlan struct {
	// Representation of a configuration item for personalizing product
	Configurations []VpsPlanConfiguration `pulumi:"configurations"`
	// duration
	Duration string `pulumi:"duration"`
	// Cart item to be linked
	ItemId *float64 `pulumi:"itemId"`
	// Plan code
	PlanCode string `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode string `pulumi:"pricingMode"`
	// Quantity of product desired
	Quantity *float64 `pulumi:"quantity"`
}

// VpsPlanInput is an input type that accepts VpsPlanArgs and VpsPlanOutput values.
// You can construct a concrete instance of `VpsPlanInput` via:
//
//	VpsPlanArgs{...}
type VpsPlanInput interface {
	pulumi.Input

	ToVpsPlanOutput() VpsPlanOutput
	ToVpsPlanOutputWithContext(context.Context) VpsPlanOutput
}

type VpsPlanArgs struct {
	// Representation of a configuration item for personalizing product
	Configurations VpsPlanConfigurationArrayInput `pulumi:"configurations"`
	// duration
	Duration pulumi.StringInput `pulumi:"duration"`
	// Cart item to be linked
	ItemId pulumi.Float64PtrInput `pulumi:"itemId"`
	// Plan code
	PlanCode pulumi.StringInput `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode pulumi.StringInput `pulumi:"pricingMode"`
	// Quantity of product desired
	Quantity pulumi.Float64PtrInput `pulumi:"quantity"`
}

func (VpsPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlan)(nil)).Elem()
}

func (i VpsPlanArgs) ToVpsPlanOutput() VpsPlanOutput {
	return i.ToVpsPlanOutputWithContext(context.Background())
}

func (i VpsPlanArgs) ToVpsPlanOutputWithContext(ctx context.Context) VpsPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanOutput)
}

// VpsPlanArrayInput is an input type that accepts VpsPlanArray and VpsPlanArrayOutput values.
// You can construct a concrete instance of `VpsPlanArrayInput` via:
//
//	VpsPlanArray{ VpsPlanArgs{...} }
type VpsPlanArrayInput interface {
	pulumi.Input

	ToVpsPlanArrayOutput() VpsPlanArrayOutput
	ToVpsPlanArrayOutputWithContext(context.Context) VpsPlanArrayOutput
}

type VpsPlanArray []VpsPlanInput

func (VpsPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlan)(nil)).Elem()
}

func (i VpsPlanArray) ToVpsPlanArrayOutput() VpsPlanArrayOutput {
	return i.ToVpsPlanArrayOutputWithContext(context.Background())
}

func (i VpsPlanArray) ToVpsPlanArrayOutputWithContext(ctx context.Context) VpsPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanArrayOutput)
}

type VpsPlanOutput struct{ *pulumi.OutputState }

func (VpsPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlan)(nil)).Elem()
}

func (o VpsPlanOutput) ToVpsPlanOutput() VpsPlanOutput {
	return o
}

func (o VpsPlanOutput) ToVpsPlanOutputWithContext(ctx context.Context) VpsPlanOutput {
	return o
}

// Representation of a configuration item for personalizing product
func (o VpsPlanOutput) Configurations() VpsPlanConfigurationArrayOutput {
	return o.ApplyT(func(v VpsPlan) []VpsPlanConfiguration { return v.Configurations }).(VpsPlanConfigurationArrayOutput)
}

// duration
func (o VpsPlanOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlan) string { return v.Duration }).(pulumi.StringOutput)
}

// Cart item to be linked
func (o VpsPlanOutput) ItemId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsPlan) *float64 { return v.ItemId }).(pulumi.Float64PtrOutput)
}

// Plan code
func (o VpsPlanOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlan) string { return v.PlanCode }).(pulumi.StringOutput)
}

// Pricing model identifier
func (o VpsPlanOutput) PricingMode() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlan) string { return v.PricingMode }).(pulumi.StringOutput)
}

// Quantity of product desired
func (o VpsPlanOutput) Quantity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VpsPlan) *float64 { return v.Quantity }).(pulumi.Float64PtrOutput)
}

type VpsPlanArrayOutput struct{ *pulumi.OutputState }

func (VpsPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlan)(nil)).Elem()
}

func (o VpsPlanArrayOutput) ToVpsPlanArrayOutput() VpsPlanArrayOutput {
	return o
}

func (o VpsPlanArrayOutput) ToVpsPlanArrayOutputWithContext(ctx context.Context) VpsPlanArrayOutput {
	return o
}

func (o VpsPlanArrayOutput) Index(i pulumi.IntInput) VpsPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpsPlan {
		return vs[0].([]VpsPlan)[vs[1].(int)]
	}).(VpsPlanOutput)
}

type VpsPlanConfiguration struct {
	// Identifier of the resource
	Label string `pulumi:"label"`
	// Path to the resource in api.ovh.com
	Value string `pulumi:"value"`
}

// VpsPlanConfigurationInput is an input type that accepts VpsPlanConfigurationArgs and VpsPlanConfigurationOutput values.
// You can construct a concrete instance of `VpsPlanConfigurationInput` via:
//
//	VpsPlanConfigurationArgs{...}
type VpsPlanConfigurationInput interface {
	pulumi.Input

	ToVpsPlanConfigurationOutput() VpsPlanConfigurationOutput
	ToVpsPlanConfigurationOutputWithContext(context.Context) VpsPlanConfigurationOutput
}

type VpsPlanConfigurationArgs struct {
	// Identifier of the resource
	Label pulumi.StringInput `pulumi:"label"`
	// Path to the resource in api.ovh.com
	Value pulumi.StringInput `pulumi:"value"`
}

func (VpsPlanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanConfiguration)(nil)).Elem()
}

func (i VpsPlanConfigurationArgs) ToVpsPlanConfigurationOutput() VpsPlanConfigurationOutput {
	return i.ToVpsPlanConfigurationOutputWithContext(context.Background())
}

func (i VpsPlanConfigurationArgs) ToVpsPlanConfigurationOutputWithContext(ctx context.Context) VpsPlanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanConfigurationOutput)
}

// VpsPlanConfigurationArrayInput is an input type that accepts VpsPlanConfigurationArray and VpsPlanConfigurationArrayOutput values.
// You can construct a concrete instance of `VpsPlanConfigurationArrayInput` via:
//
//	VpsPlanConfigurationArray{ VpsPlanConfigurationArgs{...} }
type VpsPlanConfigurationArrayInput interface {
	pulumi.Input

	ToVpsPlanConfigurationArrayOutput() VpsPlanConfigurationArrayOutput
	ToVpsPlanConfigurationArrayOutputWithContext(context.Context) VpsPlanConfigurationArrayOutput
}

type VpsPlanConfigurationArray []VpsPlanConfigurationInput

func (VpsPlanConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanConfiguration)(nil)).Elem()
}

func (i VpsPlanConfigurationArray) ToVpsPlanConfigurationArrayOutput() VpsPlanConfigurationArrayOutput {
	return i.ToVpsPlanConfigurationArrayOutputWithContext(context.Background())
}

func (i VpsPlanConfigurationArray) ToVpsPlanConfigurationArrayOutputWithContext(ctx context.Context) VpsPlanConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanConfigurationArrayOutput)
}

type VpsPlanConfigurationOutput struct{ *pulumi.OutputState }

func (VpsPlanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanConfiguration)(nil)).Elem()
}

func (o VpsPlanConfigurationOutput) ToVpsPlanConfigurationOutput() VpsPlanConfigurationOutput {
	return o
}

func (o VpsPlanConfigurationOutput) ToVpsPlanConfigurationOutputWithContext(ctx context.Context) VpsPlanConfigurationOutput {
	return o
}

// Identifier of the resource
func (o VpsPlanConfigurationOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanConfiguration) string { return v.Label }).(pulumi.StringOutput)
}

// Path to the resource in api.ovh.com
func (o VpsPlanConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanConfiguration) string { return v.Value }).(pulumi.StringOutput)
}

type VpsPlanConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VpsPlanConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanConfiguration)(nil)).Elem()
}

func (o VpsPlanConfigurationArrayOutput) ToVpsPlanConfigurationArrayOutput() VpsPlanConfigurationArrayOutput {
	return o
}

func (o VpsPlanConfigurationArrayOutput) ToVpsPlanConfigurationArrayOutputWithContext(ctx context.Context) VpsPlanConfigurationArrayOutput {
	return o
}

func (o VpsPlanConfigurationArrayOutput) Index(i pulumi.IntInput) VpsPlanConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpsPlanConfiguration {
		return vs[0].([]VpsPlanConfiguration)[vs[1].(int)]
	}).(VpsPlanConfigurationOutput)
}

type VpsPlanOption struct {
	// Representation of a configuration item for personalizing product
	Configurations []VpsPlanOptionConfiguration `pulumi:"configurations"`
	// duration
	Duration string `pulumi:"duration"`
	// Plan code
	PlanCode string `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode string `pulumi:"pricingMode"`
	// Quantity of product desired
	Quantity float64 `pulumi:"quantity"`
}

// VpsPlanOptionInput is an input type that accepts VpsPlanOptionArgs and VpsPlanOptionOutput values.
// You can construct a concrete instance of `VpsPlanOptionInput` via:
//
//	VpsPlanOptionArgs{...}
type VpsPlanOptionInput interface {
	pulumi.Input

	ToVpsPlanOptionOutput() VpsPlanOptionOutput
	ToVpsPlanOptionOutputWithContext(context.Context) VpsPlanOptionOutput
}

type VpsPlanOptionArgs struct {
	// Representation of a configuration item for personalizing product
	Configurations VpsPlanOptionConfigurationArrayInput `pulumi:"configurations"`
	// duration
	Duration pulumi.StringInput `pulumi:"duration"`
	// Plan code
	PlanCode pulumi.StringInput `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode pulumi.StringInput `pulumi:"pricingMode"`
	// Quantity of product desired
	Quantity pulumi.Float64Input `pulumi:"quantity"`
}

func (VpsPlanOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanOption)(nil)).Elem()
}

func (i VpsPlanOptionArgs) ToVpsPlanOptionOutput() VpsPlanOptionOutput {
	return i.ToVpsPlanOptionOutputWithContext(context.Background())
}

func (i VpsPlanOptionArgs) ToVpsPlanOptionOutputWithContext(ctx context.Context) VpsPlanOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanOptionOutput)
}

// VpsPlanOptionArrayInput is an input type that accepts VpsPlanOptionArray and VpsPlanOptionArrayOutput values.
// You can construct a concrete instance of `VpsPlanOptionArrayInput` via:
//
//	VpsPlanOptionArray{ VpsPlanOptionArgs{...} }
type VpsPlanOptionArrayInput interface {
	pulumi.Input

	ToVpsPlanOptionArrayOutput() VpsPlanOptionArrayOutput
	ToVpsPlanOptionArrayOutputWithContext(context.Context) VpsPlanOptionArrayOutput
}

type VpsPlanOptionArray []VpsPlanOptionInput

func (VpsPlanOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanOption)(nil)).Elem()
}

func (i VpsPlanOptionArray) ToVpsPlanOptionArrayOutput() VpsPlanOptionArrayOutput {
	return i.ToVpsPlanOptionArrayOutputWithContext(context.Background())
}

func (i VpsPlanOptionArray) ToVpsPlanOptionArrayOutputWithContext(ctx context.Context) VpsPlanOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanOptionArrayOutput)
}

type VpsPlanOptionOutput struct{ *pulumi.OutputState }

func (VpsPlanOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanOption)(nil)).Elem()
}

func (o VpsPlanOptionOutput) ToVpsPlanOptionOutput() VpsPlanOptionOutput {
	return o
}

func (o VpsPlanOptionOutput) ToVpsPlanOptionOutputWithContext(ctx context.Context) VpsPlanOptionOutput {
	return o
}

// Representation of a configuration item for personalizing product
func (o VpsPlanOptionOutput) Configurations() VpsPlanOptionConfigurationArrayOutput {
	return o.ApplyT(func(v VpsPlanOption) []VpsPlanOptionConfiguration { return v.Configurations }).(VpsPlanOptionConfigurationArrayOutput)
}

// duration
func (o VpsPlanOptionOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanOption) string { return v.Duration }).(pulumi.StringOutput)
}

// Plan code
func (o VpsPlanOptionOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanOption) string { return v.PlanCode }).(pulumi.StringOutput)
}

// Pricing model identifier
func (o VpsPlanOptionOutput) PricingMode() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanOption) string { return v.PricingMode }).(pulumi.StringOutput)
}

// Quantity of product desired
func (o VpsPlanOptionOutput) Quantity() pulumi.Float64Output {
	return o.ApplyT(func(v VpsPlanOption) float64 { return v.Quantity }).(pulumi.Float64Output)
}

type VpsPlanOptionArrayOutput struct{ *pulumi.OutputState }

func (VpsPlanOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanOption)(nil)).Elem()
}

func (o VpsPlanOptionArrayOutput) ToVpsPlanOptionArrayOutput() VpsPlanOptionArrayOutput {
	return o
}

func (o VpsPlanOptionArrayOutput) ToVpsPlanOptionArrayOutputWithContext(ctx context.Context) VpsPlanOptionArrayOutput {
	return o
}

func (o VpsPlanOptionArrayOutput) Index(i pulumi.IntInput) VpsPlanOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpsPlanOption {
		return vs[0].([]VpsPlanOption)[vs[1].(int)]
	}).(VpsPlanOptionOutput)
}

type VpsPlanOptionConfiguration struct {
	// Identifier of the resource
	Label string `pulumi:"label"`
	// Path to the resource in api.ovh.com
	Value string `pulumi:"value"`
}

// VpsPlanOptionConfigurationInput is an input type that accepts VpsPlanOptionConfigurationArgs and VpsPlanOptionConfigurationOutput values.
// You can construct a concrete instance of `VpsPlanOptionConfigurationInput` via:
//
//	VpsPlanOptionConfigurationArgs{...}
type VpsPlanOptionConfigurationInput interface {
	pulumi.Input

	ToVpsPlanOptionConfigurationOutput() VpsPlanOptionConfigurationOutput
	ToVpsPlanOptionConfigurationOutputWithContext(context.Context) VpsPlanOptionConfigurationOutput
}

type VpsPlanOptionConfigurationArgs struct {
	// Identifier of the resource
	Label pulumi.StringInput `pulumi:"label"`
	// Path to the resource in api.ovh.com
	Value pulumi.StringInput `pulumi:"value"`
}

func (VpsPlanOptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanOptionConfiguration)(nil)).Elem()
}

func (i VpsPlanOptionConfigurationArgs) ToVpsPlanOptionConfigurationOutput() VpsPlanOptionConfigurationOutput {
	return i.ToVpsPlanOptionConfigurationOutputWithContext(context.Background())
}

func (i VpsPlanOptionConfigurationArgs) ToVpsPlanOptionConfigurationOutputWithContext(ctx context.Context) VpsPlanOptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanOptionConfigurationOutput)
}

// VpsPlanOptionConfigurationArrayInput is an input type that accepts VpsPlanOptionConfigurationArray and VpsPlanOptionConfigurationArrayOutput values.
// You can construct a concrete instance of `VpsPlanOptionConfigurationArrayInput` via:
//
//	VpsPlanOptionConfigurationArray{ VpsPlanOptionConfigurationArgs{...} }
type VpsPlanOptionConfigurationArrayInput interface {
	pulumi.Input

	ToVpsPlanOptionConfigurationArrayOutput() VpsPlanOptionConfigurationArrayOutput
	ToVpsPlanOptionConfigurationArrayOutputWithContext(context.Context) VpsPlanOptionConfigurationArrayOutput
}

type VpsPlanOptionConfigurationArray []VpsPlanOptionConfigurationInput

func (VpsPlanOptionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanOptionConfiguration)(nil)).Elem()
}

func (i VpsPlanOptionConfigurationArray) ToVpsPlanOptionConfigurationArrayOutput() VpsPlanOptionConfigurationArrayOutput {
	return i.ToVpsPlanOptionConfigurationArrayOutputWithContext(context.Background())
}

func (i VpsPlanOptionConfigurationArray) ToVpsPlanOptionConfigurationArrayOutputWithContext(ctx context.Context) VpsPlanOptionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpsPlanOptionConfigurationArrayOutput)
}

type VpsPlanOptionConfigurationOutput struct{ *pulumi.OutputState }

func (VpsPlanOptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpsPlanOptionConfiguration)(nil)).Elem()
}

func (o VpsPlanOptionConfigurationOutput) ToVpsPlanOptionConfigurationOutput() VpsPlanOptionConfigurationOutput {
	return o
}

func (o VpsPlanOptionConfigurationOutput) ToVpsPlanOptionConfigurationOutputWithContext(ctx context.Context) VpsPlanOptionConfigurationOutput {
	return o
}

// Identifier of the resource
func (o VpsPlanOptionConfigurationOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanOptionConfiguration) string { return v.Label }).(pulumi.StringOutput)
}

// Path to the resource in api.ovh.com
func (o VpsPlanOptionConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VpsPlanOptionConfiguration) string { return v.Value }).(pulumi.StringOutput)
}

type VpsPlanOptionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VpsPlanOptionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpsPlanOptionConfiguration)(nil)).Elem()
}

func (o VpsPlanOptionConfigurationArrayOutput) ToVpsPlanOptionConfigurationArrayOutput() VpsPlanOptionConfigurationArrayOutput {
	return o
}

func (o VpsPlanOptionConfigurationArrayOutput) ToVpsPlanOptionConfigurationArrayOutputWithContext(ctx context.Context) VpsPlanOptionConfigurationArrayOutput {
	return o
}

func (o VpsPlanOptionConfigurationArrayOutput) Index(i pulumi.IntInput) VpsPlanOptionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpsPlanOptionConfiguration {
		return vs[0].([]VpsPlanOptionConfiguration)[vs[1].(int)]
	}).(VpsPlanOptionConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpsIamInput)(nil)).Elem(), VpsIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsIamPtrInput)(nil)).Elem(), VpsIamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsModelInput)(nil)).Elem(), VpsModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsModelPtrInput)(nil)).Elem(), VpsModelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsOrderInput)(nil)).Elem(), VpsOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsOrderPtrInput)(nil)).Elem(), VpsOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsOrderDetailInput)(nil)).Elem(), VpsOrderDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsOrderDetailArrayInput)(nil)).Elem(), VpsOrderDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanInput)(nil)).Elem(), VpsPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanArrayInput)(nil)).Elem(), VpsPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanConfigurationInput)(nil)).Elem(), VpsPlanConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanConfigurationArrayInput)(nil)).Elem(), VpsPlanConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanOptionInput)(nil)).Elem(), VpsPlanOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanOptionArrayInput)(nil)).Elem(), VpsPlanOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanOptionConfigurationInput)(nil)).Elem(), VpsPlanOptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpsPlanOptionConfigurationArrayInput)(nil)).Elem(), VpsPlanOptionConfigurationArray{})
	pulumi.RegisterOutputType(VpsIamOutput{})
	pulumi.RegisterOutputType(VpsIamPtrOutput{})
	pulumi.RegisterOutputType(VpsModelOutput{})
	pulumi.RegisterOutputType(VpsModelPtrOutput{})
	pulumi.RegisterOutputType(VpsOrderOutput{})
	pulumi.RegisterOutputType(VpsOrderPtrOutput{})
	pulumi.RegisterOutputType(VpsOrderDetailOutput{})
	pulumi.RegisterOutputType(VpsOrderDetailArrayOutput{})
	pulumi.RegisterOutputType(VpsPlanOutput{})
	pulumi.RegisterOutputType(VpsPlanArrayOutput{})
	pulumi.RegisterOutputType(VpsPlanConfigurationOutput{})
	pulumi.RegisterOutputType(VpsPlanConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VpsPlanOptionOutput{})
	pulumi.RegisterOutputType(VpsPlanOptionArrayOutput{})
	pulumi.RegisterOutputType(VpsPlanOptionConfigurationOutput{})
	pulumi.RegisterOutputType(VpsPlanOptionConfigurationArrayOutput{})
}
