// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ovh

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh"
//	"github.com/pulumi/pulumi-time/sdk/go/time"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			efs, err := ovh.GetStorageEfs(ctx, &ovh.GetStorageEfsArgs{
//				ServiceName: "XXX",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// This resource will destroy (at least) 10 seconds after ovh_storage_efs_share_snapshot resource
//			share, err := ovh.NewStorageEfsShare(ctx, "share", &ovh.StorageEfsShareArgs{
//				ServiceName: pulumi.String(efs.ServiceName),
//				Name:        pulumi.String("share"),
//				Description: pulumi.String("My share"),
//				Protocol:    pulumi.String("NFS"),
//				Size:        pulumi.Float64(100),
//			})
//			if err != nil {
//				return err
//			}
//			// This resource adds a delay between ovh_storage_efs_share_snapshot and ovh_storage_efs_share resources destruction
//			wait10Seconds, err := time.NewSleep(ctx, "wait_10_seconds", &time.SleepArgs{
//				DestroyDuration: "10s",
//			}, pulumi.DependsOn([]pulumi.Resource{
//				share,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = ovh.NewStorageEfsShareSnapshot(ctx, "snapshot", &ovh.StorageEfsShareSnapshotArgs{
//				ServiceName: pulumi.String(efs.ServiceName),
//				ShareId:     share.ID(),
//				Name:        pulumi.String("snapshot"),
//				Description: pulumi.String("My snapshot"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				wait10Seconds,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type StorageEfsShareSnapshot struct {
	pulumi.CustomResourceState

	// Snapshot creation date
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Snapshot description
	Description pulumi.StringOutput `pulumi:"description"`
	// Snapshot name
	Name pulumi.StringOutput `pulumi:"name"`
	// Snapshot path
	Path pulumi.StringOutput `pulumi:"path"`
	// Service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Share ID
	ShareId pulumi.StringOutput `pulumi:"shareId"`
	// Snapshot status
	Status pulumi.StringOutput `pulumi:"status"`
	// Snapshot type
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStorageEfsShareSnapshot registers a new resource with the given unique name, arguments, and options.
func NewStorageEfsShareSnapshot(ctx *pulumi.Context,
	name string, args *StorageEfsShareSnapshotArgs, opts ...pulumi.ResourceOption) (*StorageEfsShareSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.ShareId == nil {
		return nil, errors.New("invalid value for required argument 'ShareId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageEfsShareSnapshot
	err := ctx.RegisterResource("ovh:index/storageEfsShareSnapshot:StorageEfsShareSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageEfsShareSnapshot gets an existing StorageEfsShareSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageEfsShareSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageEfsShareSnapshotState, opts ...pulumi.ResourceOption) (*StorageEfsShareSnapshot, error) {
	var resource StorageEfsShareSnapshot
	err := ctx.ReadResource("ovh:index/storageEfsShareSnapshot:StorageEfsShareSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageEfsShareSnapshot resources.
type storageEfsShareSnapshotState struct {
	// Snapshot creation date
	CreatedAt *string `pulumi:"createdAt"`
	// Snapshot description
	Description *string `pulumi:"description"`
	// Snapshot name
	Name *string `pulumi:"name"`
	// Snapshot path
	Path *string `pulumi:"path"`
	// Service name
	ServiceName *string `pulumi:"serviceName"`
	// Share ID
	ShareId *string `pulumi:"shareId"`
	// Snapshot status
	Status *string `pulumi:"status"`
	// Snapshot type
	Type *string `pulumi:"type"`
}

type StorageEfsShareSnapshotState struct {
	// Snapshot creation date
	CreatedAt pulumi.StringPtrInput
	// Snapshot description
	Description pulumi.StringPtrInput
	// Snapshot name
	Name pulumi.StringPtrInput
	// Snapshot path
	Path pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringPtrInput
	// Share ID
	ShareId pulumi.StringPtrInput
	// Snapshot status
	Status pulumi.StringPtrInput
	// Snapshot type
	Type pulumi.StringPtrInput
}

func (StorageEfsShareSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageEfsShareSnapshotState)(nil)).Elem()
}

type storageEfsShareSnapshotArgs struct {
	// Snapshot description
	Description *string `pulumi:"description"`
	// Snapshot name
	Name *string `pulumi:"name"`
	// Service name
	ServiceName string `pulumi:"serviceName"`
	// Share ID
	ShareId string `pulumi:"shareId"`
}

// The set of arguments for constructing a StorageEfsShareSnapshot resource.
type StorageEfsShareSnapshotArgs struct {
	// Snapshot description
	Description pulumi.StringPtrInput
	// Snapshot name
	Name pulumi.StringPtrInput
	// Service name
	ServiceName pulumi.StringInput
	// Share ID
	ShareId pulumi.StringInput
}

func (StorageEfsShareSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageEfsShareSnapshotArgs)(nil)).Elem()
}

type StorageEfsShareSnapshotInput interface {
	pulumi.Input

	ToStorageEfsShareSnapshotOutput() StorageEfsShareSnapshotOutput
	ToStorageEfsShareSnapshotOutputWithContext(ctx context.Context) StorageEfsShareSnapshotOutput
}

func (*StorageEfsShareSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageEfsShareSnapshot)(nil)).Elem()
}

func (i *StorageEfsShareSnapshot) ToStorageEfsShareSnapshotOutput() StorageEfsShareSnapshotOutput {
	return i.ToStorageEfsShareSnapshotOutputWithContext(context.Background())
}

func (i *StorageEfsShareSnapshot) ToStorageEfsShareSnapshotOutputWithContext(ctx context.Context) StorageEfsShareSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareSnapshotOutput)
}

// StorageEfsShareSnapshotArrayInput is an input type that accepts StorageEfsShareSnapshotArray and StorageEfsShareSnapshotArrayOutput values.
// You can construct a concrete instance of `StorageEfsShareSnapshotArrayInput` via:
//
//	StorageEfsShareSnapshotArray{ StorageEfsShareSnapshotArgs{...} }
type StorageEfsShareSnapshotArrayInput interface {
	pulumi.Input

	ToStorageEfsShareSnapshotArrayOutput() StorageEfsShareSnapshotArrayOutput
	ToStorageEfsShareSnapshotArrayOutputWithContext(context.Context) StorageEfsShareSnapshotArrayOutput
}

type StorageEfsShareSnapshotArray []StorageEfsShareSnapshotInput

func (StorageEfsShareSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageEfsShareSnapshot)(nil)).Elem()
}

func (i StorageEfsShareSnapshotArray) ToStorageEfsShareSnapshotArrayOutput() StorageEfsShareSnapshotArrayOutput {
	return i.ToStorageEfsShareSnapshotArrayOutputWithContext(context.Background())
}

func (i StorageEfsShareSnapshotArray) ToStorageEfsShareSnapshotArrayOutputWithContext(ctx context.Context) StorageEfsShareSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareSnapshotArrayOutput)
}

// StorageEfsShareSnapshotMapInput is an input type that accepts StorageEfsShareSnapshotMap and StorageEfsShareSnapshotMapOutput values.
// You can construct a concrete instance of `StorageEfsShareSnapshotMapInput` via:
//
//	StorageEfsShareSnapshotMap{ "key": StorageEfsShareSnapshotArgs{...} }
type StorageEfsShareSnapshotMapInput interface {
	pulumi.Input

	ToStorageEfsShareSnapshotMapOutput() StorageEfsShareSnapshotMapOutput
	ToStorageEfsShareSnapshotMapOutputWithContext(context.Context) StorageEfsShareSnapshotMapOutput
}

type StorageEfsShareSnapshotMap map[string]StorageEfsShareSnapshotInput

func (StorageEfsShareSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageEfsShareSnapshot)(nil)).Elem()
}

func (i StorageEfsShareSnapshotMap) ToStorageEfsShareSnapshotMapOutput() StorageEfsShareSnapshotMapOutput {
	return i.ToStorageEfsShareSnapshotMapOutputWithContext(context.Background())
}

func (i StorageEfsShareSnapshotMap) ToStorageEfsShareSnapshotMapOutputWithContext(ctx context.Context) StorageEfsShareSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageEfsShareSnapshotMapOutput)
}

type StorageEfsShareSnapshotOutput struct{ *pulumi.OutputState }

func (StorageEfsShareSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageEfsShareSnapshot)(nil)).Elem()
}

func (o StorageEfsShareSnapshotOutput) ToStorageEfsShareSnapshotOutput() StorageEfsShareSnapshotOutput {
	return o
}

func (o StorageEfsShareSnapshotOutput) ToStorageEfsShareSnapshotOutputWithContext(ctx context.Context) StorageEfsShareSnapshotOutput {
	return o
}

// Snapshot creation date
func (o StorageEfsShareSnapshotOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Snapshot description
func (o StorageEfsShareSnapshotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Snapshot name
func (o StorageEfsShareSnapshotOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Snapshot path
func (o StorageEfsShareSnapshotOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Service name
func (o StorageEfsShareSnapshotOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Share ID
func (o StorageEfsShareSnapshotOutput) ShareId() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.ShareId }).(pulumi.StringOutput)
}

// Snapshot status
func (o StorageEfsShareSnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Snapshot type
func (o StorageEfsShareSnapshotOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageEfsShareSnapshot) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type StorageEfsShareSnapshotArrayOutput struct{ *pulumi.OutputState }

func (StorageEfsShareSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageEfsShareSnapshot)(nil)).Elem()
}

func (o StorageEfsShareSnapshotArrayOutput) ToStorageEfsShareSnapshotArrayOutput() StorageEfsShareSnapshotArrayOutput {
	return o
}

func (o StorageEfsShareSnapshotArrayOutput) ToStorageEfsShareSnapshotArrayOutputWithContext(ctx context.Context) StorageEfsShareSnapshotArrayOutput {
	return o
}

func (o StorageEfsShareSnapshotArrayOutput) Index(i pulumi.IntInput) StorageEfsShareSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageEfsShareSnapshot {
		return vs[0].([]*StorageEfsShareSnapshot)[vs[1].(int)]
	}).(StorageEfsShareSnapshotOutput)
}

type StorageEfsShareSnapshotMapOutput struct{ *pulumi.OutputState }

func (StorageEfsShareSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageEfsShareSnapshot)(nil)).Elem()
}

func (o StorageEfsShareSnapshotMapOutput) ToStorageEfsShareSnapshotMapOutput() StorageEfsShareSnapshotMapOutput {
	return o
}

func (o StorageEfsShareSnapshotMapOutput) ToStorageEfsShareSnapshotMapOutputWithContext(ctx context.Context) StorageEfsShareSnapshotMapOutput {
	return o
}

func (o StorageEfsShareSnapshotMapOutput) MapIndex(k pulumi.StringInput) StorageEfsShareSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageEfsShareSnapshot {
		return vs[0].(map[string]*StorageEfsShareSnapshot)[vs[1].(string)]
	}).(StorageEfsShareSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareSnapshotInput)(nil)).Elem(), &StorageEfsShareSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareSnapshotArrayInput)(nil)).Elem(), StorageEfsShareSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageEfsShareSnapshotMapInput)(nil)).Elem(), StorageEfsShareSnapshotMap{})
	pulumi.RegisterOutputType(StorageEfsShareSnapshotOutput{})
	pulumi.RegisterOutputType(StorageEfsShareSnapshotArrayOutput{})
	pulumi.RegisterOutputType(StorageEfsShareSnapshotMapOutput{})
}
