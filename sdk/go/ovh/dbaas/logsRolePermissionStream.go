// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reference a DBaaS logs role stream permission.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/dbaas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dbaas.NewLogsRolePermissionStream(ctx, "permission", &dbaas.LogsRolePermissionStreamArgs{
//				ServiceName: pulumi.String("ldp-xx-xxxxx"),
//				RoleId:      pulumi.Any(ovh_dbaas_logs_role.Ro.Id),
//				StreamId:    pulumi.Any(ovh_dbaas_logs_output_graylog_stream.Mystream.Stream_id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DBaaS logs role stream permission can be imported using the `service_name`, `role_id` and `id`  of the permission, separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream ovh_dbaas_logs_role_permission_stream.perm ldp-ra-XX/dc145bc2-eb01-4efe-a802-XXXXXX/e4818fa8-f426-11ef-a1f6-XXXXXXX
// ```
type LogsRolePermissionStream struct {
	pulumi.CustomResourceState

	// Permission ID
	PermissionId pulumi.StringOutput `pulumi:"permissionId"`
	// Permission type (e.g., READ_ONLY)
	PermissionType pulumi.StringOutput `pulumi:"permissionType"`
	// The DBaaS Logs role id
	RoleId pulumi.StringOutput `pulumi:"roleId"`
	// The service name
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// The DBaaS Logs Graylog output stream id
	StreamId pulumi.StringOutput `pulumi:"streamId"`
}

// NewLogsRolePermissionStream registers a new resource with the given unique name, arguments, and options.
func NewLogsRolePermissionStream(ctx *pulumi.Context,
	name string, args *LogsRolePermissionStreamArgs, opts ...pulumi.ResourceOption) (*LogsRolePermissionStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.StreamId == nil {
		return nil, errors.New("invalid value for required argument 'StreamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogsRolePermissionStream
	err := ctx.RegisterResource("ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsRolePermissionStream gets an existing LogsRolePermissionStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsRolePermissionStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsRolePermissionStreamState, opts ...pulumi.ResourceOption) (*LogsRolePermissionStream, error) {
	var resource LogsRolePermissionStream
	err := ctx.ReadResource("ovh:Dbaas/logsRolePermissionStream:LogsRolePermissionStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsRolePermissionStream resources.
type logsRolePermissionStreamState struct {
	// Permission ID
	PermissionId *string `pulumi:"permissionId"`
	// Permission type (e.g., READ_ONLY)
	PermissionType *string `pulumi:"permissionType"`
	// The DBaaS Logs role id
	RoleId *string `pulumi:"roleId"`
	// The service name
	ServiceName *string `pulumi:"serviceName"`
	// The DBaaS Logs Graylog output stream id
	StreamId *string `pulumi:"streamId"`
}

type LogsRolePermissionStreamState struct {
	// Permission ID
	PermissionId pulumi.StringPtrInput
	// Permission type (e.g., READ_ONLY)
	PermissionType pulumi.StringPtrInput
	// The DBaaS Logs role id
	RoleId pulumi.StringPtrInput
	// The service name
	ServiceName pulumi.StringPtrInput
	// The DBaaS Logs Graylog output stream id
	StreamId pulumi.StringPtrInput
}

func (LogsRolePermissionStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsRolePermissionStreamState)(nil)).Elem()
}

type logsRolePermissionStreamArgs struct {
	// The DBaaS Logs role id
	RoleId string `pulumi:"roleId"`
	// The service name
	ServiceName string `pulumi:"serviceName"`
	// The DBaaS Logs Graylog output stream id
	StreamId string `pulumi:"streamId"`
}

// The set of arguments for constructing a LogsRolePermissionStream resource.
type LogsRolePermissionStreamArgs struct {
	// The DBaaS Logs role id
	RoleId pulumi.StringInput
	// The service name
	ServiceName pulumi.StringInput
	// The DBaaS Logs Graylog output stream id
	StreamId pulumi.StringInput
}

func (LogsRolePermissionStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsRolePermissionStreamArgs)(nil)).Elem()
}

type LogsRolePermissionStreamInput interface {
	pulumi.Input

	ToLogsRolePermissionStreamOutput() LogsRolePermissionStreamOutput
	ToLogsRolePermissionStreamOutputWithContext(ctx context.Context) LogsRolePermissionStreamOutput
}

func (*LogsRolePermissionStream) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsRolePermissionStream)(nil)).Elem()
}

func (i *LogsRolePermissionStream) ToLogsRolePermissionStreamOutput() LogsRolePermissionStreamOutput {
	return i.ToLogsRolePermissionStreamOutputWithContext(context.Background())
}

func (i *LogsRolePermissionStream) ToLogsRolePermissionStreamOutputWithContext(ctx context.Context) LogsRolePermissionStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsRolePermissionStreamOutput)
}

// LogsRolePermissionStreamArrayInput is an input type that accepts LogsRolePermissionStreamArray and LogsRolePermissionStreamArrayOutput values.
// You can construct a concrete instance of `LogsRolePermissionStreamArrayInput` via:
//
//	LogsRolePermissionStreamArray{ LogsRolePermissionStreamArgs{...} }
type LogsRolePermissionStreamArrayInput interface {
	pulumi.Input

	ToLogsRolePermissionStreamArrayOutput() LogsRolePermissionStreamArrayOutput
	ToLogsRolePermissionStreamArrayOutputWithContext(context.Context) LogsRolePermissionStreamArrayOutput
}

type LogsRolePermissionStreamArray []LogsRolePermissionStreamInput

func (LogsRolePermissionStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsRolePermissionStream)(nil)).Elem()
}

func (i LogsRolePermissionStreamArray) ToLogsRolePermissionStreamArrayOutput() LogsRolePermissionStreamArrayOutput {
	return i.ToLogsRolePermissionStreamArrayOutputWithContext(context.Background())
}

func (i LogsRolePermissionStreamArray) ToLogsRolePermissionStreamArrayOutputWithContext(ctx context.Context) LogsRolePermissionStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsRolePermissionStreamArrayOutput)
}

// LogsRolePermissionStreamMapInput is an input type that accepts LogsRolePermissionStreamMap and LogsRolePermissionStreamMapOutput values.
// You can construct a concrete instance of `LogsRolePermissionStreamMapInput` via:
//
//	LogsRolePermissionStreamMap{ "key": LogsRolePermissionStreamArgs{...} }
type LogsRolePermissionStreamMapInput interface {
	pulumi.Input

	ToLogsRolePermissionStreamMapOutput() LogsRolePermissionStreamMapOutput
	ToLogsRolePermissionStreamMapOutputWithContext(context.Context) LogsRolePermissionStreamMapOutput
}

type LogsRolePermissionStreamMap map[string]LogsRolePermissionStreamInput

func (LogsRolePermissionStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsRolePermissionStream)(nil)).Elem()
}

func (i LogsRolePermissionStreamMap) ToLogsRolePermissionStreamMapOutput() LogsRolePermissionStreamMapOutput {
	return i.ToLogsRolePermissionStreamMapOutputWithContext(context.Background())
}

func (i LogsRolePermissionStreamMap) ToLogsRolePermissionStreamMapOutputWithContext(ctx context.Context) LogsRolePermissionStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsRolePermissionStreamMapOutput)
}

type LogsRolePermissionStreamOutput struct{ *pulumi.OutputState }

func (LogsRolePermissionStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogsRolePermissionStream)(nil)).Elem()
}

func (o LogsRolePermissionStreamOutput) ToLogsRolePermissionStreamOutput() LogsRolePermissionStreamOutput {
	return o
}

func (o LogsRolePermissionStreamOutput) ToLogsRolePermissionStreamOutputWithContext(ctx context.Context) LogsRolePermissionStreamOutput {
	return o
}

// Permission ID
func (o LogsRolePermissionStreamOutput) PermissionId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsRolePermissionStream) pulumi.StringOutput { return v.PermissionId }).(pulumi.StringOutput)
}

// Permission type (e.g., READ_ONLY)
func (o LogsRolePermissionStreamOutput) PermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsRolePermissionStream) pulumi.StringOutput { return v.PermissionType }).(pulumi.StringOutput)
}

// The DBaaS Logs role id
func (o LogsRolePermissionStreamOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsRolePermissionStream) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

// The service name
func (o LogsRolePermissionStreamOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsRolePermissionStream) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// The DBaaS Logs Graylog output stream id
func (o LogsRolePermissionStreamOutput) StreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *LogsRolePermissionStream) pulumi.StringOutput { return v.StreamId }).(pulumi.StringOutput)
}

type LogsRolePermissionStreamArrayOutput struct{ *pulumi.OutputState }

func (LogsRolePermissionStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogsRolePermissionStream)(nil)).Elem()
}

func (o LogsRolePermissionStreamArrayOutput) ToLogsRolePermissionStreamArrayOutput() LogsRolePermissionStreamArrayOutput {
	return o
}

func (o LogsRolePermissionStreamArrayOutput) ToLogsRolePermissionStreamArrayOutputWithContext(ctx context.Context) LogsRolePermissionStreamArrayOutput {
	return o
}

func (o LogsRolePermissionStreamArrayOutput) Index(i pulumi.IntInput) LogsRolePermissionStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogsRolePermissionStream {
		return vs[0].([]*LogsRolePermissionStream)[vs[1].(int)]
	}).(LogsRolePermissionStreamOutput)
}

type LogsRolePermissionStreamMapOutput struct{ *pulumi.OutputState }

func (LogsRolePermissionStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogsRolePermissionStream)(nil)).Elem()
}

func (o LogsRolePermissionStreamMapOutput) ToLogsRolePermissionStreamMapOutput() LogsRolePermissionStreamMapOutput {
	return o
}

func (o LogsRolePermissionStreamMapOutput) ToLogsRolePermissionStreamMapOutputWithContext(ctx context.Context) LogsRolePermissionStreamMapOutput {
	return o
}

func (o LogsRolePermissionStreamMapOutput) MapIndex(k pulumi.StringInput) LogsRolePermissionStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogsRolePermissionStream {
		return vs[0].(map[string]*LogsRolePermissionStream)[vs[1].(string)]
	}).(LogsRolePermissionStreamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogsRolePermissionStreamInput)(nil)).Elem(), &LogsRolePermissionStream{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsRolePermissionStreamArrayInput)(nil)).Elem(), LogsRolePermissionStreamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogsRolePermissionStreamMapInput)(nil)).Elem(), LogsRolePermissionStreamMap{})
	pulumi.RegisterOutputType(LogsRolePermissionStreamOutput{})
	pulumi.RegisterOutputType(LogsRolePermissionStreamArrayOutput{})
	pulumi.RegisterOutputType(LogsRolePermissionStreamMapOutput{})
}
