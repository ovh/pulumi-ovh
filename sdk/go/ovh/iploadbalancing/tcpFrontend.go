// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TcpFrontend struct {
	pulumi.CustomResourceState

	AllowedSources pulumi.StringArrayOutput `pulumi:"allowedSources"`
	DedicatedIpfos pulumi.StringArrayOutput `pulumi:"dedicatedIpfos"`
	DefaultFarmId  pulumi.IntOutput         `pulumi:"defaultFarmId"`
	DefaultSslId   pulumi.IntOutput         `pulumi:"defaultSslId"`
	DeniedSources  pulumi.StringArrayOutput `pulumi:"deniedSources"`
	Disabled       pulumi.BoolPtrOutput     `pulumi:"disabled"`
	DisplayName    pulumi.StringPtrOutput   `pulumi:"displayName"`
	Port           pulumi.StringOutput      `pulumi:"port"`
	ServiceName    pulumi.StringOutput      `pulumi:"serviceName"`
	Ssl            pulumi.BoolPtrOutput     `pulumi:"ssl"`
	Zone           pulumi.StringOutput      `pulumi:"zone"`
}

// NewTcpFrontend registers a new resource with the given unique name, arguments, and options.
func NewTcpFrontend(ctx *pulumi.Context,
	name string, args *TcpFrontendArgs, opts ...pulumi.ResourceOption) (*TcpFrontend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TcpFrontend
	err := ctx.RegisterResource("ovh:IpLoadBalancing/tcpFrontend:TcpFrontend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTcpFrontend gets an existing TcpFrontend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTcpFrontend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TcpFrontendState, opts ...pulumi.ResourceOption) (*TcpFrontend, error) {
	var resource TcpFrontend
	err := ctx.ReadResource("ovh:IpLoadBalancing/tcpFrontend:TcpFrontend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TcpFrontend resources.
type tcpFrontendState struct {
	AllowedSources []string `pulumi:"allowedSources"`
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	DefaultFarmId  *int     `pulumi:"defaultFarmId"`
	DefaultSslId   *int     `pulumi:"defaultSslId"`
	DeniedSources  []string `pulumi:"deniedSources"`
	Disabled       *bool    `pulumi:"disabled"`
	DisplayName    *string  `pulumi:"displayName"`
	Port           *string  `pulumi:"port"`
	ServiceName    *string  `pulumi:"serviceName"`
	Ssl            *bool    `pulumi:"ssl"`
	Zone           *string  `pulumi:"zone"`
}

type TcpFrontendState struct {
	AllowedSources pulumi.StringArrayInput
	DedicatedIpfos pulumi.StringArrayInput
	DefaultFarmId  pulumi.IntPtrInput
	DefaultSslId   pulumi.IntPtrInput
	DeniedSources  pulumi.StringArrayInput
	Disabled       pulumi.BoolPtrInput
	DisplayName    pulumi.StringPtrInput
	Port           pulumi.StringPtrInput
	ServiceName    pulumi.StringPtrInput
	Ssl            pulumi.BoolPtrInput
	Zone           pulumi.StringPtrInput
}

func (TcpFrontendState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpFrontendState)(nil)).Elem()
}

type tcpFrontendArgs struct {
	AllowedSources []string `pulumi:"allowedSources"`
	DedicatedIpfos []string `pulumi:"dedicatedIpfos"`
	DefaultFarmId  *int     `pulumi:"defaultFarmId"`
	DefaultSslId   *int     `pulumi:"defaultSslId"`
	DeniedSources  []string `pulumi:"deniedSources"`
	Disabled       *bool    `pulumi:"disabled"`
	DisplayName    *string  `pulumi:"displayName"`
	Port           string   `pulumi:"port"`
	ServiceName    string   `pulumi:"serviceName"`
	Ssl            *bool    `pulumi:"ssl"`
	Zone           string   `pulumi:"zone"`
}

// The set of arguments for constructing a TcpFrontend resource.
type TcpFrontendArgs struct {
	AllowedSources pulumi.StringArrayInput
	DedicatedIpfos pulumi.StringArrayInput
	DefaultFarmId  pulumi.IntPtrInput
	DefaultSslId   pulumi.IntPtrInput
	DeniedSources  pulumi.StringArrayInput
	Disabled       pulumi.BoolPtrInput
	DisplayName    pulumi.StringPtrInput
	Port           pulumi.StringInput
	ServiceName    pulumi.StringInput
	Ssl            pulumi.BoolPtrInput
	Zone           pulumi.StringInput
}

func (TcpFrontendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpFrontendArgs)(nil)).Elem()
}

type TcpFrontendInput interface {
	pulumi.Input

	ToTcpFrontendOutput() TcpFrontendOutput
	ToTcpFrontendOutputWithContext(ctx context.Context) TcpFrontendOutput
}

func (*TcpFrontend) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFrontend)(nil)).Elem()
}

func (i *TcpFrontend) ToTcpFrontendOutput() TcpFrontendOutput {
	return i.ToTcpFrontendOutputWithContext(context.Background())
}

func (i *TcpFrontend) ToTcpFrontendOutputWithContext(ctx context.Context) TcpFrontendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFrontendOutput)
}

// TcpFrontendArrayInput is an input type that accepts TcpFrontendArray and TcpFrontendArrayOutput values.
// You can construct a concrete instance of `TcpFrontendArrayInput` via:
//
//	TcpFrontendArray{ TcpFrontendArgs{...} }
type TcpFrontendArrayInput interface {
	pulumi.Input

	ToTcpFrontendArrayOutput() TcpFrontendArrayOutput
	ToTcpFrontendArrayOutputWithContext(context.Context) TcpFrontendArrayOutput
}

type TcpFrontendArray []TcpFrontendInput

func (TcpFrontendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpFrontend)(nil)).Elem()
}

func (i TcpFrontendArray) ToTcpFrontendArrayOutput() TcpFrontendArrayOutput {
	return i.ToTcpFrontendArrayOutputWithContext(context.Background())
}

func (i TcpFrontendArray) ToTcpFrontendArrayOutputWithContext(ctx context.Context) TcpFrontendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFrontendArrayOutput)
}

// TcpFrontendMapInput is an input type that accepts TcpFrontendMap and TcpFrontendMapOutput values.
// You can construct a concrete instance of `TcpFrontendMapInput` via:
//
//	TcpFrontendMap{ "key": TcpFrontendArgs{...} }
type TcpFrontendMapInput interface {
	pulumi.Input

	ToTcpFrontendMapOutput() TcpFrontendMapOutput
	ToTcpFrontendMapOutputWithContext(context.Context) TcpFrontendMapOutput
}

type TcpFrontendMap map[string]TcpFrontendInput

func (TcpFrontendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpFrontend)(nil)).Elem()
}

func (i TcpFrontendMap) ToTcpFrontendMapOutput() TcpFrontendMapOutput {
	return i.ToTcpFrontendMapOutputWithContext(context.Background())
}

func (i TcpFrontendMap) ToTcpFrontendMapOutputWithContext(ctx context.Context) TcpFrontendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFrontendMapOutput)
}

type TcpFrontendOutput struct{ *pulumi.OutputState }

func (TcpFrontendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFrontend)(nil)).Elem()
}

func (o TcpFrontendOutput) ToTcpFrontendOutput() TcpFrontendOutput {
	return o
}

func (o TcpFrontendOutput) ToTcpFrontendOutputWithContext(ctx context.Context) TcpFrontendOutput {
	return o
}

func (o TcpFrontendOutput) AllowedSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringArrayOutput { return v.AllowedSources }).(pulumi.StringArrayOutput)
}

func (o TcpFrontendOutput) DedicatedIpfos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringArrayOutput { return v.DedicatedIpfos }).(pulumi.StringArrayOutput)
}

func (o TcpFrontendOutput) DefaultFarmId() pulumi.IntOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.IntOutput { return v.DefaultFarmId }).(pulumi.IntOutput)
}

func (o TcpFrontendOutput) DefaultSslId() pulumi.IntOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.IntOutput { return v.DefaultSslId }).(pulumi.IntOutput)
}

func (o TcpFrontendOutput) DeniedSources() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringArrayOutput { return v.DeniedSources }).(pulumi.StringArrayOutput)
}

func (o TcpFrontendOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

func (o TcpFrontendOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o TcpFrontendOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringOutput { return v.Port }).(pulumi.StringOutput)
}

func (o TcpFrontendOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o TcpFrontendOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.BoolPtrOutput { return v.Ssl }).(pulumi.BoolPtrOutput)
}

func (o TcpFrontendOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFrontend) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type TcpFrontendArrayOutput struct{ *pulumi.OutputState }

func (TcpFrontendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpFrontend)(nil)).Elem()
}

func (o TcpFrontendArrayOutput) ToTcpFrontendArrayOutput() TcpFrontendArrayOutput {
	return o
}

func (o TcpFrontendArrayOutput) ToTcpFrontendArrayOutputWithContext(ctx context.Context) TcpFrontendArrayOutput {
	return o
}

func (o TcpFrontendArrayOutput) Index(i pulumi.IntInput) TcpFrontendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TcpFrontend {
		return vs[0].([]*TcpFrontend)[vs[1].(int)]
	}).(TcpFrontendOutput)
}

type TcpFrontendMapOutput struct{ *pulumi.OutputState }

func (TcpFrontendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpFrontend)(nil)).Elem()
}

func (o TcpFrontendMapOutput) ToTcpFrontendMapOutput() TcpFrontendMapOutput {
	return o
}

func (o TcpFrontendMapOutput) ToTcpFrontendMapOutputWithContext(ctx context.Context) TcpFrontendMapOutput {
	return o
}

func (o TcpFrontendMapOutput) MapIndex(k pulumi.StringInput) TcpFrontendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TcpFrontend {
		return vs[0].(map[string]*TcpFrontend)[vs[1].(string)]
	}).(TcpFrontendOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFrontendInput)(nil)).Elem(), &TcpFrontend{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFrontendArrayInput)(nil)).Elem(), TcpFrontendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFrontendMapInput)(nil)).Elem(), TcpFrontendMap{})
	pulumi.RegisterOutputType(TcpFrontendOutput{})
	pulumi.RegisterOutputType(TcpFrontendArrayOutput{})
	pulumi.RegisterOutputType(TcpFrontendMapOutput{})
}
