// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HttpFarmProbe struct {
	// Force use of SSL (TLS)
	ForceSsl *bool `pulumi:"forceSsl"`
	// probe interval, Value between 30 and 3600 seconds, default 30
	Interval *int `pulumi:"interval"`
	// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
	Match *string `pulumi:"match"`
	// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
	Method *string `pulumi:"method"`
	// Negate probe result
	Negate *bool `pulumi:"negate"`
	// Pattern to match against `match`
	Pattern *string `pulumi:"pattern"`
	// Port for backends to receive traffic on.
	Port *int `pulumi:"port"`
	// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
	Type string `pulumi:"type"`
	// URL for HTTP probe type.
	Url *string `pulumi:"url"`
}

// HttpFarmProbeInput is an input type that accepts HttpFarmProbeArgs and HttpFarmProbeOutput values.
// You can construct a concrete instance of `HttpFarmProbeInput` via:
//
//	HttpFarmProbeArgs{...}
type HttpFarmProbeInput interface {
	pulumi.Input

	ToHttpFarmProbeOutput() HttpFarmProbeOutput
	ToHttpFarmProbeOutputWithContext(context.Context) HttpFarmProbeOutput
}

type HttpFarmProbeArgs struct {
	// Force use of SSL (TLS)
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	// probe interval, Value between 30 and 3600 seconds, default 30
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
	Match pulumi.StringPtrInput `pulumi:"match"`
	// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Negate probe result
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// Pattern to match against `match`
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Port for backends to receive traffic on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
	Type pulumi.StringInput `pulumi:"type"`
	// URL for HTTP probe type.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (HttpFarmProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFarmProbe)(nil)).Elem()
}

func (i HttpFarmProbeArgs) ToHttpFarmProbeOutput() HttpFarmProbeOutput {
	return i.ToHttpFarmProbeOutputWithContext(context.Background())
}

func (i HttpFarmProbeArgs) ToHttpFarmProbeOutputWithContext(ctx context.Context) HttpFarmProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFarmProbeOutput)
}

func (i HttpFarmProbeArgs) ToHttpFarmProbePtrOutput() HttpFarmProbePtrOutput {
	return i.ToHttpFarmProbePtrOutputWithContext(context.Background())
}

func (i HttpFarmProbeArgs) ToHttpFarmProbePtrOutputWithContext(ctx context.Context) HttpFarmProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFarmProbeOutput).ToHttpFarmProbePtrOutputWithContext(ctx)
}

// HttpFarmProbePtrInput is an input type that accepts HttpFarmProbeArgs, HttpFarmProbePtr and HttpFarmProbePtrOutput values.
// You can construct a concrete instance of `HttpFarmProbePtrInput` via:
//
//	        HttpFarmProbeArgs{...}
//
//	or:
//
//	        nil
type HttpFarmProbePtrInput interface {
	pulumi.Input

	ToHttpFarmProbePtrOutput() HttpFarmProbePtrOutput
	ToHttpFarmProbePtrOutputWithContext(context.Context) HttpFarmProbePtrOutput
}

type httpFarmProbePtrType HttpFarmProbeArgs

func HttpFarmProbePtr(v *HttpFarmProbeArgs) HttpFarmProbePtrInput {
	return (*httpFarmProbePtrType)(v)
}

func (*httpFarmProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFarmProbe)(nil)).Elem()
}

func (i *httpFarmProbePtrType) ToHttpFarmProbePtrOutput() HttpFarmProbePtrOutput {
	return i.ToHttpFarmProbePtrOutputWithContext(context.Background())
}

func (i *httpFarmProbePtrType) ToHttpFarmProbePtrOutputWithContext(ctx context.Context) HttpFarmProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpFarmProbePtrOutput)
}

type HttpFarmProbeOutput struct{ *pulumi.OutputState }

func (HttpFarmProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpFarmProbe)(nil)).Elem()
}

func (o HttpFarmProbeOutput) ToHttpFarmProbeOutput() HttpFarmProbeOutput {
	return o
}

func (o HttpFarmProbeOutput) ToHttpFarmProbeOutputWithContext(ctx context.Context) HttpFarmProbeOutput {
	return o
}

func (o HttpFarmProbeOutput) ToHttpFarmProbePtrOutput() HttpFarmProbePtrOutput {
	return o.ToHttpFarmProbePtrOutputWithContext(context.Background())
}

func (o HttpFarmProbeOutput) ToHttpFarmProbePtrOutputWithContext(ctx context.Context) HttpFarmProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpFarmProbe) *HttpFarmProbe {
		return &v
	}).(HttpFarmProbePtrOutput)
}

// Force use of SSL (TLS)
func (o HttpFarmProbeOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

// probe interval, Value between 30 and 3600 seconds, default 30
func (o HttpFarmProbeOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
func (o HttpFarmProbeOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
func (o HttpFarmProbeOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Negate probe result
func (o HttpFarmProbeOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// Pattern to match against `match`
func (o HttpFarmProbeOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Port for backends to receive traffic on.
func (o HttpFarmProbeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
func (o HttpFarmProbeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpFarmProbe) string { return v.Type }).(pulumi.StringOutput)
}

// URL for HTTP probe type.
func (o HttpFarmProbeOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpFarmProbe) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type HttpFarmProbePtrOutput struct{ *pulumi.OutputState }

func (HttpFarmProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpFarmProbe)(nil)).Elem()
}

func (o HttpFarmProbePtrOutput) ToHttpFarmProbePtrOutput() HttpFarmProbePtrOutput {
	return o
}

func (o HttpFarmProbePtrOutput) ToHttpFarmProbePtrOutputWithContext(ctx context.Context) HttpFarmProbePtrOutput {
	return o
}

func (o HttpFarmProbePtrOutput) Elem() HttpFarmProbeOutput {
	return o.ApplyT(func(v *HttpFarmProbe) HttpFarmProbe {
		if v != nil {
			return *v
		}
		var ret HttpFarmProbe
		return ret
	}).(HttpFarmProbeOutput)
}

// Force use of SSL (TLS)
func (o HttpFarmProbePtrOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *bool {
		if v == nil {
			return nil
		}
		return v.ForceSsl
	}).(pulumi.BoolPtrOutput)
}

// probe interval, Value between 30 and 3600 seconds, default 30
func (o HttpFarmProbePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
func (o HttpFarmProbePtrOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Match
	}).(pulumi.StringPtrOutput)
}

// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
func (o HttpFarmProbePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Negate probe result
func (o HttpFarmProbePtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// Pattern to match against `match`
func (o HttpFarmProbePtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// Port for backends to receive traffic on.
func (o HttpFarmProbePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
func (o HttpFarmProbePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// URL for HTTP probe type.
func (o HttpFarmProbePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type HttpRouteAction struct {
	// HTTP status code for "redirect" and "reject" actions
	Status *int `pulumi:"status"`
	// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	Target *string `pulumi:"target"`
	// Action to trigger if all the rules of this route matches
	Type string `pulumi:"type"`
}

// HttpRouteActionInput is an input type that accepts HttpRouteActionArgs and HttpRouteActionOutput values.
// You can construct a concrete instance of `HttpRouteActionInput` via:
//
//	HttpRouteActionArgs{...}
type HttpRouteActionInput interface {
	pulumi.Input

	ToHttpRouteActionOutput() HttpRouteActionOutput
	ToHttpRouteActionOutputWithContext(context.Context) HttpRouteActionOutput
}

type HttpRouteActionArgs struct {
	// HTTP status code for "redirect" and "reject" actions
	Status pulumi.IntPtrInput `pulumi:"status"`
	// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Action to trigger if all the rules of this route matches
	Type pulumi.StringInput `pulumi:"type"`
}

func (HttpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteAction)(nil)).Elem()
}

func (i HttpRouteActionArgs) ToHttpRouteActionOutput() HttpRouteActionOutput {
	return i.ToHttpRouteActionOutputWithContext(context.Background())
}

func (i HttpRouteActionArgs) ToHttpRouteActionOutputWithContext(ctx context.Context) HttpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionOutput)
}

func (i HttpRouteActionArgs) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return i.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (i HttpRouteActionArgs) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionOutput).ToHttpRouteActionPtrOutputWithContext(ctx)
}

// HttpRouteActionPtrInput is an input type that accepts HttpRouteActionArgs, HttpRouteActionPtr and HttpRouteActionPtrOutput values.
// You can construct a concrete instance of `HttpRouteActionPtrInput` via:
//
//	        HttpRouteActionArgs{...}
//
//	or:
//
//	        nil
type HttpRouteActionPtrInput interface {
	pulumi.Input

	ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput
	ToHttpRouteActionPtrOutputWithContext(context.Context) HttpRouteActionPtrOutput
}

type httpRouteActionPtrType HttpRouteActionArgs

func HttpRouteActionPtr(v *HttpRouteActionArgs) HttpRouteActionPtrInput {
	return (*httpRouteActionPtrType)(v)
}

func (*httpRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteAction)(nil)).Elem()
}

func (i *httpRouteActionPtrType) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return i.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (i *httpRouteActionPtrType) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteActionPtrOutput)
}

type HttpRouteActionOutput struct{ *pulumi.OutputState }

func (HttpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteAction)(nil)).Elem()
}

func (o HttpRouteActionOutput) ToHttpRouteActionOutput() HttpRouteActionOutput {
	return o
}

func (o HttpRouteActionOutput) ToHttpRouteActionOutputWithContext(ctx context.Context) HttpRouteActionOutput {
	return o
}

func (o HttpRouteActionOutput) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return o.ToHttpRouteActionPtrOutputWithContext(context.Background())
}

func (o HttpRouteActionOutput) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HttpRouteAction) *HttpRouteAction {
		return &v
	}).(HttpRouteActionPtrOutput)
}

// HTTP status code for "redirect" and "reject" actions
func (o HttpRouteActionOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *int { return v.Status }).(pulumi.IntPtrOutput)
}

// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
func (o HttpRouteActionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteAction) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Action to trigger if all the rules of this route matches
func (o HttpRouteActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v HttpRouteAction) string { return v.Type }).(pulumi.StringOutput)
}

type HttpRouteActionPtrOutput struct{ *pulumi.OutputState }

func (HttpRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteAction)(nil)).Elem()
}

func (o HttpRouteActionPtrOutput) ToHttpRouteActionPtrOutput() HttpRouteActionPtrOutput {
	return o
}

func (o HttpRouteActionPtrOutput) ToHttpRouteActionPtrOutputWithContext(ctx context.Context) HttpRouteActionPtrOutput {
	return o
}

func (o HttpRouteActionPtrOutput) Elem() HttpRouteActionOutput {
	return o.ApplyT(func(v *HttpRouteAction) HttpRouteAction {
		if v != nil {
			return *v
		}
		var ret HttpRouteAction
		return ret
	}).(HttpRouteActionOutput)
}

// HTTP status code for "redirect" and "reject" actions
func (o HttpRouteActionPtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *int {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.IntPtrOutput)
}

// Farm ID for "farm" action type or URL template for "redirect" action. You may use ${uri}, ${protocol}, ${host}, ${port} and ${path} variables in redirect target
func (o HttpRouteActionPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Action to trigger if all the rules of this route matches
func (o HttpRouteActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type HttpRouteRuleType struct {
	// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
	Field *string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "availableRules"
	Match *string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// Id of your rule
	RuleId *int `pulumi:"ruleId"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

// HttpRouteRuleTypeInput is an input type that accepts HttpRouteRuleTypeArgs and HttpRouteRuleTypeOutput values.
// You can construct a concrete instance of `HttpRouteRuleTypeInput` via:
//
//	HttpRouteRuleTypeArgs{...}
type HttpRouteRuleTypeInput interface {
	pulumi.Input

	ToHttpRouteRuleTypeOutput() HttpRouteRuleTypeOutput
	ToHttpRouteRuleTypeOutputWithContext(context.Context) HttpRouteRuleTypeOutput
}

type HttpRouteRuleTypeArgs struct {
	// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "availableRules"
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Id of your rule
	RuleId pulumi.IntPtrInput `pulumi:"ruleId"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput `pulumi:"subField"`
}

func (HttpRouteRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleType)(nil)).Elem()
}

func (i HttpRouteRuleTypeArgs) ToHttpRouteRuleTypeOutput() HttpRouteRuleTypeOutput {
	return i.ToHttpRouteRuleTypeOutputWithContext(context.Background())
}

func (i HttpRouteRuleTypeArgs) ToHttpRouteRuleTypeOutputWithContext(ctx context.Context) HttpRouteRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleTypeOutput)
}

// HttpRouteRuleTypeArrayInput is an input type that accepts HttpRouteRuleTypeArray and HttpRouteRuleTypeArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleTypeArrayInput` via:
//
//	HttpRouteRuleTypeArray{ HttpRouteRuleTypeArgs{...} }
type HttpRouteRuleTypeArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleTypeArrayOutput() HttpRouteRuleTypeArrayOutput
	ToHttpRouteRuleTypeArrayOutputWithContext(context.Context) HttpRouteRuleTypeArrayOutput
}

type HttpRouteRuleTypeArray []HttpRouteRuleTypeInput

func (HttpRouteRuleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleType)(nil)).Elem()
}

func (i HttpRouteRuleTypeArray) ToHttpRouteRuleTypeArrayOutput() HttpRouteRuleTypeArrayOutput {
	return i.ToHttpRouteRuleTypeArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleTypeArray) ToHttpRouteRuleTypeArrayOutputWithContext(ctx context.Context) HttpRouteRuleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleTypeArrayOutput)
}

type HttpRouteRuleTypeOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpRouteRuleType)(nil)).Elem()
}

func (o HttpRouteRuleTypeOutput) ToHttpRouteRuleTypeOutput() HttpRouteRuleTypeOutput {
	return o
}

func (o HttpRouteRuleTypeOutput) ToHttpRouteRuleTypeOutputWithContext(ctx context.Context) HttpRouteRuleTypeOutput {
	return o
}

// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
func (o HttpRouteRuleTypeOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Matching operator. Not all operators are available for all fields. See "availableRules"
func (o HttpRouteRuleTypeOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// Invert the matching operator effect
func (o HttpRouteRuleTypeOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// Value to match against this match. Interpretation if this field depends on the match and field
func (o HttpRouteRuleTypeOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Id of your rule
func (o HttpRouteRuleTypeOutput) RuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *int { return v.RuleId }).(pulumi.IntPtrOutput)
}

// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
func (o HttpRouteRuleTypeOutput) SubField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HttpRouteRuleType) *string { return v.SubField }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleTypeArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HttpRouteRuleType)(nil)).Elem()
}

func (o HttpRouteRuleTypeArrayOutput) ToHttpRouteRuleTypeArrayOutput() HttpRouteRuleTypeArrayOutput {
	return o
}

func (o HttpRouteRuleTypeArrayOutput) ToHttpRouteRuleTypeArrayOutputWithContext(ctx context.Context) HttpRouteRuleTypeArrayOutput {
	return o
}

func (o HttpRouteRuleTypeArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HttpRouteRuleType {
		return vs[0].([]HttpRouteRuleType)[vs[1].(int)]
	}).(HttpRouteRuleTypeOutput)
}

type LoadBalancerOrder struct {
	// date
	Date *string `pulumi:"date"`
	// Information about a Bill entry
	Details []LoadBalancerOrderDetail `pulumi:"details"`
	// expiration date
	ExpirationDate *string `pulumi:"expirationDate"`
	// order id
	OrderId *int `pulumi:"orderId"`
}

// LoadBalancerOrderInput is an input type that accepts LoadBalancerOrderArgs and LoadBalancerOrderOutput values.
// You can construct a concrete instance of `LoadBalancerOrderInput` via:
//
//	LoadBalancerOrderArgs{...}
type LoadBalancerOrderInput interface {
	pulumi.Input

	ToLoadBalancerOrderOutput() LoadBalancerOrderOutput
	ToLoadBalancerOrderOutputWithContext(context.Context) LoadBalancerOrderOutput
}

type LoadBalancerOrderArgs struct {
	// date
	Date pulumi.StringPtrInput `pulumi:"date"`
	// Information about a Bill entry
	Details LoadBalancerOrderDetailArrayInput `pulumi:"details"`
	// expiration date
	ExpirationDate pulumi.StringPtrInput `pulumi:"expirationDate"`
	// order id
	OrderId pulumi.IntPtrInput `pulumi:"orderId"`
}

func (LoadBalancerOrderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrder)(nil)).Elem()
}

func (i LoadBalancerOrderArgs) ToLoadBalancerOrderOutput() LoadBalancerOrderOutput {
	return i.ToLoadBalancerOrderOutputWithContext(context.Background())
}

func (i LoadBalancerOrderArgs) ToLoadBalancerOrderOutputWithContext(ctx context.Context) LoadBalancerOrderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderOutput)
}

// LoadBalancerOrderArrayInput is an input type that accepts LoadBalancerOrderArray and LoadBalancerOrderArrayOutput values.
// You can construct a concrete instance of `LoadBalancerOrderArrayInput` via:
//
//	LoadBalancerOrderArray{ LoadBalancerOrderArgs{...} }
type LoadBalancerOrderArrayInput interface {
	pulumi.Input

	ToLoadBalancerOrderArrayOutput() LoadBalancerOrderArrayOutput
	ToLoadBalancerOrderArrayOutputWithContext(context.Context) LoadBalancerOrderArrayOutput
}

type LoadBalancerOrderArray []LoadBalancerOrderInput

func (LoadBalancerOrderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrder)(nil)).Elem()
}

func (i LoadBalancerOrderArray) ToLoadBalancerOrderArrayOutput() LoadBalancerOrderArrayOutput {
	return i.ToLoadBalancerOrderArrayOutputWithContext(context.Background())
}

func (i LoadBalancerOrderArray) ToLoadBalancerOrderArrayOutputWithContext(ctx context.Context) LoadBalancerOrderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderArrayOutput)
}

type LoadBalancerOrderOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrder)(nil)).Elem()
}

func (o LoadBalancerOrderOutput) ToLoadBalancerOrderOutput() LoadBalancerOrderOutput {
	return o
}

func (o LoadBalancerOrderOutput) ToLoadBalancerOrderOutputWithContext(ctx context.Context) LoadBalancerOrderOutput {
	return o
}

// date
func (o LoadBalancerOrderOutput) Date() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrder) *string { return v.Date }).(pulumi.StringPtrOutput)
}

// Information about a Bill entry
func (o LoadBalancerOrderOutput) Details() LoadBalancerOrderDetailArrayOutput {
	return o.ApplyT(func(v LoadBalancerOrder) []LoadBalancerOrderDetail { return v.Details }).(LoadBalancerOrderDetailArrayOutput)
}

// expiration date
func (o LoadBalancerOrderOutput) ExpirationDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrder) *string { return v.ExpirationDate }).(pulumi.StringPtrOutput)
}

// order id
func (o LoadBalancerOrderOutput) OrderId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrder) *int { return v.OrderId }).(pulumi.IntPtrOutput)
}

type LoadBalancerOrderArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrder)(nil)).Elem()
}

func (o LoadBalancerOrderArrayOutput) ToLoadBalancerOrderArrayOutput() LoadBalancerOrderArrayOutput {
	return o
}

func (o LoadBalancerOrderArrayOutput) ToLoadBalancerOrderArrayOutputWithContext(ctx context.Context) LoadBalancerOrderArrayOutput {
	return o
}

func (o LoadBalancerOrderArrayOutput) Index(i pulumi.IntInput) LoadBalancerOrderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerOrder {
		return vs[0].([]LoadBalancerOrder)[vs[1].(int)]
	}).(LoadBalancerOrderOutput)
}

type LoadBalancerOrderDetail struct {
	// description
	Description *string `pulumi:"description"`
	// expiration date
	Domain *string `pulumi:"domain"`
	// order detail id
	OrderDetailId *int `pulumi:"orderDetailId"`
	// quantity
	Quantity *string `pulumi:"quantity"`
}

// LoadBalancerOrderDetailInput is an input type that accepts LoadBalancerOrderDetailArgs and LoadBalancerOrderDetailOutput values.
// You can construct a concrete instance of `LoadBalancerOrderDetailInput` via:
//
//	LoadBalancerOrderDetailArgs{...}
type LoadBalancerOrderDetailInput interface {
	pulumi.Input

	ToLoadBalancerOrderDetailOutput() LoadBalancerOrderDetailOutput
	ToLoadBalancerOrderDetailOutputWithContext(context.Context) LoadBalancerOrderDetailOutput
}

type LoadBalancerOrderDetailArgs struct {
	// description
	Description pulumi.StringPtrInput `pulumi:"description"`
	// expiration date
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// order detail id
	OrderDetailId pulumi.IntPtrInput `pulumi:"orderDetailId"`
	// quantity
	Quantity pulumi.StringPtrInput `pulumi:"quantity"`
}

func (LoadBalancerOrderDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrderDetail)(nil)).Elem()
}

func (i LoadBalancerOrderDetailArgs) ToLoadBalancerOrderDetailOutput() LoadBalancerOrderDetailOutput {
	return i.ToLoadBalancerOrderDetailOutputWithContext(context.Background())
}

func (i LoadBalancerOrderDetailArgs) ToLoadBalancerOrderDetailOutputWithContext(ctx context.Context) LoadBalancerOrderDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderDetailOutput)
}

// LoadBalancerOrderDetailArrayInput is an input type that accepts LoadBalancerOrderDetailArray and LoadBalancerOrderDetailArrayOutput values.
// You can construct a concrete instance of `LoadBalancerOrderDetailArrayInput` via:
//
//	LoadBalancerOrderDetailArray{ LoadBalancerOrderDetailArgs{...} }
type LoadBalancerOrderDetailArrayInput interface {
	pulumi.Input

	ToLoadBalancerOrderDetailArrayOutput() LoadBalancerOrderDetailArrayOutput
	ToLoadBalancerOrderDetailArrayOutputWithContext(context.Context) LoadBalancerOrderDetailArrayOutput
}

type LoadBalancerOrderDetailArray []LoadBalancerOrderDetailInput

func (LoadBalancerOrderDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrderDetail)(nil)).Elem()
}

func (i LoadBalancerOrderDetailArray) ToLoadBalancerOrderDetailArrayOutput() LoadBalancerOrderDetailArrayOutput {
	return i.ToLoadBalancerOrderDetailArrayOutputWithContext(context.Background())
}

func (i LoadBalancerOrderDetailArray) ToLoadBalancerOrderDetailArrayOutputWithContext(ctx context.Context) LoadBalancerOrderDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderDetailArrayOutput)
}

type LoadBalancerOrderDetailOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrderDetail)(nil)).Elem()
}

func (o LoadBalancerOrderDetailOutput) ToLoadBalancerOrderDetailOutput() LoadBalancerOrderDetailOutput {
	return o
}

func (o LoadBalancerOrderDetailOutput) ToLoadBalancerOrderDetailOutputWithContext(ctx context.Context) LoadBalancerOrderDetailOutput {
	return o
}

// description
func (o LoadBalancerOrderDetailOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderDetail) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// expiration date
func (o LoadBalancerOrderDetailOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderDetail) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// order detail id
func (o LoadBalancerOrderDetailOutput) OrderDetailId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderDetail) *int { return v.OrderDetailId }).(pulumi.IntPtrOutput)
}

// quantity
func (o LoadBalancerOrderDetailOutput) Quantity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderDetail) *string { return v.Quantity }).(pulumi.StringPtrOutput)
}

type LoadBalancerOrderDetailArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrderDetail)(nil)).Elem()
}

func (o LoadBalancerOrderDetailArrayOutput) ToLoadBalancerOrderDetailArrayOutput() LoadBalancerOrderDetailArrayOutput {
	return o
}

func (o LoadBalancerOrderDetailArrayOutput) ToLoadBalancerOrderDetailArrayOutputWithContext(ctx context.Context) LoadBalancerOrderDetailArrayOutput {
	return o
}

func (o LoadBalancerOrderDetailArrayOutput) Index(i pulumi.IntInput) LoadBalancerOrderDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerOrderDetail {
		return vs[0].([]LoadBalancerOrderDetail)[vs[1].(int)]
	}).(LoadBalancerOrderDetailOutput)
}

type LoadBalancerOrderableZone struct {
	// The zone three letter code
	Name *string `pulumi:"name"`
	// The billing planCode for this zone
	PlanCode *string `pulumi:"planCode"`
}

// LoadBalancerOrderableZoneInput is an input type that accepts LoadBalancerOrderableZoneArgs and LoadBalancerOrderableZoneOutput values.
// You can construct a concrete instance of `LoadBalancerOrderableZoneInput` via:
//
//	LoadBalancerOrderableZoneArgs{...}
type LoadBalancerOrderableZoneInput interface {
	pulumi.Input

	ToLoadBalancerOrderableZoneOutput() LoadBalancerOrderableZoneOutput
	ToLoadBalancerOrderableZoneOutputWithContext(context.Context) LoadBalancerOrderableZoneOutput
}

type LoadBalancerOrderableZoneArgs struct {
	// The zone three letter code
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The billing planCode for this zone
	PlanCode pulumi.StringPtrInput `pulumi:"planCode"`
}

func (LoadBalancerOrderableZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrderableZone)(nil)).Elem()
}

func (i LoadBalancerOrderableZoneArgs) ToLoadBalancerOrderableZoneOutput() LoadBalancerOrderableZoneOutput {
	return i.ToLoadBalancerOrderableZoneOutputWithContext(context.Background())
}

func (i LoadBalancerOrderableZoneArgs) ToLoadBalancerOrderableZoneOutputWithContext(ctx context.Context) LoadBalancerOrderableZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderableZoneOutput)
}

// LoadBalancerOrderableZoneArrayInput is an input type that accepts LoadBalancerOrderableZoneArray and LoadBalancerOrderableZoneArrayOutput values.
// You can construct a concrete instance of `LoadBalancerOrderableZoneArrayInput` via:
//
//	LoadBalancerOrderableZoneArray{ LoadBalancerOrderableZoneArgs{...} }
type LoadBalancerOrderableZoneArrayInput interface {
	pulumi.Input

	ToLoadBalancerOrderableZoneArrayOutput() LoadBalancerOrderableZoneArrayOutput
	ToLoadBalancerOrderableZoneArrayOutputWithContext(context.Context) LoadBalancerOrderableZoneArrayOutput
}

type LoadBalancerOrderableZoneArray []LoadBalancerOrderableZoneInput

func (LoadBalancerOrderableZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrderableZone)(nil)).Elem()
}

func (i LoadBalancerOrderableZoneArray) ToLoadBalancerOrderableZoneArrayOutput() LoadBalancerOrderableZoneArrayOutput {
	return i.ToLoadBalancerOrderableZoneArrayOutputWithContext(context.Background())
}

func (i LoadBalancerOrderableZoneArray) ToLoadBalancerOrderableZoneArrayOutputWithContext(ctx context.Context) LoadBalancerOrderableZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerOrderableZoneArrayOutput)
}

type LoadBalancerOrderableZoneOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderableZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerOrderableZone)(nil)).Elem()
}

func (o LoadBalancerOrderableZoneOutput) ToLoadBalancerOrderableZoneOutput() LoadBalancerOrderableZoneOutput {
	return o
}

func (o LoadBalancerOrderableZoneOutput) ToLoadBalancerOrderableZoneOutputWithContext(ctx context.Context) LoadBalancerOrderableZoneOutput {
	return o
}

// The zone three letter code
func (o LoadBalancerOrderableZoneOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderableZone) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The billing planCode for this zone
func (o LoadBalancerOrderableZoneOutput) PlanCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerOrderableZone) *string { return v.PlanCode }).(pulumi.StringPtrOutput)
}

type LoadBalancerOrderableZoneArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerOrderableZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerOrderableZone)(nil)).Elem()
}

func (o LoadBalancerOrderableZoneArrayOutput) ToLoadBalancerOrderableZoneArrayOutput() LoadBalancerOrderableZoneArrayOutput {
	return o
}

func (o LoadBalancerOrderableZoneArrayOutput) ToLoadBalancerOrderableZoneArrayOutputWithContext(ctx context.Context) LoadBalancerOrderableZoneArrayOutput {
	return o
}

func (o LoadBalancerOrderableZoneArrayOutput) Index(i pulumi.IntInput) LoadBalancerOrderableZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerOrderableZone {
		return vs[0].([]LoadBalancerOrderableZone)[vs[1].(int)]
	}).(LoadBalancerOrderableZoneOutput)
}

type LoadBalancerPlan struct {
	// Catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Representation of a configuration item for personalizing product
	Configurations []LoadBalancerPlanConfiguration `pulumi:"configurations"`
	// duration
	Duration string `pulumi:"duration"`
	// Plan code
	PlanCode string `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode string `pulumi:"pricingMode"`
}

// LoadBalancerPlanInput is an input type that accepts LoadBalancerPlanArgs and LoadBalancerPlanOutput values.
// You can construct a concrete instance of `LoadBalancerPlanInput` via:
//
//	LoadBalancerPlanArgs{...}
type LoadBalancerPlanInput interface {
	pulumi.Input

	ToLoadBalancerPlanOutput() LoadBalancerPlanOutput
	ToLoadBalancerPlanOutputWithContext(context.Context) LoadBalancerPlanOutput
}

type LoadBalancerPlanArgs struct {
	// Catalog name
	CatalogName pulumi.StringPtrInput `pulumi:"catalogName"`
	// Representation of a configuration item for personalizing product
	Configurations LoadBalancerPlanConfigurationArrayInput `pulumi:"configurations"`
	// duration
	Duration pulumi.StringInput `pulumi:"duration"`
	// Plan code
	PlanCode pulumi.StringInput `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode pulumi.StringInput `pulumi:"pricingMode"`
}

func (LoadBalancerPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlan)(nil)).Elem()
}

func (i LoadBalancerPlanArgs) ToLoadBalancerPlanOutput() LoadBalancerPlanOutput {
	return i.ToLoadBalancerPlanOutputWithContext(context.Background())
}

func (i LoadBalancerPlanArgs) ToLoadBalancerPlanOutputWithContext(ctx context.Context) LoadBalancerPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOutput)
}

func (i LoadBalancerPlanArgs) ToLoadBalancerPlanPtrOutput() LoadBalancerPlanPtrOutput {
	return i.ToLoadBalancerPlanPtrOutputWithContext(context.Background())
}

func (i LoadBalancerPlanArgs) ToLoadBalancerPlanPtrOutputWithContext(ctx context.Context) LoadBalancerPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOutput).ToLoadBalancerPlanPtrOutputWithContext(ctx)
}

// LoadBalancerPlanPtrInput is an input type that accepts LoadBalancerPlanArgs, LoadBalancerPlanPtr and LoadBalancerPlanPtrOutput values.
// You can construct a concrete instance of `LoadBalancerPlanPtrInput` via:
//
//	        LoadBalancerPlanArgs{...}
//
//	or:
//
//	        nil
type LoadBalancerPlanPtrInput interface {
	pulumi.Input

	ToLoadBalancerPlanPtrOutput() LoadBalancerPlanPtrOutput
	ToLoadBalancerPlanPtrOutputWithContext(context.Context) LoadBalancerPlanPtrOutput
}

type loadBalancerPlanPtrType LoadBalancerPlanArgs

func LoadBalancerPlanPtr(v *LoadBalancerPlanArgs) LoadBalancerPlanPtrInput {
	return (*loadBalancerPlanPtrType)(v)
}

func (*loadBalancerPlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPlan)(nil)).Elem()
}

func (i *loadBalancerPlanPtrType) ToLoadBalancerPlanPtrOutput() LoadBalancerPlanPtrOutput {
	return i.ToLoadBalancerPlanPtrOutputWithContext(context.Background())
}

func (i *loadBalancerPlanPtrType) ToLoadBalancerPlanPtrOutputWithContext(ctx context.Context) LoadBalancerPlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanPtrOutput)
}

type LoadBalancerPlanOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlan)(nil)).Elem()
}

func (o LoadBalancerPlanOutput) ToLoadBalancerPlanOutput() LoadBalancerPlanOutput {
	return o
}

func (o LoadBalancerPlanOutput) ToLoadBalancerPlanOutputWithContext(ctx context.Context) LoadBalancerPlanOutput {
	return o
}

func (o LoadBalancerPlanOutput) ToLoadBalancerPlanPtrOutput() LoadBalancerPlanPtrOutput {
	return o.ToLoadBalancerPlanPtrOutputWithContext(context.Background())
}

func (o LoadBalancerPlanOutput) ToLoadBalancerPlanPtrOutputWithContext(ctx context.Context) LoadBalancerPlanPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v LoadBalancerPlan) *LoadBalancerPlan {
		return &v
	}).(LoadBalancerPlanPtrOutput)
}

// Catalog name
func (o LoadBalancerPlanOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPlan) *string { return v.CatalogName }).(pulumi.StringPtrOutput)
}

// Representation of a configuration item for personalizing product
func (o LoadBalancerPlanOutput) Configurations() LoadBalancerPlanConfigurationArrayOutput {
	return o.ApplyT(func(v LoadBalancerPlan) []LoadBalancerPlanConfiguration { return v.Configurations }).(LoadBalancerPlanConfigurationArrayOutput)
}

// duration
func (o LoadBalancerPlanOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlan) string { return v.Duration }).(pulumi.StringOutput)
}

// Plan code
func (o LoadBalancerPlanOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlan) string { return v.PlanCode }).(pulumi.StringOutput)
}

// Pricing model identifier
func (o LoadBalancerPlanOutput) PricingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlan) string { return v.PricingMode }).(pulumi.StringOutput)
}

type LoadBalancerPlanPtrOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerPlan)(nil)).Elem()
}

func (o LoadBalancerPlanPtrOutput) ToLoadBalancerPlanPtrOutput() LoadBalancerPlanPtrOutput {
	return o
}

func (o LoadBalancerPlanPtrOutput) ToLoadBalancerPlanPtrOutputWithContext(ctx context.Context) LoadBalancerPlanPtrOutput {
	return o
}

func (o LoadBalancerPlanPtrOutput) Elem() LoadBalancerPlanOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) LoadBalancerPlan {
		if v != nil {
			return *v
		}
		var ret LoadBalancerPlan
		return ret
	}).(LoadBalancerPlanOutput)
}

// Catalog name
func (o LoadBalancerPlanPtrOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) *string {
		if v == nil {
			return nil
		}
		return v.CatalogName
	}).(pulumi.StringPtrOutput)
}

// Representation of a configuration item for personalizing product
func (o LoadBalancerPlanPtrOutput) Configurations() LoadBalancerPlanConfigurationArrayOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) []LoadBalancerPlanConfiguration {
		if v == nil {
			return nil
		}
		return v.Configurations
	}).(LoadBalancerPlanConfigurationArrayOutput)
}

// duration
func (o LoadBalancerPlanPtrOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) *string {
		if v == nil {
			return nil
		}
		return &v.Duration
	}).(pulumi.StringPtrOutput)
}

// Plan code
func (o LoadBalancerPlanPtrOutput) PlanCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) *string {
		if v == nil {
			return nil
		}
		return &v.PlanCode
	}).(pulumi.StringPtrOutput)
}

// Pricing model identifier
func (o LoadBalancerPlanPtrOutput) PricingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadBalancerPlan) *string {
		if v == nil {
			return nil
		}
		return &v.PricingMode
	}).(pulumi.StringPtrOutput)
}

type LoadBalancerPlanConfiguration struct {
	// Identifier of the resource
	Label string `pulumi:"label"`
	// Path to the resource in API.OVH.COM
	Value string `pulumi:"value"`
}

// LoadBalancerPlanConfigurationInput is an input type that accepts LoadBalancerPlanConfigurationArgs and LoadBalancerPlanConfigurationOutput values.
// You can construct a concrete instance of `LoadBalancerPlanConfigurationInput` via:
//
//	LoadBalancerPlanConfigurationArgs{...}
type LoadBalancerPlanConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerPlanConfigurationOutput() LoadBalancerPlanConfigurationOutput
	ToLoadBalancerPlanConfigurationOutputWithContext(context.Context) LoadBalancerPlanConfigurationOutput
}

type LoadBalancerPlanConfigurationArgs struct {
	// Identifier of the resource
	Label pulumi.StringInput `pulumi:"label"`
	// Path to the resource in API.OVH.COM
	Value pulumi.StringInput `pulumi:"value"`
}

func (LoadBalancerPlanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanConfiguration)(nil)).Elem()
}

func (i LoadBalancerPlanConfigurationArgs) ToLoadBalancerPlanConfigurationOutput() LoadBalancerPlanConfigurationOutput {
	return i.ToLoadBalancerPlanConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerPlanConfigurationArgs) ToLoadBalancerPlanConfigurationOutputWithContext(ctx context.Context) LoadBalancerPlanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanConfigurationOutput)
}

// LoadBalancerPlanConfigurationArrayInput is an input type that accepts LoadBalancerPlanConfigurationArray and LoadBalancerPlanConfigurationArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPlanConfigurationArrayInput` via:
//
//	LoadBalancerPlanConfigurationArray{ LoadBalancerPlanConfigurationArgs{...} }
type LoadBalancerPlanConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerPlanConfigurationArrayOutput() LoadBalancerPlanConfigurationArrayOutput
	ToLoadBalancerPlanConfigurationArrayOutputWithContext(context.Context) LoadBalancerPlanConfigurationArrayOutput
}

type LoadBalancerPlanConfigurationArray []LoadBalancerPlanConfigurationInput

func (LoadBalancerPlanConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanConfiguration)(nil)).Elem()
}

func (i LoadBalancerPlanConfigurationArray) ToLoadBalancerPlanConfigurationArrayOutput() LoadBalancerPlanConfigurationArrayOutput {
	return i.ToLoadBalancerPlanConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPlanConfigurationArray) ToLoadBalancerPlanConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerPlanConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanConfigurationArrayOutput)
}

type LoadBalancerPlanConfigurationOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanConfiguration)(nil)).Elem()
}

func (o LoadBalancerPlanConfigurationOutput) ToLoadBalancerPlanConfigurationOutput() LoadBalancerPlanConfigurationOutput {
	return o
}

func (o LoadBalancerPlanConfigurationOutput) ToLoadBalancerPlanConfigurationOutputWithContext(ctx context.Context) LoadBalancerPlanConfigurationOutput {
	return o
}

// Identifier of the resource
func (o LoadBalancerPlanConfigurationOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanConfiguration) string { return v.Label }).(pulumi.StringOutput)
}

// Path to the resource in API.OVH.COM
func (o LoadBalancerPlanConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanConfiguration) string { return v.Value }).(pulumi.StringOutput)
}

type LoadBalancerPlanConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanConfiguration)(nil)).Elem()
}

func (o LoadBalancerPlanConfigurationArrayOutput) ToLoadBalancerPlanConfigurationArrayOutput() LoadBalancerPlanConfigurationArrayOutput {
	return o
}

func (o LoadBalancerPlanConfigurationArrayOutput) ToLoadBalancerPlanConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerPlanConfigurationArrayOutput {
	return o
}

func (o LoadBalancerPlanConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerPlanConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPlanConfiguration {
		return vs[0].([]LoadBalancerPlanConfiguration)[vs[1].(int)]
	}).(LoadBalancerPlanConfigurationOutput)
}

type LoadBalancerPlanOption struct {
	// Catalog name
	CatalogName *string `pulumi:"catalogName"`
	// Representation of a configuration item for personalizing product
	Configurations []LoadBalancerPlanOptionConfiguration `pulumi:"configurations"`
	// duration
	Duration string `pulumi:"duration"`
	// Plan code
	PlanCode string `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode string `pulumi:"pricingMode"`
}

// LoadBalancerPlanOptionInput is an input type that accepts LoadBalancerPlanOptionArgs and LoadBalancerPlanOptionOutput values.
// You can construct a concrete instance of `LoadBalancerPlanOptionInput` via:
//
//	LoadBalancerPlanOptionArgs{...}
type LoadBalancerPlanOptionInput interface {
	pulumi.Input

	ToLoadBalancerPlanOptionOutput() LoadBalancerPlanOptionOutput
	ToLoadBalancerPlanOptionOutputWithContext(context.Context) LoadBalancerPlanOptionOutput
}

type LoadBalancerPlanOptionArgs struct {
	// Catalog name
	CatalogName pulumi.StringPtrInput `pulumi:"catalogName"`
	// Representation of a configuration item for personalizing product
	Configurations LoadBalancerPlanOptionConfigurationArrayInput `pulumi:"configurations"`
	// duration
	Duration pulumi.StringInput `pulumi:"duration"`
	// Plan code
	PlanCode pulumi.StringInput `pulumi:"planCode"`
	// Pricing model identifier
	PricingMode pulumi.StringInput `pulumi:"pricingMode"`
}

func (LoadBalancerPlanOptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanOption)(nil)).Elem()
}

func (i LoadBalancerPlanOptionArgs) ToLoadBalancerPlanOptionOutput() LoadBalancerPlanOptionOutput {
	return i.ToLoadBalancerPlanOptionOutputWithContext(context.Background())
}

func (i LoadBalancerPlanOptionArgs) ToLoadBalancerPlanOptionOutputWithContext(ctx context.Context) LoadBalancerPlanOptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOptionOutput)
}

// LoadBalancerPlanOptionArrayInput is an input type that accepts LoadBalancerPlanOptionArray and LoadBalancerPlanOptionArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPlanOptionArrayInput` via:
//
//	LoadBalancerPlanOptionArray{ LoadBalancerPlanOptionArgs{...} }
type LoadBalancerPlanOptionArrayInput interface {
	pulumi.Input

	ToLoadBalancerPlanOptionArrayOutput() LoadBalancerPlanOptionArrayOutput
	ToLoadBalancerPlanOptionArrayOutputWithContext(context.Context) LoadBalancerPlanOptionArrayOutput
}

type LoadBalancerPlanOptionArray []LoadBalancerPlanOptionInput

func (LoadBalancerPlanOptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanOption)(nil)).Elem()
}

func (i LoadBalancerPlanOptionArray) ToLoadBalancerPlanOptionArrayOutput() LoadBalancerPlanOptionArrayOutput {
	return i.ToLoadBalancerPlanOptionArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPlanOptionArray) ToLoadBalancerPlanOptionArrayOutputWithContext(ctx context.Context) LoadBalancerPlanOptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOptionArrayOutput)
}

type LoadBalancerPlanOptionOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanOptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanOption)(nil)).Elem()
}

func (o LoadBalancerPlanOptionOutput) ToLoadBalancerPlanOptionOutput() LoadBalancerPlanOptionOutput {
	return o
}

func (o LoadBalancerPlanOptionOutput) ToLoadBalancerPlanOptionOutputWithContext(ctx context.Context) LoadBalancerPlanOptionOutput {
	return o
}

// Catalog name
func (o LoadBalancerPlanOptionOutput) CatalogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoadBalancerPlanOption) *string { return v.CatalogName }).(pulumi.StringPtrOutput)
}

// Representation of a configuration item for personalizing product
func (o LoadBalancerPlanOptionOutput) Configurations() LoadBalancerPlanOptionConfigurationArrayOutput {
	return o.ApplyT(func(v LoadBalancerPlanOption) []LoadBalancerPlanOptionConfiguration { return v.Configurations }).(LoadBalancerPlanOptionConfigurationArrayOutput)
}

// duration
func (o LoadBalancerPlanOptionOutput) Duration() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanOption) string { return v.Duration }).(pulumi.StringOutput)
}

// Plan code
func (o LoadBalancerPlanOptionOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanOption) string { return v.PlanCode }).(pulumi.StringOutput)
}

// Pricing model identifier
func (o LoadBalancerPlanOptionOutput) PricingMode() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanOption) string { return v.PricingMode }).(pulumi.StringOutput)
}

type LoadBalancerPlanOptionArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanOptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanOption)(nil)).Elem()
}

func (o LoadBalancerPlanOptionArrayOutput) ToLoadBalancerPlanOptionArrayOutput() LoadBalancerPlanOptionArrayOutput {
	return o
}

func (o LoadBalancerPlanOptionArrayOutput) ToLoadBalancerPlanOptionArrayOutputWithContext(ctx context.Context) LoadBalancerPlanOptionArrayOutput {
	return o
}

func (o LoadBalancerPlanOptionArrayOutput) Index(i pulumi.IntInput) LoadBalancerPlanOptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPlanOption {
		return vs[0].([]LoadBalancerPlanOption)[vs[1].(int)]
	}).(LoadBalancerPlanOptionOutput)
}

type LoadBalancerPlanOptionConfiguration struct {
	// Identifier of the resource
	Label string `pulumi:"label"`
	// Path to the resource in API.OVH.COM
	Value string `pulumi:"value"`
}

// LoadBalancerPlanOptionConfigurationInput is an input type that accepts LoadBalancerPlanOptionConfigurationArgs and LoadBalancerPlanOptionConfigurationOutput values.
// You can construct a concrete instance of `LoadBalancerPlanOptionConfigurationInput` via:
//
//	LoadBalancerPlanOptionConfigurationArgs{...}
type LoadBalancerPlanOptionConfigurationInput interface {
	pulumi.Input

	ToLoadBalancerPlanOptionConfigurationOutput() LoadBalancerPlanOptionConfigurationOutput
	ToLoadBalancerPlanOptionConfigurationOutputWithContext(context.Context) LoadBalancerPlanOptionConfigurationOutput
}

type LoadBalancerPlanOptionConfigurationArgs struct {
	// Identifier of the resource
	Label pulumi.StringInput `pulumi:"label"`
	// Path to the resource in API.OVH.COM
	Value pulumi.StringInput `pulumi:"value"`
}

func (LoadBalancerPlanOptionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanOptionConfiguration)(nil)).Elem()
}

func (i LoadBalancerPlanOptionConfigurationArgs) ToLoadBalancerPlanOptionConfigurationOutput() LoadBalancerPlanOptionConfigurationOutput {
	return i.ToLoadBalancerPlanOptionConfigurationOutputWithContext(context.Background())
}

func (i LoadBalancerPlanOptionConfigurationArgs) ToLoadBalancerPlanOptionConfigurationOutputWithContext(ctx context.Context) LoadBalancerPlanOptionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOptionConfigurationOutput)
}

// LoadBalancerPlanOptionConfigurationArrayInput is an input type that accepts LoadBalancerPlanOptionConfigurationArray and LoadBalancerPlanOptionConfigurationArrayOutput values.
// You can construct a concrete instance of `LoadBalancerPlanOptionConfigurationArrayInput` via:
//
//	LoadBalancerPlanOptionConfigurationArray{ LoadBalancerPlanOptionConfigurationArgs{...} }
type LoadBalancerPlanOptionConfigurationArrayInput interface {
	pulumi.Input

	ToLoadBalancerPlanOptionConfigurationArrayOutput() LoadBalancerPlanOptionConfigurationArrayOutput
	ToLoadBalancerPlanOptionConfigurationArrayOutputWithContext(context.Context) LoadBalancerPlanOptionConfigurationArrayOutput
}

type LoadBalancerPlanOptionConfigurationArray []LoadBalancerPlanOptionConfigurationInput

func (LoadBalancerPlanOptionConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanOptionConfiguration)(nil)).Elem()
}

func (i LoadBalancerPlanOptionConfigurationArray) ToLoadBalancerPlanOptionConfigurationArrayOutput() LoadBalancerPlanOptionConfigurationArrayOutput {
	return i.ToLoadBalancerPlanOptionConfigurationArrayOutputWithContext(context.Background())
}

func (i LoadBalancerPlanOptionConfigurationArray) ToLoadBalancerPlanOptionConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerPlanOptionConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerPlanOptionConfigurationArrayOutput)
}

type LoadBalancerPlanOptionConfigurationOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanOptionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerPlanOptionConfiguration)(nil)).Elem()
}

func (o LoadBalancerPlanOptionConfigurationOutput) ToLoadBalancerPlanOptionConfigurationOutput() LoadBalancerPlanOptionConfigurationOutput {
	return o
}

func (o LoadBalancerPlanOptionConfigurationOutput) ToLoadBalancerPlanOptionConfigurationOutputWithContext(ctx context.Context) LoadBalancerPlanOptionConfigurationOutput {
	return o
}

// Identifier of the resource
func (o LoadBalancerPlanOptionConfigurationOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanOptionConfiguration) string { return v.Label }).(pulumi.StringOutput)
}

// Path to the resource in API.OVH.COM
func (o LoadBalancerPlanOptionConfigurationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v LoadBalancerPlanOptionConfiguration) string { return v.Value }).(pulumi.StringOutput)
}

type LoadBalancerPlanOptionConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerPlanOptionConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerPlanOptionConfiguration)(nil)).Elem()
}

func (o LoadBalancerPlanOptionConfigurationArrayOutput) ToLoadBalancerPlanOptionConfigurationArrayOutput() LoadBalancerPlanOptionConfigurationArrayOutput {
	return o
}

func (o LoadBalancerPlanOptionConfigurationArrayOutput) ToLoadBalancerPlanOptionConfigurationArrayOutputWithContext(ctx context.Context) LoadBalancerPlanOptionConfigurationArrayOutput {
	return o
}

func (o LoadBalancerPlanOptionConfigurationArrayOutput) Index(i pulumi.IntInput) LoadBalancerPlanOptionConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerPlanOptionConfiguration {
		return vs[0].([]LoadBalancerPlanOptionConfiguration)[vs[1].(int)]
	}).(LoadBalancerPlanOptionConfigurationOutput)
}

type TcpFarmProbe struct {
	// Force use of SSL (TLS)
	ForceSsl *bool `pulumi:"forceSsl"`
	// probe interval, Value between 30 and 3600 seconds, default 30
	Interval *int `pulumi:"interval"`
	// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
	Match *string `pulumi:"match"`
	// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
	Method *string `pulumi:"method"`
	// Negate probe result
	Negate *bool `pulumi:"negate"`
	// Pattern to match against `match`
	Pattern *string `pulumi:"pattern"`
	// Port for backends to receive traffic on.
	Port *int `pulumi:"port"`
	// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
	Type string `pulumi:"type"`
	// URL for HTTP probe type.
	Url *string `pulumi:"url"`
}

// TcpFarmProbeInput is an input type that accepts TcpFarmProbeArgs and TcpFarmProbeOutput values.
// You can construct a concrete instance of `TcpFarmProbeInput` via:
//
//	TcpFarmProbeArgs{...}
type TcpFarmProbeInput interface {
	pulumi.Input

	ToTcpFarmProbeOutput() TcpFarmProbeOutput
	ToTcpFarmProbeOutputWithContext(context.Context) TcpFarmProbeOutput
}

type TcpFarmProbeArgs struct {
	// Force use of SSL (TLS)
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	// probe interval, Value between 30 and 3600 seconds, default 30
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
	Match pulumi.StringPtrInput `pulumi:"match"`
	// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Negate probe result
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// Pattern to match against `match`
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Port for backends to receive traffic on.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
	Type pulumi.StringInput `pulumi:"type"`
	// URL for HTTP probe type.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (TcpFarmProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpFarmProbe)(nil)).Elem()
}

func (i TcpFarmProbeArgs) ToTcpFarmProbeOutput() TcpFarmProbeOutput {
	return i.ToTcpFarmProbeOutputWithContext(context.Background())
}

func (i TcpFarmProbeArgs) ToTcpFarmProbeOutputWithContext(ctx context.Context) TcpFarmProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmProbeOutput)
}

func (i TcpFarmProbeArgs) ToTcpFarmProbePtrOutput() TcpFarmProbePtrOutput {
	return i.ToTcpFarmProbePtrOutputWithContext(context.Background())
}

func (i TcpFarmProbeArgs) ToTcpFarmProbePtrOutputWithContext(ctx context.Context) TcpFarmProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmProbeOutput).ToTcpFarmProbePtrOutputWithContext(ctx)
}

// TcpFarmProbePtrInput is an input type that accepts TcpFarmProbeArgs, TcpFarmProbePtr and TcpFarmProbePtrOutput values.
// You can construct a concrete instance of `TcpFarmProbePtrInput` via:
//
//	        TcpFarmProbeArgs{...}
//
//	or:
//
//	        nil
type TcpFarmProbePtrInput interface {
	pulumi.Input

	ToTcpFarmProbePtrOutput() TcpFarmProbePtrOutput
	ToTcpFarmProbePtrOutputWithContext(context.Context) TcpFarmProbePtrOutput
}

type tcpFarmProbePtrType TcpFarmProbeArgs

func TcpFarmProbePtr(v *TcpFarmProbeArgs) TcpFarmProbePtrInput {
	return (*tcpFarmProbePtrType)(v)
}

func (*tcpFarmProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFarmProbe)(nil)).Elem()
}

func (i *tcpFarmProbePtrType) ToTcpFarmProbePtrOutput() TcpFarmProbePtrOutput {
	return i.ToTcpFarmProbePtrOutputWithContext(context.Background())
}

func (i *tcpFarmProbePtrType) ToTcpFarmProbePtrOutputWithContext(ctx context.Context) TcpFarmProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmProbePtrOutput)
}

type TcpFarmProbeOutput struct{ *pulumi.OutputState }

func (TcpFarmProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpFarmProbe)(nil)).Elem()
}

func (o TcpFarmProbeOutput) ToTcpFarmProbeOutput() TcpFarmProbeOutput {
	return o
}

func (o TcpFarmProbeOutput) ToTcpFarmProbeOutputWithContext(ctx context.Context) TcpFarmProbeOutput {
	return o
}

func (o TcpFarmProbeOutput) ToTcpFarmProbePtrOutput() TcpFarmProbePtrOutput {
	return o.ToTcpFarmProbePtrOutputWithContext(context.Background())
}

func (o TcpFarmProbeOutput) ToTcpFarmProbePtrOutputWithContext(ctx context.Context) TcpFarmProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpFarmProbe) *TcpFarmProbe {
		return &v
	}).(TcpFarmProbePtrOutput)
}

// Force use of SSL (TLS)
func (o TcpFarmProbeOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

// probe interval, Value between 30 and 3600 seconds, default 30
func (o TcpFarmProbeOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
func (o TcpFarmProbeOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
func (o TcpFarmProbeOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Negate probe result
func (o TcpFarmProbeOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// Pattern to match against `match`
func (o TcpFarmProbeOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Port for backends to receive traffic on.
func (o TcpFarmProbeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
func (o TcpFarmProbeOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TcpFarmProbe) string { return v.Type }).(pulumi.StringOutput)
}

// URL for HTTP probe type.
func (o TcpFarmProbeOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpFarmProbe) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type TcpFarmProbePtrOutput struct{ *pulumi.OutputState }

func (TcpFarmProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFarmProbe)(nil)).Elem()
}

func (o TcpFarmProbePtrOutput) ToTcpFarmProbePtrOutput() TcpFarmProbePtrOutput {
	return o
}

func (o TcpFarmProbePtrOutput) ToTcpFarmProbePtrOutputWithContext(ctx context.Context) TcpFarmProbePtrOutput {
	return o
}

func (o TcpFarmProbePtrOutput) Elem() TcpFarmProbeOutput {
	return o.ApplyT(func(v *TcpFarmProbe) TcpFarmProbe {
		if v != nil {
			return *v
		}
		var ret TcpFarmProbe
		return ret
	}).(TcpFarmProbeOutput)
}

// Force use of SSL (TLS)
func (o TcpFarmProbePtrOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *bool {
		if v == nil {
			return nil
		}
		return v.ForceSsl
	}).(pulumi.BoolPtrOutput)
}

// probe interval, Value between 30 and 3600 seconds, default 30
func (o TcpFarmProbePtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// What to match `pattern` against (`contains`, `default`, `internal`, `matches`, `status`)
func (o TcpFarmProbePtrOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Match
	}).(pulumi.StringPtrOutput)
}

// HTTP probe method (`GET`, `HEAD`, `OPTIONS`, `internal`)
func (o TcpFarmProbePtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Negate probe result
func (o TcpFarmProbePtrOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *bool {
		if v == nil {
			return nil
		}
		return v.Negate
	}).(pulumi.BoolPtrOutput)
}

// Pattern to match against `match`
func (o TcpFarmProbePtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Pattern
	}).(pulumi.StringPtrOutput)
}

// Port for backends to receive traffic on.
func (o TcpFarmProbePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Valid values : `http`, `internal`, `mysql`, `oco`, `pgsql`, `smtp`, `tcp`
func (o TcpFarmProbePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

// URL for HTTP probe type.
func (o TcpFarmProbePtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmProbe) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type TcpRouteAction struct {
	// Farm ID for "farm" action type, empty for others.
	Target *string `pulumi:"target"`
	// Action to trigger if all the rules of this route matches
	Type string `pulumi:"type"`
}

// TcpRouteActionInput is an input type that accepts TcpRouteActionArgs and TcpRouteActionOutput values.
// You can construct a concrete instance of `TcpRouteActionInput` via:
//
//	TcpRouteActionArgs{...}
type TcpRouteActionInput interface {
	pulumi.Input

	ToTcpRouteActionOutput() TcpRouteActionOutput
	ToTcpRouteActionOutputWithContext(context.Context) TcpRouteActionOutput
}

type TcpRouteActionArgs struct {
	// Farm ID for "farm" action type, empty for others.
	Target pulumi.StringPtrInput `pulumi:"target"`
	// Action to trigger if all the rules of this route matches
	Type pulumi.StringInput `pulumi:"type"`
}

func (TcpRouteActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteAction)(nil)).Elem()
}

func (i TcpRouteActionArgs) ToTcpRouteActionOutput() TcpRouteActionOutput {
	return i.ToTcpRouteActionOutputWithContext(context.Background())
}

func (i TcpRouteActionArgs) ToTcpRouteActionOutputWithContext(ctx context.Context) TcpRouteActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteActionOutput)
}

func (i TcpRouteActionArgs) ToTcpRouteActionPtrOutput() TcpRouteActionPtrOutput {
	return i.ToTcpRouteActionPtrOutputWithContext(context.Background())
}

func (i TcpRouteActionArgs) ToTcpRouteActionPtrOutputWithContext(ctx context.Context) TcpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteActionOutput).ToTcpRouteActionPtrOutputWithContext(ctx)
}

// TcpRouteActionPtrInput is an input type that accepts TcpRouteActionArgs, TcpRouteActionPtr and TcpRouteActionPtrOutput values.
// You can construct a concrete instance of `TcpRouteActionPtrInput` via:
//
//	        TcpRouteActionArgs{...}
//
//	or:
//
//	        nil
type TcpRouteActionPtrInput interface {
	pulumi.Input

	ToTcpRouteActionPtrOutput() TcpRouteActionPtrOutput
	ToTcpRouteActionPtrOutputWithContext(context.Context) TcpRouteActionPtrOutput
}

type tcpRouteActionPtrType TcpRouteActionArgs

func TcpRouteActionPtr(v *TcpRouteActionArgs) TcpRouteActionPtrInput {
	return (*tcpRouteActionPtrType)(v)
}

func (*tcpRouteActionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpRouteAction)(nil)).Elem()
}

func (i *tcpRouteActionPtrType) ToTcpRouteActionPtrOutput() TcpRouteActionPtrOutput {
	return i.ToTcpRouteActionPtrOutputWithContext(context.Background())
}

func (i *tcpRouteActionPtrType) ToTcpRouteActionPtrOutputWithContext(ctx context.Context) TcpRouteActionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteActionPtrOutput)
}

type TcpRouteActionOutput struct{ *pulumi.OutputState }

func (TcpRouteActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteAction)(nil)).Elem()
}

func (o TcpRouteActionOutput) ToTcpRouteActionOutput() TcpRouteActionOutput {
	return o
}

func (o TcpRouteActionOutput) ToTcpRouteActionOutputWithContext(ctx context.Context) TcpRouteActionOutput {
	return o
}

func (o TcpRouteActionOutput) ToTcpRouteActionPtrOutput() TcpRouteActionPtrOutput {
	return o.ToTcpRouteActionPtrOutputWithContext(context.Background())
}

func (o TcpRouteActionOutput) ToTcpRouteActionPtrOutputWithContext(ctx context.Context) TcpRouteActionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TcpRouteAction) *TcpRouteAction {
		return &v
	}).(TcpRouteActionPtrOutput)
}

// Farm ID for "farm" action type, empty for others.
func (o TcpRouteActionOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteAction) *string { return v.Target }).(pulumi.StringPtrOutput)
}

// Action to trigger if all the rules of this route matches
func (o TcpRouteActionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TcpRouteAction) string { return v.Type }).(pulumi.StringOutput)
}

type TcpRouteActionPtrOutput struct{ *pulumi.OutputState }

func (TcpRouteActionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpRouteAction)(nil)).Elem()
}

func (o TcpRouteActionPtrOutput) ToTcpRouteActionPtrOutput() TcpRouteActionPtrOutput {
	return o
}

func (o TcpRouteActionPtrOutput) ToTcpRouteActionPtrOutputWithContext(ctx context.Context) TcpRouteActionPtrOutput {
	return o
}

func (o TcpRouteActionPtrOutput) Elem() TcpRouteActionOutput {
	return o.ApplyT(func(v *TcpRouteAction) TcpRouteAction {
		if v != nil {
			return *v
		}
		var ret TcpRouteAction
		return ret
	}).(TcpRouteActionOutput)
}

// Farm ID for "farm" action type, empty for others.
func (o TcpRouteActionPtrOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpRouteAction) *string {
		if v == nil {
			return nil
		}
		return v.Target
	}).(pulumi.StringPtrOutput)
}

// Action to trigger if all the rules of this route matches
func (o TcpRouteActionPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpRouteAction) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type TcpRouteRuleType struct {
	// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
	Field *string `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "availableRules"
	Match *string `pulumi:"match"`
	// Invert the matching operator effect
	Negate *bool `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern *string `pulumi:"pattern"`
	// Id of your rule
	RuleId *int `pulumi:"ruleId"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField *string `pulumi:"subField"`
}

// TcpRouteRuleTypeInput is an input type that accepts TcpRouteRuleTypeArgs and TcpRouteRuleTypeOutput values.
// You can construct a concrete instance of `TcpRouteRuleTypeInput` via:
//
//	TcpRouteRuleTypeArgs{...}
type TcpRouteRuleTypeInput interface {
	pulumi.Input

	ToTcpRouteRuleTypeOutput() TcpRouteRuleTypeOutput
	ToTcpRouteRuleTypeOutputWithContext(context.Context) TcpRouteRuleTypeOutput
}

type TcpRouteRuleTypeArgs struct {
	// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
	Field pulumi.StringPtrInput `pulumi:"field"`
	// Matching operator. Not all operators are available for all fields. See "availableRules"
	Match pulumi.StringPtrInput `pulumi:"match"`
	// Invert the matching operator effect
	Negate pulumi.BoolPtrInput `pulumi:"negate"`
	// Value to match against this match. Interpretation if this field depends on the match and field
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
	// Id of your rule
	RuleId pulumi.IntPtrInput `pulumi:"ruleId"`
	// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
	SubField pulumi.StringPtrInput `pulumi:"subField"`
}

func (TcpRouteRuleTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleType)(nil)).Elem()
}

func (i TcpRouteRuleTypeArgs) ToTcpRouteRuleTypeOutput() TcpRouteRuleTypeOutput {
	return i.ToTcpRouteRuleTypeOutputWithContext(context.Background())
}

func (i TcpRouteRuleTypeArgs) ToTcpRouteRuleTypeOutputWithContext(ctx context.Context) TcpRouteRuleTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleTypeOutput)
}

// TcpRouteRuleTypeArrayInput is an input type that accepts TcpRouteRuleTypeArray and TcpRouteRuleTypeArrayOutput values.
// You can construct a concrete instance of `TcpRouteRuleTypeArrayInput` via:
//
//	TcpRouteRuleTypeArray{ TcpRouteRuleTypeArgs{...} }
type TcpRouteRuleTypeArrayInput interface {
	pulumi.Input

	ToTcpRouteRuleTypeArrayOutput() TcpRouteRuleTypeArrayOutput
	ToTcpRouteRuleTypeArrayOutputWithContext(context.Context) TcpRouteRuleTypeArrayOutput
}

type TcpRouteRuleTypeArray []TcpRouteRuleTypeInput

func (TcpRouteRuleTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleType)(nil)).Elem()
}

func (i TcpRouteRuleTypeArray) ToTcpRouteRuleTypeArrayOutput() TcpRouteRuleTypeArrayOutput {
	return i.ToTcpRouteRuleTypeArrayOutputWithContext(context.Background())
}

func (i TcpRouteRuleTypeArray) ToTcpRouteRuleTypeArrayOutputWithContext(ctx context.Context) TcpRouteRuleTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpRouteRuleTypeArrayOutput)
}

type TcpRouteRuleTypeOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TcpRouteRuleType)(nil)).Elem()
}

func (o TcpRouteRuleTypeOutput) ToTcpRouteRuleTypeOutput() TcpRouteRuleTypeOutput {
	return o
}

func (o TcpRouteRuleTypeOutput) ToTcpRouteRuleTypeOutputWithContext(ctx context.Context) TcpRouteRuleTypeOutput {
	return o
}

// Name of the field to match like "protocol" or "host" "/ipLoadbalancing/{serviceName}/route/availableRules" for a list of available rules
func (o TcpRouteRuleTypeOutput) Field() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *string { return v.Field }).(pulumi.StringPtrOutput)
}

// Matching operator. Not all operators are available for all fields. See "availableRules"
func (o TcpRouteRuleTypeOutput) Match() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *string { return v.Match }).(pulumi.StringPtrOutput)
}

// Invert the matching operator effect
func (o TcpRouteRuleTypeOutput) Negate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *bool { return v.Negate }).(pulumi.BoolPtrOutput)
}

// Value to match against this match. Interpretation if this field depends on the match and field
func (o TcpRouteRuleTypeOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

// Id of your rule
func (o TcpRouteRuleTypeOutput) RuleId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *int { return v.RuleId }).(pulumi.IntPtrOutput)
}

// Name of sub-field, if applicable. This may be a Cookie or Header name for instance
func (o TcpRouteRuleTypeOutput) SubField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TcpRouteRuleType) *string { return v.SubField }).(pulumi.StringPtrOutput)
}

type TcpRouteRuleTypeArrayOutput struct{ *pulumi.OutputState }

func (TcpRouteRuleTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TcpRouteRuleType)(nil)).Elem()
}

func (o TcpRouteRuleTypeArrayOutput) ToTcpRouteRuleTypeArrayOutput() TcpRouteRuleTypeArrayOutput {
	return o
}

func (o TcpRouteRuleTypeArrayOutput) ToTcpRouteRuleTypeArrayOutputWithContext(ctx context.Context) TcpRouteRuleTypeArrayOutput {
	return o
}

func (o TcpRouteRuleTypeArrayOutput) Index(i pulumi.IntInput) TcpRouteRuleTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TcpRouteRuleType {
		return vs[0].([]TcpRouteRuleType)[vs[1].(int)]
	}).(TcpRouteRuleTypeOutput)
}

type GetIpLoadBalancingOrderableZone struct {
	// The zone three letter code
	Name string `pulumi:"name"`
	// The billing planCode for this zone
	PlanCode string `pulumi:"planCode"`
}

// GetIpLoadBalancingOrderableZoneInput is an input type that accepts GetIpLoadBalancingOrderableZoneArgs and GetIpLoadBalancingOrderableZoneOutput values.
// You can construct a concrete instance of `GetIpLoadBalancingOrderableZoneInput` via:
//
//	GetIpLoadBalancingOrderableZoneArgs{...}
type GetIpLoadBalancingOrderableZoneInput interface {
	pulumi.Input

	ToGetIpLoadBalancingOrderableZoneOutput() GetIpLoadBalancingOrderableZoneOutput
	ToGetIpLoadBalancingOrderableZoneOutputWithContext(context.Context) GetIpLoadBalancingOrderableZoneOutput
}

type GetIpLoadBalancingOrderableZoneArgs struct {
	// The zone three letter code
	Name pulumi.StringInput `pulumi:"name"`
	// The billing planCode for this zone
	PlanCode pulumi.StringInput `pulumi:"planCode"`
}

func (GetIpLoadBalancingOrderableZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpLoadBalancingOrderableZone)(nil)).Elem()
}

func (i GetIpLoadBalancingOrderableZoneArgs) ToGetIpLoadBalancingOrderableZoneOutput() GetIpLoadBalancingOrderableZoneOutput {
	return i.ToGetIpLoadBalancingOrderableZoneOutputWithContext(context.Background())
}

func (i GetIpLoadBalancingOrderableZoneArgs) ToGetIpLoadBalancingOrderableZoneOutputWithContext(ctx context.Context) GetIpLoadBalancingOrderableZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpLoadBalancingOrderableZoneOutput)
}

// GetIpLoadBalancingOrderableZoneArrayInput is an input type that accepts GetIpLoadBalancingOrderableZoneArray and GetIpLoadBalancingOrderableZoneArrayOutput values.
// You can construct a concrete instance of `GetIpLoadBalancingOrderableZoneArrayInput` via:
//
//	GetIpLoadBalancingOrderableZoneArray{ GetIpLoadBalancingOrderableZoneArgs{...} }
type GetIpLoadBalancingOrderableZoneArrayInput interface {
	pulumi.Input

	ToGetIpLoadBalancingOrderableZoneArrayOutput() GetIpLoadBalancingOrderableZoneArrayOutput
	ToGetIpLoadBalancingOrderableZoneArrayOutputWithContext(context.Context) GetIpLoadBalancingOrderableZoneArrayOutput
}

type GetIpLoadBalancingOrderableZoneArray []GetIpLoadBalancingOrderableZoneInput

func (GetIpLoadBalancingOrderableZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpLoadBalancingOrderableZone)(nil)).Elem()
}

func (i GetIpLoadBalancingOrderableZoneArray) ToGetIpLoadBalancingOrderableZoneArrayOutput() GetIpLoadBalancingOrderableZoneArrayOutput {
	return i.ToGetIpLoadBalancingOrderableZoneArrayOutputWithContext(context.Background())
}

func (i GetIpLoadBalancingOrderableZoneArray) ToGetIpLoadBalancingOrderableZoneArrayOutputWithContext(ctx context.Context) GetIpLoadBalancingOrderableZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetIpLoadBalancingOrderableZoneArrayOutput)
}

type GetIpLoadBalancingOrderableZoneOutput struct{ *pulumi.OutputState }

func (GetIpLoadBalancingOrderableZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetIpLoadBalancingOrderableZone)(nil)).Elem()
}

func (o GetIpLoadBalancingOrderableZoneOutput) ToGetIpLoadBalancingOrderableZoneOutput() GetIpLoadBalancingOrderableZoneOutput {
	return o
}

func (o GetIpLoadBalancingOrderableZoneOutput) ToGetIpLoadBalancingOrderableZoneOutputWithContext(ctx context.Context) GetIpLoadBalancingOrderableZoneOutput {
	return o
}

// The zone three letter code
func (o GetIpLoadBalancingOrderableZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpLoadBalancingOrderableZone) string { return v.Name }).(pulumi.StringOutput)
}

// The billing planCode for this zone
func (o GetIpLoadBalancingOrderableZoneOutput) PlanCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetIpLoadBalancingOrderableZone) string { return v.PlanCode }).(pulumi.StringOutput)
}

type GetIpLoadBalancingOrderableZoneArrayOutput struct{ *pulumi.OutputState }

func (GetIpLoadBalancingOrderableZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetIpLoadBalancingOrderableZone)(nil)).Elem()
}

func (o GetIpLoadBalancingOrderableZoneArrayOutput) ToGetIpLoadBalancingOrderableZoneArrayOutput() GetIpLoadBalancingOrderableZoneArrayOutput {
	return o
}

func (o GetIpLoadBalancingOrderableZoneArrayOutput) ToGetIpLoadBalancingOrderableZoneArrayOutputWithContext(ctx context.Context) GetIpLoadBalancingOrderableZoneArrayOutput {
	return o
}

func (o GetIpLoadBalancingOrderableZoneArrayOutput) Index(i pulumi.IntInput) GetIpLoadBalancingOrderableZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetIpLoadBalancingOrderableZone {
		return vs[0].([]GetIpLoadBalancingOrderableZone)[vs[1].(int)]
	}).(GetIpLoadBalancingOrderableZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpFarmProbeInput)(nil)).Elem(), HttpFarmProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpFarmProbePtrInput)(nil)).Elem(), HttpFarmProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteActionInput)(nil)).Elem(), HttpRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteActionPtrInput)(nil)).Elem(), HttpRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleTypeInput)(nil)).Elem(), HttpRouteRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleTypeArrayInput)(nil)).Elem(), HttpRouteRuleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderInput)(nil)).Elem(), LoadBalancerOrderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderArrayInput)(nil)).Elem(), LoadBalancerOrderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderDetailInput)(nil)).Elem(), LoadBalancerOrderDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderDetailArrayInput)(nil)).Elem(), LoadBalancerOrderDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderableZoneInput)(nil)).Elem(), LoadBalancerOrderableZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerOrderableZoneArrayInput)(nil)).Elem(), LoadBalancerOrderableZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanInput)(nil)).Elem(), LoadBalancerPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanPtrInput)(nil)).Elem(), LoadBalancerPlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanConfigurationInput)(nil)).Elem(), LoadBalancerPlanConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanConfigurationArrayInput)(nil)).Elem(), LoadBalancerPlanConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanOptionInput)(nil)).Elem(), LoadBalancerPlanOptionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanOptionArrayInput)(nil)).Elem(), LoadBalancerPlanOptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanOptionConfigurationInput)(nil)).Elem(), LoadBalancerPlanOptionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadBalancerPlanOptionConfigurationArrayInput)(nil)).Elem(), LoadBalancerPlanOptionConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFarmProbeInput)(nil)).Elem(), TcpFarmProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFarmProbePtrInput)(nil)).Elem(), TcpFarmProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteActionInput)(nil)).Elem(), TcpRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteActionPtrInput)(nil)).Elem(), TcpRouteActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleTypeInput)(nil)).Elem(), TcpRouteRuleTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpRouteRuleTypeArrayInput)(nil)).Elem(), TcpRouteRuleTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpLoadBalancingOrderableZoneInput)(nil)).Elem(), GetIpLoadBalancingOrderableZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetIpLoadBalancingOrderableZoneArrayInput)(nil)).Elem(), GetIpLoadBalancingOrderableZoneArray{})
	pulumi.RegisterOutputType(HttpFarmProbeOutput{})
	pulumi.RegisterOutputType(HttpFarmProbePtrOutput{})
	pulumi.RegisterOutputType(HttpRouteActionOutput{})
	pulumi.RegisterOutputType(HttpRouteActionPtrOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleTypeOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleTypeArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderDetailOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderDetailArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderableZoneOutput{})
	pulumi.RegisterOutputType(LoadBalancerOrderableZoneArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanOptionOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanOptionArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanOptionConfigurationOutput{})
	pulumi.RegisterOutputType(LoadBalancerPlanOptionConfigurationArrayOutput{})
	pulumi.RegisterOutputType(TcpFarmProbeOutput{})
	pulumi.RegisterOutputType(TcpFarmProbePtrOutput{})
	pulumi.RegisterOutputType(TcpRouteActionOutput{})
	pulumi.RegisterOutputType(TcpRouteActionPtrOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleTypeOutput{})
	pulumi.RegisterOutputType(TcpRouteRuleTypeArrayOutput{})
	pulumi.RegisterOutputType(GetIpLoadBalancingOrderableZoneOutput{})
	pulumi.RegisterOutputType(GetIpLoadBalancingOrderableZoneArrayOutput{})
}
