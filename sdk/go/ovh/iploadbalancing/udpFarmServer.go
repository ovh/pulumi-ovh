// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UdpFarmServer struct {
	pulumi.CustomResourceState

	// IPv4 address (e.g., 192.0.2.0)
	Address pulumi.StringOutput `pulumi:"address"`
	// Synonym for farm_id
	BackendId pulumi.Float64Output `pulumi:"backendId"`
	// Human readable name for your server, this field is for you
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Id of your farm
	FarmId pulumi.Float64Output `pulumi:"farmId"`
	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port pulumi.Float64PtrOutput `pulumi:"port"`
	// Id of your server
	ServerId pulumi.Float64Output `pulumi:"serverId"`
	// The internal name of your IP load balancing
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Possible values for server status
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewUdpFarmServer registers a new resource with the given unique name, arguments, and options.
func NewUdpFarmServer(ctx *pulumi.Context,
	name string, args *UdpFarmServerArgs, opts ...pulumi.ResourceOption) (*UdpFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UdpFarmServer
	err := ctx.RegisterResource("ovh:IpLoadBalancing/udpFarmServer:UdpFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUdpFarmServer gets an existing UdpFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUdpFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UdpFarmServerState, opts ...pulumi.ResourceOption) (*UdpFarmServer, error) {
	var resource UdpFarmServer
	err := ctx.ReadResource("ovh:IpLoadBalancing/udpFarmServer:UdpFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UdpFarmServer resources.
type udpFarmServerState struct {
	// IPv4 address (e.g., 192.0.2.0)
	Address *string `pulumi:"address"`
	// Synonym for farm_id
	BackendId *float64 `pulumi:"backendId"`
	// Human readable name for your server, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Id of your farm
	FarmId *float64 `pulumi:"farmId"`
	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port *float64 `pulumi:"port"`
	// Id of your server
	ServerId *float64 `pulumi:"serverId"`
	// The internal name of your IP load balancing
	ServiceName *string `pulumi:"serviceName"`
	// Possible values for server status
	Status *string `pulumi:"status"`
}

type UdpFarmServerState struct {
	// IPv4 address (e.g., 192.0.2.0)
	Address pulumi.StringPtrInput
	// Synonym for farm_id
	BackendId pulumi.Float64PtrInput
	// Human readable name for your server, this field is for you
	DisplayName pulumi.StringPtrInput
	// Id of your farm
	FarmId pulumi.Float64PtrInput
	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port pulumi.Float64PtrInput
	// Id of your server
	ServerId pulumi.Float64PtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringPtrInput
	// Possible values for server status
	Status pulumi.StringPtrInput
}

func (UdpFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*udpFarmServerState)(nil)).Elem()
}

type udpFarmServerArgs struct {
	// IPv4 address (e.g., 192.0.2.0)
	Address string `pulumi:"address"`
	// Human readable name for your server, this field is for you
	DisplayName *string `pulumi:"displayName"`
	// Id of your farm
	FarmId float64 `pulumi:"farmId"`
	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port *float64 `pulumi:"port"`
	// The internal name of your IP load balancing
	ServiceName string `pulumi:"serviceName"`
	// Possible values for server status
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a UdpFarmServer resource.
type UdpFarmServerArgs struct {
	// IPv4 address (e.g., 192.0.2.0)
	Address pulumi.StringInput
	// Human readable name for your server, this field is for you
	DisplayName pulumi.StringPtrInput
	// Id of your farm
	FarmId pulumi.Float64Input
	// Port attached to your server ([1..49151]). Inherited from farm if null
	Port pulumi.Float64PtrInput
	// The internal name of your IP load balancing
	ServiceName pulumi.StringInput
	// Possible values for server status
	Status pulumi.StringInput
}

func (UdpFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*udpFarmServerArgs)(nil)).Elem()
}

type UdpFarmServerInput interface {
	pulumi.Input

	ToUdpFarmServerOutput() UdpFarmServerOutput
	ToUdpFarmServerOutputWithContext(ctx context.Context) UdpFarmServerOutput
}

func (*UdpFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpFarmServer)(nil)).Elem()
}

func (i *UdpFarmServer) ToUdpFarmServerOutput() UdpFarmServerOutput {
	return i.ToUdpFarmServerOutputWithContext(context.Background())
}

func (i *UdpFarmServer) ToUdpFarmServerOutputWithContext(ctx context.Context) UdpFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpFarmServerOutput)
}

// UdpFarmServerArrayInput is an input type that accepts UdpFarmServerArray and UdpFarmServerArrayOutput values.
// You can construct a concrete instance of `UdpFarmServerArrayInput` via:
//
//	UdpFarmServerArray{ UdpFarmServerArgs{...} }
type UdpFarmServerArrayInput interface {
	pulumi.Input

	ToUdpFarmServerArrayOutput() UdpFarmServerArrayOutput
	ToUdpFarmServerArrayOutputWithContext(context.Context) UdpFarmServerArrayOutput
}

type UdpFarmServerArray []UdpFarmServerInput

func (UdpFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UdpFarmServer)(nil)).Elem()
}

func (i UdpFarmServerArray) ToUdpFarmServerArrayOutput() UdpFarmServerArrayOutput {
	return i.ToUdpFarmServerArrayOutputWithContext(context.Background())
}

func (i UdpFarmServerArray) ToUdpFarmServerArrayOutputWithContext(ctx context.Context) UdpFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpFarmServerArrayOutput)
}

// UdpFarmServerMapInput is an input type that accepts UdpFarmServerMap and UdpFarmServerMapOutput values.
// You can construct a concrete instance of `UdpFarmServerMapInput` via:
//
//	UdpFarmServerMap{ "key": UdpFarmServerArgs{...} }
type UdpFarmServerMapInput interface {
	pulumi.Input

	ToUdpFarmServerMapOutput() UdpFarmServerMapOutput
	ToUdpFarmServerMapOutputWithContext(context.Context) UdpFarmServerMapOutput
}

type UdpFarmServerMap map[string]UdpFarmServerInput

func (UdpFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UdpFarmServer)(nil)).Elem()
}

func (i UdpFarmServerMap) ToUdpFarmServerMapOutput() UdpFarmServerMapOutput {
	return i.ToUdpFarmServerMapOutputWithContext(context.Background())
}

func (i UdpFarmServerMap) ToUdpFarmServerMapOutputWithContext(ctx context.Context) UdpFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdpFarmServerMapOutput)
}

type UdpFarmServerOutput struct{ *pulumi.OutputState }

func (UdpFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UdpFarmServer)(nil)).Elem()
}

func (o UdpFarmServerOutput) ToUdpFarmServerOutput() UdpFarmServerOutput {
	return o
}

func (o UdpFarmServerOutput) ToUdpFarmServerOutputWithContext(ctx context.Context) UdpFarmServerOutput {
	return o
}

// IPv4 address (e.g., 192.0.2.0)
func (o UdpFarmServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// Synonym for farm_id
func (o UdpFarmServerOutput) BackendId() pulumi.Float64Output {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.Float64Output { return v.BackendId }).(pulumi.Float64Output)
}

// Human readable name for your server, this field is for you
func (o UdpFarmServerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Id of your farm
func (o UdpFarmServerOutput) FarmId() pulumi.Float64Output {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.Float64Output { return v.FarmId }).(pulumi.Float64Output)
}

// Port attached to your server ([1..49151]). Inherited from farm if null
func (o UdpFarmServerOutput) Port() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.Float64PtrOutput { return v.Port }).(pulumi.Float64PtrOutput)
}

// Id of your server
func (o UdpFarmServerOutput) ServerId() pulumi.Float64Output {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.Float64Output { return v.ServerId }).(pulumi.Float64Output)
}

// The internal name of your IP load balancing
func (o UdpFarmServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Possible values for server status
func (o UdpFarmServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UdpFarmServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type UdpFarmServerArrayOutput struct{ *pulumi.OutputState }

func (UdpFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UdpFarmServer)(nil)).Elem()
}

func (o UdpFarmServerArrayOutput) ToUdpFarmServerArrayOutput() UdpFarmServerArrayOutput {
	return o
}

func (o UdpFarmServerArrayOutput) ToUdpFarmServerArrayOutputWithContext(ctx context.Context) UdpFarmServerArrayOutput {
	return o
}

func (o UdpFarmServerArrayOutput) Index(i pulumi.IntInput) UdpFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UdpFarmServer {
		return vs[0].([]*UdpFarmServer)[vs[1].(int)]
	}).(UdpFarmServerOutput)
}

type UdpFarmServerMapOutput struct{ *pulumi.OutputState }

func (UdpFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UdpFarmServer)(nil)).Elem()
}

func (o UdpFarmServerMapOutput) ToUdpFarmServerMapOutput() UdpFarmServerMapOutput {
	return o
}

func (o UdpFarmServerMapOutput) ToUdpFarmServerMapOutputWithContext(ctx context.Context) UdpFarmServerMapOutput {
	return o
}

func (o UdpFarmServerMapOutput) MapIndex(k pulumi.StringInput) UdpFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UdpFarmServer {
		return vs[0].(map[string]*UdpFarmServer)[vs[1].(string)]
	}).(UdpFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UdpFarmServerInput)(nil)).Elem(), &UdpFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*UdpFarmServerArrayInput)(nil)).Elem(), UdpFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UdpFarmServerMapInput)(nil)).Elem(), UdpFarmServerMap{})
	pulumi.RegisterOutputType(UdpFarmServerOutput{})
	pulumi.RegisterOutputType(UdpFarmServerArrayOutput{})
	pulumi.RegisterOutputType(UdpFarmServerMapOutput{})
}
