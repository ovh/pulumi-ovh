// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TcpFarmServer struct {
	pulumi.CustomResourceState

	Address              pulumi.StringOutput    `pulumi:"address"`
	Backup               pulumi.BoolPtrOutput   `pulumi:"backup"`
	Chain                pulumi.StringPtrOutput `pulumi:"chain"`
	DisplayName          pulumi.StringPtrOutput `pulumi:"displayName"`
	FarmId               pulumi.IntOutput       `pulumi:"farmId"`
	OnMarkedDown         pulumi.StringPtrOutput `pulumi:"onMarkedDown"`
	Port                 pulumi.IntPtrOutput    `pulumi:"port"`
	Probe                pulumi.BoolPtrOutput   `pulumi:"probe"`
	ProxyProtocolVersion pulumi.StringPtrOutput `pulumi:"proxyProtocolVersion"`
	ServiceName          pulumi.StringOutput    `pulumi:"serviceName"`
	Ssl                  pulumi.BoolPtrOutput   `pulumi:"ssl"`
	Status               pulumi.StringOutput    `pulumi:"status"`
	Weight               pulumi.IntPtrOutput    `pulumi:"weight"`
}

// NewTcpFarmServer registers a new resource with the given unique name, arguments, and options.
func NewTcpFarmServer(ctx *pulumi.Context,
	name string, args *TcpFarmServerArgs, opts ...pulumi.ResourceOption) (*TcpFarmServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.FarmId == nil {
		return nil, errors.New("invalid value for required argument 'FarmId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TcpFarmServer
	err := ctx.RegisterResource("ovh:IpLoadBalancing/tcpFarmServer:TcpFarmServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTcpFarmServer gets an existing TcpFarmServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTcpFarmServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TcpFarmServerState, opts ...pulumi.ResourceOption) (*TcpFarmServer, error) {
	var resource TcpFarmServer
	err := ctx.ReadResource("ovh:IpLoadBalancing/tcpFarmServer:TcpFarmServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TcpFarmServer resources.
type tcpFarmServerState struct {
	Address              *string `pulumi:"address"`
	Backup               *bool   `pulumi:"backup"`
	Chain                *string `pulumi:"chain"`
	DisplayName          *string `pulumi:"displayName"`
	FarmId               *int    `pulumi:"farmId"`
	OnMarkedDown         *string `pulumi:"onMarkedDown"`
	Port                 *int    `pulumi:"port"`
	Probe                *bool   `pulumi:"probe"`
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	ServiceName          *string `pulumi:"serviceName"`
	Ssl                  *bool   `pulumi:"ssl"`
	Status               *string `pulumi:"status"`
	Weight               *int    `pulumi:"weight"`
}

type TcpFarmServerState struct {
	Address              pulumi.StringPtrInput
	Backup               pulumi.BoolPtrInput
	Chain                pulumi.StringPtrInput
	DisplayName          pulumi.StringPtrInput
	FarmId               pulumi.IntPtrInput
	OnMarkedDown         pulumi.StringPtrInput
	Port                 pulumi.IntPtrInput
	Probe                pulumi.BoolPtrInput
	ProxyProtocolVersion pulumi.StringPtrInput
	ServiceName          pulumi.StringPtrInput
	Ssl                  pulumi.BoolPtrInput
	Status               pulumi.StringPtrInput
	Weight               pulumi.IntPtrInput
}

func (TcpFarmServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpFarmServerState)(nil)).Elem()
}

type tcpFarmServerArgs struct {
	Address              string  `pulumi:"address"`
	Backup               *bool   `pulumi:"backup"`
	Chain                *string `pulumi:"chain"`
	DisplayName          *string `pulumi:"displayName"`
	FarmId               int     `pulumi:"farmId"`
	OnMarkedDown         *string `pulumi:"onMarkedDown"`
	Port                 *int    `pulumi:"port"`
	Probe                *bool   `pulumi:"probe"`
	ProxyProtocolVersion *string `pulumi:"proxyProtocolVersion"`
	ServiceName          string  `pulumi:"serviceName"`
	Ssl                  *bool   `pulumi:"ssl"`
	Status               string  `pulumi:"status"`
	Weight               *int    `pulumi:"weight"`
}

// The set of arguments for constructing a TcpFarmServer resource.
type TcpFarmServerArgs struct {
	Address              pulumi.StringInput
	Backup               pulumi.BoolPtrInput
	Chain                pulumi.StringPtrInput
	DisplayName          pulumi.StringPtrInput
	FarmId               pulumi.IntInput
	OnMarkedDown         pulumi.StringPtrInput
	Port                 pulumi.IntPtrInput
	Probe                pulumi.BoolPtrInput
	ProxyProtocolVersion pulumi.StringPtrInput
	ServiceName          pulumi.StringInput
	Ssl                  pulumi.BoolPtrInput
	Status               pulumi.StringInput
	Weight               pulumi.IntPtrInput
}

func (TcpFarmServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tcpFarmServerArgs)(nil)).Elem()
}

type TcpFarmServerInput interface {
	pulumi.Input

	ToTcpFarmServerOutput() TcpFarmServerOutput
	ToTcpFarmServerOutputWithContext(ctx context.Context) TcpFarmServerOutput
}

func (*TcpFarmServer) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFarmServer)(nil)).Elem()
}

func (i *TcpFarmServer) ToTcpFarmServerOutput() TcpFarmServerOutput {
	return i.ToTcpFarmServerOutputWithContext(context.Background())
}

func (i *TcpFarmServer) ToTcpFarmServerOutputWithContext(ctx context.Context) TcpFarmServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmServerOutput)
}

// TcpFarmServerArrayInput is an input type that accepts TcpFarmServerArray and TcpFarmServerArrayOutput values.
// You can construct a concrete instance of `TcpFarmServerArrayInput` via:
//
//	TcpFarmServerArray{ TcpFarmServerArgs{...} }
type TcpFarmServerArrayInput interface {
	pulumi.Input

	ToTcpFarmServerArrayOutput() TcpFarmServerArrayOutput
	ToTcpFarmServerArrayOutputWithContext(context.Context) TcpFarmServerArrayOutput
}

type TcpFarmServerArray []TcpFarmServerInput

func (TcpFarmServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpFarmServer)(nil)).Elem()
}

func (i TcpFarmServerArray) ToTcpFarmServerArrayOutput() TcpFarmServerArrayOutput {
	return i.ToTcpFarmServerArrayOutputWithContext(context.Background())
}

func (i TcpFarmServerArray) ToTcpFarmServerArrayOutputWithContext(ctx context.Context) TcpFarmServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmServerArrayOutput)
}

// TcpFarmServerMapInput is an input type that accepts TcpFarmServerMap and TcpFarmServerMapOutput values.
// You can construct a concrete instance of `TcpFarmServerMapInput` via:
//
//	TcpFarmServerMap{ "key": TcpFarmServerArgs{...} }
type TcpFarmServerMapInput interface {
	pulumi.Input

	ToTcpFarmServerMapOutput() TcpFarmServerMapOutput
	ToTcpFarmServerMapOutputWithContext(context.Context) TcpFarmServerMapOutput
}

type TcpFarmServerMap map[string]TcpFarmServerInput

func (TcpFarmServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpFarmServer)(nil)).Elem()
}

func (i TcpFarmServerMap) ToTcpFarmServerMapOutput() TcpFarmServerMapOutput {
	return i.ToTcpFarmServerMapOutputWithContext(context.Background())
}

func (i TcpFarmServerMap) ToTcpFarmServerMapOutputWithContext(ctx context.Context) TcpFarmServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TcpFarmServerMapOutput)
}

type TcpFarmServerOutput struct{ *pulumi.OutputState }

func (TcpFarmServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TcpFarmServer)(nil)).Elem()
}

func (o TcpFarmServerOutput) ToTcpFarmServerOutput() TcpFarmServerOutput {
	return o
}

func (o TcpFarmServerOutput) ToTcpFarmServerOutputWithContext(ctx context.Context) TcpFarmServerOutput {
	return o
}

func (o TcpFarmServerOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

func (o TcpFarmServerOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.BoolPtrOutput { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o TcpFarmServerOutput) Chain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringPtrOutput { return v.Chain }).(pulumi.StringPtrOutput)
}

func (o TcpFarmServerOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o TcpFarmServerOutput) FarmId() pulumi.IntOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.IntOutput { return v.FarmId }).(pulumi.IntOutput)
}

func (o TcpFarmServerOutput) OnMarkedDown() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringPtrOutput { return v.OnMarkedDown }).(pulumi.StringPtrOutput)
}

func (o TcpFarmServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o TcpFarmServerOutput) Probe() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.BoolPtrOutput { return v.Probe }).(pulumi.BoolPtrOutput)
}

func (o TcpFarmServerOutput) ProxyProtocolVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringPtrOutput { return v.ProxyProtocolVersion }).(pulumi.StringPtrOutput)
}

func (o TcpFarmServerOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o TcpFarmServerOutput) Ssl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.BoolPtrOutput { return v.Ssl }).(pulumi.BoolPtrOutput)
}

func (o TcpFarmServerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o TcpFarmServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TcpFarmServer) pulumi.IntPtrOutput { return v.Weight }).(pulumi.IntPtrOutput)
}

type TcpFarmServerArrayOutput struct{ *pulumi.OutputState }

func (TcpFarmServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TcpFarmServer)(nil)).Elem()
}

func (o TcpFarmServerArrayOutput) ToTcpFarmServerArrayOutput() TcpFarmServerArrayOutput {
	return o
}

func (o TcpFarmServerArrayOutput) ToTcpFarmServerArrayOutputWithContext(ctx context.Context) TcpFarmServerArrayOutput {
	return o
}

func (o TcpFarmServerArrayOutput) Index(i pulumi.IntInput) TcpFarmServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TcpFarmServer {
		return vs[0].([]*TcpFarmServer)[vs[1].(int)]
	}).(TcpFarmServerOutput)
}

type TcpFarmServerMapOutput struct{ *pulumi.OutputState }

func (TcpFarmServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TcpFarmServer)(nil)).Elem()
}

func (o TcpFarmServerMapOutput) ToTcpFarmServerMapOutput() TcpFarmServerMapOutput {
	return o
}

func (o TcpFarmServerMapOutput) ToTcpFarmServerMapOutputWithContext(ctx context.Context) TcpFarmServerMapOutput {
	return o
}

func (o TcpFarmServerMapOutput) MapIndex(k pulumi.StringInput) TcpFarmServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TcpFarmServer {
		return vs[0].(map[string]*TcpFarmServer)[vs[1].(string)]
	}).(TcpFarmServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFarmServerInput)(nil)).Elem(), &TcpFarmServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFarmServerArrayInput)(nil)).Elem(), TcpFarmServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TcpFarmServerMapInput)(nil)).Elem(), TcpFarmServerMap{})
	pulumi.RegisterOutputType(TcpFarmServerOutput{})
	pulumi.RegisterOutputType(TcpFarmServerArrayOutput{})
	pulumi.RegisterOutputType(TcpFarmServerMapOutput{})
}
