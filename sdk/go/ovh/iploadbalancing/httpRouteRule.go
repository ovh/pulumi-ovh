// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type HttpRouteRule struct {
	pulumi.CustomResourceState

	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	Field       pulumi.StringOutput    `pulumi:"field"`
	Match       pulumi.StringOutput    `pulumi:"match"`
	Negate      pulumi.BoolOutput      `pulumi:"negate"`
	Pattern     pulumi.StringPtrOutput `pulumi:"pattern"`
	RouteId     pulumi.StringOutput    `pulumi:"routeId"`
	ServiceName pulumi.StringOutput    `pulumi:"serviceName"`
	SubField    pulumi.StringPtrOutput `pulumi:"subField"`
}

// NewHttpRouteRule registers a new resource with the given unique name, arguments, and options.
func NewHttpRouteRule(ctx *pulumi.Context,
	name string, args *HttpRouteRuleArgs, opts ...pulumi.ResourceOption) (*HttpRouteRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Match == nil {
		return nil, errors.New("invalid value for required argument 'Match'")
	}
	if args.RouteId == nil {
		return nil, errors.New("invalid value for required argument 'RouteId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HttpRouteRule
	err := ctx.RegisterResource("ovh:IpLoadBalancing/httpRouteRule:HttpRouteRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHttpRouteRule gets an existing HttpRouteRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHttpRouteRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HttpRouteRuleState, opts ...pulumi.ResourceOption) (*HttpRouteRule, error) {
	var resource HttpRouteRule
	err := ctx.ReadResource("ovh:IpLoadBalancing/httpRouteRule:HttpRouteRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HttpRouteRule resources.
type httpRouteRuleState struct {
	DisplayName *string `pulumi:"displayName"`
	Field       *string `pulumi:"field"`
	Match       *string `pulumi:"match"`
	Negate      *bool   `pulumi:"negate"`
	Pattern     *string `pulumi:"pattern"`
	RouteId     *string `pulumi:"routeId"`
	ServiceName *string `pulumi:"serviceName"`
	SubField    *string `pulumi:"subField"`
}

type HttpRouteRuleState struct {
	DisplayName pulumi.StringPtrInput
	Field       pulumi.StringPtrInput
	Match       pulumi.StringPtrInput
	Negate      pulumi.BoolPtrInput
	Pattern     pulumi.StringPtrInput
	RouteId     pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	SubField    pulumi.StringPtrInput
}

func (HttpRouteRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*httpRouteRuleState)(nil)).Elem()
}

type httpRouteRuleArgs struct {
	DisplayName *string `pulumi:"displayName"`
	Field       string  `pulumi:"field"`
	Match       string  `pulumi:"match"`
	Negate      *bool   `pulumi:"negate"`
	Pattern     *string `pulumi:"pattern"`
	RouteId     string  `pulumi:"routeId"`
	ServiceName string  `pulumi:"serviceName"`
	SubField    *string `pulumi:"subField"`
}

// The set of arguments for constructing a HttpRouteRule resource.
type HttpRouteRuleArgs struct {
	DisplayName pulumi.StringPtrInput
	Field       pulumi.StringInput
	Match       pulumi.StringInput
	Negate      pulumi.BoolPtrInput
	Pattern     pulumi.StringPtrInput
	RouteId     pulumi.StringInput
	ServiceName pulumi.StringInput
	SubField    pulumi.StringPtrInput
}

func (HttpRouteRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*httpRouteRuleArgs)(nil)).Elem()
}

type HttpRouteRuleInput interface {
	pulumi.Input

	ToHttpRouteRuleOutput() HttpRouteRuleOutput
	ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput
}

func (*HttpRouteRule) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRule)(nil)).Elem()
}

func (i *HttpRouteRule) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return i.ToHttpRouteRuleOutputWithContext(context.Background())
}

func (i *HttpRouteRule) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleOutput)
}

// HttpRouteRuleArrayInput is an input type that accepts HttpRouteRuleArray and HttpRouteRuleArrayOutput values.
// You can construct a concrete instance of `HttpRouteRuleArrayInput` via:
//
//	HttpRouteRuleArray{ HttpRouteRuleArgs{...} }
type HttpRouteRuleArrayInput interface {
	pulumi.Input

	ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput
	ToHttpRouteRuleArrayOutputWithContext(context.Context) HttpRouteRuleArrayOutput
}

type HttpRouteRuleArray []HttpRouteRuleInput

func (HttpRouteRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return i.ToHttpRouteRuleArrayOutputWithContext(context.Background())
}

func (i HttpRouteRuleArray) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleArrayOutput)
}

// HttpRouteRuleMapInput is an input type that accepts HttpRouteRuleMap and HttpRouteRuleMapOutput values.
// You can construct a concrete instance of `HttpRouteRuleMapInput` via:
//
//	HttpRouteRuleMap{ "key": HttpRouteRuleArgs{...} }
type HttpRouteRuleMapInput interface {
	pulumi.Input

	ToHttpRouteRuleMapOutput() HttpRouteRuleMapOutput
	ToHttpRouteRuleMapOutputWithContext(context.Context) HttpRouteRuleMapOutput
}

type HttpRouteRuleMap map[string]HttpRouteRuleInput

func (HttpRouteRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpRouteRule)(nil)).Elem()
}

func (i HttpRouteRuleMap) ToHttpRouteRuleMapOutput() HttpRouteRuleMapOutput {
	return i.ToHttpRouteRuleMapOutputWithContext(context.Background())
}

func (i HttpRouteRuleMap) ToHttpRouteRuleMapOutputWithContext(ctx context.Context) HttpRouteRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HttpRouteRuleMapOutput)
}

type HttpRouteRuleOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutput() HttpRouteRuleOutput {
	return o
}

func (o HttpRouteRuleOutput) ToHttpRouteRuleOutputWithContext(ctx context.Context) HttpRouteRuleOutput {
	return o
}

func (o HttpRouteRuleOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o HttpRouteRuleOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

func (o HttpRouteRuleOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringOutput { return v.Match }).(pulumi.StringOutput)
}

func (o HttpRouteRuleOutput) Negate() pulumi.BoolOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.BoolOutput { return v.Negate }).(pulumi.BoolOutput)
}

func (o HttpRouteRuleOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringPtrOutput { return v.Pattern }).(pulumi.StringPtrOutput)
}

func (o HttpRouteRuleOutput) RouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringOutput { return v.RouteId }).(pulumi.StringOutput)
}

func (o HttpRouteRuleOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

func (o HttpRouteRuleOutput) SubField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HttpRouteRule) pulumi.StringPtrOutput { return v.SubField }).(pulumi.StringPtrOutput)
}

type HttpRouteRuleArrayOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutput() HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) ToHttpRouteRuleArrayOutputWithContext(ctx context.Context) HttpRouteRuleArrayOutput {
	return o
}

func (o HttpRouteRuleArrayOutput) Index(i pulumi.IntInput) HttpRouteRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HttpRouteRule {
		return vs[0].([]*HttpRouteRule)[vs[1].(int)]
	}).(HttpRouteRuleOutput)
}

type HttpRouteRuleMapOutput struct{ *pulumi.OutputState }

func (HttpRouteRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HttpRouteRule)(nil)).Elem()
}

func (o HttpRouteRuleMapOutput) ToHttpRouteRuleMapOutput() HttpRouteRuleMapOutput {
	return o
}

func (o HttpRouteRuleMapOutput) ToHttpRouteRuleMapOutputWithContext(ctx context.Context) HttpRouteRuleMapOutput {
	return o
}

func (o HttpRouteRuleMapOutput) MapIndex(k pulumi.StringInput) HttpRouteRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HttpRouteRule {
		return vs[0].(map[string]*HttpRouteRule)[vs[1].(string)]
	}).(HttpRouteRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleInput)(nil)).Elem(), &HttpRouteRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleArrayInput)(nil)).Elem(), HttpRouteRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HttpRouteRuleMapInput)(nil)).Elem(), HttpRouteRuleMap{})
	pulumi.RegisterOutputType(HttpRouteRuleOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleArrayOutput{})
	pulumi.RegisterOutputType(HttpRouteRuleMapOutput{})
}
