// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iploadbalancing

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Refresh struct {
	pulumi.CustomResourceState

	Keepers     pulumi.StringArrayOutput `pulumi:"keepers"`
	ServiceName pulumi.StringOutput      `pulumi:"serviceName"`
}

// NewRefresh registers a new resource with the given unique name, arguments, and options.
func NewRefresh(ctx *pulumi.Context,
	name string, args *RefreshArgs, opts ...pulumi.ResourceOption) (*Refresh, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keepers == nil {
		return nil, errors.New("invalid value for required argument 'Keepers'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Refresh
	err := ctx.RegisterResource("ovh:IpLoadBalancing/refresh:Refresh", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRefresh gets an existing Refresh resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRefresh(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RefreshState, opts ...pulumi.ResourceOption) (*Refresh, error) {
	var resource Refresh
	err := ctx.ReadResource("ovh:IpLoadBalancing/refresh:Refresh", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Refresh resources.
type refreshState struct {
	Keepers     []string `pulumi:"keepers"`
	ServiceName *string  `pulumi:"serviceName"`
}

type RefreshState struct {
	Keepers     pulumi.StringArrayInput
	ServiceName pulumi.StringPtrInput
}

func (RefreshState) ElementType() reflect.Type {
	return reflect.TypeOf((*refreshState)(nil)).Elem()
}

type refreshArgs struct {
	Keepers     []string `pulumi:"keepers"`
	ServiceName string   `pulumi:"serviceName"`
}

// The set of arguments for constructing a Refresh resource.
type RefreshArgs struct {
	Keepers     pulumi.StringArrayInput
	ServiceName pulumi.StringInput
}

func (RefreshArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*refreshArgs)(nil)).Elem()
}

type RefreshInput interface {
	pulumi.Input

	ToRefreshOutput() RefreshOutput
	ToRefreshOutputWithContext(ctx context.Context) RefreshOutput
}

func (*Refresh) ElementType() reflect.Type {
	return reflect.TypeOf((**Refresh)(nil)).Elem()
}

func (i *Refresh) ToRefreshOutput() RefreshOutput {
	return i.ToRefreshOutputWithContext(context.Background())
}

func (i *Refresh) ToRefreshOutputWithContext(ctx context.Context) RefreshOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshOutput)
}

// RefreshArrayInput is an input type that accepts RefreshArray and RefreshArrayOutput values.
// You can construct a concrete instance of `RefreshArrayInput` via:
//
//	RefreshArray{ RefreshArgs{...} }
type RefreshArrayInput interface {
	pulumi.Input

	ToRefreshArrayOutput() RefreshArrayOutput
	ToRefreshArrayOutputWithContext(context.Context) RefreshArrayOutput
}

type RefreshArray []RefreshInput

func (RefreshArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Refresh)(nil)).Elem()
}

func (i RefreshArray) ToRefreshArrayOutput() RefreshArrayOutput {
	return i.ToRefreshArrayOutputWithContext(context.Background())
}

func (i RefreshArray) ToRefreshArrayOutputWithContext(ctx context.Context) RefreshArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshArrayOutput)
}

// RefreshMapInput is an input type that accepts RefreshMap and RefreshMapOutput values.
// You can construct a concrete instance of `RefreshMapInput` via:
//
//	RefreshMap{ "key": RefreshArgs{...} }
type RefreshMapInput interface {
	pulumi.Input

	ToRefreshMapOutput() RefreshMapOutput
	ToRefreshMapOutputWithContext(context.Context) RefreshMapOutput
}

type RefreshMap map[string]RefreshInput

func (RefreshMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Refresh)(nil)).Elem()
}

func (i RefreshMap) ToRefreshMapOutput() RefreshMapOutput {
	return i.ToRefreshMapOutputWithContext(context.Background())
}

func (i RefreshMap) ToRefreshMapOutputWithContext(ctx context.Context) RefreshMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RefreshMapOutput)
}

type RefreshOutput struct{ *pulumi.OutputState }

func (RefreshOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Refresh)(nil)).Elem()
}

func (o RefreshOutput) ToRefreshOutput() RefreshOutput {
	return o
}

func (o RefreshOutput) ToRefreshOutputWithContext(ctx context.Context) RefreshOutput {
	return o
}

func (o RefreshOutput) Keepers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Refresh) pulumi.StringArrayOutput { return v.Keepers }).(pulumi.StringArrayOutput)
}

func (o RefreshOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Refresh) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type RefreshArrayOutput struct{ *pulumi.OutputState }

func (RefreshArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Refresh)(nil)).Elem()
}

func (o RefreshArrayOutput) ToRefreshArrayOutput() RefreshArrayOutput {
	return o
}

func (o RefreshArrayOutput) ToRefreshArrayOutputWithContext(ctx context.Context) RefreshArrayOutput {
	return o
}

func (o RefreshArrayOutput) Index(i pulumi.IntInput) RefreshOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Refresh {
		return vs[0].([]*Refresh)[vs[1].(int)]
	}).(RefreshOutput)
}

type RefreshMapOutput struct{ *pulumi.OutputState }

func (RefreshMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Refresh)(nil)).Elem()
}

func (o RefreshMapOutput) ToRefreshMapOutput() RefreshMapOutput {
	return o
}

func (o RefreshMapOutput) ToRefreshMapOutputWithContext(ctx context.Context) RefreshMapOutput {
	return o
}

func (o RefreshMapOutput) MapIndex(k pulumi.StringInput) RefreshOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Refresh {
		return vs[0].(map[string]*Refresh)[vs[1].(string)]
	}).(RefreshOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshInput)(nil)).Elem(), &Refresh{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshArrayInput)(nil)).Elem(), RefreshArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RefreshMapInput)(nil)).Elem(), RefreshMap{})
	pulumi.RegisterOutputType(RefreshOutput{})
	pulumi.RegisterOutputType(RefreshArrayOutput{})
	pulumi.RegisterOutputType(RefreshMapOutput{})
}
