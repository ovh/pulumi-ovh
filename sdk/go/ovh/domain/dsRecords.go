// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DsRecords struct {
	pulumi.CustomResourceState

	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// DS Records for the domain
	DsRecords DsRecordsDsRecordArrayOutput `pulumi:"dsRecords"`
}

// NewDsRecords registers a new resource with the given unique name, arguments, and options.
func NewDsRecords(ctx *pulumi.Context,
	name string, args *DsRecordsArgs, opts ...pulumi.ResourceOption) (*DsRecords, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.DsRecords == nil {
		return nil, errors.New("invalid value for required argument 'DsRecords'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DsRecords
	err := ctx.RegisterResource("ovh:Domain/dsRecords:DsRecords", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDsRecords gets an existing DsRecords resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDsRecords(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DsRecordsState, opts ...pulumi.ResourceOption) (*DsRecords, error) {
	var resource DsRecords
	err := ctx.ReadResource("ovh:Domain/dsRecords:DsRecords", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DsRecords resources.
type dsRecordsState struct {
	// Domain name
	Domain *string `pulumi:"domain"`
	// DS Records for the domain
	DsRecords []DsRecordsDsRecord `pulumi:"dsRecords"`
}

type DsRecordsState struct {
	// Domain name
	Domain pulumi.StringPtrInput
	// DS Records for the domain
	DsRecords DsRecordsDsRecordArrayInput
}

func (DsRecordsState) ElementType() reflect.Type {
	return reflect.TypeOf((*dsRecordsState)(nil)).Elem()
}

type dsRecordsArgs struct {
	// Domain name
	Domain string `pulumi:"domain"`
	// DS Records for the domain
	DsRecords []DsRecordsDsRecord `pulumi:"dsRecords"`
}

// The set of arguments for constructing a DsRecords resource.
type DsRecordsArgs struct {
	// Domain name
	Domain pulumi.StringInput
	// DS Records for the domain
	DsRecords DsRecordsDsRecordArrayInput
}

func (DsRecordsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dsRecordsArgs)(nil)).Elem()
}

type DsRecordsInput interface {
	pulumi.Input

	ToDsRecordsOutput() DsRecordsOutput
	ToDsRecordsOutputWithContext(ctx context.Context) DsRecordsOutput
}

func (*DsRecords) ElementType() reflect.Type {
	return reflect.TypeOf((**DsRecords)(nil)).Elem()
}

func (i *DsRecords) ToDsRecordsOutput() DsRecordsOutput {
	return i.ToDsRecordsOutputWithContext(context.Background())
}

func (i *DsRecords) ToDsRecordsOutputWithContext(ctx context.Context) DsRecordsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordsOutput)
}

// DsRecordsArrayInput is an input type that accepts DsRecordsArray and DsRecordsArrayOutput values.
// You can construct a concrete instance of `DsRecordsArrayInput` via:
//
//	DsRecordsArray{ DsRecordsArgs{...} }
type DsRecordsArrayInput interface {
	pulumi.Input

	ToDsRecordsArrayOutput() DsRecordsArrayOutput
	ToDsRecordsArrayOutputWithContext(context.Context) DsRecordsArrayOutput
}

type DsRecordsArray []DsRecordsInput

func (DsRecordsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DsRecords)(nil)).Elem()
}

func (i DsRecordsArray) ToDsRecordsArrayOutput() DsRecordsArrayOutput {
	return i.ToDsRecordsArrayOutputWithContext(context.Background())
}

func (i DsRecordsArray) ToDsRecordsArrayOutputWithContext(ctx context.Context) DsRecordsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordsArrayOutput)
}

// DsRecordsMapInput is an input type that accepts DsRecordsMap and DsRecordsMapOutput values.
// You can construct a concrete instance of `DsRecordsMapInput` via:
//
//	DsRecordsMap{ "key": DsRecordsArgs{...} }
type DsRecordsMapInput interface {
	pulumi.Input

	ToDsRecordsMapOutput() DsRecordsMapOutput
	ToDsRecordsMapOutputWithContext(context.Context) DsRecordsMapOutput
}

type DsRecordsMap map[string]DsRecordsInput

func (DsRecordsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DsRecords)(nil)).Elem()
}

func (i DsRecordsMap) ToDsRecordsMapOutput() DsRecordsMapOutput {
	return i.ToDsRecordsMapOutputWithContext(context.Background())
}

func (i DsRecordsMap) ToDsRecordsMapOutputWithContext(ctx context.Context) DsRecordsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DsRecordsMapOutput)
}

type DsRecordsOutput struct{ *pulumi.OutputState }

func (DsRecordsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DsRecords)(nil)).Elem()
}

func (o DsRecordsOutput) ToDsRecordsOutput() DsRecordsOutput {
	return o
}

func (o DsRecordsOutput) ToDsRecordsOutputWithContext(ctx context.Context) DsRecordsOutput {
	return o
}

// Domain name
func (o DsRecordsOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *DsRecords) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// DS Records for the domain
func (o DsRecordsOutput) DsRecords() DsRecordsDsRecordArrayOutput {
	return o.ApplyT(func(v *DsRecords) DsRecordsDsRecordArrayOutput { return v.DsRecords }).(DsRecordsDsRecordArrayOutput)
}

type DsRecordsArrayOutput struct{ *pulumi.OutputState }

func (DsRecordsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DsRecords)(nil)).Elem()
}

func (o DsRecordsArrayOutput) ToDsRecordsArrayOutput() DsRecordsArrayOutput {
	return o
}

func (o DsRecordsArrayOutput) ToDsRecordsArrayOutputWithContext(ctx context.Context) DsRecordsArrayOutput {
	return o
}

func (o DsRecordsArrayOutput) Index(i pulumi.IntInput) DsRecordsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DsRecords {
		return vs[0].([]*DsRecords)[vs[1].(int)]
	}).(DsRecordsOutput)
}

type DsRecordsMapOutput struct{ *pulumi.OutputState }

func (DsRecordsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DsRecords)(nil)).Elem()
}

func (o DsRecordsMapOutput) ToDsRecordsMapOutput() DsRecordsMapOutput {
	return o
}

func (o DsRecordsMapOutput) ToDsRecordsMapOutputWithContext(ctx context.Context) DsRecordsMapOutput {
	return o
}

func (o DsRecordsMapOutput) MapIndex(k pulumi.StringInput) DsRecordsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DsRecords {
		return vs[0].(map[string]*DsRecords)[vs[1].(string)]
	}).(DsRecordsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordsInput)(nil)).Elem(), &DsRecords{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordsArrayInput)(nil)).Elem(), DsRecordsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DsRecordsMapInput)(nil)).Elem(), DsRecordsMap{})
	pulumi.RegisterOutputType(DsRecordsOutput{})
	pulumi.RegisterOutputType(DsRecordsArrayOutput{})
	pulumi.RegisterOutputType(DsRecordsMapOutput{})
}
