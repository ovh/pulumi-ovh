// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Create a dynhost login for a given domain zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/domain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewDynhostLogin(ctx, "dynhost_user", &domain.DynhostLoginArgs{
//				ZoneName:    pulumi.String("mydomain.ovh"),
//				SubDomain:   pulumi.String("dynhost"),
//				LoginSuffix: pulumi.String("dynhostUser"),
//				Password:    pulumi.String("thisIsMyPassword"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DynhostLogin struct {
	pulumi.CustomResourceState

	// Login name
	Login pulumi.StringOutput `pulumi:"login"`
	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix pulumi.StringOutput `pulumi:"loginSuffix"`
	// Password of the login
	Password pulumi.StringOutput `pulumi:"password"`
	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain pulumi.StringOutput `pulumi:"subDomain"`
	// Login zone
	Zone pulumi.StringOutput `pulumi:"zone"`
	// Zone name
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewDynhostLogin registers a new resource with the given unique name, arguments, and options.
func NewDynhostLogin(ctx *pulumi.Context,
	name string, args *DynhostLoginArgs, opts ...pulumi.ResourceOption) (*DynhostLogin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoginSuffix == nil {
		return nil, errors.New("invalid value for required argument 'LoginSuffix'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.SubDomain == nil {
		return nil, errors.New("invalid value for required argument 'SubDomain'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DynhostLogin
	err := ctx.RegisterResource("ovh:Domain/dynhostLogin:DynhostLogin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDynhostLogin gets an existing DynhostLogin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDynhostLogin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DynhostLoginState, opts ...pulumi.ResourceOption) (*DynhostLogin, error) {
	var resource DynhostLogin
	err := ctx.ReadResource("ovh:Domain/dynhostLogin:DynhostLogin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DynhostLogin resources.
type dynhostLoginState struct {
	// Login name
	Login *string `pulumi:"login"`
	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix *string `pulumi:"loginSuffix"`
	// Password of the login
	Password *string `pulumi:"password"`
	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain *string `pulumi:"subDomain"`
	// Login zone
	Zone *string `pulumi:"zone"`
	// Zone name
	ZoneName *string `pulumi:"zoneName"`
}

type DynhostLoginState struct {
	// Login name
	Login pulumi.StringPtrInput
	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix pulumi.StringPtrInput
	// Password of the login
	Password pulumi.StringPtrInput
	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain pulumi.StringPtrInput
	// Login zone
	Zone pulumi.StringPtrInput
	// Zone name
	ZoneName pulumi.StringPtrInput
}

func (DynhostLoginState) ElementType() reflect.Type {
	return reflect.TypeOf((*dynhostLoginState)(nil)).Elem()
}

type dynhostLoginArgs struct {
	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix string `pulumi:"loginSuffix"`
	// Password of the login
	Password string `pulumi:"password"`
	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain string `pulumi:"subDomain"`
	// Zone name
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a DynhostLogin resource.
type DynhostLoginArgs struct {
	// Suffix that will be concatenated to the zoneName to create the login
	LoginSuffix pulumi.StringInput
	// Password of the login
	Password pulumi.StringInput
	// Subdomain that the login will be allowed to update (use * to allow all)
	SubDomain pulumi.StringInput
	// Zone name
	ZoneName pulumi.StringInput
}

func (DynhostLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dynhostLoginArgs)(nil)).Elem()
}

type DynhostLoginInput interface {
	pulumi.Input

	ToDynhostLoginOutput() DynhostLoginOutput
	ToDynhostLoginOutputWithContext(ctx context.Context) DynhostLoginOutput
}

func (*DynhostLogin) ElementType() reflect.Type {
	return reflect.TypeOf((**DynhostLogin)(nil)).Elem()
}

func (i *DynhostLogin) ToDynhostLoginOutput() DynhostLoginOutput {
	return i.ToDynhostLoginOutputWithContext(context.Background())
}

func (i *DynhostLogin) ToDynhostLoginOutputWithContext(ctx context.Context) DynhostLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynhostLoginOutput)
}

// DynhostLoginArrayInput is an input type that accepts DynhostLoginArray and DynhostLoginArrayOutput values.
// You can construct a concrete instance of `DynhostLoginArrayInput` via:
//
//	DynhostLoginArray{ DynhostLoginArgs{...} }
type DynhostLoginArrayInput interface {
	pulumi.Input

	ToDynhostLoginArrayOutput() DynhostLoginArrayOutput
	ToDynhostLoginArrayOutputWithContext(context.Context) DynhostLoginArrayOutput
}

type DynhostLoginArray []DynhostLoginInput

func (DynhostLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynhostLogin)(nil)).Elem()
}

func (i DynhostLoginArray) ToDynhostLoginArrayOutput() DynhostLoginArrayOutput {
	return i.ToDynhostLoginArrayOutputWithContext(context.Background())
}

func (i DynhostLoginArray) ToDynhostLoginArrayOutputWithContext(ctx context.Context) DynhostLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynhostLoginArrayOutput)
}

// DynhostLoginMapInput is an input type that accepts DynhostLoginMap and DynhostLoginMapOutput values.
// You can construct a concrete instance of `DynhostLoginMapInput` via:
//
//	DynhostLoginMap{ "key": DynhostLoginArgs{...} }
type DynhostLoginMapInput interface {
	pulumi.Input

	ToDynhostLoginMapOutput() DynhostLoginMapOutput
	ToDynhostLoginMapOutputWithContext(context.Context) DynhostLoginMapOutput
}

type DynhostLoginMap map[string]DynhostLoginInput

func (DynhostLoginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynhostLogin)(nil)).Elem()
}

func (i DynhostLoginMap) ToDynhostLoginMapOutput() DynhostLoginMapOutput {
	return i.ToDynhostLoginMapOutputWithContext(context.Background())
}

func (i DynhostLoginMap) ToDynhostLoginMapOutputWithContext(ctx context.Context) DynhostLoginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DynhostLoginMapOutput)
}

type DynhostLoginOutput struct{ *pulumi.OutputState }

func (DynhostLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DynhostLogin)(nil)).Elem()
}

func (o DynhostLoginOutput) ToDynhostLoginOutput() DynhostLoginOutput {
	return o
}

func (o DynhostLoginOutput) ToDynhostLoginOutputWithContext(ctx context.Context) DynhostLoginOutput {
	return o
}

// Login name
func (o DynhostLoginOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.Login }).(pulumi.StringOutput)
}

// Suffix that will be concatenated to the zoneName to create the login
func (o DynhostLoginOutput) LoginSuffix() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.LoginSuffix }).(pulumi.StringOutput)
}

// Password of the login
func (o DynhostLoginOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Subdomain that the login will be allowed to update (use * to allow all)
func (o DynhostLoginOutput) SubDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.SubDomain }).(pulumi.StringOutput)
}

// Login zone
func (o DynhostLoginOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

// Zone name
func (o DynhostLoginOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *DynhostLogin) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type DynhostLoginArrayOutput struct{ *pulumi.OutputState }

func (DynhostLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DynhostLogin)(nil)).Elem()
}

func (o DynhostLoginArrayOutput) ToDynhostLoginArrayOutput() DynhostLoginArrayOutput {
	return o
}

func (o DynhostLoginArrayOutput) ToDynhostLoginArrayOutputWithContext(ctx context.Context) DynhostLoginArrayOutput {
	return o
}

func (o DynhostLoginArrayOutput) Index(i pulumi.IntInput) DynhostLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DynhostLogin {
		return vs[0].([]*DynhostLogin)[vs[1].(int)]
	}).(DynhostLoginOutput)
}

type DynhostLoginMapOutput struct{ *pulumi.OutputState }

func (DynhostLoginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DynhostLogin)(nil)).Elem()
}

func (o DynhostLoginMapOutput) ToDynhostLoginMapOutput() DynhostLoginMapOutput {
	return o
}

func (o DynhostLoginMapOutput) ToDynhostLoginMapOutputWithContext(ctx context.Context) DynhostLoginMapOutput {
	return o
}

func (o DynhostLoginMapOutput) MapIndex(k pulumi.StringInput) DynhostLoginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DynhostLogin {
		return vs[0].(map[string]*DynhostLogin)[vs[1].(string)]
	}).(DynhostLoginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DynhostLoginInput)(nil)).Elem(), &DynhostLogin{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynhostLoginArrayInput)(nil)).Elem(), DynhostLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DynhostLoginMapInput)(nil)).Elem(), DynhostLoginMap{})
	pulumi.RegisterOutputType(DynhostLoginOutput{})
	pulumi.RegisterOutputType(DynhostLoginArrayOutput{})
	pulumi.RegisterOutputType(DynhostLoginMapOutput{})
}
