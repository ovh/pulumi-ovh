// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Handle a whole DNS zone using a zone file.
//
// > __WARNING__ This resource and resource `Domain.ZoneRecord` should not be used together as `Domain.ZoneImport` controls the whole DNS zone at once.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"os"
//
//	"github.com/ovh/pulumi-ovh/sdk/go/ovh/domain"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := domain.NewZoneImport(ctx, "import", &domain.ZoneImportArgs{
//				ZoneName: pulumi.String("mysite.ovh"),
//				ZoneFile: pulumi.String(readFileOrPanic("./example.zone")),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZoneImport struct {
	pulumi.CustomResourceState

	// Zone file exported from the API
	ExportedContent pulumi.StringOutput `pulumi:"exportedContent"`
	// Content of the zone file to import
	ZoneFile pulumi.StringOutput `pulumi:"zoneFile"`
	// The name of the domain zone
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewZoneImport registers a new resource with the given unique name, arguments, and options.
func NewZoneImport(ctx *pulumi.Context,
	name string, args *ZoneImportArgs, opts ...pulumi.ResourceOption) (*ZoneImport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneFile == nil {
		return nil, errors.New("invalid value for required argument 'ZoneFile'")
	}
	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneImport
	err := ctx.RegisterResource("ovh:Domain/zoneImport:ZoneImport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneImport gets an existing ZoneImport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneImport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneImportState, opts ...pulumi.ResourceOption) (*ZoneImport, error) {
	var resource ZoneImport
	err := ctx.ReadResource("ovh:Domain/zoneImport:ZoneImport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneImport resources.
type zoneImportState struct {
	// Zone file exported from the API
	ExportedContent *string `pulumi:"exportedContent"`
	// Content of the zone file to import
	ZoneFile *string `pulumi:"zoneFile"`
	// The name of the domain zone
	ZoneName *string `pulumi:"zoneName"`
}

type ZoneImportState struct {
	// Zone file exported from the API
	ExportedContent pulumi.StringPtrInput
	// Content of the zone file to import
	ZoneFile pulumi.StringPtrInput
	// The name of the domain zone
	ZoneName pulumi.StringPtrInput
}

func (ZoneImportState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneImportState)(nil)).Elem()
}

type zoneImportArgs struct {
	// Content of the zone file to import
	ZoneFile string `pulumi:"zoneFile"`
	// The name of the domain zone
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a ZoneImport resource.
type ZoneImportArgs struct {
	// Content of the zone file to import
	ZoneFile pulumi.StringInput
	// The name of the domain zone
	ZoneName pulumi.StringInput
}

func (ZoneImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneImportArgs)(nil)).Elem()
}

type ZoneImportInput interface {
	pulumi.Input

	ToZoneImportOutput() ZoneImportOutput
	ToZoneImportOutputWithContext(ctx context.Context) ZoneImportOutput
}

func (*ZoneImport) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneImport)(nil)).Elem()
}

func (i *ZoneImport) ToZoneImportOutput() ZoneImportOutput {
	return i.ToZoneImportOutputWithContext(context.Background())
}

func (i *ZoneImport) ToZoneImportOutputWithContext(ctx context.Context) ZoneImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneImportOutput)
}

// ZoneImportArrayInput is an input type that accepts ZoneImportArray and ZoneImportArrayOutput values.
// You can construct a concrete instance of `ZoneImportArrayInput` via:
//
//	ZoneImportArray{ ZoneImportArgs{...} }
type ZoneImportArrayInput interface {
	pulumi.Input

	ToZoneImportArrayOutput() ZoneImportArrayOutput
	ToZoneImportArrayOutputWithContext(context.Context) ZoneImportArrayOutput
}

type ZoneImportArray []ZoneImportInput

func (ZoneImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneImport)(nil)).Elem()
}

func (i ZoneImportArray) ToZoneImportArrayOutput() ZoneImportArrayOutput {
	return i.ToZoneImportArrayOutputWithContext(context.Background())
}

func (i ZoneImportArray) ToZoneImportArrayOutputWithContext(ctx context.Context) ZoneImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneImportArrayOutput)
}

// ZoneImportMapInput is an input type that accepts ZoneImportMap and ZoneImportMapOutput values.
// You can construct a concrete instance of `ZoneImportMapInput` via:
//
//	ZoneImportMap{ "key": ZoneImportArgs{...} }
type ZoneImportMapInput interface {
	pulumi.Input

	ToZoneImportMapOutput() ZoneImportMapOutput
	ToZoneImportMapOutputWithContext(context.Context) ZoneImportMapOutput
}

type ZoneImportMap map[string]ZoneImportInput

func (ZoneImportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneImport)(nil)).Elem()
}

func (i ZoneImportMap) ToZoneImportMapOutput() ZoneImportMapOutput {
	return i.ToZoneImportMapOutputWithContext(context.Background())
}

func (i ZoneImportMap) ToZoneImportMapOutputWithContext(ctx context.Context) ZoneImportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneImportMapOutput)
}

type ZoneImportOutput struct{ *pulumi.OutputState }

func (ZoneImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneImport)(nil)).Elem()
}

func (o ZoneImportOutput) ToZoneImportOutput() ZoneImportOutput {
	return o
}

func (o ZoneImportOutput) ToZoneImportOutputWithContext(ctx context.Context) ZoneImportOutput {
	return o
}

// Zone file exported from the API
func (o ZoneImportOutput) ExportedContent() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneImport) pulumi.StringOutput { return v.ExportedContent }).(pulumi.StringOutput)
}

// Content of the zone file to import
func (o ZoneImportOutput) ZoneFile() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneImport) pulumi.StringOutput { return v.ZoneFile }).(pulumi.StringOutput)
}

// The name of the domain zone
func (o ZoneImportOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneImport) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type ZoneImportArrayOutput struct{ *pulumi.OutputState }

func (ZoneImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneImport)(nil)).Elem()
}

func (o ZoneImportArrayOutput) ToZoneImportArrayOutput() ZoneImportArrayOutput {
	return o
}

func (o ZoneImportArrayOutput) ToZoneImportArrayOutputWithContext(ctx context.Context) ZoneImportArrayOutput {
	return o
}

func (o ZoneImportArrayOutput) Index(i pulumi.IntInput) ZoneImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneImport {
		return vs[0].([]*ZoneImport)[vs[1].(int)]
	}).(ZoneImportOutput)
}

type ZoneImportMapOutput struct{ *pulumi.OutputState }

func (ZoneImportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneImport)(nil)).Elem()
}

func (o ZoneImportMapOutput) ToZoneImportMapOutput() ZoneImportMapOutput {
	return o
}

func (o ZoneImportMapOutput) ToZoneImportMapOutputWithContext(ctx context.Context) ZoneImportMapOutput {
	return o
}

func (o ZoneImportMapOutput) MapIndex(k pulumi.StringInput) ZoneImportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneImport {
		return vs[0].(map[string]*ZoneImport)[vs[1].(string)]
	}).(ZoneImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneImportInput)(nil)).Elem(), &ZoneImport{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneImportArrayInput)(nil)).Elem(), ZoneImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneImportMapInput)(nil)).Elem(), ZoneImportMap{})
	pulumi.RegisterOutputType(ZoneImportOutput{})
	pulumi.RegisterOutputType(ZoneImportArrayOutput{})
	pulumi.RegisterOutputType(ZoneImportMapOutput{})
}
