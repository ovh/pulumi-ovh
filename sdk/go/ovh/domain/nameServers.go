// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type NameServers struct {
	pulumi.CustomResourceState

	// Domain name
	Domain pulumi.StringOutput `pulumi:"domain"`
	// Name servers for the domain
	Servers NameServersServerArrayOutput `pulumi:"servers"`
}

// NewNameServers registers a new resource with the given unique name, arguments, and options.
func NewNameServers(ctx *pulumi.Context,
	name string, args *NameServersArgs, opts ...pulumi.ResourceOption) (*NameServers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Servers == nil {
		return nil, errors.New("invalid value for required argument 'Servers'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NameServers
	err := ctx.RegisterResource("ovh:Domain/nameServers:NameServers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNameServers gets an existing NameServers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNameServers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NameServersState, opts ...pulumi.ResourceOption) (*NameServers, error) {
	var resource NameServers
	err := ctx.ReadResource("ovh:Domain/nameServers:NameServers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NameServers resources.
type nameServersState struct {
	// Domain name
	Domain *string `pulumi:"domain"`
	// Name servers for the domain
	Servers []NameServersServer `pulumi:"servers"`
}

type NameServersState struct {
	// Domain name
	Domain pulumi.StringPtrInput
	// Name servers for the domain
	Servers NameServersServerArrayInput
}

func (NameServersState) ElementType() reflect.Type {
	return reflect.TypeOf((*nameServersState)(nil)).Elem()
}

type nameServersArgs struct {
	// Domain name
	Domain string `pulumi:"domain"`
	// Name servers for the domain
	Servers []NameServersServer `pulumi:"servers"`
}

// The set of arguments for constructing a NameServers resource.
type NameServersArgs struct {
	// Domain name
	Domain pulumi.StringInput
	// Name servers for the domain
	Servers NameServersServerArrayInput
}

func (NameServersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nameServersArgs)(nil)).Elem()
}

type NameServersInput interface {
	pulumi.Input

	ToNameServersOutput() NameServersOutput
	ToNameServersOutputWithContext(ctx context.Context) NameServersOutput
}

func (*NameServers) ElementType() reflect.Type {
	return reflect.TypeOf((**NameServers)(nil)).Elem()
}

func (i *NameServers) ToNameServersOutput() NameServersOutput {
	return i.ToNameServersOutputWithContext(context.Background())
}

func (i *NameServers) ToNameServersOutputWithContext(ctx context.Context) NameServersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameServersOutput)
}

// NameServersArrayInput is an input type that accepts NameServersArray and NameServersArrayOutput values.
// You can construct a concrete instance of `NameServersArrayInput` via:
//
//	NameServersArray{ NameServersArgs{...} }
type NameServersArrayInput interface {
	pulumi.Input

	ToNameServersArrayOutput() NameServersArrayOutput
	ToNameServersArrayOutputWithContext(context.Context) NameServersArrayOutput
}

type NameServersArray []NameServersInput

func (NameServersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NameServers)(nil)).Elem()
}

func (i NameServersArray) ToNameServersArrayOutput() NameServersArrayOutput {
	return i.ToNameServersArrayOutputWithContext(context.Background())
}

func (i NameServersArray) ToNameServersArrayOutputWithContext(ctx context.Context) NameServersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameServersArrayOutput)
}

// NameServersMapInput is an input type that accepts NameServersMap and NameServersMapOutput values.
// You can construct a concrete instance of `NameServersMapInput` via:
//
//	NameServersMap{ "key": NameServersArgs{...} }
type NameServersMapInput interface {
	pulumi.Input

	ToNameServersMapOutput() NameServersMapOutput
	ToNameServersMapOutputWithContext(context.Context) NameServersMapOutput
}

type NameServersMap map[string]NameServersInput

func (NameServersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NameServers)(nil)).Elem()
}

func (i NameServersMap) ToNameServersMapOutput() NameServersMapOutput {
	return i.ToNameServersMapOutputWithContext(context.Background())
}

func (i NameServersMap) ToNameServersMapOutputWithContext(ctx context.Context) NameServersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameServersMapOutput)
}

type NameServersOutput struct{ *pulumi.OutputState }

func (NameServersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NameServers)(nil)).Elem()
}

func (o NameServersOutput) ToNameServersOutput() NameServersOutput {
	return o
}

func (o NameServersOutput) ToNameServersOutputWithContext(ctx context.Context) NameServersOutput {
	return o
}

// Domain name
func (o NameServersOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *NameServers) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// Name servers for the domain
func (o NameServersOutput) Servers() NameServersServerArrayOutput {
	return o.ApplyT(func(v *NameServers) NameServersServerArrayOutput { return v.Servers }).(NameServersServerArrayOutput)
}

type NameServersArrayOutput struct{ *pulumi.OutputState }

func (NameServersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NameServers)(nil)).Elem()
}

func (o NameServersArrayOutput) ToNameServersArrayOutput() NameServersArrayOutput {
	return o
}

func (o NameServersArrayOutput) ToNameServersArrayOutputWithContext(ctx context.Context) NameServersArrayOutput {
	return o
}

func (o NameServersArrayOutput) Index(i pulumi.IntInput) NameServersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NameServers {
		return vs[0].([]*NameServers)[vs[1].(int)]
	}).(NameServersOutput)
}

type NameServersMapOutput struct{ *pulumi.OutputState }

func (NameServersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NameServers)(nil)).Elem()
}

func (o NameServersMapOutput) ToNameServersMapOutput() NameServersMapOutput {
	return o
}

func (o NameServersMapOutput) ToNameServersMapOutputWithContext(ctx context.Context) NameServersMapOutput {
	return o
}

func (o NameServersMapOutput) MapIndex(k pulumi.StringInput) NameServersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NameServers {
		return vs[0].(map[string]*NameServers)[vs[1].(string)]
	}).(NameServersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NameServersInput)(nil)).Elem(), &NameServers{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameServersArrayInput)(nil)).Elem(), NameServersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameServersMapInput)(nil)).Elem(), NameServersMap{})
	pulumi.RegisterOutputType(NameServersOutput{})
	pulumi.RegisterOutputType(NameServersArrayOutput{})
	pulumi.RegisterOutputType(NameServersMapOutput{})
}
