// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
type Name struct {
	pulumi.CustomResourceState

	// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
	Checksum pulumi.StringOutput `pulumi:"checksum"`
	// Current state of the domain name
	CurrentState NameCurrentStateOutput `pulumi:"currentState"`
	// Ongoing asynchronous tasks related to the domain name resource
	CurrentTasks NameCurrentTaskArrayOutput `pulumi:"currentTasks"`
	// Domain name
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// IAM resource metadata
	Iam NameIamOutput `pulumi:"iam"`
	// Details about an Order
	Order NameOrderOutput `pulumi:"order"`
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrOutput    `pulumi:"ovhSubsidiary"`
	PlanOptions   NamePlanOptionArrayOutput `pulumi:"planOptions"`
	Plans         NamePlanArrayOutput       `pulumi:"plans"`
	// Reflects the readiness of the domain name resource. A new target specification request will be accepted only in `READY`, `UPDATING` or `ERROR` status
	ResourceStatus pulumi.StringOutput `pulumi:"resourceStatus"`
	// Latest target specification of the domain name resource.
	TargetSpec NameTargetSpecOutput `pulumi:"targetSpec"`
}

// NewName registers a new resource with the given unique name, arguments, and options.
func NewName(ctx *pulumi.Context,
	name string, args *NameArgs, opts ...pulumi.ResourceOption) (*Name, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Name
	err := ctx.RegisterResource("ovh:Domain/name:Name", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetName gets an existing Name resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetName(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NameState, opts ...pulumi.ResourceOption) (*Name, error) {
	var resource Name
	err := ctx.ReadResource("ovh:Domain/name:Name", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Name resources.
type nameState struct {
	// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
	Checksum *string `pulumi:"checksum"`
	// Current state of the domain name
	CurrentState *NameCurrentState `pulumi:"currentState"`
	// Ongoing asynchronous tasks related to the domain name resource
	CurrentTasks []NameCurrentTask `pulumi:"currentTasks"`
	// Domain name
	DomainName *string `pulumi:"domainName"`
	// IAM resource metadata
	Iam *NameIam `pulumi:"iam"`
	// Details about an Order
	Order *NameOrder `pulumi:"order"`
	// OVH subsidiaries
	OvhSubsidiary *string          `pulumi:"ovhSubsidiary"`
	PlanOptions   []NamePlanOption `pulumi:"planOptions"`
	Plans         []NamePlan       `pulumi:"plans"`
	// Reflects the readiness of the domain name resource. A new target specification request will be accepted only in `READY`, `UPDATING` or `ERROR` status
	ResourceStatus *string `pulumi:"resourceStatus"`
	// Latest target specification of the domain name resource.
	TargetSpec *NameTargetSpec `pulumi:"targetSpec"`
}

type NameState struct {
	// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
	Checksum pulumi.StringPtrInput
	// Current state of the domain name
	CurrentState NameCurrentStatePtrInput
	// Ongoing asynchronous tasks related to the domain name resource
	CurrentTasks NameCurrentTaskArrayInput
	// Domain name
	DomainName pulumi.StringPtrInput
	// IAM resource metadata
	Iam NameIamPtrInput
	// Details about an Order
	Order NameOrderPtrInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrInput
	PlanOptions   NamePlanOptionArrayInput
	Plans         NamePlanArrayInput
	// Reflects the readiness of the domain name resource. A new target specification request will be accepted only in `READY`, `UPDATING` or `ERROR` status
	ResourceStatus pulumi.StringPtrInput
	// Latest target specification of the domain name resource.
	TargetSpec NameTargetSpecPtrInput
}

func (NameState) ElementType() reflect.Type {
	return reflect.TypeOf((*nameState)(nil)).Elem()
}

type nameArgs struct {
	// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
	Checksum *string `pulumi:"checksum"`
	// Domain name
	DomainName string `pulumi:"domainName"`
	// OVH subsidiaries
	OvhSubsidiary *string          `pulumi:"ovhSubsidiary"`
	PlanOptions   []NamePlanOption `pulumi:"planOptions"`
	Plans         []NamePlan       `pulumi:"plans"`
	// Latest target specification of the domain name resource.
	TargetSpec *NameTargetSpec `pulumi:"targetSpec"`
}

// The set of arguments for constructing a Name resource.
type NameArgs struct {
	// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
	Checksum pulumi.StringPtrInput
	// Domain name
	DomainName pulumi.StringInput
	// OVH subsidiaries
	OvhSubsidiary pulumi.StringPtrInput
	PlanOptions   NamePlanOptionArrayInput
	Plans         NamePlanArrayInput
	// Latest target specification of the domain name resource.
	TargetSpec NameTargetSpecPtrInput
}

func (NameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nameArgs)(nil)).Elem()
}

type NameInput interface {
	pulumi.Input

	ToNameOutput() NameOutput
	ToNameOutputWithContext(ctx context.Context) NameOutput
}

func (*Name) ElementType() reflect.Type {
	return reflect.TypeOf((**Name)(nil)).Elem()
}

func (i *Name) ToNameOutput() NameOutput {
	return i.ToNameOutputWithContext(context.Background())
}

func (i *Name) ToNameOutputWithContext(ctx context.Context) NameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameOutput)
}

// NameArrayInput is an input type that accepts NameArray and NameArrayOutput values.
// You can construct a concrete instance of `NameArrayInput` via:
//
//	NameArray{ NameArgs{...} }
type NameArrayInput interface {
	pulumi.Input

	ToNameArrayOutput() NameArrayOutput
	ToNameArrayOutputWithContext(context.Context) NameArrayOutput
}

type NameArray []NameInput

func (NameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Name)(nil)).Elem()
}

func (i NameArray) ToNameArrayOutput() NameArrayOutput {
	return i.ToNameArrayOutputWithContext(context.Background())
}

func (i NameArray) ToNameArrayOutputWithContext(ctx context.Context) NameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameArrayOutput)
}

// NameMapInput is an input type that accepts NameMap and NameMapOutput values.
// You can construct a concrete instance of `NameMapInput` via:
//
//	NameMap{ "key": NameArgs{...} }
type NameMapInput interface {
	pulumi.Input

	ToNameMapOutput() NameMapOutput
	ToNameMapOutputWithContext(context.Context) NameMapOutput
}

type NameMap map[string]NameInput

func (NameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Name)(nil)).Elem()
}

func (i NameMap) ToNameMapOutput() NameMapOutput {
	return i.ToNameMapOutputWithContext(context.Background())
}

func (i NameMap) ToNameMapOutputWithContext(ctx context.Context) NameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NameMapOutput)
}

type NameOutput struct{ *pulumi.OutputState }

func (NameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Name)(nil)).Elem()
}

func (o NameOutput) ToNameOutput() NameOutput {
	return o
}

func (o NameOutput) ToNameOutputWithContext(ctx context.Context) NameOutput {
	return o
}

// Computed hash used to control concurrent modification requests. Here, it represents the current target specification value
func (o NameOutput) Checksum() pulumi.StringOutput {
	return o.ApplyT(func(v *Name) pulumi.StringOutput { return v.Checksum }).(pulumi.StringOutput)
}

// Current state of the domain name
func (o NameOutput) CurrentState() NameCurrentStateOutput {
	return o.ApplyT(func(v *Name) NameCurrentStateOutput { return v.CurrentState }).(NameCurrentStateOutput)
}

// Ongoing asynchronous tasks related to the domain name resource
func (o NameOutput) CurrentTasks() NameCurrentTaskArrayOutput {
	return o.ApplyT(func(v *Name) NameCurrentTaskArrayOutput { return v.CurrentTasks }).(NameCurrentTaskArrayOutput)
}

// Domain name
func (o NameOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Name) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// IAM resource metadata
func (o NameOutput) Iam() NameIamOutput {
	return o.ApplyT(func(v *Name) NameIamOutput { return v.Iam }).(NameIamOutput)
}

// Details about an Order
func (o NameOutput) Order() NameOrderOutput {
	return o.ApplyT(func(v *Name) NameOrderOutput { return v.Order }).(NameOrderOutput)
}

// OVH subsidiaries
func (o NameOutput) OvhSubsidiary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Name) pulumi.StringPtrOutput { return v.OvhSubsidiary }).(pulumi.StringPtrOutput)
}

func (o NameOutput) PlanOptions() NamePlanOptionArrayOutput {
	return o.ApplyT(func(v *Name) NamePlanOptionArrayOutput { return v.PlanOptions }).(NamePlanOptionArrayOutput)
}

func (o NameOutput) Plans() NamePlanArrayOutput {
	return o.ApplyT(func(v *Name) NamePlanArrayOutput { return v.Plans }).(NamePlanArrayOutput)
}

// Reflects the readiness of the domain name resource. A new target specification request will be accepted only in `READY`, `UPDATING` or `ERROR` status
func (o NameOutput) ResourceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Name) pulumi.StringOutput { return v.ResourceStatus }).(pulumi.StringOutput)
}

// Latest target specification of the domain name resource.
func (o NameOutput) TargetSpec() NameTargetSpecOutput {
	return o.ApplyT(func(v *Name) NameTargetSpecOutput { return v.TargetSpec }).(NameTargetSpecOutput)
}

type NameArrayOutput struct{ *pulumi.OutputState }

func (NameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Name)(nil)).Elem()
}

func (o NameArrayOutput) ToNameArrayOutput() NameArrayOutput {
	return o
}

func (o NameArrayOutput) ToNameArrayOutputWithContext(ctx context.Context) NameArrayOutput {
	return o
}

func (o NameArrayOutput) Index(i pulumi.IntInput) NameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Name {
		return vs[0].([]*Name)[vs[1].(int)]
	}).(NameOutput)
}

type NameMapOutput struct{ *pulumi.OutputState }

func (NameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Name)(nil)).Elem()
}

func (o NameMapOutput) ToNameMapOutput() NameMapOutput {
	return o
}

func (o NameMapOutput) ToNameMapOutputWithContext(ctx context.Context) NameMapOutput {
	return o
}

func (o NameMapOutput) MapIndex(k pulumi.StringInput) NameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Name {
		return vs[0].(map[string]*Name)[vs[1].(string)]
	}).(NameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NameInput)(nil)).Elem(), &Name{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameArrayInput)(nil)).Elem(), NameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NameMapInput)(nil)).Elem(), NameMap{})
	pulumi.RegisterOutputType(NameOutput{})
	pulumi.RegisterOutputType(NameArrayOutput{})
	pulumi.RegisterOutputType(NameMapOutput{})
}
