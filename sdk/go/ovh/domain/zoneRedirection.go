// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domain

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZoneRedirection struct {
	pulumi.CustomResourceState

	Description pulumi.StringPtrOutput `pulumi:"description"`
	Keywords    pulumi.StringPtrOutput `pulumi:"keywords"`
	Subdomain   pulumi.StringPtrOutput `pulumi:"subdomain"`
	Target      pulumi.StringOutput    `pulumi:"target"`
	Title       pulumi.StringPtrOutput `pulumi:"title"`
	Type        pulumi.StringOutput    `pulumi:"type"`
	Zone        pulumi.StringOutput    `pulumi:"zone"`
}

// NewZoneRedirection registers a new resource with the given unique name, arguments, and options.
func NewZoneRedirection(ctx *pulumi.Context,
	name string, args *ZoneRedirectionArgs, opts ...pulumi.ResourceOption) (*ZoneRedirection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ZoneRedirection
	err := ctx.RegisterResource("ovh:Domain/zoneRedirection:ZoneRedirection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZoneRedirection gets an existing ZoneRedirection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneRedirection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneRedirectionState, opts ...pulumi.ResourceOption) (*ZoneRedirection, error) {
	var resource ZoneRedirection
	err := ctx.ReadResource("ovh:Domain/zoneRedirection:ZoneRedirection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZoneRedirection resources.
type zoneRedirectionState struct {
	Description *string `pulumi:"description"`
	Keywords    *string `pulumi:"keywords"`
	Subdomain   *string `pulumi:"subdomain"`
	Target      *string `pulumi:"target"`
	Title       *string `pulumi:"title"`
	Type        *string `pulumi:"type"`
	Zone        *string `pulumi:"zone"`
}

type ZoneRedirectionState struct {
	Description pulumi.StringPtrInput
	Keywords    pulumi.StringPtrInput
	Subdomain   pulumi.StringPtrInput
	Target      pulumi.StringPtrInput
	Title       pulumi.StringPtrInput
	Type        pulumi.StringPtrInput
	Zone        pulumi.StringPtrInput
}

func (ZoneRedirectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneRedirectionState)(nil)).Elem()
}

type zoneRedirectionArgs struct {
	Description *string `pulumi:"description"`
	Keywords    *string `pulumi:"keywords"`
	Subdomain   *string `pulumi:"subdomain"`
	Target      string  `pulumi:"target"`
	Title       *string `pulumi:"title"`
	Type        string  `pulumi:"type"`
	Zone        string  `pulumi:"zone"`
}

// The set of arguments for constructing a ZoneRedirection resource.
type ZoneRedirectionArgs struct {
	Description pulumi.StringPtrInput
	Keywords    pulumi.StringPtrInput
	Subdomain   pulumi.StringPtrInput
	Target      pulumi.StringInput
	Title       pulumi.StringPtrInput
	Type        pulumi.StringInput
	Zone        pulumi.StringInput
}

func (ZoneRedirectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneRedirectionArgs)(nil)).Elem()
}

type ZoneRedirectionInput interface {
	pulumi.Input

	ToZoneRedirectionOutput() ZoneRedirectionOutput
	ToZoneRedirectionOutputWithContext(ctx context.Context) ZoneRedirectionOutput
}

func (*ZoneRedirection) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneRedirection)(nil)).Elem()
}

func (i *ZoneRedirection) ToZoneRedirectionOutput() ZoneRedirectionOutput {
	return i.ToZoneRedirectionOutputWithContext(context.Background())
}

func (i *ZoneRedirection) ToZoneRedirectionOutputWithContext(ctx context.Context) ZoneRedirectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneRedirectionOutput)
}

// ZoneRedirectionArrayInput is an input type that accepts ZoneRedirectionArray and ZoneRedirectionArrayOutput values.
// You can construct a concrete instance of `ZoneRedirectionArrayInput` via:
//
//	ZoneRedirectionArray{ ZoneRedirectionArgs{...} }
type ZoneRedirectionArrayInput interface {
	pulumi.Input

	ToZoneRedirectionArrayOutput() ZoneRedirectionArrayOutput
	ToZoneRedirectionArrayOutputWithContext(context.Context) ZoneRedirectionArrayOutput
}

type ZoneRedirectionArray []ZoneRedirectionInput

func (ZoneRedirectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneRedirection)(nil)).Elem()
}

func (i ZoneRedirectionArray) ToZoneRedirectionArrayOutput() ZoneRedirectionArrayOutput {
	return i.ToZoneRedirectionArrayOutputWithContext(context.Background())
}

func (i ZoneRedirectionArray) ToZoneRedirectionArrayOutputWithContext(ctx context.Context) ZoneRedirectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneRedirectionArrayOutput)
}

// ZoneRedirectionMapInput is an input type that accepts ZoneRedirectionMap and ZoneRedirectionMapOutput values.
// You can construct a concrete instance of `ZoneRedirectionMapInput` via:
//
//	ZoneRedirectionMap{ "key": ZoneRedirectionArgs{...} }
type ZoneRedirectionMapInput interface {
	pulumi.Input

	ToZoneRedirectionMapOutput() ZoneRedirectionMapOutput
	ToZoneRedirectionMapOutputWithContext(context.Context) ZoneRedirectionMapOutput
}

type ZoneRedirectionMap map[string]ZoneRedirectionInput

func (ZoneRedirectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneRedirection)(nil)).Elem()
}

func (i ZoneRedirectionMap) ToZoneRedirectionMapOutput() ZoneRedirectionMapOutput {
	return i.ToZoneRedirectionMapOutputWithContext(context.Background())
}

func (i ZoneRedirectionMap) ToZoneRedirectionMapOutputWithContext(ctx context.Context) ZoneRedirectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneRedirectionMapOutput)
}

type ZoneRedirectionOutput struct{ *pulumi.OutputState }

func (ZoneRedirectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZoneRedirection)(nil)).Elem()
}

func (o ZoneRedirectionOutput) ToZoneRedirectionOutput() ZoneRedirectionOutput {
	return o
}

func (o ZoneRedirectionOutput) ToZoneRedirectionOutputWithContext(ctx context.Context) ZoneRedirectionOutput {
	return o
}

func (o ZoneRedirectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ZoneRedirectionOutput) Keywords() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringPtrOutput { return v.Keywords }).(pulumi.StringPtrOutput)
}

func (o ZoneRedirectionOutput) Subdomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringPtrOutput { return v.Subdomain }).(pulumi.StringPtrOutput)
}

func (o ZoneRedirectionOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

func (o ZoneRedirectionOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringPtrOutput { return v.Title }).(pulumi.StringPtrOutput)
}

func (o ZoneRedirectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o ZoneRedirectionOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ZoneRedirection) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ZoneRedirectionArrayOutput struct{ *pulumi.OutputState }

func (ZoneRedirectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZoneRedirection)(nil)).Elem()
}

func (o ZoneRedirectionArrayOutput) ToZoneRedirectionArrayOutput() ZoneRedirectionArrayOutput {
	return o
}

func (o ZoneRedirectionArrayOutput) ToZoneRedirectionArrayOutputWithContext(ctx context.Context) ZoneRedirectionArrayOutput {
	return o
}

func (o ZoneRedirectionArrayOutput) Index(i pulumi.IntInput) ZoneRedirectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZoneRedirection {
		return vs[0].([]*ZoneRedirection)[vs[1].(int)]
	}).(ZoneRedirectionOutput)
}

type ZoneRedirectionMapOutput struct{ *pulumi.OutputState }

func (ZoneRedirectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZoneRedirection)(nil)).Elem()
}

func (o ZoneRedirectionMapOutput) ToZoneRedirectionMapOutput() ZoneRedirectionMapOutput {
	return o
}

func (o ZoneRedirectionMapOutput) ToZoneRedirectionMapOutputWithContext(ctx context.Context) ZoneRedirectionMapOutput {
	return o
}

func (o ZoneRedirectionMapOutput) MapIndex(k pulumi.StringInput) ZoneRedirectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZoneRedirection {
		return vs[0].(map[string]*ZoneRedirection)[vs[1].(string)]
	}).(ZoneRedirectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneRedirectionInput)(nil)).Elem(), &ZoneRedirection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneRedirectionArrayInput)(nil)).Elem(), ZoneRedirectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneRedirectionMapInput)(nil)).Elem(), ZoneRedirectionMap{})
	pulumi.RegisterOutputType(ZoneRedirectionOutput{})
	pulumi.RegisterOutputType(ZoneRedirectionArrayOutput{})
	pulumi.RegisterOutputType(ZoneRedirectionMapOutput{})
}
