// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetDatabaseLogSubscriptions(ctx *pulumi.Context, args *GetDatabaseLogSubscriptionsArgs, opts ...pulumi.InvokeOption) (*GetDatabaseLogSubscriptionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDatabaseLogSubscriptionsResult
	err := ctx.Invoke("ovh:CloudProjectDatabase/getDatabaseLogSubscriptions:getDatabaseLogSubscriptions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDatabaseLogSubscriptions.
type GetDatabaseLogSubscriptionsArgs struct {
	ClusterId   string `pulumi:"clusterId"`
	Engine      string `pulumi:"engine"`
	ServiceName string `pulumi:"serviceName"`
}

// A collection of values returned by getDatabaseLogSubscriptions.
type GetDatabaseLogSubscriptionsResult struct {
	ClusterId string `pulumi:"clusterId"`
	Engine    string `pulumi:"engine"`
	// The provider-assigned unique ID for this managed resource.
	Id              string   `pulumi:"id"`
	ServiceName     string   `pulumi:"serviceName"`
	SubscriptionIds []string `pulumi:"subscriptionIds"`
}

func GetDatabaseLogSubscriptionsOutput(ctx *pulumi.Context, args GetDatabaseLogSubscriptionsOutputArgs, opts ...pulumi.InvokeOption) GetDatabaseLogSubscriptionsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDatabaseLogSubscriptionsResultOutput, error) {
			args := v.(GetDatabaseLogSubscriptionsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("ovh:CloudProjectDatabase/getDatabaseLogSubscriptions:getDatabaseLogSubscriptions", args, GetDatabaseLogSubscriptionsResultOutput{}, options).(GetDatabaseLogSubscriptionsResultOutput), nil
		}).(GetDatabaseLogSubscriptionsResultOutput)
}

// A collection of arguments for invoking getDatabaseLogSubscriptions.
type GetDatabaseLogSubscriptionsOutputArgs struct {
	ClusterId   pulumi.StringInput `pulumi:"clusterId"`
	Engine      pulumi.StringInput `pulumi:"engine"`
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (GetDatabaseLogSubscriptionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseLogSubscriptionsArgs)(nil)).Elem()
}

// A collection of values returned by getDatabaseLogSubscriptions.
type GetDatabaseLogSubscriptionsResultOutput struct{ *pulumi.OutputState }

func (GetDatabaseLogSubscriptionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabaseLogSubscriptionsResult)(nil)).Elem()
}

func (o GetDatabaseLogSubscriptionsResultOutput) ToGetDatabaseLogSubscriptionsResultOutput() GetDatabaseLogSubscriptionsResultOutput {
	return o
}

func (o GetDatabaseLogSubscriptionsResultOutput) ToGetDatabaseLogSubscriptionsResultOutputWithContext(ctx context.Context) GetDatabaseLogSubscriptionsResultOutput {
	return o
}

func (o GetDatabaseLogSubscriptionsResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseLogSubscriptionsResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

func (o GetDatabaseLogSubscriptionsResultOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseLogSubscriptionsResult) string { return v.Engine }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetDatabaseLogSubscriptionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseLogSubscriptionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDatabaseLogSubscriptionsResultOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabaseLogSubscriptionsResult) string { return v.ServiceName }).(pulumi.StringOutput)
}

func (o GetDatabaseLogSubscriptionsResultOutput) SubscriptionIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDatabaseLogSubscriptionsResult) []string { return v.SubscriptionIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDatabaseLogSubscriptionsResultOutput{})
}
