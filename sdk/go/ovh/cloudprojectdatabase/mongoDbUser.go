// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MongoDbUser struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Date of the creation of the user
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Name of the user
	Name pulumi.StringOutput `pulumi:"name"`
	// Password of the user
	Password pulumi.StringOutput `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	// Roles the user belongs to with the authentication database
	Roles       pulumi.StringArrayOutput `pulumi:"roles"`
	ServiceName pulumi.StringOutput      `pulumi:"serviceName"`
	// Current status of the user
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewMongoDbUser registers a new resource with the given unique name, arguments, and options.
func NewMongoDbUser(ctx *pulumi.Context,
	name string, args *MongoDbUserArgs, opts ...pulumi.ResourceOption) (*MongoDbUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoDbUser
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/mongoDbUser:MongoDbUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoDbUser gets an existing MongoDbUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoDbUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoDbUserState, opts ...pulumi.ResourceOption) (*MongoDbUser, error) {
	var resource MongoDbUser
	err := ctx.ReadResource("ovh:CloudProjectDatabase/mongoDbUser:MongoDbUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoDbUser resources.
type mongoDbUserState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Date of the creation of the user
	CreatedAt *string `pulumi:"createdAt"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Password of the user
	Password *string `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// Roles the user belongs to with the authentication database
	Roles       []string `pulumi:"roles"`
	ServiceName *string  `pulumi:"serviceName"`
	// Current status of the user
	Status *string `pulumi:"status"`
}

type MongoDbUserState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Date of the creation of the user
	CreatedAt pulumi.StringPtrInput
	// Name of the user
	Name pulumi.StringPtrInput
	// Password of the user
	Password pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// Roles the user belongs to with the authentication database
	Roles       pulumi.StringArrayInput
	ServiceName pulumi.StringPtrInput
	// Current status of the user
	Status pulumi.StringPtrInput
}

func (MongoDbUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbUserState)(nil)).Elem()
}

type mongoDbUserArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Name of the user
	Name *string `pulumi:"name"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// Roles the user belongs to with the authentication database
	Roles       []string `pulumi:"roles"`
	ServiceName string   `pulumi:"serviceName"`
}

// The set of arguments for constructing a MongoDbUser resource.
type MongoDbUserArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Name of the user
	Name pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// Roles the user belongs to with the authentication database
	Roles       pulumi.StringArrayInput
	ServiceName pulumi.StringInput
}

func (MongoDbUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbUserArgs)(nil)).Elem()
}

type MongoDbUserInput interface {
	pulumi.Input

	ToMongoDbUserOutput() MongoDbUserOutput
	ToMongoDbUserOutputWithContext(ctx context.Context) MongoDbUserOutput
}

func (*MongoDbUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbUser)(nil)).Elem()
}

func (i *MongoDbUser) ToMongoDbUserOutput() MongoDbUserOutput {
	return i.ToMongoDbUserOutputWithContext(context.Background())
}

func (i *MongoDbUser) ToMongoDbUserOutputWithContext(ctx context.Context) MongoDbUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbUserOutput)
}

// MongoDbUserArrayInput is an input type that accepts MongoDbUserArray and MongoDbUserArrayOutput values.
// You can construct a concrete instance of `MongoDbUserArrayInput` via:
//
//	MongoDbUserArray{ MongoDbUserArgs{...} }
type MongoDbUserArrayInput interface {
	pulumi.Input

	ToMongoDbUserArrayOutput() MongoDbUserArrayOutput
	ToMongoDbUserArrayOutputWithContext(context.Context) MongoDbUserArrayOutput
}

type MongoDbUserArray []MongoDbUserInput

func (MongoDbUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbUser)(nil)).Elem()
}

func (i MongoDbUserArray) ToMongoDbUserArrayOutput() MongoDbUserArrayOutput {
	return i.ToMongoDbUserArrayOutputWithContext(context.Background())
}

func (i MongoDbUserArray) ToMongoDbUserArrayOutputWithContext(ctx context.Context) MongoDbUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbUserArrayOutput)
}

// MongoDbUserMapInput is an input type that accepts MongoDbUserMap and MongoDbUserMapOutput values.
// You can construct a concrete instance of `MongoDbUserMapInput` via:
//
//	MongoDbUserMap{ "key": MongoDbUserArgs{...} }
type MongoDbUserMapInput interface {
	pulumi.Input

	ToMongoDbUserMapOutput() MongoDbUserMapOutput
	ToMongoDbUserMapOutputWithContext(context.Context) MongoDbUserMapOutput
}

type MongoDbUserMap map[string]MongoDbUserInput

func (MongoDbUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbUser)(nil)).Elem()
}

func (i MongoDbUserMap) ToMongoDbUserMapOutput() MongoDbUserMapOutput {
	return i.ToMongoDbUserMapOutputWithContext(context.Background())
}

func (i MongoDbUserMap) ToMongoDbUserMapOutputWithContext(ctx context.Context) MongoDbUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbUserMapOutput)
}

type MongoDbUserOutput struct{ *pulumi.OutputState }

func (MongoDbUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbUser)(nil)).Elem()
}

func (o MongoDbUserOutput) ToMongoDbUserOutput() MongoDbUserOutput {
	return o
}

func (o MongoDbUserOutput) ToMongoDbUserOutputWithContext(ctx context.Context) MongoDbUserOutput {
	return o
}

// Id of the database cluster
func (o MongoDbUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Date of the creation of the user
func (o MongoDbUserOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Name of the user
func (o MongoDbUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password of the user
func (o MongoDbUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Arbitrary string to change to trigger a password update
func (o MongoDbUserOutput) PasswordReset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringPtrOutput { return v.PasswordReset }).(pulumi.StringPtrOutput)
}

// Roles the user belongs to with the authentication database
func (o MongoDbUserOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

func (o MongoDbUserOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Current status of the user
func (o MongoDbUserOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbUser) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type MongoDbUserArrayOutput struct{ *pulumi.OutputState }

func (MongoDbUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbUser)(nil)).Elem()
}

func (o MongoDbUserArrayOutput) ToMongoDbUserArrayOutput() MongoDbUserArrayOutput {
	return o
}

func (o MongoDbUserArrayOutput) ToMongoDbUserArrayOutputWithContext(ctx context.Context) MongoDbUserArrayOutput {
	return o
}

func (o MongoDbUserArrayOutput) Index(i pulumi.IntInput) MongoDbUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoDbUser {
		return vs[0].([]*MongoDbUser)[vs[1].(int)]
	}).(MongoDbUserOutput)
}

type MongoDbUserMapOutput struct{ *pulumi.OutputState }

func (MongoDbUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbUser)(nil)).Elem()
}

func (o MongoDbUserMapOutput) ToMongoDbUserMapOutput() MongoDbUserMapOutput {
	return o
}

func (o MongoDbUserMapOutput) ToMongoDbUserMapOutputWithContext(ctx context.Context) MongoDbUserMapOutput {
	return o
}

func (o MongoDbUserMapOutput) MapIndex(k pulumi.StringInput) MongoDbUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoDbUser {
		return vs[0].(map[string]*MongoDbUser)[vs[1].(string)]
	}).(MongoDbUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbUserInput)(nil)).Elem(), &MongoDbUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbUserArrayInput)(nil)).Elem(), MongoDbUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbUserMapInput)(nil)).Elem(), MongoDbUserMap{})
	pulumi.RegisterOutputType(MongoDbUserOutput{})
	pulumi.RegisterOutputType(MongoDbUserArrayOutput{})
	pulumi.RegisterOutputType(MongoDbUserMapOutput{})
}
