// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OVHcloud Managed database clusters prometheus can be imported using the `service_name`, `engine` and `cluster_id`, separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProjectDatabase/prometheus:Prometheus my_prometheus service_name/engine/cluster_id
// ```
type Prometheus struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
	// Available engines:
	Engine pulumi.StringOutput `pulumi:"engine"`
	// (Sensitive) Password of the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// List of all endpoint targets.
	// * `Host` - Host of the endpoint.
	// * `Port` - Connection port for the endpoint.
	Targets PrometheusTargetArrayOutput `pulumi:"targets"`
	// name of the prometheus user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewPrometheus registers a new resource with the given unique name, arguments, and options.
func NewPrometheus(ctx *pulumi.Context,
	name string, args *PrometheusArgs, opts ...pulumi.ResourceOption) (*Prometheus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Engine == nil {
		return nil, errors.New("invalid value for required argument 'Engine'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Prometheus
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/prometheus:Prometheus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheus gets an existing Prometheus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusState, opts ...pulumi.ResourceOption) (*Prometheus, error) {
	var resource Prometheus
	err := ctx.ReadResource("ovh:CloudProjectDatabase/prometheus:Prometheus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prometheus resources.
type prometheusState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
	// Available engines:
	Engine *string `pulumi:"engine"`
	// (Sensitive) Password of the user.
	Password *string `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// List of all endpoint targets.
	// * `Host` - Host of the endpoint.
	// * `Port` - Connection port for the endpoint.
	Targets []PrometheusTarget `pulumi:"targets"`
	// name of the prometheus user.
	Username *string `pulumi:"username"`
}

type PrometheusState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
	// Available engines:
	Engine pulumi.StringPtrInput
	// (Sensitive) Password of the user.
	Password pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// List of all endpoint targets.
	// * `Host` - Host of the endpoint.
	// * `Port` - Connection port for the endpoint.
	Targets PrometheusTargetArrayInput
	// name of the prometheus user.
	Username pulumi.StringPtrInput
}

func (PrometheusState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusState)(nil)).Elem()
}

type prometheusArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
	// Available engines:
	Engine string `pulumi:"engine"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a Prometheus resource.
type PrometheusArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
	// Available engines:
	Engine pulumi.StringInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (PrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusArgs)(nil)).Elem()
}

type PrometheusInput interface {
	pulumi.Input

	ToPrometheusOutput() PrometheusOutput
	ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput
}

func (*Prometheus) ElementType() reflect.Type {
	return reflect.TypeOf((**Prometheus)(nil)).Elem()
}

func (i *Prometheus) ToPrometheusOutput() PrometheusOutput {
	return i.ToPrometheusOutputWithContext(context.Background())
}

func (i *Prometheus) ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOutput)
}

// PrometheusArrayInput is an input type that accepts PrometheusArray and PrometheusArrayOutput values.
// You can construct a concrete instance of `PrometheusArrayInput` via:
//
//	PrometheusArray{ PrometheusArgs{...} }
type PrometheusArrayInput interface {
	pulumi.Input

	ToPrometheusArrayOutput() PrometheusArrayOutput
	ToPrometheusArrayOutputWithContext(context.Context) PrometheusArrayOutput
}

type PrometheusArray []PrometheusInput

func (PrometheusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prometheus)(nil)).Elem()
}

func (i PrometheusArray) ToPrometheusArrayOutput() PrometheusArrayOutput {
	return i.ToPrometheusArrayOutputWithContext(context.Background())
}

func (i PrometheusArray) ToPrometheusArrayOutputWithContext(ctx context.Context) PrometheusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusArrayOutput)
}

// PrometheusMapInput is an input type that accepts PrometheusMap and PrometheusMapOutput values.
// You can construct a concrete instance of `PrometheusMapInput` via:
//
//	PrometheusMap{ "key": PrometheusArgs{...} }
type PrometheusMapInput interface {
	pulumi.Input

	ToPrometheusMapOutput() PrometheusMapOutput
	ToPrometheusMapOutputWithContext(context.Context) PrometheusMapOutput
}

type PrometheusMap map[string]PrometheusInput

func (PrometheusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prometheus)(nil)).Elem()
}

func (i PrometheusMap) ToPrometheusMapOutput() PrometheusMapOutput {
	return i.ToPrometheusMapOutputWithContext(context.Background())
}

func (i PrometheusMap) ToPrometheusMapOutputWithContext(ctx context.Context) PrometheusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusMapOutput)
}

type PrometheusOutput struct{ *pulumi.OutputState }

func (PrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prometheus)(nil)).Elem()
}

func (o PrometheusOutput) ToPrometheusOutput() PrometheusOutput {
	return o
}

func (o PrometheusOutput) ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput {
	return o
}

// Cluster ID.
func (o PrometheusOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The engine of the database cluster you want to add. You can find the complete list of available engine in the [public documentation](https://docs.ovh.com/gb/en/publiccloud/databases).
// Available engines:
func (o PrometheusOutput) Engine() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.Engine }).(pulumi.StringOutput)
}

// (Sensitive) Password of the user.
func (o PrometheusOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Arbitrary string to change to trigger a password update
func (o PrometheusOutput) PasswordReset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringPtrOutput { return v.PasswordReset }).(pulumi.StringPtrOutput)
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o PrometheusOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// List of all endpoint targets.
// * `Host` - Host of the endpoint.
// * `Port` - Connection port for the endpoint.
func (o PrometheusOutput) Targets() PrometheusTargetArrayOutput {
	return o.ApplyT(func(v *Prometheus) PrometheusTargetArrayOutput { return v.Targets }).(PrometheusTargetArrayOutput)
}

// name of the prometheus user.
func (o PrometheusOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type PrometheusArrayOutput struct{ *pulumi.OutputState }

func (PrometheusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prometheus)(nil)).Elem()
}

func (o PrometheusArrayOutput) ToPrometheusArrayOutput() PrometheusArrayOutput {
	return o
}

func (o PrometheusArrayOutput) ToPrometheusArrayOutputWithContext(ctx context.Context) PrometheusArrayOutput {
	return o
}

func (o PrometheusArrayOutput) Index(i pulumi.IntInput) PrometheusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Prometheus {
		return vs[0].([]*Prometheus)[vs[1].(int)]
	}).(PrometheusOutput)
}

type PrometheusMapOutput struct{ *pulumi.OutputState }

func (PrometheusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prometheus)(nil)).Elem()
}

func (o PrometheusMapOutput) ToPrometheusMapOutput() PrometheusMapOutput {
	return o
}

func (o PrometheusMapOutput) ToPrometheusMapOutputWithContext(ctx context.Context) PrometheusMapOutput {
	return o
}

func (o PrometheusMapOutput) MapIndex(k pulumi.StringInput) PrometheusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Prometheus {
		return vs[0].(map[string]*Prometheus)[vs[1].(string)]
	}).(PrometheusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusInput)(nil)).Elem(), &Prometheus{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusArrayInput)(nil)).Elem(), PrometheusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusMapInput)(nil)).Elem(), PrometheusMap{})
	pulumi.RegisterOutputType(PrometheusOutput{})
	pulumi.RegisterOutputType(PrometheusArrayOutput{})
	pulumi.RegisterOutputType(PrometheusMapOutput{})
}
