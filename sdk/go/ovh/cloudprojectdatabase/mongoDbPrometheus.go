// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OVHcloud Managed MongoDB clusters prometheus can be imported using the `service_name` and `cluster_id`, separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProjectDatabase/mongoDbPrometheus:MongoDbPrometheus my_prometheus service_name/engine/cluster_id
// ```
type MongoDbPrometheus struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// (Sensitive) Password of the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrOutput `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Name of the srv domain endpoint.
	SrvDomain pulumi.StringOutput `pulumi:"srvDomain"`
	// name of the prometheus user.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewMongoDbPrometheus registers a new resource with the given unique name, arguments, and options.
func NewMongoDbPrometheus(ctx *pulumi.Context,
	name string, args *MongoDbPrometheusArgs, opts ...pulumi.ResourceOption) (*MongoDbPrometheus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongoDbPrometheus
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/mongoDbPrometheus:MongoDbPrometheus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoDbPrometheus gets an existing MongoDbPrometheus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoDbPrometheus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoDbPrometheusState, opts ...pulumi.ResourceOption) (*MongoDbPrometheus, error) {
	var resource MongoDbPrometheus
	err := ctx.ReadResource("ovh:CloudProjectDatabase/mongoDbPrometheus:MongoDbPrometheus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoDbPrometheus resources.
type mongoDbPrometheusState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// (Sensitive) Password of the user.
	Password *string `pulumi:"password"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// Name of the srv domain endpoint.
	SrvDomain *string `pulumi:"srvDomain"`
	// name of the prometheus user.
	Username *string `pulumi:"username"`
}

type MongoDbPrometheusState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// (Sensitive) Password of the user.
	Password pulumi.StringPtrInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// Name of the srv domain endpoint.
	SrvDomain pulumi.StringPtrInput
	// name of the prometheus user.
	Username pulumi.StringPtrInput
}

func (MongoDbPrometheusState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbPrometheusState)(nil)).Elem()
}

type mongoDbPrometheusArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Arbitrary string to change to trigger a password update
	PasswordReset *string `pulumi:"passwordReset"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
}

// The set of arguments for constructing a MongoDbPrometheus resource.
type MongoDbPrometheusArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// Arbitrary string to change to trigger a password update
	PasswordReset pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
}

func (MongoDbPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoDbPrometheusArgs)(nil)).Elem()
}

type MongoDbPrometheusInput interface {
	pulumi.Input

	ToMongoDbPrometheusOutput() MongoDbPrometheusOutput
	ToMongoDbPrometheusOutputWithContext(ctx context.Context) MongoDbPrometheusOutput
}

func (*MongoDbPrometheus) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbPrometheus)(nil)).Elem()
}

func (i *MongoDbPrometheus) ToMongoDbPrometheusOutput() MongoDbPrometheusOutput {
	return i.ToMongoDbPrometheusOutputWithContext(context.Background())
}

func (i *MongoDbPrometheus) ToMongoDbPrometheusOutputWithContext(ctx context.Context) MongoDbPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbPrometheusOutput)
}

// MongoDbPrometheusArrayInput is an input type that accepts MongoDbPrometheusArray and MongoDbPrometheusArrayOutput values.
// You can construct a concrete instance of `MongoDbPrometheusArrayInput` via:
//
//	MongoDbPrometheusArray{ MongoDbPrometheusArgs{...} }
type MongoDbPrometheusArrayInput interface {
	pulumi.Input

	ToMongoDbPrometheusArrayOutput() MongoDbPrometheusArrayOutput
	ToMongoDbPrometheusArrayOutputWithContext(context.Context) MongoDbPrometheusArrayOutput
}

type MongoDbPrometheusArray []MongoDbPrometheusInput

func (MongoDbPrometheusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbPrometheus)(nil)).Elem()
}

func (i MongoDbPrometheusArray) ToMongoDbPrometheusArrayOutput() MongoDbPrometheusArrayOutput {
	return i.ToMongoDbPrometheusArrayOutputWithContext(context.Background())
}

func (i MongoDbPrometheusArray) ToMongoDbPrometheusArrayOutputWithContext(ctx context.Context) MongoDbPrometheusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbPrometheusArrayOutput)
}

// MongoDbPrometheusMapInput is an input type that accepts MongoDbPrometheusMap and MongoDbPrometheusMapOutput values.
// You can construct a concrete instance of `MongoDbPrometheusMapInput` via:
//
//	MongoDbPrometheusMap{ "key": MongoDbPrometheusArgs{...} }
type MongoDbPrometheusMapInput interface {
	pulumi.Input

	ToMongoDbPrometheusMapOutput() MongoDbPrometheusMapOutput
	ToMongoDbPrometheusMapOutputWithContext(context.Context) MongoDbPrometheusMapOutput
}

type MongoDbPrometheusMap map[string]MongoDbPrometheusInput

func (MongoDbPrometheusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbPrometheus)(nil)).Elem()
}

func (i MongoDbPrometheusMap) ToMongoDbPrometheusMapOutput() MongoDbPrometheusMapOutput {
	return i.ToMongoDbPrometheusMapOutputWithContext(context.Background())
}

func (i MongoDbPrometheusMap) ToMongoDbPrometheusMapOutputWithContext(ctx context.Context) MongoDbPrometheusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoDbPrometheusMapOutput)
}

type MongoDbPrometheusOutput struct{ *pulumi.OutputState }

func (MongoDbPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoDbPrometheus)(nil)).Elem()
}

func (o MongoDbPrometheusOutput) ToMongoDbPrometheusOutput() MongoDbPrometheusOutput {
	return o
}

func (o MongoDbPrometheusOutput) ToMongoDbPrometheusOutputWithContext(ctx context.Context) MongoDbPrometheusOutput {
	return o
}

// Cluster ID.
func (o MongoDbPrometheusOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// (Sensitive) Password of the user.
func (o MongoDbPrometheusOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Arbitrary string to change to trigger a password update
func (o MongoDbPrometheusOutput) PasswordReset() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringPtrOutput { return v.PasswordReset }).(pulumi.StringPtrOutput)
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o MongoDbPrometheusOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Name of the srv domain endpoint.
func (o MongoDbPrometheusOutput) SrvDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringOutput { return v.SrvDomain }).(pulumi.StringOutput)
}

// name of the prometheus user.
func (o MongoDbPrometheusOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoDbPrometheus) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type MongoDbPrometheusArrayOutput struct{ *pulumi.OutputState }

func (MongoDbPrometheusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoDbPrometheus)(nil)).Elem()
}

func (o MongoDbPrometheusArrayOutput) ToMongoDbPrometheusArrayOutput() MongoDbPrometheusArrayOutput {
	return o
}

func (o MongoDbPrometheusArrayOutput) ToMongoDbPrometheusArrayOutputWithContext(ctx context.Context) MongoDbPrometheusArrayOutput {
	return o
}

func (o MongoDbPrometheusArrayOutput) Index(i pulumi.IntInput) MongoDbPrometheusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoDbPrometheus {
		return vs[0].([]*MongoDbPrometheus)[vs[1].(int)]
	}).(MongoDbPrometheusOutput)
}

type MongoDbPrometheusMapOutput struct{ *pulumi.OutputState }

func (MongoDbPrometheusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoDbPrometheus)(nil)).Elem()
}

func (o MongoDbPrometheusMapOutput) ToMongoDbPrometheusMapOutput() MongoDbPrometheusMapOutput {
	return o
}

func (o MongoDbPrometheusMapOutput) ToMongoDbPrometheusMapOutputWithContext(ctx context.Context) MongoDbPrometheusMapOutput {
	return o
}

func (o MongoDbPrometheusMapOutput) MapIndex(k pulumi.StringInput) MongoDbPrometheusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoDbPrometheus {
		return vs[0].(map[string]*MongoDbPrometheus)[vs[1].(string)]
	}).(MongoDbPrometheusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbPrometheusInput)(nil)).Elem(), &MongoDbPrometheus{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbPrometheusArrayInput)(nil)).Elem(), MongoDbPrometheusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoDbPrometheusMapInput)(nil)).Elem(), MongoDbPrometheusMap{})
	pulumi.RegisterOutputType(MongoDbPrometheusOutput{})
	pulumi.RegisterOutputType(MongoDbPrometheusArrayOutput{})
	pulumi.RegisterOutputType(MongoDbPrometheusMapOutput{})
}
