// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaTopic struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.IntOutput `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of partitions for this topic
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Number of replication for this topic
	Replication pulumi.IntOutput `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.IntOutput `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.IntOutput    `pulumi:"retentionHours"`
	ServiceName    pulumi.StringOutput `pulumi:"serviceName"`
}

// NewKafkaTopic registers a new resource with the given unique name, arguments, and options.
func NewKafkaTopic(ctx *pulumi.Context,
	name string, args *KafkaTopicArgs, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaTopic
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/kafkaTopic:KafkaTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTopic gets an existing KafkaTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTopicState, opts ...pulumi.ResourceOption) (*KafkaTopic, error) {
	var resource KafkaTopic
	err := ctx.ReadResource("ovh:CloudProjectDatabase/kafkaTopic:KafkaTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTopic resources.
type kafkaTopicState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *int `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name *string `pulumi:"name"`
	// Number of partitions for this topic
	Partitions *int `pulumi:"partitions"`
	// Number of replication for this topic
	Replication *int `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours *int    `pulumi:"retentionHours"`
	ServiceName    *string `pulumi:"serviceName"`
}

type KafkaTopicState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.IntPtrInput
	// Name of the topic
	Name pulumi.StringPtrInput
	// Number of partitions for this topic
	Partitions pulumi.IntPtrInput
	// Number of replication for this topic
	Replication pulumi.IntPtrInput
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.IntPtrInput
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.IntPtrInput
	ServiceName    pulumi.StringPtrInput
}

func (KafkaTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicState)(nil)).Elem()
}

type kafkaTopicArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas *int `pulumi:"minInsyncReplicas"`
	// Name of the topic
	Name *string `pulumi:"name"`
	// Number of partitions for this topic
	Partitions *int `pulumi:"partitions"`
	// Number of replication for this topic
	Replication *int `pulumi:"replication"`
	// Number of bytes for the retention of the data for this topic
	RetentionBytes *int `pulumi:"retentionBytes"`
	// Number of hours for the retention of the data for this topic
	RetentionHours *int   `pulumi:"retentionHours"`
	ServiceName    string `pulumi:"serviceName"`
}

// The set of arguments for constructing a KafkaTopic resource.
type KafkaTopicArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Minimum insync replica accepted for this topic
	MinInsyncReplicas pulumi.IntPtrInput
	// Name of the topic
	Name pulumi.StringPtrInput
	// Number of partitions for this topic
	Partitions pulumi.IntPtrInput
	// Number of replication for this topic
	Replication pulumi.IntPtrInput
	// Number of bytes for the retention of the data for this topic
	RetentionBytes pulumi.IntPtrInput
	// Number of hours for the retention of the data for this topic
	RetentionHours pulumi.IntPtrInput
	ServiceName    pulumi.StringInput
}

func (KafkaTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTopicArgs)(nil)).Elem()
}

type KafkaTopicInput interface {
	pulumi.Input

	ToKafkaTopicOutput() KafkaTopicOutput
	ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput
}

func (*KafkaTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (i *KafkaTopic) ToKafkaTopicOutput() KafkaTopicOutput {
	return i.ToKafkaTopicOutputWithContext(context.Background())
}

func (i *KafkaTopic) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicOutput)
}

// KafkaTopicArrayInput is an input type that accepts KafkaTopicArray and KafkaTopicArrayOutput values.
// You can construct a concrete instance of `KafkaTopicArrayInput` via:
//
//	KafkaTopicArray{ KafkaTopicArgs{...} }
type KafkaTopicArrayInput interface {
	pulumi.Input

	ToKafkaTopicArrayOutput() KafkaTopicArrayOutput
	ToKafkaTopicArrayOutputWithContext(context.Context) KafkaTopicArrayOutput
}

type KafkaTopicArray []KafkaTopicInput

func (KafkaTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return i.ToKafkaTopicArrayOutputWithContext(context.Background())
}

func (i KafkaTopicArray) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicArrayOutput)
}

// KafkaTopicMapInput is an input type that accepts KafkaTopicMap and KafkaTopicMapOutput values.
// You can construct a concrete instance of `KafkaTopicMapInput` via:
//
//	KafkaTopicMap{ "key": KafkaTopicArgs{...} }
type KafkaTopicMapInput interface {
	pulumi.Input

	ToKafkaTopicMapOutput() KafkaTopicMapOutput
	ToKafkaTopicMapOutputWithContext(context.Context) KafkaTopicMapOutput
}

type KafkaTopicMap map[string]KafkaTopicInput

func (KafkaTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (i KafkaTopicMap) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return i.ToKafkaTopicMapOutputWithContext(context.Background())
}

func (i KafkaTopicMap) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTopicMapOutput)
}

type KafkaTopicOutput struct{ *pulumi.OutputState }

func (KafkaTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicOutput) ToKafkaTopicOutput() KafkaTopicOutput {
	return o
}

func (o KafkaTopicOutput) ToKafkaTopicOutputWithContext(ctx context.Context) KafkaTopicOutput {
	return o
}

// Id of the database cluster
func (o KafkaTopicOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Minimum insync replica accepted for this topic
func (o KafkaTopicOutput) MinInsyncReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.MinInsyncReplicas }).(pulumi.IntOutput)
}

// Name of the topic
func (o KafkaTopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of partitions for this topic
func (o KafkaTopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// Number of replication for this topic
func (o KafkaTopicOutput) Replication() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.Replication }).(pulumi.IntOutput)
}

// Number of bytes for the retention of the data for this topic
func (o KafkaTopicOutput) RetentionBytes() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.RetentionBytes }).(pulumi.IntOutput)
}

// Number of hours for the retention of the data for this topic
func (o KafkaTopicOutput) RetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.IntOutput { return v.RetentionHours }).(pulumi.IntOutput)
}

func (o KafkaTopicOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTopic) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

type KafkaTopicArrayOutput struct{ *pulumi.OutputState }

func (KafkaTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutput() KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) ToKafkaTopicArrayOutputWithContext(ctx context.Context) KafkaTopicArrayOutput {
	return o
}

func (o KafkaTopicArrayOutput) Index(i pulumi.IntInput) KafkaTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].([]*KafkaTopic)[vs[1].(int)]
	}).(KafkaTopicOutput)
}

type KafkaTopicMapOutput struct{ *pulumi.OutputState }

func (KafkaTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTopic)(nil)).Elem()
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutput() KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) ToKafkaTopicMapOutputWithContext(ctx context.Context) KafkaTopicMapOutput {
	return o
}

func (o KafkaTopicMapOutput) MapIndex(k pulumi.StringInput) KafkaTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTopic {
		return vs[0].(map[string]*KafkaTopic)[vs[1].(string)]
	}).(KafkaTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicInput)(nil)).Elem(), &KafkaTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicArrayInput)(nil)).Elem(), KafkaTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTopicMapInput)(nil)).Elem(), KafkaTopicMap{})
	pulumi.RegisterOutputType(KafkaTopicOutput{})
	pulumi.RegisterOutputType(KafkaTopicArrayOutput{})
	pulumi.RegisterOutputType(KafkaTopicMapOutput{})
}
