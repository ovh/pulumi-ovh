// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/v2/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type KafkaAcl struct {
	pulumi.CustomResourceState

	// Id of the database cluster
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  pulumi.StringOutput `pulumi:"permission"`
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Topic affected by this acl
	Topic pulumi.StringOutput `pulumi:"topic"`
	// Username affected by this acl
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewKafkaAcl registers a new resource with the given unique name, arguments, and options.
func NewKafkaAcl(ctx *pulumi.Context,
	name string, args *KafkaAclArgs, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Topic == nil {
		return nil, errors.New("invalid value for required argument 'Topic'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaAcl
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/kafkaAcl:KafkaAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaAcl gets an existing KafkaAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaAclState, opts ...pulumi.ResourceOption) (*KafkaAcl, error) {
	var resource KafkaAcl
	err := ctx.ReadResource("ovh:CloudProjectDatabase/kafkaAcl:KafkaAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaAcl resources.
type kafkaAclState struct {
	// Id of the database cluster
	ClusterId *string `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  *string `pulumi:"permission"`
	ServiceName *string `pulumi:"serviceName"`
	// Topic affected by this acl
	Topic *string `pulumi:"topic"`
	// Username affected by this acl
	Username *string `pulumi:"username"`
}

type KafkaAclState struct {
	// Id of the database cluster
	ClusterId pulumi.StringPtrInput
	// Permission to give to this username on this topic
	Permission  pulumi.StringPtrInput
	ServiceName pulumi.StringPtrInput
	// Topic affected by this acl
	Topic pulumi.StringPtrInput
	// Username affected by this acl
	Username pulumi.StringPtrInput
}

func (KafkaAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclState)(nil)).Elem()
}

type kafkaAclArgs struct {
	// Id of the database cluster
	ClusterId string `pulumi:"clusterId"`
	// Permission to give to this username on this topic
	Permission  string `pulumi:"permission"`
	ServiceName string `pulumi:"serviceName"`
	// Topic affected by this acl
	Topic string `pulumi:"topic"`
	// Username affected by this acl
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a KafkaAcl resource.
type KafkaAclArgs struct {
	// Id of the database cluster
	ClusterId pulumi.StringInput
	// Permission to give to this username on this topic
	Permission  pulumi.StringInput
	ServiceName pulumi.StringInput
	// Topic affected by this acl
	Topic pulumi.StringInput
	// Username affected by this acl
	Username pulumi.StringInput
}

func (KafkaAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaAclArgs)(nil)).Elem()
}

type KafkaAclInput interface {
	pulumi.Input

	ToKafkaAclOutput() KafkaAclOutput
	ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput
}

func (*KafkaAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAcl)(nil)).Elem()
}

func (i *KafkaAcl) ToKafkaAclOutput() KafkaAclOutput {
	return i.ToKafkaAclOutputWithContext(context.Background())
}

func (i *KafkaAcl) ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclOutput)
}

// KafkaAclArrayInput is an input type that accepts KafkaAclArray and KafkaAclArrayOutput values.
// You can construct a concrete instance of `KafkaAclArrayInput` via:
//
//	KafkaAclArray{ KafkaAclArgs{...} }
type KafkaAclArrayInput interface {
	pulumi.Input

	ToKafkaAclArrayOutput() KafkaAclArrayOutput
	ToKafkaAclArrayOutputWithContext(context.Context) KafkaAclArrayOutput
}

type KafkaAclArray []KafkaAclInput

func (KafkaAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaAcl)(nil)).Elem()
}

func (i KafkaAclArray) ToKafkaAclArrayOutput() KafkaAclArrayOutput {
	return i.ToKafkaAclArrayOutputWithContext(context.Background())
}

func (i KafkaAclArray) ToKafkaAclArrayOutputWithContext(ctx context.Context) KafkaAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclArrayOutput)
}

// KafkaAclMapInput is an input type that accepts KafkaAclMap and KafkaAclMapOutput values.
// You can construct a concrete instance of `KafkaAclMapInput` via:
//
//	KafkaAclMap{ "key": KafkaAclArgs{...} }
type KafkaAclMapInput interface {
	pulumi.Input

	ToKafkaAclMapOutput() KafkaAclMapOutput
	ToKafkaAclMapOutputWithContext(context.Context) KafkaAclMapOutput
}

type KafkaAclMap map[string]KafkaAclInput

func (KafkaAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaAcl)(nil)).Elem()
}

func (i KafkaAclMap) ToKafkaAclMapOutput() KafkaAclMapOutput {
	return i.ToKafkaAclMapOutputWithContext(context.Background())
}

func (i KafkaAclMap) ToKafkaAclMapOutputWithContext(ctx context.Context) KafkaAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaAclMapOutput)
}

type KafkaAclOutput struct{ *pulumi.OutputState }

func (KafkaAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaAcl)(nil)).Elem()
}

func (o KafkaAclOutput) ToKafkaAclOutput() KafkaAclOutput {
	return o
}

func (o KafkaAclOutput) ToKafkaAclOutputWithContext(ctx context.Context) KafkaAclOutput {
	return o
}

// Id of the database cluster
func (o KafkaAclOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Permission to give to this username on this topic
func (o KafkaAclOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

func (o KafkaAclOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Topic affected by this acl
func (o KafkaAclOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Topic }).(pulumi.StringOutput)
}

// Username affected by this acl
func (o KafkaAclOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaAcl) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type KafkaAclArrayOutput struct{ *pulumi.OutputState }

func (KafkaAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaAcl)(nil)).Elem()
}

func (o KafkaAclArrayOutput) ToKafkaAclArrayOutput() KafkaAclArrayOutput {
	return o
}

func (o KafkaAclArrayOutput) ToKafkaAclArrayOutputWithContext(ctx context.Context) KafkaAclArrayOutput {
	return o
}

func (o KafkaAclArrayOutput) Index(i pulumi.IntInput) KafkaAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaAcl {
		return vs[0].([]*KafkaAcl)[vs[1].(int)]
	}).(KafkaAclOutput)
}

type KafkaAclMapOutput struct{ *pulumi.OutputState }

func (KafkaAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaAcl)(nil)).Elem()
}

func (o KafkaAclMapOutput) ToKafkaAclMapOutput() KafkaAclMapOutput {
	return o
}

func (o KafkaAclMapOutput) ToKafkaAclMapOutputWithContext(ctx context.Context) KafkaAclMapOutput {
	return o
}

func (o KafkaAclMapOutput) MapIndex(k pulumi.StringInput) KafkaAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaAcl {
		return vs[0].(map[string]*KafkaAcl)[vs[1].(string)]
	}).(KafkaAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclInput)(nil)).Elem(), &KafkaAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclArrayInput)(nil)).Elem(), KafkaAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaAclMapInput)(nil)).Elem(), KafkaAclMap{})
	pulumi.RegisterOutputType(KafkaAclOutput{})
	pulumi.RegisterOutputType(KafkaAclArrayOutput{})
	pulumi.RegisterOutputType(KafkaAclMapOutput{})
}
