// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprojectdatabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/ovh/pulumi-ovh/sdk/go/ovh/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// OVHcloud Managed PostgreSQL clusters connection pools can be imported using the `service_name`, `cluster_id` and `id` of the connection pool, separated by "/" E.g.,
//
// bash
//
// ```sh
// $ pulumi import ovh:CloudProjectDatabase/postgresSqlConnectionPool:PostgresSqlConnectionPool my_connection_pool service_name/cluster_id/id
// ```
type PostgresSqlConnectionPool struct {
	pulumi.CustomResourceState

	// Cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Database ID for a database that belongs to the Database cluster given above.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// Connection mode to the connection pool
	// Available modes:
	Mode pulumi.StringOutput `pulumi:"mode"`
	// Name of the connection pool.
	Name pulumi.StringOutput `pulumi:"name"`
	// Port of the connection pool.
	Port pulumi.IntOutput `pulumi:"port"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringOutput `pulumi:"serviceName"`
	// Size of the connection pool.
	Size pulumi.IntOutput `pulumi:"size"`
	// Ssl connection mode for the pool.
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
	// Connection URI to the pool.
	Uri pulumi.StringOutput `pulumi:"uri"`
	// Database user authorized to connect to the pool, if none all the users are allowed.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewPostgresSqlConnectionPool registers a new resource with the given unique name, arguments, and options.
func NewPostgresSqlConnectionPool(ctx *pulumi.Context,
	name string, args *PostgresSqlConnectionPoolArgs, opts ...pulumi.ResourceOption) (*PostgresSqlConnectionPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	if args.ServiceName == nil {
		return nil, errors.New("invalid value for required argument 'ServiceName'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostgresSqlConnectionPool
	err := ctx.RegisterResource("ovh:CloudProjectDatabase/postgresSqlConnectionPool:PostgresSqlConnectionPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostgresSqlConnectionPool gets an existing PostgresSqlConnectionPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostgresSqlConnectionPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostgresSqlConnectionPoolState, opts ...pulumi.ResourceOption) (*PostgresSqlConnectionPool, error) {
	var resource PostgresSqlConnectionPool
	err := ctx.ReadResource("ovh:CloudProjectDatabase/postgresSqlConnectionPool:PostgresSqlConnectionPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostgresSqlConnectionPool resources.
type postgresSqlConnectionPoolState struct {
	// Cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Database ID for a database that belongs to the Database cluster given above.
	DatabaseId *string `pulumi:"databaseId"`
	// Connection mode to the connection pool
	// Available modes:
	Mode *string `pulumi:"mode"`
	// Name of the connection pool.
	Name *string `pulumi:"name"`
	// Port of the connection pool.
	Port *int `pulumi:"port"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName *string `pulumi:"serviceName"`
	// Size of the connection pool.
	Size *int `pulumi:"size"`
	// Ssl connection mode for the pool.
	SslMode *string `pulumi:"sslMode"`
	// Connection URI to the pool.
	Uri *string `pulumi:"uri"`
	// Database user authorized to connect to the pool, if none all the users are allowed.
	UserId *string `pulumi:"userId"`
}

type PostgresSqlConnectionPoolState struct {
	// Cluster ID.
	ClusterId pulumi.StringPtrInput
	// Database ID for a database that belongs to the Database cluster given above.
	DatabaseId pulumi.StringPtrInput
	// Connection mode to the connection pool
	// Available modes:
	Mode pulumi.StringPtrInput
	// Name of the connection pool.
	Name pulumi.StringPtrInput
	// Port of the connection pool.
	Port pulumi.IntPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringPtrInput
	// Size of the connection pool.
	Size pulumi.IntPtrInput
	// Ssl connection mode for the pool.
	SslMode pulumi.StringPtrInput
	// Connection URI to the pool.
	Uri pulumi.StringPtrInput
	// Database user authorized to connect to the pool, if none all the users are allowed.
	UserId pulumi.StringPtrInput
}

func (PostgresSqlConnectionPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresSqlConnectionPoolState)(nil)).Elem()
}

type postgresSqlConnectionPoolArgs struct {
	// Cluster ID.
	ClusterId string `pulumi:"clusterId"`
	// Database ID for a database that belongs to the Database cluster given above.
	DatabaseId string `pulumi:"databaseId"`
	// Connection mode to the connection pool
	// Available modes:
	Mode string `pulumi:"mode"`
	// Name of the connection pool.
	Name *string `pulumi:"name"`
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName string `pulumi:"serviceName"`
	// Size of the connection pool.
	Size int `pulumi:"size"`
	// Database user authorized to connect to the pool, if none all the users are allowed.
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a PostgresSqlConnectionPool resource.
type PostgresSqlConnectionPoolArgs struct {
	// Cluster ID.
	ClusterId pulumi.StringInput
	// Database ID for a database that belongs to the Database cluster given above.
	DatabaseId pulumi.StringInput
	// Connection mode to the connection pool
	// Available modes:
	Mode pulumi.StringInput
	// Name of the connection pool.
	Name pulumi.StringPtrInput
	// The id of the public cloud project. If omitted,
	// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
	ServiceName pulumi.StringInput
	// Size of the connection pool.
	Size pulumi.IntInput
	// Database user authorized to connect to the pool, if none all the users are allowed.
	UserId pulumi.StringPtrInput
}

func (PostgresSqlConnectionPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postgresSqlConnectionPoolArgs)(nil)).Elem()
}

type PostgresSqlConnectionPoolInput interface {
	pulumi.Input

	ToPostgresSqlConnectionPoolOutput() PostgresSqlConnectionPoolOutput
	ToPostgresSqlConnectionPoolOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolOutput
}

func (*PostgresSqlConnectionPool) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresSqlConnectionPool)(nil)).Elem()
}

func (i *PostgresSqlConnectionPool) ToPostgresSqlConnectionPoolOutput() PostgresSqlConnectionPoolOutput {
	return i.ToPostgresSqlConnectionPoolOutputWithContext(context.Background())
}

func (i *PostgresSqlConnectionPool) ToPostgresSqlConnectionPoolOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSqlConnectionPoolOutput)
}

// PostgresSqlConnectionPoolArrayInput is an input type that accepts PostgresSqlConnectionPoolArray and PostgresSqlConnectionPoolArrayOutput values.
// You can construct a concrete instance of `PostgresSqlConnectionPoolArrayInput` via:
//
//	PostgresSqlConnectionPoolArray{ PostgresSqlConnectionPoolArgs{...} }
type PostgresSqlConnectionPoolArrayInput interface {
	pulumi.Input

	ToPostgresSqlConnectionPoolArrayOutput() PostgresSqlConnectionPoolArrayOutput
	ToPostgresSqlConnectionPoolArrayOutputWithContext(context.Context) PostgresSqlConnectionPoolArrayOutput
}

type PostgresSqlConnectionPoolArray []PostgresSqlConnectionPoolInput

func (PostgresSqlConnectionPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresSqlConnectionPool)(nil)).Elem()
}

func (i PostgresSqlConnectionPoolArray) ToPostgresSqlConnectionPoolArrayOutput() PostgresSqlConnectionPoolArrayOutput {
	return i.ToPostgresSqlConnectionPoolArrayOutputWithContext(context.Background())
}

func (i PostgresSqlConnectionPoolArray) ToPostgresSqlConnectionPoolArrayOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSqlConnectionPoolArrayOutput)
}

// PostgresSqlConnectionPoolMapInput is an input type that accepts PostgresSqlConnectionPoolMap and PostgresSqlConnectionPoolMapOutput values.
// You can construct a concrete instance of `PostgresSqlConnectionPoolMapInput` via:
//
//	PostgresSqlConnectionPoolMap{ "key": PostgresSqlConnectionPoolArgs{...} }
type PostgresSqlConnectionPoolMapInput interface {
	pulumi.Input

	ToPostgresSqlConnectionPoolMapOutput() PostgresSqlConnectionPoolMapOutput
	ToPostgresSqlConnectionPoolMapOutputWithContext(context.Context) PostgresSqlConnectionPoolMapOutput
}

type PostgresSqlConnectionPoolMap map[string]PostgresSqlConnectionPoolInput

func (PostgresSqlConnectionPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresSqlConnectionPool)(nil)).Elem()
}

func (i PostgresSqlConnectionPoolMap) ToPostgresSqlConnectionPoolMapOutput() PostgresSqlConnectionPoolMapOutput {
	return i.ToPostgresSqlConnectionPoolMapOutputWithContext(context.Background())
}

func (i PostgresSqlConnectionPoolMap) ToPostgresSqlConnectionPoolMapOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostgresSqlConnectionPoolMapOutput)
}

type PostgresSqlConnectionPoolOutput struct{ *pulumi.OutputState }

func (PostgresSqlConnectionPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostgresSqlConnectionPool)(nil)).Elem()
}

func (o PostgresSqlConnectionPoolOutput) ToPostgresSqlConnectionPoolOutput() PostgresSqlConnectionPoolOutput {
	return o
}

func (o PostgresSqlConnectionPoolOutput) ToPostgresSqlConnectionPoolOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolOutput {
	return o
}

// Cluster ID.
func (o PostgresSqlConnectionPoolOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Database ID for a database that belongs to the Database cluster given above.
func (o PostgresSqlConnectionPoolOutput) DatabaseId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.DatabaseId }).(pulumi.StringOutput)
}

// Connection mode to the connection pool
// Available modes:
func (o PostgresSqlConnectionPoolOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// Name of the connection pool.
func (o PostgresSqlConnectionPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Port of the connection pool.
func (o PostgresSqlConnectionPoolOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The id of the public cloud project. If omitted,
// the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
func (o PostgresSqlConnectionPoolOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.ServiceName }).(pulumi.StringOutput)
}

// Size of the connection pool.
func (o PostgresSqlConnectionPoolOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Ssl connection mode for the pool.
func (o PostgresSqlConnectionPoolOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

// Connection URI to the pool.
func (o PostgresSqlConnectionPoolOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.Uri }).(pulumi.StringOutput)
}

// Database user authorized to connect to the pool, if none all the users are allowed.
func (o PostgresSqlConnectionPoolOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *PostgresSqlConnectionPool) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type PostgresSqlConnectionPoolArrayOutput struct{ *pulumi.OutputState }

func (PostgresSqlConnectionPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostgresSqlConnectionPool)(nil)).Elem()
}

func (o PostgresSqlConnectionPoolArrayOutput) ToPostgresSqlConnectionPoolArrayOutput() PostgresSqlConnectionPoolArrayOutput {
	return o
}

func (o PostgresSqlConnectionPoolArrayOutput) ToPostgresSqlConnectionPoolArrayOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolArrayOutput {
	return o
}

func (o PostgresSqlConnectionPoolArrayOutput) Index(i pulumi.IntInput) PostgresSqlConnectionPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostgresSqlConnectionPool {
		return vs[0].([]*PostgresSqlConnectionPool)[vs[1].(int)]
	}).(PostgresSqlConnectionPoolOutput)
}

type PostgresSqlConnectionPoolMapOutput struct{ *pulumi.OutputState }

func (PostgresSqlConnectionPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostgresSqlConnectionPool)(nil)).Elem()
}

func (o PostgresSqlConnectionPoolMapOutput) ToPostgresSqlConnectionPoolMapOutput() PostgresSqlConnectionPoolMapOutput {
	return o
}

func (o PostgresSqlConnectionPoolMapOutput) ToPostgresSqlConnectionPoolMapOutputWithContext(ctx context.Context) PostgresSqlConnectionPoolMapOutput {
	return o
}

func (o PostgresSqlConnectionPoolMapOutput) MapIndex(k pulumi.StringInput) PostgresSqlConnectionPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostgresSqlConnectionPool {
		return vs[0].(map[string]*PostgresSqlConnectionPool)[vs[1].(string)]
	}).(PostgresSqlConnectionPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSqlConnectionPoolInput)(nil)).Elem(), &PostgresSqlConnectionPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSqlConnectionPoolArrayInput)(nil)).Elem(), PostgresSqlConnectionPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostgresSqlConnectionPoolMapInput)(nil)).Elem(), PostgresSqlConnectionPoolMap{})
	pulumi.RegisterOutputType(PostgresSqlConnectionPoolOutput{})
	pulumi.RegisterOutputType(PostgresSqlConnectionPoolArrayOutput{})
	pulumi.RegisterOutputType(PostgresSqlConnectionPoolMapOutput{})
}
