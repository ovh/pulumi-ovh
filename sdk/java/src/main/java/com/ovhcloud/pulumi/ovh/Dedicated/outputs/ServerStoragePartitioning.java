// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.outputs;

import com.ovhcloud.pulumi.ovh.Dedicated.outputs.ServerStoragePartitioningLayout;
import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerStoragePartitioning {
    /**
     * @return Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
     * 
     */
    private @Nullable Double disks;
    /**
     * @return Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme)
     * 
     */
    private @Nullable List<ServerStoragePartitioningLayout> layouts;
    /**
     * @return Partitioning scheme (if applicable with selected operating system)
     * 
     */
    private @Nullable String schemeName;

    private ServerStoragePartitioning() {}
    /**
     * @return Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
     * 
     */
    public Optional<Double> disks() {
        return Optional.ofNullable(this.disks);
    }
    /**
     * @return Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme)
     * 
     */
    public List<ServerStoragePartitioningLayout> layouts() {
        return this.layouts == null ? List.of() : this.layouts;
    }
    /**
     * @return Partitioning scheme (if applicable with selected operating system)
     * 
     */
    public Optional<String> schemeName() {
        return Optional.ofNullable(this.schemeName);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerStoragePartitioning defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double disks;
        private @Nullable List<ServerStoragePartitioningLayout> layouts;
        private @Nullable String schemeName;
        public Builder() {}
        public Builder(ServerStoragePartitioning defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.disks = defaults.disks;
    	      this.layouts = defaults.layouts;
    	      this.schemeName = defaults.schemeName;
        }

        @CustomType.Setter
        public Builder disks(@Nullable Double disks) {

            this.disks = disks;
            return this;
        }
        @CustomType.Setter
        public Builder layouts(@Nullable List<ServerStoragePartitioningLayout> layouts) {

            this.layouts = layouts;
            return this;
        }
        public Builder layouts(ServerStoragePartitioningLayout... layouts) {
            return layouts(List.of(layouts));
        }
        @CustomType.Setter
        public Builder schemeName(@Nullable String schemeName) {

            this.schemeName = schemeName;
            return this;
        }
        public ServerStoragePartitioning build() {
            final var _resultValue = new ServerStoragePartitioning();
            _resultValue.disks = disks;
            _resultValue.layouts = layouts;
            _resultValue.schemeName = schemeName;
            return _resultValue;
        }
    }
}
