// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.ovhcloud.pulumi.ovh.Domain.inputs.NameCurrentStateDnsConfigurationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NameCurrentStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final NameCurrentStateArgs Empty = new NameCurrentStateArgs();

    /**
     * Domain additional states
     * 
     */
    @Import(name="additionalStates")
    private @Nullable Output<List<String>> additionalStates;

    /**
     * @return Domain additional states
     * 
     */
    public Optional<Output<List<String>>> additionalStates() {
        return Optional.ofNullable(this.additionalStates);
    }

    /**
     * The domain DNS configuration
     * 
     */
    @Import(name="dnsConfiguration")
    private @Nullable Output<NameCurrentStateDnsConfigurationArgs> dnsConfiguration;

    /**
     * @return The domain DNS configuration
     * 
     */
    public Optional<Output<NameCurrentStateDnsConfigurationArgs>> dnsConfiguration() {
        return Optional.ofNullable(this.dnsConfiguration);
    }

    /**
     * Extension of the domain name
     * 
     */
    @Import(name="extension")
    private @Nullable Output<String> extension;

    /**
     * @return Extension of the domain name
     * 
     */
    public Optional<Output<String>> extension() {
        return Optional.ofNullable(this.extension);
    }

    /**
     * Domain main state
     * 
     */
    @Import(name="mainState")
    private @Nullable Output<String> mainState;

    /**
     * @return Domain main state
     * 
     */
    public Optional<Output<String>> mainState() {
        return Optional.ofNullable(this.mainState);
    }

    /**
     * Domain name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Domain name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Domain protection state
     * 
     */
    @Import(name="protectionState")
    private @Nullable Output<String> protectionState;

    /**
     * @return Domain protection state
     * 
     */
    public Optional<Output<String>> protectionState() {
        return Optional.ofNullable(this.protectionState);
    }

    /**
     * Domain suspension state
     * 
     */
    @Import(name="suspensionState")
    private @Nullable Output<String> suspensionState;

    /**
     * @return Domain suspension state
     * 
     */
    public Optional<Output<String>> suspensionState() {
        return Optional.ofNullable(this.suspensionState);
    }

    private NameCurrentStateArgs() {}

    private NameCurrentStateArgs(NameCurrentStateArgs $) {
        this.additionalStates = $.additionalStates;
        this.dnsConfiguration = $.dnsConfiguration;
        this.extension = $.extension;
        this.mainState = $.mainState;
        this.name = $.name;
        this.protectionState = $.protectionState;
        this.suspensionState = $.suspensionState;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NameCurrentStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NameCurrentStateArgs $;

        public Builder() {
            $ = new NameCurrentStateArgs();
        }

        public Builder(NameCurrentStateArgs defaults) {
            $ = new NameCurrentStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param additionalStates Domain additional states
         * 
         * @return builder
         * 
         */
        public Builder additionalStates(@Nullable Output<List<String>> additionalStates) {
            $.additionalStates = additionalStates;
            return this;
        }

        /**
         * @param additionalStates Domain additional states
         * 
         * @return builder
         * 
         */
        public Builder additionalStates(List<String> additionalStates) {
            return additionalStates(Output.of(additionalStates));
        }

        /**
         * @param additionalStates Domain additional states
         * 
         * @return builder
         * 
         */
        public Builder additionalStates(String... additionalStates) {
            return additionalStates(List.of(additionalStates));
        }

        /**
         * @param dnsConfiguration The domain DNS configuration
         * 
         * @return builder
         * 
         */
        public Builder dnsConfiguration(@Nullable Output<NameCurrentStateDnsConfigurationArgs> dnsConfiguration) {
            $.dnsConfiguration = dnsConfiguration;
            return this;
        }

        /**
         * @param dnsConfiguration The domain DNS configuration
         * 
         * @return builder
         * 
         */
        public Builder dnsConfiguration(NameCurrentStateDnsConfigurationArgs dnsConfiguration) {
            return dnsConfiguration(Output.of(dnsConfiguration));
        }

        /**
         * @param extension Extension of the domain name
         * 
         * @return builder
         * 
         */
        public Builder extension(@Nullable Output<String> extension) {
            $.extension = extension;
            return this;
        }

        /**
         * @param extension Extension of the domain name
         * 
         * @return builder
         * 
         */
        public Builder extension(String extension) {
            return extension(Output.of(extension));
        }

        /**
         * @param mainState Domain main state
         * 
         * @return builder
         * 
         */
        public Builder mainState(@Nullable Output<String> mainState) {
            $.mainState = mainState;
            return this;
        }

        /**
         * @param mainState Domain main state
         * 
         * @return builder
         * 
         */
        public Builder mainState(String mainState) {
            return mainState(Output.of(mainState));
        }

        /**
         * @param name Domain name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Domain name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param protectionState Domain protection state
         * 
         * @return builder
         * 
         */
        public Builder protectionState(@Nullable Output<String> protectionState) {
            $.protectionState = protectionState;
            return this;
        }

        /**
         * @param protectionState Domain protection state
         * 
         * @return builder
         * 
         */
        public Builder protectionState(String protectionState) {
            return protectionState(Output.of(protectionState));
        }

        /**
         * @param suspensionState Domain suspension state
         * 
         * @return builder
         * 
         */
        public Builder suspensionState(@Nullable Output<String> suspensionState) {
            $.suspensionState = suspensionState;
            return this;
        }

        /**
         * @param suspensionState Domain suspension state
         * 
         * @return builder
         * 
         */
        public Builder suspensionState(String suspensionState) {
            return suspensionState(Output.of(suspensionState));
        }

        public NameCurrentStateArgs build() {
            return $;
        }
    }

}
