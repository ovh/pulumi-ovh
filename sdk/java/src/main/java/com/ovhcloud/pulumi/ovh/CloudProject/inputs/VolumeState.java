// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.VolumeSubOperationArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeState extends com.pulumi.resources.ResourceArgs {

    public static final VolumeState Empty = new VolumeState();

    /**
     * The action of the operation
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return The action of the operation
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The completed date of the operation
     * 
     */
    @Import(name="completedAt")
    private @Nullable Output<String> completedAt;

    /**
     * @return The completed date of the operation
     * 
     */
    public Optional<Output<String>> completedAt() {
        return Optional.ofNullable(this.completedAt);
    }

    /**
     * The creation date of the operation
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The creation date of the operation
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * A description of the volume
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description of the volume
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Image ID
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return Image ID
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Instance ID
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return Instance ID
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * Name of the volume
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the volume
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Volume status
     * 
     */
    @Import(name="progress")
    private @Nullable Output<Double> progress;

    /**
     * @return Volume status
     * 
     */
    public Optional<Output<Double>> progress() {
        return Optional.ofNullable(this.progress);
    }

    /**
     * Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: &#34;GRA11&#34;. **Changing this value recreates the resource.**
     * 
     */
    @Import(name="regionName")
    private @Nullable Output<String> regionName;

    /**
     * @return Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: &#34;GRA11&#34;. **Changing this value recreates the resource.**
     * 
     */
    public Optional<Output<String>> regionName() {
        return Optional.ofNullable(this.regionName);
    }

    /**
     * List of regions
     * 
     */
    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    /**
     * @return List of regions
     * 
     */
    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    /**
     * Id of the resource
     * 
     */
    @Import(name="resourceId")
    private @Nullable Output<String> resourceId;

    /**
     * @return Id of the resource
     * 
     */
    public Optional<Output<String>> resourceId() {
        return Optional.ofNullable(this.resourceId);
    }

    /**
     * Required. The id of the public cloud project. **Changing this value recreates the resource.**
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Required. The id of the public cloud project. **Changing this value recreates the resource.**
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Size (GB) of the volume
     * 
     */
    @Import(name="size")
    private @Nullable Output<Double> size;

    /**
     * @return Size (GB) of the volume
     * 
     */
    public Optional<Output<Double>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Snapshot ID
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return Snapshot ID
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * Datetime of the operation creation
     * 
     */
    @Import(name="startedAt")
    private @Nullable Output<String> startedAt;

    /**
     * @return Datetime of the operation creation
     * 
     */
    public Optional<Output<String>> startedAt() {
        return Optional.ofNullable(this.startedAt);
    }

    /**
     * Volume status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Volume status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Sub-operations of the operation
     * 
     */
    @Import(name="subOperations")
    private @Nullable Output<List<VolumeSubOperationArgs>> subOperations;

    /**
     * @return Sub-operations of the operation
     * 
     */
    public Optional<Output<List<VolumeSubOperationArgs>>> subOperations() {
        return Optional.ofNullable(this.subOperations);
    }

    /**
     * Type of the volume **Changing this value recreates the resource.**
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the volume **Changing this value recreates the resource.**
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Volume ID
     * 
     */
    @Import(name="volumeId")
    private @Nullable Output<String> volumeId;

    /**
     * @return Volume ID
     * 
     */
    public Optional<Output<String>> volumeId() {
        return Optional.ofNullable(this.volumeId);
    }

    private VolumeState() {}

    private VolumeState(VolumeState $) {
        this.action = $.action;
        this.completedAt = $.completedAt;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.imageId = $.imageId;
        this.instanceId = $.instanceId;
        this.name = $.name;
        this.progress = $.progress;
        this.regionName = $.regionName;
        this.regions = $.regions;
        this.resourceId = $.resourceId;
        this.serviceName = $.serviceName;
        this.size = $.size;
        this.snapshotId = $.snapshotId;
        this.startedAt = $.startedAt;
        this.status = $.status;
        this.subOperations = $.subOperations;
        this.type = $.type;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeState $;

        public Builder() {
            $ = new VolumeState();
        }

        public Builder(VolumeState defaults) {
            $ = new VolumeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action of the operation
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action of the operation
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param completedAt The completed date of the operation
         * 
         * @return builder
         * 
         */
        public Builder completedAt(@Nullable Output<String> completedAt) {
            $.completedAt = completedAt;
            return this;
        }

        /**
         * @param completedAt The completed date of the operation
         * 
         * @return builder
         * 
         */
        public Builder completedAt(String completedAt) {
            return completedAt(Output.of(completedAt));
        }

        /**
         * @param createdAt The creation date of the operation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The creation date of the operation
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description A description of the volume
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description of the volume
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param imageId Image ID
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Image ID
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param instanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId Instance ID
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name Name of the volume
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the volume
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param progress Volume status
         * 
         * @return builder
         * 
         */
        public Builder progress(@Nullable Output<Double> progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progress Volume status
         * 
         * @return builder
         * 
         */
        public Builder progress(Double progress) {
            return progress(Output.of(progress));
        }

        /**
         * @param regionName Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: &#34;GRA11&#34;. **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder regionName(@Nullable Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Required. A valid OVHcloud public cloud region name in which the volume will be available. Ex.: &#34;GRA11&#34;. **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param regions List of regions
         * 
         * @return builder
         * 
         */
        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions List of regions
         * 
         * @return builder
         * 
         */
        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        /**
         * @param regions List of regions
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param resourceId Id of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceId(@Nullable Output<String> resourceId) {
            $.resourceId = resourceId;
            return this;
        }

        /**
         * @param resourceId Id of the resource
         * 
         * @return builder
         * 
         */
        public Builder resourceId(String resourceId) {
            return resourceId(Output.of(resourceId));
        }

        /**
         * @param serviceName Required. The id of the public cloud project. **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Required. The id of the public cloud project. **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param size Size (GB) of the volume
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Double> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size (GB) of the volume
         * 
         * @return builder
         * 
         */
        public Builder size(Double size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotId Snapshot ID
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId Snapshot ID
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param startedAt Datetime of the operation creation
         * 
         * @return builder
         * 
         */
        public Builder startedAt(@Nullable Output<String> startedAt) {
            $.startedAt = startedAt;
            return this;
        }

        /**
         * @param startedAt Datetime of the operation creation
         * 
         * @return builder
         * 
         */
        public Builder startedAt(String startedAt) {
            return startedAt(Output.of(startedAt));
        }

        /**
         * @param status Volume status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Volume status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subOperations Sub-operations of the operation
         * 
         * @return builder
         * 
         */
        public Builder subOperations(@Nullable Output<List<VolumeSubOperationArgs>> subOperations) {
            $.subOperations = subOperations;
            return this;
        }

        /**
         * @param subOperations Sub-operations of the operation
         * 
         * @return builder
         * 
         */
        public Builder subOperations(List<VolumeSubOperationArgs> subOperations) {
            return subOperations(Output.of(subOperations));
        }

        /**
         * @param subOperations Sub-operations of the operation
         * 
         * @return builder
         * 
         */
        public Builder subOperations(VolumeSubOperationArgs... subOperations) {
            return subOperations(List.of(subOperations));
        }

        /**
         * @param type Type of the volume **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the volume **Changing this value recreates the resource.**
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param volumeId Volume ID
         * 
         * @return builder
         * 
         */
        public Builder volumeId(@Nullable Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId Volume ID
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public VolumeState build() {
            return $;
        }
    }

}
