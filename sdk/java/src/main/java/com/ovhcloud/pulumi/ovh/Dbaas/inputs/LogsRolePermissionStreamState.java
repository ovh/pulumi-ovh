// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dbaas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsRolePermissionStreamState extends com.pulumi.resources.ResourceArgs {

    public static final LogsRolePermissionStreamState Empty = new LogsRolePermissionStreamState();

    /**
     * Permission ID
     * 
     */
    @Import(name="permissionId")
    private @Nullable Output<String> permissionId;

    /**
     * @return Permission ID
     * 
     */
    public Optional<Output<String>> permissionId() {
        return Optional.ofNullable(this.permissionId);
    }

    /**
     * Permission type (e.g., READ_ONLY)
     * 
     */
    @Import(name="permissionType")
    private @Nullable Output<String> permissionType;

    /**
     * @return Permission type (e.g., READ_ONLY)
     * 
     */
    public Optional<Output<String>> permissionType() {
        return Optional.ofNullable(this.permissionType);
    }

    /**
     * The DBaaS Logs role id
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<String> roleId;

    /**
     * @return The DBaaS Logs role id
     * 
     */
    public Optional<Output<String>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    /**
     * The service name
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service name
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * The DBaaS Logs Graylog output stream id
     * 
     */
    @Import(name="streamId")
    private @Nullable Output<String> streamId;

    /**
     * @return The DBaaS Logs Graylog output stream id
     * 
     */
    public Optional<Output<String>> streamId() {
        return Optional.ofNullable(this.streamId);
    }

    private LogsRolePermissionStreamState() {}

    private LogsRolePermissionStreamState(LogsRolePermissionStreamState $) {
        this.permissionId = $.permissionId;
        this.permissionType = $.permissionType;
        this.roleId = $.roleId;
        this.serviceName = $.serviceName;
        this.streamId = $.streamId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsRolePermissionStreamState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsRolePermissionStreamState $;

        public Builder() {
            $ = new LogsRolePermissionStreamState();
        }

        public Builder(LogsRolePermissionStreamState defaults) {
            $ = new LogsRolePermissionStreamState(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissionId Permission ID
         * 
         * @return builder
         * 
         */
        public Builder permissionId(@Nullable Output<String> permissionId) {
            $.permissionId = permissionId;
            return this;
        }

        /**
         * @param permissionId Permission ID
         * 
         * @return builder
         * 
         */
        public Builder permissionId(String permissionId) {
            return permissionId(Output.of(permissionId));
        }

        /**
         * @param permissionType Permission type (e.g., READ_ONLY)
         * 
         * @return builder
         * 
         */
        public Builder permissionType(@Nullable Output<String> permissionType) {
            $.permissionType = permissionType;
            return this;
        }

        /**
         * @param permissionType Permission type (e.g., READ_ONLY)
         * 
         * @return builder
         * 
         */
        public Builder permissionType(String permissionType) {
            return permissionType(Output.of(permissionType));
        }

        /**
         * @param roleId The DBaaS Logs role id
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId The DBaaS Logs role id
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param serviceName The service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param streamId The DBaaS Logs Graylog output stream id
         * 
         * @return builder
         * 
         */
        public Builder streamId(@Nullable Output<String> streamId) {
            $.streamId = streamId;
            return this;
        }

        /**
         * @param streamId The DBaaS Logs Graylog output stream id
         * 
         * @return builder
         * 
         */
        public Builder streamId(String streamId) {
            return streamId(Output.of(streamId));
        }

        public LogsRolePermissionStreamState build() {
            return $;
        }
    }

}
