// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.inputs;

import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerReinstallTaskStoragePartitioningLayoutArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerReinstallTaskStoragePartitioningArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerReinstallTaskStoragePartitioningArgs Empty = new ServerReinstallTaskStoragePartitioningArgs();

    /**
     * Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
     * 
     */
    @Import(name="disks")
    private @Nullable Output<Integer> disks;

    /**
     * @return Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
     * 
     */
    public Optional<Output<Integer>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme). Accept multiple values (multiple partitions):
     * 
     */
    @Import(name="layouts")
    private @Nullable Output<List<ServerReinstallTaskStoragePartitioningLayoutArgs>> layouts;

    /**
     * @return Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme). Accept multiple values (multiple partitions):
     * 
     */
    public Optional<Output<List<ServerReinstallTaskStoragePartitioningLayoutArgs>>> layouts() {
        return Optional.ofNullable(this.layouts);
    }

    /**
     * Partitioning scheme (if applicable with selected operating system)
     * 
     */
    @Import(name="schemeName")
    private @Nullable Output<String> schemeName;

    /**
     * @return Partitioning scheme (if applicable with selected operating system)
     * 
     */
    public Optional<Output<String>> schemeName() {
        return Optional.ofNullable(this.schemeName);
    }

    private ServerReinstallTaskStoragePartitioningArgs() {}

    private ServerReinstallTaskStoragePartitioningArgs(ServerReinstallTaskStoragePartitioningArgs $) {
        this.disks = $.disks;
        this.layouts = $.layouts;
        this.schemeName = $.schemeName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerReinstallTaskStoragePartitioningArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerReinstallTaskStoragePartitioningArgs $;

        public Builder() {
            $ = new ServerReinstallTaskStoragePartitioningArgs();
        }

        public Builder(ServerReinstallTaskStoragePartitioningArgs defaults) {
            $ = new ServerReinstallTaskStoragePartitioningArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param disks Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<Integer> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks Total number of disks in the disk group involved in the partitioning configuration (all disks of the disk group by default)
         * 
         * @return builder
         * 
         */
        public Builder disks(Integer disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param layouts Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme). Accept multiple values (multiple partitions):
         * 
         * @return builder
         * 
         */
        public Builder layouts(@Nullable Output<List<ServerReinstallTaskStoragePartitioningLayoutArgs>> layouts) {
            $.layouts = layouts;
            return this;
        }

        /**
         * @param layouts Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme). Accept multiple values (multiple partitions):
         * 
         * @return builder
         * 
         */
        public Builder layouts(List<ServerReinstallTaskStoragePartitioningLayoutArgs> layouts) {
            return layouts(Output.of(layouts));
        }

        /**
         * @param layouts Custom partitioning layout (default is the default layout of the operating system&#39;s default partitioning scheme). Accept multiple values (multiple partitions):
         * 
         * @return builder
         * 
         */
        public Builder layouts(ServerReinstallTaskStoragePartitioningLayoutArgs... layouts) {
            return layouts(List.of(layouts));
        }

        /**
         * @param schemeName Partitioning scheme (if applicable with selected operating system)
         * 
         * @return builder
         * 
         */
        public Builder schemeName(@Nullable Output<String> schemeName) {
            $.schemeName = schemeName;
            return this;
        }

        /**
         * @param schemeName Partitioning scheme (if applicable with selected operating system)
         * 
         * @return builder
         * 
         */
        public Builder schemeName(String schemeName) {
            return schemeName(Output.of(schemeName));
        }

        public ServerReinstallTaskStoragePartitioningArgs build() {
            return $;
        }
    }

}
