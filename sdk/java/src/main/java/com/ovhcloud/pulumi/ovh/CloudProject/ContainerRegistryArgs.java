// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryArgs Empty = new ContainerRegistryArgs();

    /**
     * Registry name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Registry name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Plan ID of the registry
     * 
     */
    @Import(name="planId")
    private @Nullable Output<String> planId;

    /**
     * @return Plan ID of the registry
     * 
     */
    public Optional<Output<String>> planId() {
        return Optional.ofNullable(this.planId);
    }

    /**
     * Region of the registry
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region of the registry
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private ContainerRegistryArgs() {}

    private ContainerRegistryArgs(ContainerRegistryArgs $) {
        this.name = $.name;
        this.planId = $.planId;
        this.region = $.region;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryArgs $;

        public Builder() {
            $ = new ContainerRegistryArgs();
        }

        public Builder(ContainerRegistryArgs defaults) {
            $ = new ContainerRegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Registry name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Registry name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param planId Plan ID of the registry
         * 
         * @return builder
         * 
         */
        public Builder planId(@Nullable Output<String> planId) {
            $.planId = planId;
            return this;
        }

        /**
         * @param planId Plan ID of the registry
         * 
         * @return builder
         * 
         */
        public Builder planId(String planId) {
            return planId(Output.of(planId));
        }

        /**
         * @param region Region of the registry
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the registry
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public ContainerRegistryArgs build() {
            if ($.region == null) {
                throw new MissingRequiredPropertyException("ContainerRegistryArgs", "region");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("ContainerRegistryArgs", "serviceName");
            }
            return $;
        }
    }

}
