// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerListenerPoolArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerListenerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerListenerArgs Empty = new LoadBalancerListenerArgs();

    /**
     * The allowed CIDRs
     * 
     */
    @Import(name="allowedCidrs")
    private @Nullable Output<List<String>> allowedCidrs;

    /**
     * @return The allowed CIDRs
     * 
     */
    public Optional<Output<List<String>>> allowedCidrs() {
        return Optional.ofNullable(this.allowedCidrs);
    }

    /**
     * The description of the listener
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the listener
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Name of the listener
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the listener
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Listener pool
     * 
     */
    @Import(name="pool")
    private @Nullable Output<LoadBalancerListenerPoolArgs> pool;

    /**
     * @return Listener pool
     * 
     */
    public Optional<Output<LoadBalancerListenerPoolArgs>> pool() {
        return Optional.ofNullable(this.pool);
    }

    /**
     * Listener port
     * 
     */
    @Import(name="port", required=true)
    private Output<Double> port;

    /**
     * @return Listener port
     * 
     */
    public Output<Double> port() {
        return this.port;
    }

    /**
     * Protocol for the listener
     * 
     */
    @Import(name="protocol", required=true)
    private Output<String> protocol;

    /**
     * @return Protocol for the listener
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }

    /**
     * Secret ID to get certificate for SSL listener creation
     * 
     */
    @Import(name="secretId")
    private @Nullable Output<String> secretId;

    /**
     * @return Secret ID to get certificate for SSL listener creation
     * 
     */
    public Optional<Output<String>> secretId() {
        return Optional.ofNullable(this.secretId);
    }

    /**
     * Timeout client data of the listener
     * 
     */
    @Import(name="timeoutClientData")
    private @Nullable Output<Double> timeoutClientData;

    /**
     * @return Timeout client data of the listener
     * 
     */
    public Optional<Output<Double>> timeoutClientData() {
        return Optional.ofNullable(this.timeoutClientData);
    }

    /**
     * Timeout member data of the listener
     * 
     */
    @Import(name="timeoutMemberData")
    private @Nullable Output<Double> timeoutMemberData;

    /**
     * @return Timeout member data of the listener
     * 
     */
    public Optional<Output<Double>> timeoutMemberData() {
        return Optional.ofNullable(this.timeoutMemberData);
    }

    /**
     * TLS versions of the listener
     * 
     */
    @Import(name="tlsVersions")
    private @Nullable Output<List<String>> tlsVersions;

    /**
     * @return TLS versions of the listener
     * 
     */
    public Optional<Output<List<String>>> tlsVersions() {
        return Optional.ofNullable(this.tlsVersions);
    }

    private LoadBalancerListenerArgs() {}

    private LoadBalancerListenerArgs(LoadBalancerListenerArgs $) {
        this.allowedCidrs = $.allowedCidrs;
        this.description = $.description;
        this.name = $.name;
        this.pool = $.pool;
        this.port = $.port;
        this.protocol = $.protocol;
        this.secretId = $.secretId;
        this.timeoutClientData = $.timeoutClientData;
        this.timeoutMemberData = $.timeoutMemberData;
        this.tlsVersions = $.tlsVersions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerListenerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerListenerArgs $;

        public Builder() {
            $ = new LoadBalancerListenerArgs();
        }

        public Builder(LoadBalancerListenerArgs defaults) {
            $ = new LoadBalancerListenerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowedCidrs The allowed CIDRs
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(@Nullable Output<List<String>> allowedCidrs) {
            $.allowedCidrs = allowedCidrs;
            return this;
        }

        /**
         * @param allowedCidrs The allowed CIDRs
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(List<String> allowedCidrs) {
            return allowedCidrs(Output.of(allowedCidrs));
        }

        /**
         * @param allowedCidrs The allowed CIDRs
         * 
         * @return builder
         * 
         */
        public Builder allowedCidrs(String... allowedCidrs) {
            return allowedCidrs(List.of(allowedCidrs));
        }

        /**
         * @param description The description of the listener
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the listener
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param name Name of the listener
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the listener
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pool Listener pool
         * 
         * @return builder
         * 
         */
        public Builder pool(@Nullable Output<LoadBalancerListenerPoolArgs> pool) {
            $.pool = pool;
            return this;
        }

        /**
         * @param pool Listener pool
         * 
         * @return builder
         * 
         */
        public Builder pool(LoadBalancerListenerPoolArgs pool) {
            return pool(Output.of(pool));
        }

        /**
         * @param port Listener port
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port Listener port
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol Protocol for the listener
         * 
         * @return builder
         * 
         */
        public Builder protocol(Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Protocol for the listener
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param secretId Secret ID to get certificate for SSL listener creation
         * 
         * @return builder
         * 
         */
        public Builder secretId(@Nullable Output<String> secretId) {
            $.secretId = secretId;
            return this;
        }

        /**
         * @param secretId Secret ID to get certificate for SSL listener creation
         * 
         * @return builder
         * 
         */
        public Builder secretId(String secretId) {
            return secretId(Output.of(secretId));
        }

        /**
         * @param timeoutClientData Timeout client data of the listener
         * 
         * @return builder
         * 
         */
        public Builder timeoutClientData(@Nullable Output<Double> timeoutClientData) {
            $.timeoutClientData = timeoutClientData;
            return this;
        }

        /**
         * @param timeoutClientData Timeout client data of the listener
         * 
         * @return builder
         * 
         */
        public Builder timeoutClientData(Double timeoutClientData) {
            return timeoutClientData(Output.of(timeoutClientData));
        }

        /**
         * @param timeoutMemberData Timeout member data of the listener
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberData(@Nullable Output<Double> timeoutMemberData) {
            $.timeoutMemberData = timeoutMemberData;
            return this;
        }

        /**
         * @param timeoutMemberData Timeout member data of the listener
         * 
         * @return builder
         * 
         */
        public Builder timeoutMemberData(Double timeoutMemberData) {
            return timeoutMemberData(Output.of(timeoutMemberData));
        }

        /**
         * @param tlsVersions TLS versions of the listener
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(@Nullable Output<List<String>> tlsVersions) {
            $.tlsVersions = tlsVersions;
            return this;
        }

        /**
         * @param tlsVersions TLS versions of the listener
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(List<String> tlsVersions) {
            return tlsVersions(Output.of(tlsVersions));
        }

        /**
         * @param tlsVersions TLS versions of the listener
         * 
         * @return builder
         * 
         */
        public Builder tlsVersions(String... tlsVersions) {
            return tlsVersions(List.of(tlsVersions));
        }

        public LoadBalancerListenerArgs build() {
            if ($.port == null) {
                throw new MissingRequiredPropertyException("LoadBalancerListenerArgs", "port");
            }
            if ($.protocol == null) {
                throw new MissingRequiredPropertyException("LoadBalancerListenerArgs", "protocol");
            }
            return $;
        }
    }

}
