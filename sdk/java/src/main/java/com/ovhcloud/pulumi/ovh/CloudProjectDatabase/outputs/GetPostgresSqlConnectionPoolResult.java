// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProjectDatabase.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetPostgresSqlConnectionPoolResult {
    /**
     * @return See Argument Reference above
     * 
     */
    private String clusterId;
    /**
     * @return Database ID for a database that belongs to the Database cluster given above.
     * 
     */
    private String databaseId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Connection mode to the connection pool Available modes:
     * 
     */
    private String mode;
    /**
     * @return See Argument Reference above
     * 
     */
    private String name;
    /**
     * @return Port of the connection pool.
     * 
     */
    private Integer port;
    /**
     * @return See Argument Reference above
     * 
     */
    private String serviceName;
    /**
     * @return Size of the connection pool.
     * 
     */
    private Integer size;
    /**
     * @return Ssl connection mode for the pool.
     * 
     */
    private String sslMode;
    /**
     * @return Connection URI to the pool.
     * 
     */
    private String uri;
    /**
     * @return Database user authorized to connect to the pool, if none all the users are allowed.
     * 
     */
    private String userId;

    private GetPostgresSqlConnectionPoolResult() {}
    /**
     * @return See Argument Reference above
     * 
     */
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return Database ID for a database that belongs to the Database cluster given above.
     * 
     */
    public String databaseId() {
        return this.databaseId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Connection mode to the connection pool Available modes:
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return See Argument Reference above
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Port of the connection pool.
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return See Argument Reference above
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Size of the connection pool.
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return Ssl connection mode for the pool.
     * 
     */
    public String sslMode() {
        return this.sslMode;
    }
    /**
     * @return Connection URI to the pool.
     * 
     */
    public String uri() {
        return this.uri;
    }
    /**
     * @return Database user authorized to connect to the pool, if none all the users are allowed.
     * 
     */
    public String userId() {
        return this.userId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPostgresSqlConnectionPoolResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String clusterId;
        private String databaseId;
        private String id;
        private String mode;
        private String name;
        private Integer port;
        private String serviceName;
        private Integer size;
        private String sslMode;
        private String uri;
        private String userId;
        public Builder() {}
        public Builder(GetPostgresSqlConnectionPoolResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterId = defaults.clusterId;
    	      this.databaseId = defaults.databaseId;
    	      this.id = defaults.id;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.port = defaults.port;
    	      this.serviceName = defaults.serviceName;
    	      this.size = defaults.size;
    	      this.sslMode = defaults.sslMode;
    	      this.uri = defaults.uri;
    	      this.userId = defaults.userId;
        }

        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            if (clusterId == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "clusterId");
            }
            this.clusterId = clusterId;
            return this;
        }
        @CustomType.Setter
        public Builder databaseId(String databaseId) {
            if (databaseId == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "databaseId");
            }
            this.databaseId = databaseId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder sslMode(String sslMode) {
            if (sslMode == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "sslMode");
            }
            this.sslMode = sslMode;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "uri");
            }
            this.uri = uri;
            return this;
        }
        @CustomType.Setter
        public Builder userId(String userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetPostgresSqlConnectionPoolResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        public GetPostgresSqlConnectionPoolResult build() {
            final var _resultValue = new GetPostgresSqlConnectionPoolResult();
            _resultValue.clusterId = clusterId;
            _resultValue.databaseId = databaseId;
            _resultValue.id = id;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.port = port;
            _resultValue.serviceName = serviceName;
            _resultValue.size = size;
            _resultValue.sslMode = sslMode;
            _resultValue.uri = uri;
            _resultValue.userId = userId;
            return _resultValue;
        }
    }
}
