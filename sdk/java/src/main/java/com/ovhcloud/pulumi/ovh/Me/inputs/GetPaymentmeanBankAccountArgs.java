// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Me.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetPaymentmeanBankAccountArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetPaymentmeanBankAccountArgs Empty = new GetPaymentmeanBankAccountArgs();

    /**
     * a regexp used to filter bank accounts on their `description` attributes.
     * 
     */
    @Import(name="descriptionRegexp")
    private @Nullable Output<String> descriptionRegexp;

    /**
     * @return a regexp used to filter bank accounts on their `description` attributes.
     * 
     */
    public Optional<Output<String>> descriptionRegexp() {
        return Optional.ofNullable(this.descriptionRegexp);
    }

    /**
     * Filter bank accounts on their `state` attribute. Can be &#34;blockedForIncidents&#34;, &#34;valid&#34;, &#34;pendingValidation&#34;
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Filter bank accounts on their `state` attribute. Can be &#34;blockedForIncidents&#34;, &#34;valid&#34;, &#34;pendingValidation&#34;
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Retrieve bank account marked as default payment mean.
     * 
     */
    @Import(name="useDefault")
    private @Nullable Output<Boolean> useDefault;

    /**
     * @return Retrieve bank account marked as default payment mean.
     * 
     */
    public Optional<Output<Boolean>> useDefault() {
        return Optional.ofNullable(this.useDefault);
    }

    /**
     * Retrieve oldest bank account. project.
     * 
     */
    @Import(name="useOldest")
    private @Nullable Output<Boolean> useOldest;

    /**
     * @return Retrieve oldest bank account. project.
     * 
     */
    public Optional<Output<Boolean>> useOldest() {
        return Optional.ofNullable(this.useOldest);
    }

    private GetPaymentmeanBankAccountArgs() {}

    private GetPaymentmeanBankAccountArgs(GetPaymentmeanBankAccountArgs $) {
        this.descriptionRegexp = $.descriptionRegexp;
        this.state = $.state;
        this.useDefault = $.useDefault;
        this.useOldest = $.useOldest;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetPaymentmeanBankAccountArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetPaymentmeanBankAccountArgs $;

        public Builder() {
            $ = new GetPaymentmeanBankAccountArgs();
        }

        public Builder(GetPaymentmeanBankAccountArgs defaults) {
            $ = new GetPaymentmeanBankAccountArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param descriptionRegexp a regexp used to filter bank accounts on their `description` attributes.
         * 
         * @return builder
         * 
         */
        public Builder descriptionRegexp(@Nullable Output<String> descriptionRegexp) {
            $.descriptionRegexp = descriptionRegexp;
            return this;
        }

        /**
         * @param descriptionRegexp a regexp used to filter bank accounts on their `description` attributes.
         * 
         * @return builder
         * 
         */
        public Builder descriptionRegexp(String descriptionRegexp) {
            return descriptionRegexp(Output.of(descriptionRegexp));
        }

        /**
         * @param state Filter bank accounts on their `state` attribute. Can be &#34;blockedForIncidents&#34;, &#34;valid&#34;, &#34;pendingValidation&#34;
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Filter bank accounts on their `state` attribute. Can be &#34;blockedForIncidents&#34;, &#34;valid&#34;, &#34;pendingValidation&#34;
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param useDefault Retrieve bank account marked as default payment mean.
         * 
         * @return builder
         * 
         */
        public Builder useDefault(@Nullable Output<Boolean> useDefault) {
            $.useDefault = useDefault;
            return this;
        }

        /**
         * @param useDefault Retrieve bank account marked as default payment mean.
         * 
         * @return builder
         * 
         */
        public Builder useDefault(Boolean useDefault) {
            return useDefault(Output.of(useDefault));
        }

        /**
         * @param useOldest Retrieve oldest bank account. project.
         * 
         * @return builder
         * 
         */
        public Builder useOldest(@Nullable Output<Boolean> useOldest) {
            $.useOldest = useOldest;
            return this;
        }

        /**
         * @param useOldest Retrieve oldest bank account. project.
         * 
         * @return builder
         * 
         */
        public Builder useOldest(Boolean useOldest) {
            return useOldest(Output.of(useOldest));
        }

        public GetPaymentmeanBankAccountArgs build() {
            return $;
        }
    }

}
