// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLocationResult {
    /**
     * @return List of availability zones for the region
     * 
     */
    private List<String> availabilityZones;
    /**
     * @return Cardinal direction where the region is located
     * 
     */
    private String cardinalPoint;
    /**
     * @return ISO code of the city
     * 
     */
    private String cityCode;
    /**
     * @return Geographical latitude of the city
     * 
     */
    private Double cityLatitude;
    /**
     * @return Geographical longitude of the city
     * 
     */
    private Double cityLongitude;
    /**
     * @return Full name of the city
     * 
     */
    private String cityName;
    /**
     * @return Region&#39;s short code
     * 
     */
    private String code;
    /**
     * @return ISO code of the country
     * 
     */
    private String countryCode;
    /**
     * @return Full name of the country
     * 
     */
    private String countryName;
    /**
     * @return Short code representing the geographical area
     * 
     */
    private String geographyCode;
    /**
     * @return Name of the geographical area
     * 
     */
    private String geographyName;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Location of the region
     * 
     */
    private String location;
    /**
     * @return Name
     * 
     */
    private String name;
    /**
     * @return Year the region was opened
     * 
     */
    private Double openingYear;
    /**
     * @return Specific typology of the region
     * 
     */
    private String specificType;
    /**
     * @return General typology of the region
     * 
     */
    private String type;

    private GetLocationResult() {}
    /**
     * @return List of availability zones for the region
     * 
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }
    /**
     * @return Cardinal direction where the region is located
     * 
     */
    public String cardinalPoint() {
        return this.cardinalPoint;
    }
    /**
     * @return ISO code of the city
     * 
     */
    public String cityCode() {
        return this.cityCode;
    }
    /**
     * @return Geographical latitude of the city
     * 
     */
    public Double cityLatitude() {
        return this.cityLatitude;
    }
    /**
     * @return Geographical longitude of the city
     * 
     */
    public Double cityLongitude() {
        return this.cityLongitude;
    }
    /**
     * @return Full name of the city
     * 
     */
    public String cityName() {
        return this.cityName;
    }
    /**
     * @return Region&#39;s short code
     * 
     */
    public String code() {
        return this.code;
    }
    /**
     * @return ISO code of the country
     * 
     */
    public String countryCode() {
        return this.countryCode;
    }
    /**
     * @return Full name of the country
     * 
     */
    public String countryName() {
        return this.countryName;
    }
    /**
     * @return Short code representing the geographical area
     * 
     */
    public String geographyCode() {
        return this.geographyCode;
    }
    /**
     * @return Name of the geographical area
     * 
     */
    public String geographyName() {
        return this.geographyName;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Location of the region
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Year the region was opened
     * 
     */
    public Double openingYear() {
        return this.openingYear;
    }
    /**
     * @return Specific typology of the region
     * 
     */
    public String specificType() {
        return this.specificType;
    }
    /**
     * @return General typology of the region
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> availabilityZones;
        private String cardinalPoint;
        private String cityCode;
        private Double cityLatitude;
        private Double cityLongitude;
        private String cityName;
        private String code;
        private String countryCode;
        private String countryName;
        private String geographyCode;
        private String geographyName;
        private String id;
        private String location;
        private String name;
        private Double openingYear;
        private String specificType;
        private String type;
        public Builder() {}
        public Builder(GetLocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.availabilityZones = defaults.availabilityZones;
    	      this.cardinalPoint = defaults.cardinalPoint;
    	      this.cityCode = defaults.cityCode;
    	      this.cityLatitude = defaults.cityLatitude;
    	      this.cityLongitude = defaults.cityLongitude;
    	      this.cityName = defaults.cityName;
    	      this.code = defaults.code;
    	      this.countryCode = defaults.countryCode;
    	      this.countryName = defaults.countryName;
    	      this.geographyCode = defaults.geographyCode;
    	      this.geographyName = defaults.geographyName;
    	      this.id = defaults.id;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.openingYear = defaults.openingYear;
    	      this.specificType = defaults.specificType;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder availabilityZones(List<String> availabilityZones) {
            if (availabilityZones == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "availabilityZones");
            }
            this.availabilityZones = availabilityZones;
            return this;
        }
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }
        @CustomType.Setter
        public Builder cardinalPoint(String cardinalPoint) {
            if (cardinalPoint == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "cardinalPoint");
            }
            this.cardinalPoint = cardinalPoint;
            return this;
        }
        @CustomType.Setter
        public Builder cityCode(String cityCode) {
            if (cityCode == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "cityCode");
            }
            this.cityCode = cityCode;
            return this;
        }
        @CustomType.Setter
        public Builder cityLatitude(Double cityLatitude) {
            if (cityLatitude == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "cityLatitude");
            }
            this.cityLatitude = cityLatitude;
            return this;
        }
        @CustomType.Setter
        public Builder cityLongitude(Double cityLongitude) {
            if (cityLongitude == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "cityLongitude");
            }
            this.cityLongitude = cityLongitude;
            return this;
        }
        @CustomType.Setter
        public Builder cityName(String cityName) {
            if (cityName == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "cityName");
            }
            this.cityName = cityName;
            return this;
        }
        @CustomType.Setter
        public Builder code(String code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder countryCode(String countryCode) {
            if (countryCode == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "countryCode");
            }
            this.countryCode = countryCode;
            return this;
        }
        @CustomType.Setter
        public Builder countryName(String countryName) {
            if (countryName == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "countryName");
            }
            this.countryName = countryName;
            return this;
        }
        @CustomType.Setter
        public Builder geographyCode(String geographyCode) {
            if (geographyCode == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "geographyCode");
            }
            this.geographyCode = geographyCode;
            return this;
        }
        @CustomType.Setter
        public Builder geographyName(String geographyName) {
            if (geographyName == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "geographyName");
            }
            this.geographyName = geographyName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder openingYear(Double openingYear) {
            if (openingYear == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "openingYear");
            }
            this.openingYear = openingYear;
            return this;
        }
        @CustomType.Setter
        public Builder specificType(String specificType) {
            if (specificType == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "specificType");
            }
            this.specificType = specificType;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetLocationResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetLocationResult build() {
            final var _resultValue = new GetLocationResult();
            _resultValue.availabilityZones = availabilityZones;
            _resultValue.cardinalPoint = cardinalPoint;
            _resultValue.cityCode = cityCode;
            _resultValue.cityLatitude = cityLatitude;
            _resultValue.cityLongitude = cityLongitude;
            _resultValue.cityName = cityName;
            _resultValue.code = code;
            _resultValue.countryCode = countryCode;
            _resultValue.countryName = countryName;
            _resultValue.geographyCode = geographyCode;
            _resultValue.geographyName = geographyName;
            _resultValue.id = id;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.openingYear = openingYear;
            _resultValue.specificType = specificType;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
