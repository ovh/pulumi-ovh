// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GatewayArgs extends com.pulumi.resources.ResourceArgs {

    public static final GatewayArgs Empty = new GatewayArgs();

    /**
     * Model of the gateway.
     * 
     */
    @Import(name="model", required=true)
    private Output<String> model;

    /**
     * @return Model of the gateway.
     * 
     */
    public Output<String> model() {
        return this.model;
    }

    /**
     * Name of the gateway.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the gateway.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * ID of the private network.
     * 
     */
    @Import(name="networkId", required=true)
    private Output<String> networkId;

    /**
     * @return ID of the private network.
     * 
     */
    public Output<String> networkId() {
        return this.networkId;
    }

    /**
     * Region of the gateway.
     * 
     */
    @Import(name="region", required=true)
    private Output<String> region;

    /**
     * @return Region of the gateway.
     * 
     */
    public Output<String> region() {
        return this.region;
    }

    /**
     * ID of the private network.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return ID of the private network.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * ID of the subnet.
     * 
     */
    @Import(name="subnetId", required=true)
    private Output<String> subnetId;

    /**
     * @return ID of the subnet.
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }

    private GatewayArgs() {}

    private GatewayArgs(GatewayArgs $) {
        this.model = $.model;
        this.name = $.name;
        this.networkId = $.networkId;
        this.region = $.region;
        this.serviceName = $.serviceName;
        this.subnetId = $.subnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GatewayArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GatewayArgs $;

        public Builder() {
            $ = new GatewayArgs();
        }

        public Builder(GatewayArgs defaults) {
            $ = new GatewayArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param model Model of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder model(Output<String> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Model of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder model(String model) {
            return model(Output.of(model));
        }

        /**
         * @param name Name of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkId ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder networkId(Output<String> networkId) {
            $.networkId = networkId;
            return this;
        }

        /**
         * @param networkId ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder networkId(String networkId) {
            return networkId(Output.of(networkId));
        }

        /**
         * @param region Region of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the gateway.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName ID of the private network.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param subnetId ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId ID of the subnet.
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public GatewayArgs build() {
            if ($.model == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "model");
            }
            if ($.networkId == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "networkId");
            }
            if ($.region == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "region");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "serviceName");
            }
            if ($.subnetId == null) {
                throw new MissingRequiredPropertyException("GatewayArgs", "subnetId");
            }
            return $;
        }
    }

}
