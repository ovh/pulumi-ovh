// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NameCurrentStateDnsConfigurationNameServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final NameCurrentStateDnsConfigurationNameServerArgs Empty = new NameCurrentStateDnsConfigurationNameServerArgs();

    /**
     * The IPv4 associated to the name server
     * 
     */
    @Import(name="ipv4")
    private @Nullable Output<String> ipv4;

    /**
     * @return The IPv4 associated to the name server
     * 
     */
    public Optional<Output<String>> ipv4() {
        return Optional.ofNullable(this.ipv4);
    }

    /**
     * The IPv6 associated to the name server
     * 
     */
    @Import(name="ipv6")
    private @Nullable Output<String> ipv6;

    /**
     * @return The IPv6 associated to the name server
     * 
     */
    public Optional<Output<String>> ipv6() {
        return Optional.ofNullable(this.ipv6);
    }

    /**
     * The host name
     * 
     */
    @Import(name="nameServer")
    private @Nullable Output<String> nameServer;

    /**
     * @return The host name
     * 
     */
    public Optional<Output<String>> nameServer() {
        return Optional.ofNullable(this.nameServer);
    }

    /**
     * The type of name server
     * 
     */
    @Import(name="nameServerType")
    private @Nullable Output<String> nameServerType;

    /**
     * @return The type of name server
     * 
     */
    public Optional<Output<String>> nameServerType() {
        return Optional.ofNullable(this.nameServerType);
    }

    private NameCurrentStateDnsConfigurationNameServerArgs() {}

    private NameCurrentStateDnsConfigurationNameServerArgs(NameCurrentStateDnsConfigurationNameServerArgs $) {
        this.ipv4 = $.ipv4;
        this.ipv6 = $.ipv6;
        this.nameServer = $.nameServer;
        this.nameServerType = $.nameServerType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NameCurrentStateDnsConfigurationNameServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NameCurrentStateDnsConfigurationNameServerArgs $;

        public Builder() {
            $ = new NameCurrentStateDnsConfigurationNameServerArgs();
        }

        public Builder(NameCurrentStateDnsConfigurationNameServerArgs defaults) {
            $ = new NameCurrentStateDnsConfigurationNameServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ipv4 The IPv4 associated to the name server
         * 
         * @return builder
         * 
         */
        public Builder ipv4(@Nullable Output<String> ipv4) {
            $.ipv4 = ipv4;
            return this;
        }

        /**
         * @param ipv4 The IPv4 associated to the name server
         * 
         * @return builder
         * 
         */
        public Builder ipv4(String ipv4) {
            return ipv4(Output.of(ipv4));
        }

        /**
         * @param ipv6 The IPv6 associated to the name server
         * 
         * @return builder
         * 
         */
        public Builder ipv6(@Nullable Output<String> ipv6) {
            $.ipv6 = ipv6;
            return this;
        }

        /**
         * @param ipv6 The IPv6 associated to the name server
         * 
         * @return builder
         * 
         */
        public Builder ipv6(String ipv6) {
            return ipv6(Output.of(ipv6));
        }

        /**
         * @param nameServer The host name
         * 
         * @return builder
         * 
         */
        public Builder nameServer(@Nullable Output<String> nameServer) {
            $.nameServer = nameServer;
            return this;
        }

        /**
         * @param nameServer The host name
         * 
         * @return builder
         * 
         */
        public Builder nameServer(String nameServer) {
            return nameServer(Output.of(nameServer));
        }

        /**
         * @param nameServerType The type of name server
         * 
         * @return builder
         * 
         */
        public Builder nameServerType(@Nullable Output<String> nameServerType) {
            $.nameServerType = nameServerType;
            return this;
        }

        /**
         * @param nameServerType The type of name server
         * 
         * @return builder
         * 
         */
        public Builder nameServerType(String nameServerType) {
            return nameServerType(Output.of(nameServerType));
        }

        public NameCurrentStateDnsConfigurationNameServerArgs build() {
            return $;
        }
    }

}
