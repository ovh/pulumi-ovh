// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;


public final class AlertingArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertingArgs Empty = new AlertingArgs();

    /**
     * Delay between two alerts in seconds
     * 
     */
    @Import(name="delay", required=true)
    private Output<Double> delay;

    /**
     * @return Delay between two alerts in seconds
     * 
     */
    public Output<Double> delay() {
        return this.delay;
    }

    /**
     * Email to contact
     * 
     */
    @Import(name="email", required=true)
    private Output<String> email;

    /**
     * @return Email to contact
     * 
     */
    public Output<String> email() {
        return this.email;
    }

    /**
     * Monthly threshold for this alerting in currency
     * 
     */
    @Import(name="monthlyThreshold", required=true)
    private Output<Double> monthlyThreshold;

    /**
     * @return Monthly threshold for this alerting in currency
     * 
     */
    public Output<Double> monthlyThreshold() {
        return this.monthlyThreshold;
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private AlertingArgs() {}

    private AlertingArgs(AlertingArgs $) {
        this.delay = $.delay;
        this.email = $.email;
        this.monthlyThreshold = $.monthlyThreshold;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertingArgs $;

        public Builder() {
            $ = new AlertingArgs();
        }

        public Builder(AlertingArgs defaults) {
            $ = new AlertingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param delay Delay between two alerts in seconds
         * 
         * @return builder
         * 
         */
        public Builder delay(Output<Double> delay) {
            $.delay = delay;
            return this;
        }

        /**
         * @param delay Delay between two alerts in seconds
         * 
         * @return builder
         * 
         */
        public Builder delay(Double delay) {
            return delay(Output.of(delay));
        }

        /**
         * @param email Email to contact
         * 
         * @return builder
         * 
         */
        public Builder email(Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email Email to contact
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param monthlyThreshold Monthly threshold for this alerting in currency
         * 
         * @return builder
         * 
         */
        public Builder monthlyThreshold(Output<Double> monthlyThreshold) {
            $.monthlyThreshold = monthlyThreshold;
            return this;
        }

        /**
         * @param monthlyThreshold Monthly threshold for this alerting in currency
         * 
         * @return builder
         * 
         */
        public Builder monthlyThreshold(Double monthlyThreshold) {
            return monthlyThreshold(Output.of(monthlyThreshold));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public AlertingArgs build() {
            if ($.delay == null) {
                throw new MissingRequiredPropertyException("AlertingArgs", "delay");
            }
            if ($.email == null) {
                throw new MissingRequiredPropertyException("AlertingArgs", "email");
            }
            if ($.monthlyThreshold == null) {
                throw new MissingRequiredPropertyException("AlertingArgs", "monthlyThreshold");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("AlertingArgs", "serviceName");
            }
            return $;
        }
    }

}
