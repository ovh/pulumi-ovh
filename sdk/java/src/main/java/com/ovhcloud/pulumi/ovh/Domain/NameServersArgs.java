// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain;

import com.ovhcloud.pulumi.ovh.Domain.inputs.NameServersServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class NameServersArgs extends com.pulumi.resources.ResourceArgs {

    public static final NameServersArgs Empty = new NameServersArgs();

    /**
     * Domain name for which to manage name servers
     * 
     */
    @Import(name="domain", required=true)
    private Output<String> domain;

    /**
     * @return Domain name for which to manage name servers
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }

    /**
     * Details about a name server
     * 
     */
    @Import(name="servers", required=true)
    private Output<List<NameServersServerArgs>> servers;

    /**
     * @return Details about a name server
     * 
     */
    public Output<List<NameServersServerArgs>> servers() {
        return this.servers;
    }

    private NameServersArgs() {}

    private NameServersArgs(NameServersArgs $) {
        this.domain = $.domain;
        this.servers = $.servers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NameServersArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NameServersArgs $;

        public Builder() {
            $ = new NameServersArgs();
        }

        public Builder(NameServersArgs defaults) {
            $ = new NameServersArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain name for which to manage name servers
         * 
         * @return builder
         * 
         */
        public Builder domain(Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain name for which to manage name servers
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(Output<List<NameServersServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(List<NameServersServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(NameServersServerArgs... servers) {
            return servers(List.of(servers));
        }

        public NameServersArgs build() {
            if ($.domain == null) {
                throw new MissingRequiredPropertyException("NameServersArgs", "domain");
            }
            if ($.servers == null) {
                throw new MissingRequiredPropertyException("NameServersArgs", "servers");
            }
            return $;
        }
    }

}
