// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerCustomizationsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerCustomizationsArgs Empty = new ServerCustomizationsArgs();

    /**
     * Config Drive UserData
     * 
     */
    @Import(name="configDriveUserData")
    private @Nullable Output<String> configDriveUserData;

    /**
     * @return Config Drive UserData
     * 
     */
    public Optional<Output<String>> configDriveUserData() {
        return Optional.ofNullable(this.configDriveUserData);
    }

    /**
     * Path of the EFI bootloader
     * 
     */
    @Import(name="efiBootloaderPath")
    private @Nullable Output<String> efiBootloaderPath;

    /**
     * @return Path of the EFI bootloader
     * 
     */
    public Optional<Output<String>> efiBootloaderPath() {
        return Optional.ofNullable(this.efiBootloaderPath);
    }

    /**
     * Custom hostname
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Custom hostname
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Image HTTP Headers
     * 
     */
    @Import(name="httpHeaders")
    private @Nullable Output<Map<String,String>> httpHeaders;

    /**
     * @return Image HTTP Headers
     * 
     */
    public Optional<Output<Map<String,String>>> httpHeaders() {
        return Optional.ofNullable(this.httpHeaders);
    }

    /**
     * Image checksum
     * 
     */
    @Import(name="imageCheckSum")
    private @Nullable Output<String> imageCheckSum;

    /**
     * @return Image checksum
     * 
     */
    public Optional<Output<String>> imageCheckSum() {
        return Optional.ofNullable(this.imageCheckSum);
    }

    /**
     * Checksum type
     * 
     */
    @Import(name="imageCheckSumType")
    private @Nullable Output<String> imageCheckSumType;

    /**
     * @return Checksum type
     * 
     */
    public Optional<Output<String>> imageCheckSumType() {
        return Optional.ofNullable(this.imageCheckSumType);
    }

    /**
     * Image Type
     * 
     */
    @Import(name="imageType")
    private @Nullable Output<String> imageType;

    /**
     * @return Image Type
     * 
     */
    public Optional<Output<String>> imageType() {
        return Optional.ofNullable(this.imageType);
    }

    /**
     * Image URL
     * 
     */
    @Import(name="imageUrl")
    private @Nullable Output<String> imageUrl;

    /**
     * @return Image URL
     * 
     */
    public Optional<Output<String>> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }

    /**
     * Display Language
     * 
     */
    @Import(name="language")
    private @Nullable Output<String> language;

    /**
     * @return Display Language
     * 
     */
    public Optional<Output<String>> language() {
        return Optional.ofNullable(this.language);
    }

    /**
     * Post-Installation Script
     * 
     */
    @Import(name="postInstallationScript")
    private @Nullable Output<String> postInstallationScript;

    /**
     * @return Post-Installation Script
     * 
     */
    public Optional<Output<String>> postInstallationScript() {
        return Optional.ofNullable(this.postInstallationScript);
    }

    /**
     * Post-Installation Script File Extension
     * 
     */
    @Import(name="postInstallationScriptExtension")
    private @Nullable Output<String> postInstallationScriptExtension;

    /**
     * @return Post-Installation Script File Extension
     * 
     */
    public Optional<Output<String>> postInstallationScriptExtension() {
        return Optional.ofNullable(this.postInstallationScriptExtension);
    }

    /**
     * SSH Public Key
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<String> sshKey;

    /**
     * @return SSH Public Key
     * 
     */
    public Optional<Output<String>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    private ServerCustomizationsArgs() {}

    private ServerCustomizationsArgs(ServerCustomizationsArgs $) {
        this.configDriveUserData = $.configDriveUserData;
        this.efiBootloaderPath = $.efiBootloaderPath;
        this.hostname = $.hostname;
        this.httpHeaders = $.httpHeaders;
        this.imageCheckSum = $.imageCheckSum;
        this.imageCheckSumType = $.imageCheckSumType;
        this.imageType = $.imageType;
        this.imageUrl = $.imageUrl;
        this.language = $.language;
        this.postInstallationScript = $.postInstallationScript;
        this.postInstallationScriptExtension = $.postInstallationScriptExtension;
        this.sshKey = $.sshKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerCustomizationsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerCustomizationsArgs $;

        public Builder() {
            $ = new ServerCustomizationsArgs();
        }

        public Builder(ServerCustomizationsArgs defaults) {
            $ = new ServerCustomizationsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param configDriveUserData Config Drive UserData
         * 
         * @return builder
         * 
         */
        public Builder configDriveUserData(@Nullable Output<String> configDriveUserData) {
            $.configDriveUserData = configDriveUserData;
            return this;
        }

        /**
         * @param configDriveUserData Config Drive UserData
         * 
         * @return builder
         * 
         */
        public Builder configDriveUserData(String configDriveUserData) {
            return configDriveUserData(Output.of(configDriveUserData));
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(@Nullable Output<String> efiBootloaderPath) {
            $.efiBootloaderPath = efiBootloaderPath;
            return this;
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(String efiBootloaderPath) {
            return efiBootloaderPath(Output.of(efiBootloaderPath));
        }

        /**
         * @param hostname Custom hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Custom hostname
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param httpHeaders Image HTTP Headers
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(@Nullable Output<Map<String,String>> httpHeaders) {
            $.httpHeaders = httpHeaders;
            return this;
        }

        /**
         * @param httpHeaders Image HTTP Headers
         * 
         * @return builder
         * 
         */
        public Builder httpHeaders(Map<String,String> httpHeaders) {
            return httpHeaders(Output.of(httpHeaders));
        }

        /**
         * @param imageCheckSum Image checksum
         * 
         * @return builder
         * 
         */
        public Builder imageCheckSum(@Nullable Output<String> imageCheckSum) {
            $.imageCheckSum = imageCheckSum;
            return this;
        }

        /**
         * @param imageCheckSum Image checksum
         * 
         * @return builder
         * 
         */
        public Builder imageCheckSum(String imageCheckSum) {
            return imageCheckSum(Output.of(imageCheckSum));
        }

        /**
         * @param imageCheckSumType Checksum type
         * 
         * @return builder
         * 
         */
        public Builder imageCheckSumType(@Nullable Output<String> imageCheckSumType) {
            $.imageCheckSumType = imageCheckSumType;
            return this;
        }

        /**
         * @param imageCheckSumType Checksum type
         * 
         * @return builder
         * 
         */
        public Builder imageCheckSumType(String imageCheckSumType) {
            return imageCheckSumType(Output.of(imageCheckSumType));
        }

        /**
         * @param imageType Image Type
         * 
         * @return builder
         * 
         */
        public Builder imageType(@Nullable Output<String> imageType) {
            $.imageType = imageType;
            return this;
        }

        /**
         * @param imageType Image Type
         * 
         * @return builder
         * 
         */
        public Builder imageType(String imageType) {
            return imageType(Output.of(imageType));
        }

        /**
         * @param imageUrl Image URL
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(@Nullable Output<String> imageUrl) {
            $.imageUrl = imageUrl;
            return this;
        }

        /**
         * @param imageUrl Image URL
         * 
         * @return builder
         * 
         */
        public Builder imageUrl(String imageUrl) {
            return imageUrl(Output.of(imageUrl));
        }

        /**
         * @param language Display Language
         * 
         * @return builder
         * 
         */
        public Builder language(@Nullable Output<String> language) {
            $.language = language;
            return this;
        }

        /**
         * @param language Display Language
         * 
         * @return builder
         * 
         */
        public Builder language(String language) {
            return language(Output.of(language));
        }

        /**
         * @param postInstallationScript Post-Installation Script
         * 
         * @return builder
         * 
         */
        public Builder postInstallationScript(@Nullable Output<String> postInstallationScript) {
            $.postInstallationScript = postInstallationScript;
            return this;
        }

        /**
         * @param postInstallationScript Post-Installation Script
         * 
         * @return builder
         * 
         */
        public Builder postInstallationScript(String postInstallationScript) {
            return postInstallationScript(Output.of(postInstallationScript));
        }

        /**
         * @param postInstallationScriptExtension Post-Installation Script File Extension
         * 
         * @return builder
         * 
         */
        public Builder postInstallationScriptExtension(@Nullable Output<String> postInstallationScriptExtension) {
            $.postInstallationScriptExtension = postInstallationScriptExtension;
            return this;
        }

        /**
         * @param postInstallationScriptExtension Post-Installation Script File Extension
         * 
         * @return builder
         * 
         */
        public Builder postInstallationScriptExtension(String postInstallationScriptExtension) {
            return postInstallationScriptExtension(Output.of(postInstallationScriptExtension));
        }

        /**
         * @param sshKey SSH Public Key
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<String> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey SSH Public Key
         * 
         * @return builder
         * 
         */
        public Builder sshKey(String sshKey) {
            return sshKey(Output.of(sshKey));
        }

        public ServerCustomizationsArgs build() {
            return $;
        }
    }

}
