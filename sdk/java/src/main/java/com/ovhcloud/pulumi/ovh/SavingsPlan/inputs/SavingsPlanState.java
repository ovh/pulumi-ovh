// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.SavingsPlan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SavingsPlanState extends com.pulumi.resources.ResourceArgs {

    public static final SavingsPlanState Empty = new SavingsPlanState();

    /**
     * Whether Savings Plan should be renewed at the end of the period (defaults to false)
     * 
     */
    @Import(name="autoRenewal")
    private @Nullable Output<Boolean> autoRenewal;

    /**
     * @return Whether Savings Plan should be renewed at the end of the period (defaults to false)
     * 
     */
    public Optional<Output<Boolean>> autoRenewal() {
        return Optional.ofNullable(this.autoRenewal);
    }

    /**
     * Custom display name, used in invoices
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Custom display name, used in invoices
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * End date of the Savings Plan
     * 
     */
    @Import(name="endDate")
    private @Nullable Output<String> endDate;

    /**
     * @return End date of the Savings Plan
     * 
     */
    public Optional<Output<String>> endDate() {
        return Optional.ofNullable(this.endDate);
    }

    /**
     * Savings Plan flavor. The list of available flavors can be retrieved in the next section.
     * 
     */
    @Import(name="flavor")
    private @Nullable Output<String> flavor;

    /**
     * @return Savings Plan flavor. The list of available flavors can be retrieved in the next section.
     * 
     */
    public Optional<Output<String>> flavor() {
        return Optional.ofNullable(this.flavor);
    }

    /**
     * Periodicity of the Savings Plan
     * 
     */
    @Import(name="period")
    private @Nullable Output<String> period;

    /**
     * @return Periodicity of the Savings Plan
     * 
     */
    public Optional<Output<String>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
     * 
     */
    @Import(name="periodEndAction")
    private @Nullable Output<String> periodEndAction;

    /**
     * @return Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
     * 
     */
    public Optional<Output<String>> periodEndAction() {
        return Optional.ofNullable(this.periodEndAction);
    }

    /**
     * End date of the current period
     * 
     */
    @Import(name="periodEndDate")
    private @Nullable Output<String> periodEndDate;

    /**
     * @return End date of the current period
     * 
     */
    public Optional<Output<String>> periodEndDate() {
        return Optional.ofNullable(this.periodEndDate);
    }

    /**
     * Start date of the current period
     * 
     */
    @Import(name="periodStartDate")
    private @Nullable Output<String> periodStartDate;

    /**
     * @return Start date of the current period
     * 
     */
    public Optional<Output<String>> periodStartDate() {
        return Optional.ofNullable(this.periodStartDate);
    }

    /**
     * Billing ID of the service
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<Integer> serviceId;

    /**
     * @return Billing ID of the service
     * 
     */
    public Optional<Output<Integer>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * ID of the public cloud project
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return ID of the public cloud project
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Size of the Savings Plan
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Size of the Savings Plan
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Start date of the Savings Plan
     * 
     */
    @Import(name="startDate")
    private @Nullable Output<String> startDate;

    /**
     * @return Start date of the Savings Plan
     * 
     */
    public Optional<Output<String>> startDate() {
        return Optional.ofNullable(this.startDate);
    }

    /**
     * Status of the Savings Plan
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the Savings Plan
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private SavingsPlanState() {}

    private SavingsPlanState(SavingsPlanState $) {
        this.autoRenewal = $.autoRenewal;
        this.displayName = $.displayName;
        this.endDate = $.endDate;
        this.flavor = $.flavor;
        this.period = $.period;
        this.periodEndAction = $.periodEndAction;
        this.periodEndDate = $.periodEndDate;
        this.periodStartDate = $.periodStartDate;
        this.serviceId = $.serviceId;
        this.serviceName = $.serviceName;
        this.size = $.size;
        this.startDate = $.startDate;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SavingsPlanState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SavingsPlanState $;

        public Builder() {
            $ = new SavingsPlanState();
        }

        public Builder(SavingsPlanState defaults) {
            $ = new SavingsPlanState(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenewal Whether Savings Plan should be renewed at the end of the period (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewal(@Nullable Output<Boolean> autoRenewal) {
            $.autoRenewal = autoRenewal;
            return this;
        }

        /**
         * @param autoRenewal Whether Savings Plan should be renewed at the end of the period (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewal(Boolean autoRenewal) {
            return autoRenewal(Output.of(autoRenewal));
        }

        /**
         * @param displayName Custom display name, used in invoices
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Custom display name, used in invoices
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param endDate End date of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder endDate(@Nullable Output<String> endDate) {
            $.endDate = endDate;
            return this;
        }

        /**
         * @param endDate End date of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder endDate(String endDate) {
            return endDate(Output.of(endDate));
        }

        /**
         * @param flavor Savings Plan flavor. The list of available flavors can be retrieved in the next section.
         * 
         * @return builder
         * 
         */
        public Builder flavor(@Nullable Output<String> flavor) {
            $.flavor = flavor;
            return this;
        }

        /**
         * @param flavor Savings Plan flavor. The list of available flavors can be retrieved in the next section.
         * 
         * @return builder
         * 
         */
        public Builder flavor(String flavor) {
            return flavor(Output.of(flavor));
        }

        /**
         * @param period Periodicity of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Periodicity of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param periodEndAction Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
         * 
         * @return builder
         * 
         */
        public Builder periodEndAction(@Nullable Output<String> periodEndAction) {
            $.periodEndAction = periodEndAction;
            return this;
        }

        /**
         * @param periodEndAction Action performed when reaching the end of the period (controles by the `auto_renewal` parameter)
         * 
         * @return builder
         * 
         */
        public Builder periodEndAction(String periodEndAction) {
            return periodEndAction(Output.of(periodEndAction));
        }

        /**
         * @param periodEndDate End date of the current period
         * 
         * @return builder
         * 
         */
        public Builder periodEndDate(@Nullable Output<String> periodEndDate) {
            $.periodEndDate = periodEndDate;
            return this;
        }

        /**
         * @param periodEndDate End date of the current period
         * 
         * @return builder
         * 
         */
        public Builder periodEndDate(String periodEndDate) {
            return periodEndDate(Output.of(periodEndDate));
        }

        /**
         * @param periodStartDate Start date of the current period
         * 
         * @return builder
         * 
         */
        public Builder periodStartDate(@Nullable Output<String> periodStartDate) {
            $.periodStartDate = periodStartDate;
            return this;
        }

        /**
         * @param periodStartDate Start date of the current period
         * 
         * @return builder
         * 
         */
        public Builder periodStartDate(String periodStartDate) {
            return periodStartDate(Output.of(periodStartDate));
        }

        /**
         * @param serviceId Billing ID of the service
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<Integer> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId Billing ID of the service
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Integer serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param serviceName ID of the public cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName ID of the public cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param size Size of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param startDate Start date of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder startDate(@Nullable Output<String> startDate) {
            $.startDate = startDate;
            return this;
        }

        /**
         * @param startDate Start date of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder startDate(String startDate) {
            return startDate(Output.of(startDate));
        }

        /**
         * @param status Status of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public SavingsPlanState build() {
            return $;
        }
    }

}
