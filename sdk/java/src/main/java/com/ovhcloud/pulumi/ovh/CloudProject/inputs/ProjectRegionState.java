// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.ProjectRegionServiceArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectRegionState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectRegionState Empty = new ProjectRegionState();

    /**
     * Availability zones of the region
     * 
     */
    @Import(name="availabilityZones")
    private @Nullable Output<List<String>> availabilityZones;

    /**
     * @return Availability zones of the region
     * 
     */
    public Optional<Output<List<String>>> availabilityZones() {
        return Optional.ofNullable(this.availabilityZones);
    }

    /**
     * Region continent code
     * 
     */
    @Import(name="continentCode")
    private @Nullable Output<String> continentCode;

    /**
     * @return Region continent code
     * 
     */
    public Optional<Output<String>> continentCode() {
        return Optional.ofNullable(this.continentCode);
    }

    /**
     * Region country code
     * 
     */
    @Import(name="countryCode")
    private @Nullable Output<String> countryCode;

    /**
     * @return Region country code
     * 
     */
    public Optional<Output<String>> countryCode() {
        return Optional.ofNullable(this.countryCode);
    }

    /**
     * Location of the datacenter where the region is
     * 
     */
    @Import(name="datacenterLocation")
    private @Nullable Output<String> datacenterLocation;

    /**
     * @return Location of the datacenter where the region is
     * 
     */
    public Optional<Output<String>> datacenterLocation() {
        return Optional.ofNullable(this.datacenterLocation);
    }

    /**
     * Allowed countries for failover ip
     * 
     */
    @Import(name="ipCountries")
    private @Nullable Output<List<String>> ipCountries;

    /**
     * @return Allowed countries for failover ip
     * 
     */
    public Optional<Output<List<String>>> ipCountries() {
        return Optional.ofNullable(this.ipCountries);
    }

    /**
     * Region name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Region name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Region to add to your project
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region to add to your project
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName")
    private @Nullable Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Optional<Output<String>> regionName() {
        return Optional.ofNullable(this.regionName);
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Details about components status
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<ProjectRegionServiceArgs>> services;

    /**
     * @return Details about components status
     * 
     */
    public Optional<Output<List<ProjectRegionServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * Openstack region status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Openstack region status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Region type
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Region type
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private ProjectRegionState() {}

    private ProjectRegionState(ProjectRegionState $) {
        this.availabilityZones = $.availabilityZones;
        this.continentCode = $.continentCode;
        this.countryCode = $.countryCode;
        this.datacenterLocation = $.datacenterLocation;
        this.ipCountries = $.ipCountries;
        this.name = $.name;
        this.region = $.region;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
        this.services = $.services;
        this.status = $.status;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectRegionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectRegionState $;

        public Builder() {
            $ = new ProjectRegionState();
        }

        public Builder(ProjectRegionState defaults) {
            $ = new ProjectRegionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZones Availability zones of the region
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(@Nullable Output<List<String>> availabilityZones) {
            $.availabilityZones = availabilityZones;
            return this;
        }

        /**
         * @param availabilityZones Availability zones of the region
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(List<String> availabilityZones) {
            return availabilityZones(Output.of(availabilityZones));
        }

        /**
         * @param availabilityZones Availability zones of the region
         * 
         * @return builder
         * 
         */
        public Builder availabilityZones(String... availabilityZones) {
            return availabilityZones(List.of(availabilityZones));
        }

        /**
         * @param continentCode Region continent code
         * 
         * @return builder
         * 
         */
        public Builder continentCode(@Nullable Output<String> continentCode) {
            $.continentCode = continentCode;
            return this;
        }

        /**
         * @param continentCode Region continent code
         * 
         * @return builder
         * 
         */
        public Builder continentCode(String continentCode) {
            return continentCode(Output.of(continentCode));
        }

        /**
         * @param countryCode Region country code
         * 
         * @return builder
         * 
         */
        public Builder countryCode(@Nullable Output<String> countryCode) {
            $.countryCode = countryCode;
            return this;
        }

        /**
         * @param countryCode Region country code
         * 
         * @return builder
         * 
         */
        public Builder countryCode(String countryCode) {
            return countryCode(Output.of(countryCode));
        }

        /**
         * @param datacenterLocation Location of the datacenter where the region is
         * 
         * @return builder
         * 
         */
        public Builder datacenterLocation(@Nullable Output<String> datacenterLocation) {
            $.datacenterLocation = datacenterLocation;
            return this;
        }

        /**
         * @param datacenterLocation Location of the datacenter where the region is
         * 
         * @return builder
         * 
         */
        public Builder datacenterLocation(String datacenterLocation) {
            return datacenterLocation(Output.of(datacenterLocation));
        }

        /**
         * @param ipCountries Allowed countries for failover ip
         * 
         * @return builder
         * 
         */
        public Builder ipCountries(@Nullable Output<List<String>> ipCountries) {
            $.ipCountries = ipCountries;
            return this;
        }

        /**
         * @param ipCountries Allowed countries for failover ip
         * 
         * @return builder
         * 
         */
        public Builder ipCountries(List<String> ipCountries) {
            return ipCountries(Output.of(ipCountries));
        }

        /**
         * @param ipCountries Allowed countries for failover ip
         * 
         * @return builder
         * 
         */
        public Builder ipCountries(String... ipCountries) {
            return ipCountries(List.of(ipCountries));
        }

        /**
         * @param name Region name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Region name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param region Region to add to your project
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region to add to your project
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(@Nullable Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param services Details about components status
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<ProjectRegionServiceArgs>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services Details about components status
         * 
         * @return builder
         * 
         */
        public Builder services(List<ProjectRegionServiceArgs> services) {
            return services(Output.of(services));
        }

        /**
         * @param services Details about components status
         * 
         * @return builder
         * 
         */
        public Builder services(ProjectRegionServiceArgs... services) {
            return services(List.of(services));
        }

        /**
         * @param status Openstack region status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Openstack region status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param type Region type
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Region type
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ProjectRegionState build() {
            return $;
        }
    }

}
