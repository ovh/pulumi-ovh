// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerListenerArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerNetworkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerArgs Empty = new LoadBalancerArgs();

    /**
     * Description of the loadbalancer
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the loadbalancer
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Loadbalancer flavor id
     * 
     */
    @Import(name="flavorId", required=true)
    private Output<String> flavorId;

    /**
     * @return Loadbalancer flavor id
     * 
     */
    public Output<String> flavorId() {
        return this.flavorId;
    }

    /**
     * Listeners to create with the loadbalancer
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<LoadBalancerListenerArgs>> listeners;

    /**
     * @return Listeners to create with the loadbalancer
     * 
     */
    public Optional<Output<List<LoadBalancerListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * Name of the resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network information to create the loadbalancer
     * 
     */
    @Import(name="network", required=true)
    private Output<LoadBalancerNetworkArgs> network;

    /**
     * @return Network information to create the loadbalancer
     * 
     */
    public Output<LoadBalancerNetworkArgs> network() {
        return this.network;
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName", required=true)
    private Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Output<String> regionName() {
        return this.regionName;
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private LoadBalancerArgs() {}

    private LoadBalancerArgs(LoadBalancerArgs $) {
        this.description = $.description;
        this.flavorId = $.flavorId;
        this.listeners = $.listeners;
        this.name = $.name;
        this.network = $.network;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerArgs $;

        public Builder() {
            $ = new LoadBalancerArgs();
        }

        public Builder(LoadBalancerArgs defaults) {
            $ = new LoadBalancerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flavorId Loadbalancer flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(Output<String> flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param flavorId Loadbalancer flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(String flavorId) {
            return flavorId(Output.of(flavorId));
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<LoadBalancerListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<LoadBalancerListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(LoadBalancerListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param name Name of the resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Network information to create the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder network(Output<LoadBalancerNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Network information to create the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder network(LoadBalancerNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public LoadBalancerArgs build() {
            if ($.flavorId == null) {
                throw new MissingRequiredPropertyException("LoadBalancerArgs", "flavorId");
            }
            if ($.network == null) {
                throw new MissingRequiredPropertyException("LoadBalancerArgs", "network");
            }
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("LoadBalancerArgs", "regionName");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("LoadBalancerArgs", "serviceName");
            }
            return $;
        }
    }

}
