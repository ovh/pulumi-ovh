// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OvhcloudConnectPopDatacenterExtraConfigState extends com.pulumi.resources.ResourceArgs {

    public static final OvhcloudConnectPopDatacenterExtraConfigState Empty = new OvhcloudConnectPopDatacenterExtraConfigState();

    /**
     * BGP AS number
     * 
     */
    @Import(name="bgpNeighborArea")
    private @Nullable Output<Double> bgpNeighborArea;

    /**
     * @return BGP AS number
     * 
     */
    public Optional<Output<Double>> bgpNeighborArea() {
        return Optional.ofNullable(this.bgpNeighborArea);
    }

    /**
     * Router IP for BGP
     * 
     */
    @Import(name="bgpNeighborIp")
    private @Nullable Output<String> bgpNeighborIp;

    /**
     * @return Router IP for BGP
     * 
     */
    public Optional<Output<String>> bgpNeighborIp() {
        return Optional.ofNullable(this.bgpNeighborIp);
    }

    /**
     * ID of the datacenter configuration
     * 
     */
    @Import(name="configDatacenterId")
    private @Nullable Output<Double> configDatacenterId;

    /**
     * @return ID of the datacenter configuration
     * 
     */
    public Optional<Output<Double>> configDatacenterId() {
        return Optional.ofNullable(this.configDatacenterId);
    }

    /**
     * ID of the pop configuration
     * 
     */
    @Import(name="configPopId")
    private @Nullable Output<Double> configPopId;

    /**
     * @return ID of the pop configuration
     * 
     */
    public Optional<Output<Double>> configPopId() {
        return Optional.ofNullable(this.configPopId);
    }

    /**
     * Static route next hop
     * 
     */
    @Import(name="nextHop")
    private @Nullable Output<String> nextHop;

    /**
     * @return Static route next hop
     * 
     */
    public Optional<Output<String>> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Status of the pop configuration
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the pop configuration
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Static route ip
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return Static route ip
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    /**
     * Type of the configuration
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of the configuration
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private OvhcloudConnectPopDatacenterExtraConfigState() {}

    private OvhcloudConnectPopDatacenterExtraConfigState(OvhcloudConnectPopDatacenterExtraConfigState $) {
        this.bgpNeighborArea = $.bgpNeighborArea;
        this.bgpNeighborIp = $.bgpNeighborIp;
        this.configDatacenterId = $.configDatacenterId;
        this.configPopId = $.configPopId;
        this.nextHop = $.nextHop;
        this.serviceName = $.serviceName;
        this.status = $.status;
        this.subnet = $.subnet;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OvhcloudConnectPopDatacenterExtraConfigState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OvhcloudConnectPopDatacenterExtraConfigState $;

        public Builder() {
            $ = new OvhcloudConnectPopDatacenterExtraConfigState();
        }

        public Builder(OvhcloudConnectPopDatacenterExtraConfigState defaults) {
            $ = new OvhcloudConnectPopDatacenterExtraConfigState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bgpNeighborArea BGP AS number
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborArea(@Nullable Output<Double> bgpNeighborArea) {
            $.bgpNeighborArea = bgpNeighborArea;
            return this;
        }

        /**
         * @param bgpNeighborArea BGP AS number
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborArea(Double bgpNeighborArea) {
            return bgpNeighborArea(Output.of(bgpNeighborArea));
        }

        /**
         * @param bgpNeighborIp Router IP for BGP
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborIp(@Nullable Output<String> bgpNeighborIp) {
            $.bgpNeighborIp = bgpNeighborIp;
            return this;
        }

        /**
         * @param bgpNeighborIp Router IP for BGP
         * 
         * @return builder
         * 
         */
        public Builder bgpNeighborIp(String bgpNeighborIp) {
            return bgpNeighborIp(Output.of(bgpNeighborIp));
        }

        /**
         * @param configDatacenterId ID of the datacenter configuration
         * 
         * @return builder
         * 
         */
        public Builder configDatacenterId(@Nullable Output<Double> configDatacenterId) {
            $.configDatacenterId = configDatacenterId;
            return this;
        }

        /**
         * @param configDatacenterId ID of the datacenter configuration
         * 
         * @return builder
         * 
         */
        public Builder configDatacenterId(Double configDatacenterId) {
            return configDatacenterId(Output.of(configDatacenterId));
        }

        /**
         * @param configPopId ID of the pop configuration
         * 
         * @return builder
         * 
         */
        public Builder configPopId(@Nullable Output<Double> configPopId) {
            $.configPopId = configPopId;
            return this;
        }

        /**
         * @param configPopId ID of the pop configuration
         * 
         * @return builder
         * 
         */
        public Builder configPopId(Double configPopId) {
            return configPopId(Output.of(configPopId));
        }

        /**
         * @param nextHop Static route next hop
         * 
         * @return builder
         * 
         */
        public Builder nextHop(@Nullable Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop Static route next hop
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status Status of the pop configuration
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the pop configuration
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subnet Static route ip
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet Static route ip
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        /**
         * @param type Type of the configuration
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of the configuration
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OvhcloudConnectPopDatacenterExtraConfigState build() {
            return $;
        }
    }

}
