// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.inputs;

import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerCustomizationsArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerIamArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerOrderArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerPlanArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerPlanOptionArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerStorageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerState extends com.pulumi.resources.ResourceArgs {

    public static final ServerState Empty = new ServerState();

    /**
     * Dedicated AZ localisation
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return Dedicated AZ localisation
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * Boot id of the server
     * 
     */
    @Import(name="bootId")
    private @Nullable Output<Double> bootId;

    /**
     * @return Boot id of the server
     * 
     */
    public Optional<Output<Double>> bootId() {
        return Optional.ofNullable(this.bootId);
    }

    /**
     * Boot script of the server
     * 
     */
    @Import(name="bootScript")
    private @Nullable Output<String> bootScript;

    /**
     * @return Boot script of the server
     * 
     */
    public Optional<Output<String>> bootScript() {
        return Optional.ofNullable(this.bootScript);
    }

    /**
     * Dedicated server commercial range
     * 
     */
    @Import(name="commercialRange")
    private @Nullable Output<String> commercialRange;

    /**
     * @return Dedicated server commercial range
     * 
     */
    public Optional<Output<String>> commercialRange() {
        return Optional.ofNullable(this.commercialRange);
    }

    /**
     * OS reinstallation customizations
     * 
     */
    @Import(name="customizations")
    private @Nullable Output<ServerCustomizationsArgs> customizations;

    /**
     * @return OS reinstallation customizations
     * 
     */
    public Optional<Output<ServerCustomizationsArgs>> customizations() {
        return Optional.ofNullable(this.customizations);
    }

    /**
     * Dedicated datacenter localisation (bhs1,bhs2,...)
     * 
     */
    @Import(name="datacenter")
    private @Nullable Output<String> datacenter;

    /**
     * @return Dedicated datacenter localisation (bhs1,bhs2,...)
     * 
     */
    public Optional<Output<String>> datacenter() {
        return Optional.ofNullable(this.datacenter);
    }

    /**
     * Resource display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Resource display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Path of the EFI bootloader
     * 
     */
    @Import(name="efiBootloaderPath")
    private @Nullable Output<String> efiBootloaderPath;

    /**
     * @return Path of the EFI bootloader
     * 
     */
    public Optional<Output<String>> efiBootloaderPath() {
        return Optional.ofNullable(this.efiBootloaderPath);
    }

    /**
     * IAM resource information
     * 
     */
    @Import(name="iam")
    private @Nullable Output<ServerIamArgs> iam;

    /**
     * @return IAM resource information
     * 
     */
    public Optional<Output<ServerIamArgs>> iam() {
        return Optional.ofNullable(this.iam);
    }

    /**
     * Dedicated server ip (IPv4)
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Dedicated server ip (IPv4)
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Link speed of the server
     * 
     */
    @Import(name="linkSpeed")
    private @Nullable Output<Double> linkSpeed;

    /**
     * @return Link speed of the server
     * 
     */
    public Optional<Output<Double>> linkSpeed() {
        return Optional.ofNullable(this.linkSpeed);
    }

    /**
     * Icmp monitoring state
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Icmp monitoring state
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Dedicated server name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Dedicated server name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="newUpgradeSystem")
    private @Nullable Output<Boolean> newUpgradeSystem;

    public Optional<Output<Boolean>> newUpgradeSystem() {
        return Optional.ofNullable(this.newUpgradeSystem);
    }

    /**
     * Prevent datacenter intervention
     * 
     */
    @Import(name="noIntervention")
    private @Nullable Output<Boolean> noIntervention;

    /**
     * @return Prevent datacenter intervention
     * 
     */
    public Optional<Output<Boolean>> noIntervention() {
        return Optional.ofNullable(this.noIntervention);
    }

    /**
     * Details about an Order
     * 
     */
    @Import(name="order")
    private @Nullable Output<ServerOrderArgs> order;

    /**
     * @return Details about an Order
     * 
     */
    public Optional<Output<ServerOrderArgs>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * Operating system
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return Operating system
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * OVH subsidiaries
     * 
     */
    @Import(name="ovhSubsidiary")
    private @Nullable Output<String> ovhSubsidiary;

    /**
     * @return OVH subsidiaries
     * 
     */
    public Optional<Output<String>> ovhSubsidiary() {
        return Optional.ofNullable(this.ovhSubsidiary);
    }

    @Import(name="planOptions")
    private @Nullable Output<List<ServerPlanOptionArgs>> planOptions;

    public Optional<Output<List<ServerPlanOptionArgs>>> planOptions() {
        return Optional.ofNullable(this.planOptions);
    }

    @Import(name="plans")
    private @Nullable Output<List<ServerPlanArgs>> plans;

    public Optional<Output<List<ServerPlanArgs>>> plans() {
        return Optional.ofNullable(this.plans);
    }

    /**
     * Power state of the server (poweron, poweroff)
     * 
     */
    @Import(name="powerState")
    private @Nullable Output<String> powerState;

    /**
     * @return Power state of the server (poweron, poweroff)
     * 
     */
    public Optional<Output<String>> powerState() {
        return Optional.ofNullable(this.powerState);
    }

    /**
     * Does this server have professional use option
     * 
     */
    @Import(name="professionalUse")
    private @Nullable Output<Boolean> professionalUse;

    /**
     * @return Does this server have professional use option
     * 
     */
    public Optional<Output<Boolean>> professionalUse() {
        return Optional.ofNullable(this.professionalUse);
    }

    /**
     * Arbitrary properties to pass to cloud-init&#39;s config drive datasource
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return Arbitrary properties to pass to cloud-init&#39;s config drive datasource
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Rack id of the server
     * 
     */
    @Import(name="rack")
    private @Nullable Output<String> rack;

    /**
     * @return Rack id of the server
     * 
     */
    public Optional<Output<String>> rack() {
        return Optional.ofNullable(this.rack);
    }

    /**
     * Dedicated region localisation
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Dedicated region localisation
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Rescue mail of the server
     * 
     */
    @Import(name="rescueMail")
    private @Nullable Output<String> rescueMail;

    /**
     * @return Rescue mail of the server
     * 
     */
    public Optional<Output<String>> rescueMail() {
        return Optional.ofNullable(this.rescueMail);
    }

    /**
     * Public SSH Key used in the rescue mode
     * 
     */
    @Import(name="rescueSshKey")
    private @Nullable Output<String> rescueSshKey;

    /**
     * @return Public SSH Key used in the rescue mode
     * 
     */
    public Optional<Output<String>> rescueSshKey() {
        return Optional.ofNullable(this.rescueSshKey);
    }

    /**
     * Dedicated server reverse
     * 
     */
    @Import(name="reverse")
    private @Nullable Output<String> reverse;

    /**
     * @return Dedicated server reverse
     * 
     */
    public Optional<Output<String>> reverse() {
        return Optional.ofNullable(this.reverse);
    }

    /**
     * Root device of the server
     * 
     */
    @Import(name="rootDevice")
    private @Nullable Output<String> rootDevice;

    /**
     * @return Root device of the server
     * 
     */
    public Optional<Output<String>> rootDevice() {
        return Optional.ofNullable(this.rootDevice);
    }

    /**
     * Server id
     * 
     */
    @Import(name="serverId")
    private @Nullable Output<Double> serverId;

    /**
     * @return Server id
     * 
     */
    public Optional<Output<Double>> serverId() {
        return Optional.ofNullable(this.serverId);
    }

    /**
     * The service_name of your dedicated server
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The service_name of your dedicated server
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * OS reinstallation storage configurations
     * 
     */
    @Import(name="storages")
    private @Nullable Output<List<ServerStorageArgs>> storages;

    /**
     * @return OS reinstallation storage configurations
     * 
     */
    public Optional<Output<List<ServerStorageArgs>>> storages() {
        return Optional.ofNullable(this.storages);
    }

    /**
     * Dedicated server support level (critical, fastpath, gs, pro)
     * 
     */
    @Import(name="supportLevel")
    private @Nullable Output<String> supportLevel;

    /**
     * @return Dedicated server support level (critical, fastpath, gs, pro)
     * 
     */
    public Optional<Output<String>> supportLevel() {
        return Optional.ofNullable(this.supportLevel);
    }

    private ServerState() {}

    private ServerState(ServerState $) {
        this.availabilityZone = $.availabilityZone;
        this.bootId = $.bootId;
        this.bootScript = $.bootScript;
        this.commercialRange = $.commercialRange;
        this.customizations = $.customizations;
        this.datacenter = $.datacenter;
        this.displayName = $.displayName;
        this.efiBootloaderPath = $.efiBootloaderPath;
        this.iam = $.iam;
        this.ip = $.ip;
        this.linkSpeed = $.linkSpeed;
        this.monitoring = $.monitoring;
        this.name = $.name;
        this.newUpgradeSystem = $.newUpgradeSystem;
        this.noIntervention = $.noIntervention;
        this.order = $.order;
        this.os = $.os;
        this.ovhSubsidiary = $.ovhSubsidiary;
        this.planOptions = $.planOptions;
        this.plans = $.plans;
        this.powerState = $.powerState;
        this.professionalUse = $.professionalUse;
        this.properties = $.properties;
        this.rack = $.rack;
        this.region = $.region;
        this.rescueMail = $.rescueMail;
        this.rescueSshKey = $.rescueSshKey;
        this.reverse = $.reverse;
        this.rootDevice = $.rootDevice;
        this.serverId = $.serverId;
        this.serviceName = $.serviceName;
        this.state = $.state;
        this.storages = $.storages;
        this.supportLevel = $.supportLevel;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerState $;

        public Builder() {
            $ = new ServerState();
        }

        public Builder(ServerState defaults) {
            $ = new ServerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param availabilityZone Dedicated AZ localisation
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone Dedicated AZ localisation
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param bootId Boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(@Nullable Output<Double> bootId) {
            $.bootId = bootId;
            return this;
        }

        /**
         * @param bootId Boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(Double bootId) {
            return bootId(Output.of(bootId));
        }

        /**
         * @param bootScript Boot script of the server
         * 
         * @return builder
         * 
         */
        public Builder bootScript(@Nullable Output<String> bootScript) {
            $.bootScript = bootScript;
            return this;
        }

        /**
         * @param bootScript Boot script of the server
         * 
         * @return builder
         * 
         */
        public Builder bootScript(String bootScript) {
            return bootScript(Output.of(bootScript));
        }

        /**
         * @param commercialRange Dedicated server commercial range
         * 
         * @return builder
         * 
         */
        public Builder commercialRange(@Nullable Output<String> commercialRange) {
            $.commercialRange = commercialRange;
            return this;
        }

        /**
         * @param commercialRange Dedicated server commercial range
         * 
         * @return builder
         * 
         */
        public Builder commercialRange(String commercialRange) {
            return commercialRange(Output.of(commercialRange));
        }

        /**
         * @param customizations OS reinstallation customizations
         * 
         * @return builder
         * 
         */
        public Builder customizations(@Nullable Output<ServerCustomizationsArgs> customizations) {
            $.customizations = customizations;
            return this;
        }

        /**
         * @param customizations OS reinstallation customizations
         * 
         * @return builder
         * 
         */
        public Builder customizations(ServerCustomizationsArgs customizations) {
            return customizations(Output.of(customizations));
        }

        /**
         * @param datacenter Dedicated datacenter localisation (bhs1,bhs2,...)
         * 
         * @return builder
         * 
         */
        public Builder datacenter(@Nullable Output<String> datacenter) {
            $.datacenter = datacenter;
            return this;
        }

        /**
         * @param datacenter Dedicated datacenter localisation (bhs1,bhs2,...)
         * 
         * @return builder
         * 
         */
        public Builder datacenter(String datacenter) {
            return datacenter(Output.of(datacenter));
        }

        /**
         * @param displayName Resource display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Resource display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(@Nullable Output<String> efiBootloaderPath) {
            $.efiBootloaderPath = efiBootloaderPath;
            return this;
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(String efiBootloaderPath) {
            return efiBootloaderPath(Output.of(efiBootloaderPath));
        }

        /**
         * @param iam IAM resource information
         * 
         * @return builder
         * 
         */
        public Builder iam(@Nullable Output<ServerIamArgs> iam) {
            $.iam = iam;
            return this;
        }

        /**
         * @param iam IAM resource information
         * 
         * @return builder
         * 
         */
        public Builder iam(ServerIamArgs iam) {
            return iam(Output.of(iam));
        }

        /**
         * @param ip Dedicated server ip (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Dedicated server ip (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param linkSpeed Link speed of the server
         * 
         * @return builder
         * 
         */
        public Builder linkSpeed(@Nullable Output<Double> linkSpeed) {
            $.linkSpeed = linkSpeed;
            return this;
        }

        /**
         * @param linkSpeed Link speed of the server
         * 
         * @return builder
         * 
         */
        public Builder linkSpeed(Double linkSpeed) {
            return linkSpeed(Output.of(linkSpeed));
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param name Dedicated server name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Dedicated server name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder newUpgradeSystem(@Nullable Output<Boolean> newUpgradeSystem) {
            $.newUpgradeSystem = newUpgradeSystem;
            return this;
        }

        public Builder newUpgradeSystem(Boolean newUpgradeSystem) {
            return newUpgradeSystem(Output.of(newUpgradeSystem));
        }

        /**
         * @param noIntervention Prevent datacenter intervention
         * 
         * @return builder
         * 
         */
        public Builder noIntervention(@Nullable Output<Boolean> noIntervention) {
            $.noIntervention = noIntervention;
            return this;
        }

        /**
         * @param noIntervention Prevent datacenter intervention
         * 
         * @return builder
         * 
         */
        public Builder noIntervention(Boolean noIntervention) {
            return noIntervention(Output.of(noIntervention));
        }

        /**
         * @param order Details about an Order
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<ServerOrderArgs> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Details about an Order
         * 
         * @return builder
         * 
         */
        public Builder order(ServerOrderArgs order) {
            return order(Output.of(order));
        }

        /**
         * @param os Operating system
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os Operating system
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param ovhSubsidiary OVH subsidiaries
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(@Nullable Output<String> ovhSubsidiary) {
            $.ovhSubsidiary = ovhSubsidiary;
            return this;
        }

        /**
         * @param ovhSubsidiary OVH subsidiaries
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(String ovhSubsidiary) {
            return ovhSubsidiary(Output.of(ovhSubsidiary));
        }

        public Builder planOptions(@Nullable Output<List<ServerPlanOptionArgs>> planOptions) {
            $.planOptions = planOptions;
            return this;
        }

        public Builder planOptions(List<ServerPlanOptionArgs> planOptions) {
            return planOptions(Output.of(planOptions));
        }

        public Builder planOptions(ServerPlanOptionArgs... planOptions) {
            return planOptions(List.of(planOptions));
        }

        public Builder plans(@Nullable Output<List<ServerPlanArgs>> plans) {
            $.plans = plans;
            return this;
        }

        public Builder plans(List<ServerPlanArgs> plans) {
            return plans(Output.of(plans));
        }

        public Builder plans(ServerPlanArgs... plans) {
            return plans(List.of(plans));
        }

        /**
         * @param powerState Power state of the server (poweron, poweroff)
         * 
         * @return builder
         * 
         */
        public Builder powerState(@Nullable Output<String> powerState) {
            $.powerState = powerState;
            return this;
        }

        /**
         * @param powerState Power state of the server (poweron, poweroff)
         * 
         * @return builder
         * 
         */
        public Builder powerState(String powerState) {
            return powerState(Output.of(powerState));
        }

        /**
         * @param professionalUse Does this server have professional use option
         * 
         * @return builder
         * 
         */
        public Builder professionalUse(@Nullable Output<Boolean> professionalUse) {
            $.professionalUse = professionalUse;
            return this;
        }

        /**
         * @param professionalUse Does this server have professional use option
         * 
         * @return builder
         * 
         */
        public Builder professionalUse(Boolean professionalUse) {
            return professionalUse(Output.of(professionalUse));
        }

        /**
         * @param properties Arbitrary properties to pass to cloud-init&#39;s config drive datasource
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Arbitrary properties to pass to cloud-init&#39;s config drive datasource
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param rack Rack id of the server
         * 
         * @return builder
         * 
         */
        public Builder rack(@Nullable Output<String> rack) {
            $.rack = rack;
            return this;
        }

        /**
         * @param rack Rack id of the server
         * 
         * @return builder
         * 
         */
        public Builder rack(String rack) {
            return rack(Output.of(rack));
        }

        /**
         * @param region Dedicated region localisation
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Dedicated region localisation
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param rescueMail Rescue mail of the server
         * 
         * @return builder
         * 
         */
        public Builder rescueMail(@Nullable Output<String> rescueMail) {
            $.rescueMail = rescueMail;
            return this;
        }

        /**
         * @param rescueMail Rescue mail of the server
         * 
         * @return builder
         * 
         */
        public Builder rescueMail(String rescueMail) {
            return rescueMail(Output.of(rescueMail));
        }

        /**
         * @param rescueSshKey Public SSH Key used in the rescue mode
         * 
         * @return builder
         * 
         */
        public Builder rescueSshKey(@Nullable Output<String> rescueSshKey) {
            $.rescueSshKey = rescueSshKey;
            return this;
        }

        /**
         * @param rescueSshKey Public SSH Key used in the rescue mode
         * 
         * @return builder
         * 
         */
        public Builder rescueSshKey(String rescueSshKey) {
            return rescueSshKey(Output.of(rescueSshKey));
        }

        /**
         * @param reverse Dedicated server reverse
         * 
         * @return builder
         * 
         */
        public Builder reverse(@Nullable Output<String> reverse) {
            $.reverse = reverse;
            return this;
        }

        /**
         * @param reverse Dedicated server reverse
         * 
         * @return builder
         * 
         */
        public Builder reverse(String reverse) {
            return reverse(Output.of(reverse));
        }

        /**
         * @param rootDevice Root device of the server
         * 
         * @return builder
         * 
         */
        public Builder rootDevice(@Nullable Output<String> rootDevice) {
            $.rootDevice = rootDevice;
            return this;
        }

        /**
         * @param rootDevice Root device of the server
         * 
         * @return builder
         * 
         */
        public Builder rootDevice(String rootDevice) {
            return rootDevice(Output.of(rootDevice));
        }

        /**
         * @param serverId Server id
         * 
         * @return builder
         * 
         */
        public Builder serverId(@Nullable Output<Double> serverId) {
            $.serverId = serverId;
            return this;
        }

        /**
         * @param serverId Server id
         * 
         * @return builder
         * 
         */
        public Builder serverId(Double serverId) {
            return serverId(Output.of(serverId));
        }

        /**
         * @param serviceName The service_name of your dedicated server
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The service_name of your dedicated server
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param state All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(@Nullable Output<List<ServerStorageArgs>> storages) {
            $.storages = storages;
            return this;
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(List<ServerStorageArgs> storages) {
            return storages(Output.of(storages));
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(ServerStorageArgs... storages) {
            return storages(List.of(storages));
        }

        /**
         * @param supportLevel Dedicated server support level (critical, fastpath, gs, pro)
         * 
         * @return builder
         * 
         */
        public Builder supportLevel(@Nullable Output<String> supportLevel) {
            $.supportLevel = supportLevel;
            return this;
        }

        /**
         * @param supportLevel Dedicated server support level (critical, fastpath, gs, pro)
         * 
         * @return builder
         * 
         */
        public Builder supportLevel(String supportLevel) {
            return supportLevel(Output.of(supportLevel));
        }

        public ServerState build() {
            return $;
        }
    }

}
