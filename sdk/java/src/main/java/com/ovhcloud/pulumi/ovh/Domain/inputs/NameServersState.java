// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.ovhcloud.pulumi.ovh.Domain.inputs.NameServersServerArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NameServersState extends com.pulumi.resources.ResourceArgs {

    public static final NameServersState Empty = new NameServersState();

    /**
     * Domain name for which to manage name servers
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain name for which to manage name servers
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Details about a name server
     * 
     */
    @Import(name="servers")
    private @Nullable Output<List<NameServersServerArgs>> servers;

    /**
     * @return Details about a name server
     * 
     */
    public Optional<Output<List<NameServersServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    private NameServersState() {}

    private NameServersState(NameServersState $) {
        this.domain = $.domain;
        this.servers = $.servers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NameServersState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NameServersState $;

        public Builder() {
            $ = new NameServersState();
        }

        public Builder(NameServersState defaults) {
            $ = new NameServersState(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain Domain name for which to manage name servers
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain name for which to manage name servers
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(@Nullable Output<List<NameServersServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(List<NameServersServerArgs> servers) {
            return servers(Output.of(servers));
        }

        /**
         * @param servers Details about a name server
         * 
         * @return builder
         * 
         */
        public Builder servers(NameServersServerArgs... servers) {
            return servers(List.of(servers));
        }

        public NameServersState build() {
            return $;
        }
    }

}
