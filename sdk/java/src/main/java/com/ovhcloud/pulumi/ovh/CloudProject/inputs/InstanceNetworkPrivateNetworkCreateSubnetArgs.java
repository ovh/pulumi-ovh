// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceNetworkPrivateNetworkCreateSubnetArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceNetworkPrivateNetworkCreateSubnetArgs Empty = new InstanceNetworkPrivateNetworkCreateSubnetArgs();

    /**
     * Subnet range in CIDR notation
     * 
     */
    @Import(name="cidr")
    private @Nullable Output<String> cidr;

    /**
     * @return Subnet range in CIDR notation
     * 
     */
    public Optional<Output<String>> cidr() {
        return Optional.ofNullable(this.cidr);
    }

    /**
     * Whether to enable DHCP
     * 
     */
    @Import(name="enableDhcp")
    private @Nullable Output<Boolean> enableDhcp;

    /**
     * @return Whether to enable DHCP
     * 
     */
    public Optional<Output<Boolean>> enableDhcp() {
        return Optional.ofNullable(this.enableDhcp);
    }

    /**
     * IP version
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<Integer> ipVersion;

    /**
     * @return IP version
     * 
     */
    public Optional<Output<Integer>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    private InstanceNetworkPrivateNetworkCreateSubnetArgs() {}

    private InstanceNetworkPrivateNetworkCreateSubnetArgs(InstanceNetworkPrivateNetworkCreateSubnetArgs $) {
        this.cidr = $.cidr;
        this.enableDhcp = $.enableDhcp;
        this.ipVersion = $.ipVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceNetworkPrivateNetworkCreateSubnetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceNetworkPrivateNetworkCreateSubnetArgs $;

        public Builder() {
            $ = new InstanceNetworkPrivateNetworkCreateSubnetArgs();
        }

        public Builder(InstanceNetworkPrivateNetworkCreateSubnetArgs defaults) {
            $ = new InstanceNetworkPrivateNetworkCreateSubnetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidr Subnet range in CIDR notation
         * 
         * @return builder
         * 
         */
        public Builder cidr(@Nullable Output<String> cidr) {
            $.cidr = cidr;
            return this;
        }

        /**
         * @param cidr Subnet range in CIDR notation
         * 
         * @return builder
         * 
         */
        public Builder cidr(String cidr) {
            return cidr(Output.of(cidr));
        }

        /**
         * @param enableDhcp Whether to enable DHCP
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(@Nullable Output<Boolean> enableDhcp) {
            $.enableDhcp = enableDhcp;
            return this;
        }

        /**
         * @param enableDhcp Whether to enable DHCP
         * 
         * @return builder
         * 
         */
        public Builder enableDhcp(Boolean enableDhcp) {
            return enableDhcp(Output.of(enableDhcp));
        }

        /**
         * @param ipVersion IP version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<Integer> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP version
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(Integer ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        public InstanceNetworkPrivateNetworkCreateSubnetArgs build() {
            return $;
        }
    }

}
