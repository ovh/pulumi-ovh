// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerCustomizations {
    /**
     * @return Config Drive UserData
     * 
     */
    private @Nullable String configDriveUserData;
    /**
     * @return Path of the EFI bootloader
     * 
     */
    private @Nullable String efiBootloaderPath;
    /**
     * @return Custom hostname
     * 
     */
    private @Nullable String hostname;
    /**
     * @return Image HTTP Headers
     * 
     */
    private @Nullable Map<String,String> httpHeaders;
    /**
     * @return Image checksum
     * 
     */
    private @Nullable String imageCheckSum;
    /**
     * @return Checksum type
     * 
     */
    private @Nullable String imageCheckSumType;
    /**
     * @return Image Type
     * 
     */
    private @Nullable String imageType;
    /**
     * @return Image URL
     * 
     */
    private @Nullable String imageUrl;
    /**
     * @return Display Language
     * 
     */
    private @Nullable String language;
    /**
     * @return Post-Installation Script
     * 
     */
    private @Nullable String postInstallationScript;
    /**
     * @return Post-Installation Script File Extension
     * 
     */
    private @Nullable String postInstallationScriptExtension;
    /**
     * @return SSH Public Key
     * 
     */
    private @Nullable String sshKey;

    private ServerCustomizations() {}
    /**
     * @return Config Drive UserData
     * 
     */
    public Optional<String> configDriveUserData() {
        return Optional.ofNullable(this.configDriveUserData);
    }
    /**
     * @return Path of the EFI bootloader
     * 
     */
    public Optional<String> efiBootloaderPath() {
        return Optional.ofNullable(this.efiBootloaderPath);
    }
    /**
     * @return Custom hostname
     * 
     */
    public Optional<String> hostname() {
        return Optional.ofNullable(this.hostname);
    }
    /**
     * @return Image HTTP Headers
     * 
     */
    public Map<String,String> httpHeaders() {
        return this.httpHeaders == null ? Map.of() : this.httpHeaders;
    }
    /**
     * @return Image checksum
     * 
     */
    public Optional<String> imageCheckSum() {
        return Optional.ofNullable(this.imageCheckSum);
    }
    /**
     * @return Checksum type
     * 
     */
    public Optional<String> imageCheckSumType() {
        return Optional.ofNullable(this.imageCheckSumType);
    }
    /**
     * @return Image Type
     * 
     */
    public Optional<String> imageType() {
        return Optional.ofNullable(this.imageType);
    }
    /**
     * @return Image URL
     * 
     */
    public Optional<String> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }
    /**
     * @return Display Language
     * 
     */
    public Optional<String> language() {
        return Optional.ofNullable(this.language);
    }
    /**
     * @return Post-Installation Script
     * 
     */
    public Optional<String> postInstallationScript() {
        return Optional.ofNullable(this.postInstallationScript);
    }
    /**
     * @return Post-Installation Script File Extension
     * 
     */
    public Optional<String> postInstallationScriptExtension() {
        return Optional.ofNullable(this.postInstallationScriptExtension);
    }
    /**
     * @return SSH Public Key
     * 
     */
    public Optional<String> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerCustomizations defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configDriveUserData;
        private @Nullable String efiBootloaderPath;
        private @Nullable String hostname;
        private @Nullable Map<String,String> httpHeaders;
        private @Nullable String imageCheckSum;
        private @Nullable String imageCheckSumType;
        private @Nullable String imageType;
        private @Nullable String imageUrl;
        private @Nullable String language;
        private @Nullable String postInstallationScript;
        private @Nullable String postInstallationScriptExtension;
        private @Nullable String sshKey;
        public Builder() {}
        public Builder(ServerCustomizations defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configDriveUserData = defaults.configDriveUserData;
    	      this.efiBootloaderPath = defaults.efiBootloaderPath;
    	      this.hostname = defaults.hostname;
    	      this.httpHeaders = defaults.httpHeaders;
    	      this.imageCheckSum = defaults.imageCheckSum;
    	      this.imageCheckSumType = defaults.imageCheckSumType;
    	      this.imageType = defaults.imageType;
    	      this.imageUrl = defaults.imageUrl;
    	      this.language = defaults.language;
    	      this.postInstallationScript = defaults.postInstallationScript;
    	      this.postInstallationScriptExtension = defaults.postInstallationScriptExtension;
    	      this.sshKey = defaults.sshKey;
        }

        @CustomType.Setter
        public Builder configDriveUserData(@Nullable String configDriveUserData) {

            this.configDriveUserData = configDriveUserData;
            return this;
        }
        @CustomType.Setter
        public Builder efiBootloaderPath(@Nullable String efiBootloaderPath) {

            this.efiBootloaderPath = efiBootloaderPath;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(@Nullable String hostname) {

            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder httpHeaders(@Nullable Map<String,String> httpHeaders) {

            this.httpHeaders = httpHeaders;
            return this;
        }
        @CustomType.Setter
        public Builder imageCheckSum(@Nullable String imageCheckSum) {

            this.imageCheckSum = imageCheckSum;
            return this;
        }
        @CustomType.Setter
        public Builder imageCheckSumType(@Nullable String imageCheckSumType) {

            this.imageCheckSumType = imageCheckSumType;
            return this;
        }
        @CustomType.Setter
        public Builder imageType(@Nullable String imageType) {

            this.imageType = imageType;
            return this;
        }
        @CustomType.Setter
        public Builder imageUrl(@Nullable String imageUrl) {

            this.imageUrl = imageUrl;
            return this;
        }
        @CustomType.Setter
        public Builder language(@Nullable String language) {

            this.language = language;
            return this;
        }
        @CustomType.Setter
        public Builder postInstallationScript(@Nullable String postInstallationScript) {

            this.postInstallationScript = postInstallationScript;
            return this;
        }
        @CustomType.Setter
        public Builder postInstallationScriptExtension(@Nullable String postInstallationScriptExtension) {

            this.postInstallationScriptExtension = postInstallationScriptExtension;
            return this;
        }
        @CustomType.Setter
        public Builder sshKey(@Nullable String sshKey) {

            this.sshKey = sshKey;
            return this;
        }
        public ServerCustomizations build() {
            final var _resultValue = new ServerCustomizations();
            _resultValue.configDriveUserData = configDriveUserData;
            _resultValue.efiBootloaderPath = efiBootloaderPath;
            _resultValue.hostname = hostname;
            _resultValue.httpHeaders = httpHeaders;
            _resultValue.imageCheckSum = imageCheckSum;
            _resultValue.imageCheckSumType = imageCheckSumType;
            _resultValue.imageType = imageType;
            _resultValue.imageUrl = imageUrl;
            _resultValue.language = language;
            _resultValue.postInstallationScript = postInstallationScript;
            _resultValue.postInstallationScriptExtension = postInstallationScriptExtension;
            _resultValue.sshKey = sshKey;
            return _resultValue;
        }
    }
}
