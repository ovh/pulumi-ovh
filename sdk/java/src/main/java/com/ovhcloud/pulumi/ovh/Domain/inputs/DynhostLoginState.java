// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DynhostLoginState extends com.pulumi.resources.ResourceArgs {

    public static final DynhostLoginState Empty = new DynhostLoginState();

    /**
     * Login name
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return Login name
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * Suffix that will be concatenated to the zoneName to create the login
     * 
     */
    @Import(name="loginSuffix")
    private @Nullable Output<String> loginSuffix;

    /**
     * @return Suffix that will be concatenated to the zoneName to create the login
     * 
     */
    public Optional<Output<String>> loginSuffix() {
        return Optional.ofNullable(this.loginSuffix);
    }

    /**
     * Password of the login
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return Password of the login
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Subdomain that the login will be allowed to update (use * to allow all)
     * 
     */
    @Import(name="subDomain")
    private @Nullable Output<String> subDomain;

    /**
     * @return Subdomain that the login will be allowed to update (use * to allow all)
     * 
     */
    public Optional<Output<String>> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }

    /**
     * Login zone
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return Login zone
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    /**
     * Zone name
     * 
     */
    @Import(name="zoneName")
    private @Nullable Output<String> zoneName;

    /**
     * @return Zone name
     * 
     */
    public Optional<Output<String>> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    private DynhostLoginState() {}

    private DynhostLoginState(DynhostLoginState $) {
        this.login = $.login;
        this.loginSuffix = $.loginSuffix;
        this.password = $.password;
        this.subDomain = $.subDomain;
        this.zone = $.zone;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynhostLoginState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynhostLoginState $;

        public Builder() {
            $ = new DynhostLoginState();
        }

        public Builder(DynhostLoginState defaults) {
            $ = new DynhostLoginState(Objects.requireNonNull(defaults));
        }

        /**
         * @param login Login name
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login Login name
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param loginSuffix Suffix that will be concatenated to the zoneName to create the login
         * 
         * @return builder
         * 
         */
        public Builder loginSuffix(@Nullable Output<String> loginSuffix) {
            $.loginSuffix = loginSuffix;
            return this;
        }

        /**
         * @param loginSuffix Suffix that will be concatenated to the zoneName to create the login
         * 
         * @return builder
         * 
         */
        public Builder loginSuffix(String loginSuffix) {
            return loginSuffix(Output.of(loginSuffix));
        }

        /**
         * @param password Password of the login
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password of the login
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param subDomain Subdomain that the login will be allowed to update (use * to allow all)
         * 
         * @return builder
         * 
         */
        public Builder subDomain(@Nullable Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        /**
         * @param subDomain Subdomain that the login will be allowed to update (use * to allow all)
         * 
         * @return builder
         * 
         */
        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        /**
         * @param zone Login zone
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone Login zone
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(@Nullable Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public DynhostLoginState build() {
            return $;
        }
    }

}
