// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.outputs;

import com.ovhcloud.pulumi.ovh.Dedicated.outputs.ServerReinstallTaskStoragePartitioningLayoutExtra;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServerReinstallTaskStoragePartitioningLayout {
    /**
     * @return Partition extras parameters (when applicable)
     * 
     */
    private @Nullable List<ServerReinstallTaskStoragePartitioningLayoutExtra> extras;
    /**
     * @return File system type
     * 
     */
    private String fileSystem;
    /**
     * @return Mount point
     * 
     */
    private String mountPoint;
    /**
     * @return Software raid type (default is 1)
     * 
     */
    private @Nullable Integer raidLevel;
    /**
     * @return Partition size in MiB (default value is 0 which means to fill the disk with that partition)
     * 
     */
    private @Nullable Integer size;

    private ServerReinstallTaskStoragePartitioningLayout() {}
    /**
     * @return Partition extras parameters (when applicable)
     * 
     */
    public List<ServerReinstallTaskStoragePartitioningLayoutExtra> extras() {
        return this.extras == null ? List.of() : this.extras;
    }
    /**
     * @return File system type
     * 
     */
    public String fileSystem() {
        return this.fileSystem;
    }
    /**
     * @return Mount point
     * 
     */
    public String mountPoint() {
        return this.mountPoint;
    }
    /**
     * @return Software raid type (default is 1)
     * 
     */
    public Optional<Integer> raidLevel() {
        return Optional.ofNullable(this.raidLevel);
    }
    /**
     * @return Partition size in MiB (default value is 0 which means to fill the disk with that partition)
     * 
     */
    public Optional<Integer> size() {
        return Optional.ofNullable(this.size);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServerReinstallTaskStoragePartitioningLayout defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<ServerReinstallTaskStoragePartitioningLayoutExtra> extras;
        private String fileSystem;
        private String mountPoint;
        private @Nullable Integer raidLevel;
        private @Nullable Integer size;
        public Builder() {}
        public Builder(ServerReinstallTaskStoragePartitioningLayout defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extras = defaults.extras;
    	      this.fileSystem = defaults.fileSystem;
    	      this.mountPoint = defaults.mountPoint;
    	      this.raidLevel = defaults.raidLevel;
    	      this.size = defaults.size;
        }

        @CustomType.Setter
        public Builder extras(@Nullable List<ServerReinstallTaskStoragePartitioningLayoutExtra> extras) {

            this.extras = extras;
            return this;
        }
        public Builder extras(ServerReinstallTaskStoragePartitioningLayoutExtra... extras) {
            return extras(List.of(extras));
        }
        @CustomType.Setter
        public Builder fileSystem(String fileSystem) {
            if (fileSystem == null) {
              throw new MissingRequiredPropertyException("ServerReinstallTaskStoragePartitioningLayout", "fileSystem");
            }
            this.fileSystem = fileSystem;
            return this;
        }
        @CustomType.Setter
        public Builder mountPoint(String mountPoint) {
            if (mountPoint == null) {
              throw new MissingRequiredPropertyException("ServerReinstallTaskStoragePartitioningLayout", "mountPoint");
            }
            this.mountPoint = mountPoint;
            return this;
        }
        @CustomType.Setter
        public Builder raidLevel(@Nullable Integer raidLevel) {

            this.raidLevel = raidLevel;
            return this;
        }
        @CustomType.Setter
        public Builder size(@Nullable Integer size) {

            this.size = size;
            return this;
        }
        public ServerReinstallTaskStoragePartitioningLayout build() {
            final var _resultValue = new ServerReinstallTaskStoragePartitioningLayout();
            _resultValue.extras = extras;
            _resultValue.fileSystem = fileSystem;
            _resultValue.mountPoint = mountPoint;
            _resultValue.raidLevel = raidLevel;
            _resultValue.size = size;
            return _resultValue;
        }
    }
}
