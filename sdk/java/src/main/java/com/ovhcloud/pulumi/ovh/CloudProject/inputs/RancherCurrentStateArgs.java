// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.RancherCurrentStateIpRestrictionArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.RancherCurrentStateNetworkingArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.RancherCurrentStateUsageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RancherCurrentStateArgs extends com.pulumi.resources.ResourceArgs {

    public static final RancherCurrentStateArgs Empty = new RancherCurrentStateArgs();

    /**
     * Bootstrap password of the managed Rancher service, returned only on creation
     * 
     */
    @Import(name="bootstrapPassword")
    private @Nullable Output<String> bootstrapPassword;

    /**
     * @return Bootstrap password of the managed Rancher service, returned only on creation
     * 
     */
    public Optional<Output<String>> bootstrapPassword() {
        return Optional.ofNullable(this.bootstrapPassword);
    }

    /**
     * List of allowed CIDR blocks for a managed Rancher service&#39;s IP restrictions. When empty, any IP is allowed
     * 
     */
    @Import(name="ipRestrictions")
    private @Nullable Output<List<RancherCurrentStateIpRestrictionArgs>> ipRestrictions;

    /**
     * @return List of allowed CIDR blocks for a managed Rancher service&#39;s IP restrictions. When empty, any IP is allowed
     * 
     */
    public Optional<Output<List<RancherCurrentStateIpRestrictionArgs>>> ipRestrictions() {
        return Optional.ofNullable(this.ipRestrictions);
    }

    /**
     * Name of the managed Rancher service
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the managed Rancher service
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Networking properties of a managed Rancher service
     * 
     */
    @Import(name="networking")
    private @Nullable Output<RancherCurrentStateNetworkingArgs> networking;

    /**
     * @return Networking properties of a managed Rancher service
     * 
     */
    public Optional<Output<RancherCurrentStateNetworkingArgs>> networking() {
        return Optional.ofNullable(this.networking);
    }

    /**
     * Plan of the managed Rancher service
     * 
     */
    @Import(name="plan")
    private @Nullable Output<String> plan;

    /**
     * @return Plan of the managed Rancher service
     * 
     */
    public Optional<Output<String>> plan() {
        return Optional.ofNullable(this.plan);
    }

    /**
     * Region of the managed Rancher service
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the managed Rancher service
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * URL of the managed Rancher service
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return URL of the managed Rancher service
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Latest metrics regarding the usage of the managed Rancher service
     * 
     */
    @Import(name="usage")
    private @Nullable Output<RancherCurrentStateUsageArgs> usage;

    /**
     * @return Latest metrics regarding the usage of the managed Rancher service
     * 
     */
    public Optional<Output<RancherCurrentStateUsageArgs>> usage() {
        return Optional.ofNullable(this.usage);
    }

    /**
     * Version of the managed Rancher service
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of the managed Rancher service
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private RancherCurrentStateArgs() {}

    private RancherCurrentStateArgs(RancherCurrentStateArgs $) {
        this.bootstrapPassword = $.bootstrapPassword;
        this.ipRestrictions = $.ipRestrictions;
        this.name = $.name;
        this.networking = $.networking;
        this.plan = $.plan;
        this.region = $.region;
        this.url = $.url;
        this.usage = $.usage;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RancherCurrentStateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RancherCurrentStateArgs $;

        public Builder() {
            $ = new RancherCurrentStateArgs();
        }

        public Builder(RancherCurrentStateArgs defaults) {
            $ = new RancherCurrentStateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootstrapPassword Bootstrap password of the managed Rancher service, returned only on creation
         * 
         * @return builder
         * 
         */
        public Builder bootstrapPassword(@Nullable Output<String> bootstrapPassword) {
            $.bootstrapPassword = bootstrapPassword;
            return this;
        }

        /**
         * @param bootstrapPassword Bootstrap password of the managed Rancher service, returned only on creation
         * 
         * @return builder
         * 
         */
        public Builder bootstrapPassword(String bootstrapPassword) {
            return bootstrapPassword(Output.of(bootstrapPassword));
        }

        /**
         * @param ipRestrictions List of allowed CIDR blocks for a managed Rancher service&#39;s IP restrictions. When empty, any IP is allowed
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(@Nullable Output<List<RancherCurrentStateIpRestrictionArgs>> ipRestrictions) {
            $.ipRestrictions = ipRestrictions;
            return this;
        }

        /**
         * @param ipRestrictions List of allowed CIDR blocks for a managed Rancher service&#39;s IP restrictions. When empty, any IP is allowed
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(List<RancherCurrentStateIpRestrictionArgs> ipRestrictions) {
            return ipRestrictions(Output.of(ipRestrictions));
        }

        /**
         * @param ipRestrictions List of allowed CIDR blocks for a managed Rancher service&#39;s IP restrictions. When empty, any IP is allowed
         * 
         * @return builder
         * 
         */
        public Builder ipRestrictions(RancherCurrentStateIpRestrictionArgs... ipRestrictions) {
            return ipRestrictions(List.of(ipRestrictions));
        }

        /**
         * @param name Name of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networking Networking properties of a managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder networking(@Nullable Output<RancherCurrentStateNetworkingArgs> networking) {
            $.networking = networking;
            return this;
        }

        /**
         * @param networking Networking properties of a managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder networking(RancherCurrentStateNetworkingArgs networking) {
            return networking(Output.of(networking));
        }

        /**
         * @param plan Plan of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder plan(@Nullable Output<String> plan) {
            $.plan = plan;
            return this;
        }

        /**
         * @param plan Plan of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder plan(String plan) {
            return plan(Output.of(plan));
        }

        /**
         * @param region Region of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param url URL of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url URL of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param usage Latest metrics regarding the usage of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder usage(@Nullable Output<RancherCurrentStateUsageArgs> usage) {
            $.usage = usage;
            return this;
        }

        /**
         * @param usage Latest metrics regarding the usage of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder usage(RancherCurrentStateUsageArgs usage) {
            return usage(Output.of(usage));
        }

        /**
         * @param version Version of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of the managed Rancher service
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public RancherCurrentStateArgs build() {
            return $;
        }
    }

}
