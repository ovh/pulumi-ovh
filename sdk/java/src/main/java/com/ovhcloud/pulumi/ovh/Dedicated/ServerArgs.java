// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated;

import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerCustomizationsArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerPlanArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerPlanOptionArgs;
import com.ovhcloud.pulumi.ovh.Dedicated.inputs.ServerStorageArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerArgs Empty = new ServerArgs();

    /**
     * Boot id of the server
     * 
     */
    @Import(name="bootId")
    private @Nullable Output<Double> bootId;

    /**
     * @return Boot id of the server
     * 
     */
    public Optional<Output<Double>> bootId() {
        return Optional.ofNullable(this.bootId);
    }

    /**
     * Boot script of the server
     * 
     */
    @Import(name="bootScript")
    private @Nullable Output<String> bootScript;

    /**
     * @return Boot script of the server
     * 
     */
    public Optional<Output<String>> bootScript() {
        return Optional.ofNullable(this.bootScript);
    }

    /**
     * OS reinstallation customizations
     * 
     */
    @Import(name="customizations")
    private @Nullable Output<ServerCustomizationsArgs> customizations;

    /**
     * @return OS reinstallation customizations
     * 
     */
    public Optional<Output<ServerCustomizationsArgs>> customizations() {
        return Optional.ofNullable(this.customizations);
    }

    /**
     * Resource display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Resource display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * Path of the EFI bootloader
     * 
     */
    @Import(name="efiBootloaderPath")
    private @Nullable Output<String> efiBootloaderPath;

    /**
     * @return Path of the EFI bootloader
     * 
     */
    public Optional<Output<String>> efiBootloaderPath() {
        return Optional.ofNullable(this.efiBootloaderPath);
    }

    /**
     * Icmp monitoring state
     * 
     */
    @Import(name="monitoring")
    private @Nullable Output<Boolean> monitoring;

    /**
     * @return Icmp monitoring state
     * 
     */
    public Optional<Output<Boolean>> monitoring() {
        return Optional.ofNullable(this.monitoring);
    }

    /**
     * Prevent datacenter intervention
     * 
     */
    @Import(name="noIntervention")
    private @Nullable Output<Boolean> noIntervention;

    /**
     * @return Prevent datacenter intervention
     * 
     */
    public Optional<Output<Boolean>> noIntervention() {
        return Optional.ofNullable(this.noIntervention);
    }

    /**
     * Operating system
     * 
     */
    @Import(name="os")
    private @Nullable Output<String> os;

    /**
     * @return Operating system
     * 
     */
    public Optional<Output<String>> os() {
        return Optional.ofNullable(this.os);
    }

    /**
     * OVH subsidiaries
     * 
     */
    @Import(name="ovhSubsidiary")
    private @Nullable Output<String> ovhSubsidiary;

    /**
     * @return OVH subsidiaries
     * 
     */
    public Optional<Output<String>> ovhSubsidiary() {
        return Optional.ofNullable(this.ovhSubsidiary);
    }

    @Import(name="planOptions")
    private @Nullable Output<List<ServerPlanOptionArgs>> planOptions;

    public Optional<Output<List<ServerPlanOptionArgs>>> planOptions() {
        return Optional.ofNullable(this.planOptions);
    }

    @Import(name="plans")
    private @Nullable Output<List<ServerPlanArgs>> plans;

    public Optional<Output<List<ServerPlanArgs>>> plans() {
        return Optional.ofNullable(this.plans);
    }

    /**
     * Arbitrary properties to pass to cloud-init&#39;s config drive datasource
     * 
     */
    @Import(name="properties")
    private @Nullable Output<Map<String,String>> properties;

    /**
     * @return Arbitrary properties to pass to cloud-init&#39;s config drive datasource
     * 
     */
    public Optional<Output<Map<String,String>>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Rescue mail of the server
     * 
     */
    @Import(name="rescueMail")
    private @Nullable Output<String> rescueMail;

    /**
     * @return Rescue mail of the server
     * 
     */
    public Optional<Output<String>> rescueMail() {
        return Optional.ofNullable(this.rescueMail);
    }

    /**
     * Public SSH Key used in the rescue mode
     * 
     */
    @Import(name="rescueSshKey")
    private @Nullable Output<String> rescueSshKey;

    /**
     * @return Public SSH Key used in the rescue mode
     * 
     */
    public Optional<Output<String>> rescueSshKey() {
        return Optional.ofNullable(this.rescueSshKey);
    }

    /**
     * Root device of the server
     * 
     */
    @Import(name="rootDevice")
    private @Nullable Output<String> rootDevice;

    /**
     * @return Root device of the server
     * 
     */
    public Optional<Output<String>> rootDevice() {
        return Optional.ofNullable(this.rootDevice);
    }

    /**
     * All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * OS reinstallation storage configurations
     * 
     */
    @Import(name="storages")
    private @Nullable Output<List<ServerStorageArgs>> storages;

    /**
     * @return OS reinstallation storage configurations
     * 
     */
    public Optional<Output<List<ServerStorageArgs>>> storages() {
        return Optional.ofNullable(this.storages);
    }

    private ServerArgs() {}

    private ServerArgs(ServerArgs $) {
        this.bootId = $.bootId;
        this.bootScript = $.bootScript;
        this.customizations = $.customizations;
        this.displayName = $.displayName;
        this.efiBootloaderPath = $.efiBootloaderPath;
        this.monitoring = $.monitoring;
        this.noIntervention = $.noIntervention;
        this.os = $.os;
        this.ovhSubsidiary = $.ovhSubsidiary;
        this.planOptions = $.planOptions;
        this.plans = $.plans;
        this.properties = $.properties;
        this.rescueMail = $.rescueMail;
        this.rescueSshKey = $.rescueSshKey;
        this.rootDevice = $.rootDevice;
        this.state = $.state;
        this.storages = $.storages;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerArgs $;

        public Builder() {
            $ = new ServerArgs();
        }

        public Builder(ServerArgs defaults) {
            $ = new ServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootId Boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(@Nullable Output<Double> bootId) {
            $.bootId = bootId;
            return this;
        }

        /**
         * @param bootId Boot id of the server
         * 
         * @return builder
         * 
         */
        public Builder bootId(Double bootId) {
            return bootId(Output.of(bootId));
        }

        /**
         * @param bootScript Boot script of the server
         * 
         * @return builder
         * 
         */
        public Builder bootScript(@Nullable Output<String> bootScript) {
            $.bootScript = bootScript;
            return this;
        }

        /**
         * @param bootScript Boot script of the server
         * 
         * @return builder
         * 
         */
        public Builder bootScript(String bootScript) {
            return bootScript(Output.of(bootScript));
        }

        /**
         * @param customizations OS reinstallation customizations
         * 
         * @return builder
         * 
         */
        public Builder customizations(@Nullable Output<ServerCustomizationsArgs> customizations) {
            $.customizations = customizations;
            return this;
        }

        /**
         * @param customizations OS reinstallation customizations
         * 
         * @return builder
         * 
         */
        public Builder customizations(ServerCustomizationsArgs customizations) {
            return customizations(Output.of(customizations));
        }

        /**
         * @param displayName Resource display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Resource display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(@Nullable Output<String> efiBootloaderPath) {
            $.efiBootloaderPath = efiBootloaderPath;
            return this;
        }

        /**
         * @param efiBootloaderPath Path of the EFI bootloader
         * 
         * @return builder
         * 
         */
        public Builder efiBootloaderPath(String efiBootloaderPath) {
            return efiBootloaderPath(Output.of(efiBootloaderPath));
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(@Nullable Output<Boolean> monitoring) {
            $.monitoring = monitoring;
            return this;
        }

        /**
         * @param monitoring Icmp monitoring state
         * 
         * @return builder
         * 
         */
        public Builder monitoring(Boolean monitoring) {
            return monitoring(Output.of(monitoring));
        }

        /**
         * @param noIntervention Prevent datacenter intervention
         * 
         * @return builder
         * 
         */
        public Builder noIntervention(@Nullable Output<Boolean> noIntervention) {
            $.noIntervention = noIntervention;
            return this;
        }

        /**
         * @param noIntervention Prevent datacenter intervention
         * 
         * @return builder
         * 
         */
        public Builder noIntervention(Boolean noIntervention) {
            return noIntervention(Output.of(noIntervention));
        }

        /**
         * @param os Operating system
         * 
         * @return builder
         * 
         */
        public Builder os(@Nullable Output<String> os) {
            $.os = os;
            return this;
        }

        /**
         * @param os Operating system
         * 
         * @return builder
         * 
         */
        public Builder os(String os) {
            return os(Output.of(os));
        }

        /**
         * @param ovhSubsidiary OVH subsidiaries
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(@Nullable Output<String> ovhSubsidiary) {
            $.ovhSubsidiary = ovhSubsidiary;
            return this;
        }

        /**
         * @param ovhSubsidiary OVH subsidiaries
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(String ovhSubsidiary) {
            return ovhSubsidiary(Output.of(ovhSubsidiary));
        }

        public Builder planOptions(@Nullable Output<List<ServerPlanOptionArgs>> planOptions) {
            $.planOptions = planOptions;
            return this;
        }

        public Builder planOptions(List<ServerPlanOptionArgs> planOptions) {
            return planOptions(Output.of(planOptions));
        }

        public Builder planOptions(ServerPlanOptionArgs... planOptions) {
            return planOptions(List.of(planOptions));
        }

        public Builder plans(@Nullable Output<List<ServerPlanArgs>> plans) {
            $.plans = plans;
            return this;
        }

        public Builder plans(List<ServerPlanArgs> plans) {
            return plans(Output.of(plans));
        }

        public Builder plans(ServerPlanArgs... plans) {
            return plans(List.of(plans));
        }

        /**
         * @param properties Arbitrary properties to pass to cloud-init&#39;s config drive datasource
         * 
         * @return builder
         * 
         */
        public Builder properties(@Nullable Output<Map<String,String>> properties) {
            $.properties = properties;
            return this;
        }

        /**
         * @param properties Arbitrary properties to pass to cloud-init&#39;s config drive datasource
         * 
         * @return builder
         * 
         */
        public Builder properties(Map<String,String> properties) {
            return properties(Output.of(properties));
        }

        /**
         * @param rescueMail Rescue mail of the server
         * 
         * @return builder
         * 
         */
        public Builder rescueMail(@Nullable Output<String> rescueMail) {
            $.rescueMail = rescueMail;
            return this;
        }

        /**
         * @param rescueMail Rescue mail of the server
         * 
         * @return builder
         * 
         */
        public Builder rescueMail(String rescueMail) {
            return rescueMail(Output.of(rescueMail));
        }

        /**
         * @param rescueSshKey Public SSH Key used in the rescue mode
         * 
         * @return builder
         * 
         */
        public Builder rescueSshKey(@Nullable Output<String> rescueSshKey) {
            $.rescueSshKey = rescueSshKey;
            return this;
        }

        /**
         * @param rescueSshKey Public SSH Key used in the rescue mode
         * 
         * @return builder
         * 
         */
        public Builder rescueSshKey(String rescueSshKey) {
            return rescueSshKey(Output.of(rescueSshKey));
        }

        /**
         * @param rootDevice Root device of the server
         * 
         * @return builder
         * 
         */
        public Builder rootDevice(@Nullable Output<String> rootDevice) {
            $.rootDevice = rootDevice;
            return this;
        }

        /**
         * @param rootDevice Root device of the server
         * 
         * @return builder
         * 
         */
        public Builder rootDevice(String rootDevice) {
            return rootDevice(Output.of(rootDevice));
        }

        /**
         * @param state All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state All states a Dedicated can be in (error, hacked, hackedBlocked, ok)
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(@Nullable Output<List<ServerStorageArgs>> storages) {
            $.storages = storages;
            return this;
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(List<ServerStorageArgs> storages) {
            return storages(Output.of(storages));
        }

        /**
         * @param storages OS reinstallation storage configurations
         * 
         * @return builder
         * 
         */
        public Builder storages(ServerStorageArgs... storages) {
            return storages(List.of(storages));
        }

        public ServerArgs build() {
            return $;
        }
    }

}
