// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DomainZoneDynhostRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DomainZoneDynhostRecordArgs Empty = new DomainZoneDynhostRecordArgs();

    /**
     * Record IP
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Record IP
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Record sub-domain
     * 
     */
    @Import(name="subDomain")
    private @Nullable Output<String> subDomain;

    /**
     * @return Record sub-domain
     * 
     */
    public Optional<Output<String>> subDomain() {
        return Optional.ofNullable(this.subDomain);
    }

    /**
     * Zone name
     * 
     */
    @Import(name="zoneName", required=true)
    private Output<String> zoneName;

    /**
     * @return Zone name
     * 
     */
    public Output<String> zoneName() {
        return this.zoneName;
    }

    private DomainZoneDynhostRecordArgs() {}

    private DomainZoneDynhostRecordArgs(DomainZoneDynhostRecordArgs $) {
        this.ip = $.ip;
        this.subDomain = $.subDomain;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DomainZoneDynhostRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DomainZoneDynhostRecordArgs $;

        public Builder() {
            $ = new DomainZoneDynhostRecordArgs();
        }

        public Builder(DomainZoneDynhostRecordArgs defaults) {
            $ = new DomainZoneDynhostRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ip Record IP
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Record IP
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param subDomain Record sub-domain
         * 
         * @return builder
         * 
         */
        public Builder subDomain(@Nullable Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        /**
         * @param subDomain Record sub-domain
         * 
         * @return builder
         * 
         */
        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public DomainZoneDynhostRecordArgs build() {
            if ($.zoneName == null) {
                throw new MissingRequiredPropertyException("DomainZoneDynhostRecordArgs", "zoneName");
            }
            return $;
        }
    }

}
