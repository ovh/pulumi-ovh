// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.outputs;

import com.ovhcloud.pulumi.ovh.Domain.outputs.NameCurrentStateDnsConfigurationNameServer;
import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NameCurrentStateDnsConfiguration {
    /**
     * @return The type of DNS configuration of the domain
     * 
     */
    private @Nullable String configurationType;
    /**
     * @return Whether the registry supports IPv6 or not
     * 
     */
    private @Nullable Boolean glueRecordIpv6supported;
    /**
     * @return Whether the registry accepts hosts or not
     * 
     */
    private @Nullable Boolean hostSupported;
    /**
     * @return The maximum number of name servers allowed by the registry
     * 
     */
    private @Nullable Double maxDns;
    /**
     * @return The minimum number of name servers allowed by the registry
     * 
     */
    private @Nullable Double minDns;
    /**
     * @return The name servers used by the domain name
     * 
     */
    private @Nullable List<NameCurrentStateDnsConfigurationNameServer> nameServers;

    private NameCurrentStateDnsConfiguration() {}
    /**
     * @return The type of DNS configuration of the domain
     * 
     */
    public Optional<String> configurationType() {
        return Optional.ofNullable(this.configurationType);
    }
    /**
     * @return Whether the registry supports IPv6 or not
     * 
     */
    public Optional<Boolean> glueRecordIpv6supported() {
        return Optional.ofNullable(this.glueRecordIpv6supported);
    }
    /**
     * @return Whether the registry accepts hosts or not
     * 
     */
    public Optional<Boolean> hostSupported() {
        return Optional.ofNullable(this.hostSupported);
    }
    /**
     * @return The maximum number of name servers allowed by the registry
     * 
     */
    public Optional<Double> maxDns() {
        return Optional.ofNullable(this.maxDns);
    }
    /**
     * @return The minimum number of name servers allowed by the registry
     * 
     */
    public Optional<Double> minDns() {
        return Optional.ofNullable(this.minDns);
    }
    /**
     * @return The name servers used by the domain name
     * 
     */
    public List<NameCurrentStateDnsConfigurationNameServer> nameServers() {
        return this.nameServers == null ? List.of() : this.nameServers;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NameCurrentStateDnsConfiguration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String configurationType;
        private @Nullable Boolean glueRecordIpv6supported;
        private @Nullable Boolean hostSupported;
        private @Nullable Double maxDns;
        private @Nullable Double minDns;
        private @Nullable List<NameCurrentStateDnsConfigurationNameServer> nameServers;
        public Builder() {}
        public Builder(NameCurrentStateDnsConfiguration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationType = defaults.configurationType;
    	      this.glueRecordIpv6supported = defaults.glueRecordIpv6supported;
    	      this.hostSupported = defaults.hostSupported;
    	      this.maxDns = defaults.maxDns;
    	      this.minDns = defaults.minDns;
    	      this.nameServers = defaults.nameServers;
        }

        @CustomType.Setter
        public Builder configurationType(@Nullable String configurationType) {

            this.configurationType = configurationType;
            return this;
        }
        @CustomType.Setter
        public Builder glueRecordIpv6supported(@Nullable Boolean glueRecordIpv6supported) {

            this.glueRecordIpv6supported = glueRecordIpv6supported;
            return this;
        }
        @CustomType.Setter
        public Builder hostSupported(@Nullable Boolean hostSupported) {

            this.hostSupported = hostSupported;
            return this;
        }
        @CustomType.Setter
        public Builder maxDns(@Nullable Double maxDns) {

            this.maxDns = maxDns;
            return this;
        }
        @CustomType.Setter
        public Builder minDns(@Nullable Double minDns) {

            this.minDns = minDns;
            return this;
        }
        @CustomType.Setter
        public Builder nameServers(@Nullable List<NameCurrentStateDnsConfigurationNameServer> nameServers) {

            this.nameServers = nameServers;
            return this;
        }
        public Builder nameServers(NameCurrentStateDnsConfigurationNameServer... nameServers) {
            return nameServers(List.of(nameServers));
        }
        public NameCurrentStateDnsConfiguration build() {
            final var _resultValue = new NameCurrentStateDnsConfiguration();
            _resultValue.configurationType = configurationType;
            _resultValue.glueRecordIpv6supported = glueRecordIpv6supported;
            _resultValue.hostSupported = hostSupported;
            _resultValue.maxDns = maxDns;
            _resultValue.minDns = minDns;
            _resultValue.nameServers = nameServers;
            return _resultValue;
        }
    }
}
