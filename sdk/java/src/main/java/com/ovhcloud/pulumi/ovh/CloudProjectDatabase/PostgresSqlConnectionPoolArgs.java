// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProjectDatabase;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PostgresSqlConnectionPoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final PostgresSqlConnectionPoolArgs Empty = new PostgresSqlConnectionPoolArgs();

    /**
     * Cluster ID.
     * 
     */
    @Import(name="clusterId", required=true)
    private Output<String> clusterId;

    /**
     * @return Cluster ID.
     * 
     */
    public Output<String> clusterId() {
        return this.clusterId;
    }

    /**
     * Database ID for a database that belongs to the Database cluster given above.
     * 
     */
    @Import(name="databaseId", required=true)
    private Output<String> databaseId;

    /**
     * @return Database ID for a database that belongs to the Database cluster given above.
     * 
     */
    public Output<String> databaseId() {
        return this.databaseId;
    }

    /**
     * Connection mode to the connection pool Available modes:
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return Connection mode to the connection pool Available modes:
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * Name of the connection pool.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the connection pool.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Size of the connection pool.
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of the connection pool.
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    /**
     * Database user authorized to connect to the pool, if none all the users are allowed.
     * 
     */
    @Import(name="userId")
    private @Nullable Output<String> userId;

    /**
     * @return Database user authorized to connect to the pool, if none all the users are allowed.
     * 
     */
    public Optional<Output<String>> userId() {
        return Optional.ofNullable(this.userId);
    }

    private PostgresSqlConnectionPoolArgs() {}

    private PostgresSqlConnectionPoolArgs(PostgresSqlConnectionPoolArgs $) {
        this.clusterId = $.clusterId;
        this.databaseId = $.databaseId;
        this.mode = $.mode;
        this.name = $.name;
        this.serviceName = $.serviceName;
        this.size = $.size;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PostgresSqlConnectionPoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PostgresSqlConnectionPoolArgs $;

        public Builder() {
            $ = new PostgresSqlConnectionPoolArgs();
        }

        public Builder(PostgresSqlConnectionPoolArgs defaults) {
            $ = new PostgresSqlConnectionPoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param databaseId Database ID for a database that belongs to the Database cluster given above.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(Output<String> databaseId) {
            $.databaseId = databaseId;
            return this;
        }

        /**
         * @param databaseId Database ID for a database that belongs to the Database cluster given above.
         * 
         * @return builder
         * 
         */
        public Builder databaseId(String databaseId) {
            return databaseId(Output.of(databaseId));
        }

        /**
         * @param mode Connection mode to the connection pool Available modes:
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Connection mode to the connection pool Available modes:
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name Name of the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param size Size of the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the connection pool.
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param userId Database user authorized to connect to the pool, if none all the users are allowed.
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId Database user authorized to connect to the pool, if none all the users are allowed.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public PostgresSqlConnectionPoolArgs build() {
            if ($.clusterId == null) {
                throw new MissingRequiredPropertyException("PostgresSqlConnectionPoolArgs", "clusterId");
            }
            if ($.databaseId == null) {
                throw new MissingRequiredPropertyException("PostgresSqlConnectionPoolArgs", "databaseId");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("PostgresSqlConnectionPoolArgs", "mode");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("PostgresSqlConnectionPoolArgs", "serviceName");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("PostgresSqlConnectionPoolArgs", "size");
            }
            return $;
        }
    }

}
