// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetRancherCurrentState;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetRancherCurrentTask;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetRancherTargetSpec;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRancherResult {
    /**
     * @return Date of the managed Rancher service creation
     * 
     */
    private String createdAt;
    /**
     * @return Current configuration applied to the managed Rancher service
     * 
     */
    private GetRancherCurrentState currentState;
    /**
     * @return Asynchronous operations ongoing on the managed Rancher service
     * 
     */
    private List<GetRancherCurrentTask> currentTasks;
    /**
     * @return Unique identifier
     * 
     */
    private String id;
    /**
     * @return Project ID
     * 
     */
    private String projectId;
    /**
     * @return Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
     * 
     */
    private String resourceStatus;
    /**
     * @return Last target specification of the managed Rancher service
     * 
     */
    private GetRancherTargetSpec targetSpec;
    /**
     * @return Date of the last managed Rancher service update
     * 
     */
    private String updatedAt;

    private GetRancherResult() {}
    /**
     * @return Date of the managed Rancher service creation
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Current configuration applied to the managed Rancher service
     * 
     */
    public GetRancherCurrentState currentState() {
        return this.currentState;
    }
    /**
     * @return Asynchronous operations ongoing on the managed Rancher service
     * 
     */
    public List<GetRancherCurrentTask> currentTasks() {
        return this.currentTasks;
    }
    /**
     * @return Unique identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Project ID
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Reflects the readiness of the managed Rancher service. A new target specification request will be accepted only in `READY` status
     * 
     */
    public String resourceStatus() {
        return this.resourceStatus;
    }
    /**
     * @return Last target specification of the managed Rancher service
     * 
     */
    public GetRancherTargetSpec targetSpec() {
        return this.targetSpec;
    }
    /**
     * @return Date of the last managed Rancher service update
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRancherResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private GetRancherCurrentState currentState;
        private List<GetRancherCurrentTask> currentTasks;
        private String id;
        private String projectId;
        private String resourceStatus;
        private GetRancherTargetSpec targetSpec;
        private String updatedAt;
        public Builder() {}
        public Builder(GetRancherResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.currentState = defaults.currentState;
    	      this.currentTasks = defaults.currentTasks;
    	      this.id = defaults.id;
    	      this.projectId = defaults.projectId;
    	      this.resourceStatus = defaults.resourceStatus;
    	      this.targetSpec = defaults.targetSpec;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder currentState(GetRancherCurrentState currentState) {
            if (currentState == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "currentState");
            }
            this.currentState = currentState;
            return this;
        }
        @CustomType.Setter
        public Builder currentTasks(List<GetRancherCurrentTask> currentTasks) {
            if (currentTasks == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "currentTasks");
            }
            this.currentTasks = currentTasks;
            return this;
        }
        public Builder currentTasks(GetRancherCurrentTask... currentTasks) {
            return currentTasks(List.of(currentTasks));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceStatus(String resourceStatus) {
            if (resourceStatus == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "resourceStatus");
            }
            this.resourceStatus = resourceStatus;
            return this;
        }
        @CustomType.Setter
        public Builder targetSpec(GetRancherTargetSpec targetSpec) {
            if (targetSpec == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "targetSpec");
            }
            this.targetSpec = targetSpec;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetRancherResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetRancherResult build() {
            final var _resultValue = new GetRancherResult();
            _resultValue.createdAt = createdAt;
            _resultValue.currentState = currentState;
            _resultValue.currentTasks = currentTasks;
            _resultValue.id = id;
            _resultValue.projectId = projectId;
            _resultValue.resourceStatus = resourceStatus;
            _resultValue.targetSpec = targetSpec;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
