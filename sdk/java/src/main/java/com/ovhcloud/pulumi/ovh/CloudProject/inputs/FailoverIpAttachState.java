// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FailoverIpAttachState extends com.pulumi.resources.ResourceArgs {

    public static final FailoverIpAttachState Empty = new FailoverIpAttachState();

    /**
     * The IP block
     * * `continentCode` - The Ip continent
     * 
     */
    @Import(name="block")
    private @Nullable Output<String> block;

    /**
     * @return The IP block
     * * `continentCode` - The Ip continent
     * 
     */
    public Optional<Output<String>> block() {
        return Optional.ofNullable(this.block);
    }

    /**
     * Ip continent
     * 
     */
    @Import(name="continentCode")
    private @Nullable Output<String> continentCode;

    /**
     * @return Ip continent
     * 
     */
    public Optional<Output<String>> continentCode() {
        return Optional.ofNullable(this.continentCode);
    }

    /**
     * Ip location
     * 
     */
    @Import(name="geoLoc")
    private @Nullable Output<String> geoLoc;

    /**
     * @return Ip location
     * 
     */
    public Optional<Output<String>> geoLoc() {
        return Optional.ofNullable(this.geoLoc);
    }

    /**
     * The failover ip address to attach
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return The failover ip address to attach
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Current operation progress in percent
     * * `routedTo` - Instance where ip is routed to
     * 
     */
    @Import(name="progress")
    private @Nullable Output<Integer> progress;

    /**
     * @return Current operation progress in percent
     * * `routedTo` - Instance where ip is routed to
     * 
     */
    public Optional<Output<Integer>> progress() {
        return Optional.ofNullable(this.progress);
    }

    /**
     * The GUID of an instance to which the failover IP address is be attached
     * 
     */
    @Import(name="routedTo")
    private @Nullable Output<String> routedTo;

    /**
     * @return The GUID of an instance to which the failover IP address is be attached
     * 
     */
    public Optional<Output<String>> routedTo() {
        return Optional.ofNullable(this.routedTo);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Ip status, can be `ok` or `operationPending`
     * * `subType` - IP sub type, can be `cloud` or `ovh`
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Ip status, can be `ok` or `operationPending`
     * * `subType` - IP sub type, can be `cloud` or `ovh`
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * IP sub type
     * 
     */
    @Import(name="subType")
    private @Nullable Output<String> subType;

    /**
     * @return IP sub type
     * 
     */
    public Optional<Output<String>> subType() {
        return Optional.ofNullable(this.subType);
    }

    private FailoverIpAttachState() {}

    private FailoverIpAttachState(FailoverIpAttachState $) {
        this.block = $.block;
        this.continentCode = $.continentCode;
        this.geoLoc = $.geoLoc;
        this.ip = $.ip;
        this.progress = $.progress;
        this.routedTo = $.routedTo;
        this.serviceName = $.serviceName;
        this.status = $.status;
        this.subType = $.subType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FailoverIpAttachState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FailoverIpAttachState $;

        public Builder() {
            $ = new FailoverIpAttachState();
        }

        public Builder(FailoverIpAttachState defaults) {
            $ = new FailoverIpAttachState(Objects.requireNonNull(defaults));
        }

        /**
         * @param block The IP block
         * * `continentCode` - The Ip continent
         * 
         * @return builder
         * 
         */
        public Builder block(@Nullable Output<String> block) {
            $.block = block;
            return this;
        }

        /**
         * @param block The IP block
         * * `continentCode` - The Ip continent
         * 
         * @return builder
         * 
         */
        public Builder block(String block) {
            return block(Output.of(block));
        }

        /**
         * @param continentCode Ip continent
         * 
         * @return builder
         * 
         */
        public Builder continentCode(@Nullable Output<String> continentCode) {
            $.continentCode = continentCode;
            return this;
        }

        /**
         * @param continentCode Ip continent
         * 
         * @return builder
         * 
         */
        public Builder continentCode(String continentCode) {
            return continentCode(Output.of(continentCode));
        }

        /**
         * @param geoLoc Ip location
         * 
         * @return builder
         * 
         */
        public Builder geoLoc(@Nullable Output<String> geoLoc) {
            $.geoLoc = geoLoc;
            return this;
        }

        /**
         * @param geoLoc Ip location
         * 
         * @return builder
         * 
         */
        public Builder geoLoc(String geoLoc) {
            return geoLoc(Output.of(geoLoc));
        }

        /**
         * @param ip The failover ip address to attach
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip The failover ip address to attach
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param progress Current operation progress in percent
         * * `routedTo` - Instance where ip is routed to
         * 
         * @return builder
         * 
         */
        public Builder progress(@Nullable Output<Integer> progress) {
            $.progress = progress;
            return this;
        }

        /**
         * @param progress Current operation progress in percent
         * * `routedTo` - Instance where ip is routed to
         * 
         * @return builder
         * 
         */
        public Builder progress(Integer progress) {
            return progress(Output.of(progress));
        }

        /**
         * @param routedTo The GUID of an instance to which the failover IP address is be attached
         * 
         * @return builder
         * 
         */
        public Builder routedTo(@Nullable Output<String> routedTo) {
            $.routedTo = routedTo;
            return this;
        }

        /**
         * @param routedTo The GUID of an instance to which the failover IP address is be attached
         * 
         * @return builder
         * 
         */
        public Builder routedTo(String routedTo) {
            return routedTo(Output.of(routedTo));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status Ip status, can be `ok` or `operationPending`
         * * `subType` - IP sub type, can be `cloud` or `ovh`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Ip status, can be `ok` or `operationPending`
         * * `subType` - IP sub type, can be `cloud` or `ovh`
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subType IP sub type
         * 
         * @return builder
         * 
         */
        public Builder subType(@Nullable Output<String> subType) {
            $.subType = subType;
            return this;
        }

        /**
         * @param subType IP sub type
         * 
         * @return builder
         * 
         */
        public Builder subType(String subType) {
            return subType(Output.of(subType));
        }

        public FailoverIpAttachState build() {
            return $;
        }
    }

}
