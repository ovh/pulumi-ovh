// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Okms;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final CredentialArgs Empty = new CredentialArgs();

    /**
     * (String) Type of the certificate key algorithm (`ECDSA` or `RSA`).
     * 
     */
    @Import(name="certificateType")
    private @Nullable Output<String> certificateType;

    /**
     * @return (String) Type of the certificate key algorithm (`ECDSA` or `RSA`).
     * 
     */
    public Optional<Output<String>> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * Valid Certificate Signing Request
     * 
     */
    @Import(name="csr")
    private @Nullable Output<String> csr;

    /**
     * @return Valid Certificate Signing Request
     * 
     */
    public Optional<Output<String>> csr() {
        return Optional.ofNullable(this.csr);
    }

    /**
     * Description of the credential (max 200)
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the credential (max 200)
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of identity URNs associated with the credential (max 25)
     * 
     */
    @Import(name="identityUrns", required=true)
    private Output<List<String>> identityUrns;

    /**
     * @return List of identity URNs associated with the credential (max 25)
     * 
     */
    public Output<List<String>> identityUrns() {
        return this.identityUrns;
    }

    /**
     * Name of the credential (max 50)
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the credential (max 50)
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Okms ID
     * 
     */
    @Import(name="okmsId", required=true)
    private Output<String> okmsId;

    /**
     * @return Okms ID
     * 
     */
    public Output<String> okmsId() {
        return this.okmsId;
    }

    /**
     * Validity in days (default 365, max 365)
     * 
     */
    @Import(name="validity")
    private @Nullable Output<Double> validity;

    /**
     * @return Validity in days (default 365, max 365)
     * 
     */
    public Optional<Output<Double>> validity() {
        return Optional.ofNullable(this.validity);
    }

    private CredentialArgs() {}

    private CredentialArgs(CredentialArgs $) {
        this.certificateType = $.certificateType;
        this.csr = $.csr;
        this.description = $.description;
        this.identityUrns = $.identityUrns;
        this.name = $.name;
        this.okmsId = $.okmsId;
        this.validity = $.validity;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CredentialArgs $;

        public Builder() {
            $ = new CredentialArgs();
        }

        public Builder(CredentialArgs defaults) {
            $ = new CredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateType (String) Type of the certificate key algorithm (`ECDSA` or `RSA`).
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType (String) Type of the certificate key algorithm (`ECDSA` or `RSA`).
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param csr Valid Certificate Signing Request
         * 
         * @return builder
         * 
         */
        public Builder csr(@Nullable Output<String> csr) {
            $.csr = csr;
            return this;
        }

        /**
         * @param csr Valid Certificate Signing Request
         * 
         * @return builder
         * 
         */
        public Builder csr(String csr) {
            return csr(Output.of(csr));
        }

        /**
         * @param description Description of the credential (max 200)
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the credential (max 200)
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param identityUrns List of identity URNs associated with the credential (max 25)
         * 
         * @return builder
         * 
         */
        public Builder identityUrns(Output<List<String>> identityUrns) {
            $.identityUrns = identityUrns;
            return this;
        }

        /**
         * @param identityUrns List of identity URNs associated with the credential (max 25)
         * 
         * @return builder
         * 
         */
        public Builder identityUrns(List<String> identityUrns) {
            return identityUrns(Output.of(identityUrns));
        }

        /**
         * @param identityUrns List of identity URNs associated with the credential (max 25)
         * 
         * @return builder
         * 
         */
        public Builder identityUrns(String... identityUrns) {
            return identityUrns(List.of(identityUrns));
        }

        /**
         * @param name Name of the credential (max 50)
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the credential (max 50)
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param okmsId Okms ID
         * 
         * @return builder
         * 
         */
        public Builder okmsId(Output<String> okmsId) {
            $.okmsId = okmsId;
            return this;
        }

        /**
         * @param okmsId Okms ID
         * 
         * @return builder
         * 
         */
        public Builder okmsId(String okmsId) {
            return okmsId(Output.of(okmsId));
        }

        /**
         * @param validity Validity in days (default 365, max 365)
         * 
         * @return builder
         * 
         */
        public Builder validity(@Nullable Output<Double> validity) {
            $.validity = validity;
            return this;
        }

        /**
         * @param validity Validity in days (default 365, max 365)
         * 
         * @return builder
         * 
         */
        public Builder validity(Double validity) {
            return validity(Output.of(validity));
        }

        public CredentialArgs build() {
            if ($.identityUrns == null) {
                throw new MissingRequiredPropertyException("CredentialArgs", "identityUrns");
            }
            if ($.okmsId == null) {
                throw new MissingRequiredPropertyException("CredentialArgs", "okmsId");
            }
            return $;
        }
    }

}
