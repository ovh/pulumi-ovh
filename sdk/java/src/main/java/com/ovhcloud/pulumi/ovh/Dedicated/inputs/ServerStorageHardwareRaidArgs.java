// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Dedicated.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerStorageHardwareRaidArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServerStorageHardwareRaidArgs Empty = new ServerStorageHardwareRaidArgs();

    /**
     * Number of arrays (default is 1)
     * 
     */
    @Import(name="arrays")
    private @Nullable Output<Double> arrays;

    /**
     * @return Number of arrays (default is 1)
     * 
     */
    public Optional<Output<Double>> arrays() {
        return Optional.ofNullable(this.arrays);
    }

    /**
     * Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
     * 
     */
    @Import(name="disks")
    private @Nullable Output<Double> disks;

    /**
     * @return Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
     * 
     */
    public Optional<Output<Double>> disks() {
        return Optional.ofNullable(this.disks);
    }

    /**
     * Hardware raid type (default is 1)
     * 
     */
    @Import(name="raidLevel")
    private @Nullable Output<Double> raidLevel;

    /**
     * @return Hardware raid type (default is 1)
     * 
     */
    public Optional<Output<Double>> raidLevel() {
        return Optional.ofNullable(this.raidLevel);
    }

    /**
     * Number of disks in the disk group involved in the spare (default is 0)
     * 
     */
    @Import(name="spares")
    private @Nullable Output<Double> spares;

    /**
     * @return Number of disks in the disk group involved in the spare (default is 0)
     * 
     */
    public Optional<Output<Double>> spares() {
        return Optional.ofNullable(this.spares);
    }

    private ServerStorageHardwareRaidArgs() {}

    private ServerStorageHardwareRaidArgs(ServerStorageHardwareRaidArgs $) {
        this.arrays = $.arrays;
        this.disks = $.disks;
        this.raidLevel = $.raidLevel;
        this.spares = $.spares;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerStorageHardwareRaidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerStorageHardwareRaidArgs $;

        public Builder() {
            $ = new ServerStorageHardwareRaidArgs();
        }

        public Builder(ServerStorageHardwareRaidArgs defaults) {
            $ = new ServerStorageHardwareRaidArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arrays Number of arrays (default is 1)
         * 
         * @return builder
         * 
         */
        public Builder arrays(@Nullable Output<Double> arrays) {
            $.arrays = arrays;
            return this;
        }

        /**
         * @param arrays Number of arrays (default is 1)
         * 
         * @return builder
         * 
         */
        public Builder arrays(Double arrays) {
            return arrays(Output.of(arrays));
        }

        /**
         * @param disks Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
         * 
         * @return builder
         * 
         */
        public Builder disks(@Nullable Output<Double> disks) {
            $.disks = disks;
            return this;
        }

        /**
         * @param disks Total number of disks in the disk group involved in the hardware raid configuration (all disks of the disk group by default)
         * 
         * @return builder
         * 
         */
        public Builder disks(Double disks) {
            return disks(Output.of(disks));
        }

        /**
         * @param raidLevel Hardware raid type (default is 1)
         * 
         * @return builder
         * 
         */
        public Builder raidLevel(@Nullable Output<Double> raidLevel) {
            $.raidLevel = raidLevel;
            return this;
        }

        /**
         * @param raidLevel Hardware raid type (default is 1)
         * 
         * @return builder
         * 
         */
        public Builder raidLevel(Double raidLevel) {
            return raidLevel(Output.of(raidLevel));
        }

        /**
         * @param spares Number of disks in the disk group involved in the spare (default is 0)
         * 
         * @return builder
         * 
         */
        public Builder spares(@Nullable Output<Double> spares) {
            $.spares = spares;
            return this;
        }

        /**
         * @param spares Number of disks in the disk group involved in the spare (default is 0)
         * 
         * @return builder
         * 
         */
        public Builder spares(Double spares) {
            return spares(Output.of(spares));
        }

        public ServerStorageHardwareRaidArgs build() {
            return $;
        }
    }

}
