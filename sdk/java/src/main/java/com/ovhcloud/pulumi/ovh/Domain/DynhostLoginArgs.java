// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DynhostLoginArgs extends com.pulumi.resources.ResourceArgs {

    public static final DynhostLoginArgs Empty = new DynhostLoginArgs();

    /**
     * Suffix that will be concatenated to the zoneName to create the login
     * 
     */
    @Import(name="loginSuffix", required=true)
    private Output<String> loginSuffix;

    /**
     * @return Suffix that will be concatenated to the zoneName to create the login
     * 
     */
    public Output<String> loginSuffix() {
        return this.loginSuffix;
    }

    /**
     * Password of the login
     * 
     */
    @Import(name="password", required=true)
    private Output<String> password;

    /**
     * @return Password of the login
     * 
     */
    public Output<String> password() {
        return this.password;
    }

    /**
     * Subdomain that the login will be allowed to update (use * to allow all)
     * 
     */
    @Import(name="subDomain", required=true)
    private Output<String> subDomain;

    /**
     * @return Subdomain that the login will be allowed to update (use * to allow all)
     * 
     */
    public Output<String> subDomain() {
        return this.subDomain;
    }

    /**
     * Zone name
     * 
     */
    @Import(name="zoneName", required=true)
    private Output<String> zoneName;

    /**
     * @return Zone name
     * 
     */
    public Output<String> zoneName() {
        return this.zoneName;
    }

    private DynhostLoginArgs() {}

    private DynhostLoginArgs(DynhostLoginArgs $) {
        this.loginSuffix = $.loginSuffix;
        this.password = $.password;
        this.subDomain = $.subDomain;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DynhostLoginArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DynhostLoginArgs $;

        public Builder() {
            $ = new DynhostLoginArgs();
        }

        public Builder(DynhostLoginArgs defaults) {
            $ = new DynhostLoginArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param loginSuffix Suffix that will be concatenated to the zoneName to create the login
         * 
         * @return builder
         * 
         */
        public Builder loginSuffix(Output<String> loginSuffix) {
            $.loginSuffix = loginSuffix;
            return this;
        }

        /**
         * @param loginSuffix Suffix that will be concatenated to the zoneName to create the login
         * 
         * @return builder
         * 
         */
        public Builder loginSuffix(String loginSuffix) {
            return loginSuffix(Output.of(loginSuffix));
        }

        /**
         * @param password Password of the login
         * 
         * @return builder
         * 
         */
        public Builder password(Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password Password of the login
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param subDomain Subdomain that the login will be allowed to update (use * to allow all)
         * 
         * @return builder
         * 
         */
        public Builder subDomain(Output<String> subDomain) {
            $.subDomain = subDomain;
            return this;
        }

        /**
         * @param subDomain Subdomain that the login will be allowed to update (use * to allow all)
         * 
         * @return builder
         * 
         */
        public Builder subDomain(String subDomain) {
            return subDomain(Output.of(subDomain));
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName Zone name
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public DynhostLoginArgs build() {
            if ($.loginSuffix == null) {
                throw new MissingRequiredPropertyException("DynhostLoginArgs", "loginSuffix");
            }
            if ($.password == null) {
                throw new MissingRequiredPropertyException("DynhostLoginArgs", "password");
            }
            if ($.subDomain == null) {
                throw new MissingRequiredPropertyException("DynhostLoginArgs", "subDomain");
            }
            if ($.zoneName == null) {
                throw new MissingRequiredPropertyException("DynhostLoginArgs", "zoneName");
            }
            return $;
        }
    }

}
