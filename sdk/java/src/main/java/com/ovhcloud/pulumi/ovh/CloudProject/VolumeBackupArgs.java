// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeBackupArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeBackupArgs Empty = new VolumeBackupArgs();

    /**
     * name of the backup
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return name of the backup
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName", required=true)
    private Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Output<String> regionName() {
        return this.regionName;
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * ID of the volume to backup
     * 
     */
    @Import(name="volumeId", required=true)
    private Output<String> volumeId;

    /**
     * @return ID of the volume to backup
     * 
     */
    public Output<String> volumeId() {
        return this.volumeId;
    }

    private VolumeBackupArgs() {}

    private VolumeBackupArgs(VolumeBackupArgs $) {
        this.name = $.name;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
        this.volumeId = $.volumeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeBackupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeBackupArgs $;

        public Builder() {
            $ = new VolumeBackupArgs();
        }

        public Builder(VolumeBackupArgs defaults) {
            $ = new VolumeBackupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name name of the backup
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name name of the backup
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param volumeId ID of the volume to backup
         * 
         * @return builder
         * 
         */
        public Builder volumeId(Output<String> volumeId) {
            $.volumeId = volumeId;
            return this;
        }

        /**
         * @param volumeId ID of the volume to backup
         * 
         * @return builder
         * 
         */
        public Builder volumeId(String volumeId) {
            return volumeId(Output.of(volumeId));
        }

        public VolumeBackupArgs build() {
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("VolumeBackupArgs", "regionName");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("VolumeBackupArgs", "serviceName");
            }
            if ($.volumeId == null) {
                throw new MissingRequiredPropertyException("VolumeBackupArgs", "volumeId");
            }
            return $;
        }
    }

}
