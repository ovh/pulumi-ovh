// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.outputs;

import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetStoragesContainerEncryption;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetStoragesContainerObject;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetStoragesContainerReplication;
import com.ovhcloud.pulumi.ovh.CloudProject.outputs.GetStoragesContainerVersioning;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStoragesContainer {
    /**
     * @return The date and timestamp when the resource was created
     * 
     */
    private String createdAt;
    /**
     * @return Encryption configuration
     * 
     */
    private GetStoragesContainerEncryption encryption;
    /**
     * @return Container name
     * 
     */
    private String name;
    /**
     * @return Container objects
     * 
     */
    private List<GetStoragesContainerObject> objects;
    /**
     * @return Container total objects count
     * 
     */
    private Double objectsCount;
    /**
     * @return Container total objects size (bytes)
     * 
     */
    private Double objectsSize;
    /**
     * @return Container owner user ID
     * 
     */
    private Double ownerId;
    /**
     * @return Container region
     * 
     */
    private String region;
    /**
     * @return Replication configuration
     * 
     */
    private GetStoragesContainerReplication replication;
    /**
     * @return Container tags
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Versioning configuration
     * 
     */
    private GetStoragesContainerVersioning versioning;
    /**
     * @return Container virtual host
     * 
     */
    private String virtualHost;

    private GetStoragesContainer() {}
    /**
     * @return The date and timestamp when the resource was created
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Encryption configuration
     * 
     */
    public GetStoragesContainerEncryption encryption() {
        return this.encryption;
    }
    /**
     * @return Container name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Container objects
     * 
     */
    public List<GetStoragesContainerObject> objects() {
        return this.objects;
    }
    /**
     * @return Container total objects count
     * 
     */
    public Double objectsCount() {
        return this.objectsCount;
    }
    /**
     * @return Container total objects size (bytes)
     * 
     */
    public Double objectsSize() {
        return this.objectsSize;
    }
    /**
     * @return Container owner user ID
     * 
     */
    public Double ownerId() {
        return this.ownerId;
    }
    /**
     * @return Container region
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return Replication configuration
     * 
     */
    public GetStoragesContainerReplication replication() {
        return this.replication;
    }
    /**
     * @return Container tags
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Versioning configuration
     * 
     */
    public GetStoragesContainerVersioning versioning() {
        return this.versioning;
    }
    /**
     * @return Container virtual host
     * 
     */
    public String virtualHost() {
        return this.virtualHost;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStoragesContainer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private GetStoragesContainerEncryption encryption;
        private String name;
        private List<GetStoragesContainerObject> objects;
        private Double objectsCount;
        private Double objectsSize;
        private Double ownerId;
        private String region;
        private GetStoragesContainerReplication replication;
        private Map<String,String> tags;
        private GetStoragesContainerVersioning versioning;
        private String virtualHost;
        public Builder() {}
        public Builder(GetStoragesContainer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.encryption = defaults.encryption;
    	      this.name = defaults.name;
    	      this.objects = defaults.objects;
    	      this.objectsCount = defaults.objectsCount;
    	      this.objectsSize = defaults.objectsSize;
    	      this.ownerId = defaults.ownerId;
    	      this.region = defaults.region;
    	      this.replication = defaults.replication;
    	      this.tags = defaults.tags;
    	      this.versioning = defaults.versioning;
    	      this.virtualHost = defaults.virtualHost;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder encryption(GetStoragesContainerEncryption encryption) {
            if (encryption == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "encryption");
            }
            this.encryption = encryption;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objects(List<GetStoragesContainerObject> objects) {
            if (objects == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "objects");
            }
            this.objects = objects;
            return this;
        }
        public Builder objects(GetStoragesContainerObject... objects) {
            return objects(List.of(objects));
        }
        @CustomType.Setter
        public Builder objectsCount(Double objectsCount) {
            if (objectsCount == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "objectsCount");
            }
            this.objectsCount = objectsCount;
            return this;
        }
        @CustomType.Setter
        public Builder objectsSize(Double objectsSize) {
            if (objectsSize == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "objectsSize");
            }
            this.objectsSize = objectsSize;
            return this;
        }
        @CustomType.Setter
        public Builder ownerId(Double ownerId) {
            if (ownerId == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "ownerId");
            }
            this.ownerId = ownerId;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder replication(GetStoragesContainerReplication replication) {
            if (replication == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "replication");
            }
            this.replication = replication;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder versioning(GetStoragesContainerVersioning versioning) {
            if (versioning == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "versioning");
            }
            this.versioning = versioning;
            return this;
        }
        @CustomType.Setter
        public Builder virtualHost(String virtualHost) {
            if (virtualHost == null) {
              throw new MissingRequiredPropertyException("GetStoragesContainer", "virtualHost");
            }
            this.virtualHost = virtualHost;
            return this;
        }
        public GetStoragesContainer build() {
            final var _resultValue = new GetStoragesContainer();
            _resultValue.createdAt = createdAt;
            _resultValue.encryption = encryption;
            _resultValue.name = name;
            _resultValue.objects = objects;
            _resultValue.objectsCount = objectsCount;
            _resultValue.objectsSize = objectsSize;
            _resultValue.ownerId = ownerId;
            _resultValue.region = region;
            _resultValue.replication = replication;
            _resultValue.tags = tags;
            _resultValue.versioning = versioning;
            _resultValue.virtualHost = virtualHost;
            return _resultValue;
        }
    }
}
