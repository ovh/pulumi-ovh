// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStorageArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStorageArgs Empty = new GetStorageArgs();

    /**
     * Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Double> limit;

    /**
     * @return Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    public Optional<Output<Double>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Key to start with when listing objects
     * 
     */
    @Import(name="marker")
    private @Nullable Output<String> marker;

    /**
     * @return Key to start with when listing objects
     * 
     */
    public Optional<Output<String>> marker() {
        return Optional.ofNullable(this.marker);
    }

    /**
     * Name
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Name
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * List objects whose key begins with this prefix
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return List objects whose key begins with this prefix
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName", required=true)
    private Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Output<String> regionName() {
        return this.regionName;
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    private GetStorageArgs() {}

    private GetStorageArgs(GetStorageArgs $) {
        this.limit = $.limit;
        this.marker = $.marker;
        this.name = $.name;
        this.prefix = $.prefix;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStorageArgs $;

        public Builder() {
            $ = new GetStorageArgs();
        }

        public Builder(GetStorageArgs defaults) {
            $ = new GetStorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param limit Limit the number of objects returned (1000 maximum, defaults to 1000)
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Double> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Limit the number of objects returned (1000 maximum, defaults to 1000)
         * 
         * @return builder
         * 
         */
        public Builder limit(Double limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param marker Key to start with when listing objects
         * 
         * @return builder
         * 
         */
        public Builder marker(@Nullable Output<String> marker) {
            $.marker = marker;
            return this;
        }

        /**
         * @param marker Key to start with when listing objects
         * 
         * @return builder
         * 
         */
        public Builder marker(String marker) {
            return marker(Output.of(marker));
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param prefix List objects whose key begins with this prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix List objects whose key begins with this prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public GetStorageArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetStorageArgs", "name");
            }
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("GetStorageArgs", "regionName");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("GetStorageArgs", "serviceName");
            }
            return $;
        }
    }

}
