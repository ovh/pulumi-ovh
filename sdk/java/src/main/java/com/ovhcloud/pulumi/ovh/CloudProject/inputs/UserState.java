// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.UserRoleArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * the date the user was created.
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return the date the user was created.
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * A description associated with the user.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A description associated with the user.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * a convenient map representing an openstack_rc file. Note: no password nor sensitive token is set in this map.
     * 
     */
    @Import(name="openstackRc")
    private @Nullable Output<Map<String,String>> openstackRc;

    /**
     * @return a convenient map representing an openstack_rc file. Note: no password nor sensitive token is set in this map.
     * 
     */
    public Optional<Output<Map<String,String>>> openstackRc() {
        return Optional.ofNullable(this.openstackRc);
    }

    /**
     * (Sensitive) the password generated for the user. The password can be used with the Openstack API. This attribute is sensitive and will only be retrieve once during creation.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return (Sensitive) the password generated for the user. The password can be used with the Openstack API. This attribute is sensitive and will only be retrieve once during creation.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The name of a role. See `role_names`.
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return The name of a role. See `role_names`.
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    /**
     * A list of role names. Values can be:
     * - administrator,
     * - ai_training_operator
     * - ai_training_read
     * - authentication
     * - backup_operator
     * - compute_operator
     * - image_operator
     * - infrastructure_supervisor
     * - network_operator
     * - network_security_operator
     * - objectstore_operator
     * - volume_operator
     * 
     */
    @Import(name="roleNames")
    private @Nullable Output<List<String>> roleNames;

    /**
     * @return A list of role names. Values can be:
     * - administrator,
     * - ai_training_operator
     * - ai_training_read
     * - authentication
     * - backup_operator
     * - compute_operator
     * - image_operator
     * - infrastructure_supervisor
     * - network_operator
     * - network_security_operator
     * - objectstore_operator
     * - volume_operator
     * 
     */
    public Optional<Output<List<String>>> roleNames() {
        return Optional.ofNullable(this.roleNames);
    }

    /**
     * A list of roles associated with the user.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<UserRoleArgs>> roles;

    /**
     * @return A list of roles associated with the user.
     * 
     */
    public Optional<Output<List<UserRoleArgs>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * the status of the user. should be normally set to &#39;ok&#39;.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return the status of the user. should be normally set to &#39;ok&#39;.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * the username generated for the user. This username can be used with the Openstack API.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return the username generated for the user. This username can be used with the Openstack API.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.creationDate = $.creationDate;
        this.description = $.description;
        this.openstackRc = $.openstackRc;
        this.password = $.password;
        this.roleName = $.roleName;
        this.roleNames = $.roleNames;
        this.roles = $.roles;
        this.serviceName = $.serviceName;
        this.status = $.status;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationDate the date the user was created.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate the date the user was created.
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param description A description associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A description associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param openstackRc a convenient map representing an openstack_rc file. Note: no password nor sensitive token is set in this map.
         * 
         * @return builder
         * 
         */
        public Builder openstackRc(@Nullable Output<Map<String,String>> openstackRc) {
            $.openstackRc = openstackRc;
            return this;
        }

        /**
         * @param openstackRc a convenient map representing an openstack_rc file. Note: no password nor sensitive token is set in this map.
         * 
         * @return builder
         * 
         */
        public Builder openstackRc(Map<String,String> openstackRc) {
            return openstackRc(Output.of(openstackRc));
        }

        /**
         * @param password (Sensitive) the password generated for the user. The password can be used with the Openstack API. This attribute is sensitive and will only be retrieve once during creation.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Sensitive) the password generated for the user. The password can be used with the Openstack API. This attribute is sensitive and will only be retrieve once during creation.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param roleName The name of a role. See `role_names`.
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName The name of a role. See `role_names`.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        /**
         * @param roleNames A list of role names. Values can be:
         * - administrator,
         * - ai_training_operator
         * - ai_training_read
         * - authentication
         * - backup_operator
         * - compute_operator
         * - image_operator
         * - infrastructure_supervisor
         * - network_operator
         * - network_security_operator
         * - objectstore_operator
         * - volume_operator
         * 
         * @return builder
         * 
         */
        public Builder roleNames(@Nullable Output<List<String>> roleNames) {
            $.roleNames = roleNames;
            return this;
        }

        /**
         * @param roleNames A list of role names. Values can be:
         * - administrator,
         * - ai_training_operator
         * - ai_training_read
         * - authentication
         * - backup_operator
         * - compute_operator
         * - image_operator
         * - infrastructure_supervisor
         * - network_operator
         * - network_security_operator
         * - objectstore_operator
         * - volume_operator
         * 
         * @return builder
         * 
         */
        public Builder roleNames(List<String> roleNames) {
            return roleNames(Output.of(roleNames));
        }

        /**
         * @param roleNames A list of role names. Values can be:
         * - administrator,
         * - ai_training_operator
         * - ai_training_read
         * - authentication
         * - backup_operator
         * - compute_operator
         * - image_operator
         * - infrastructure_supervisor
         * - network_operator
         * - network_security_operator
         * - objectstore_operator
         * - volume_operator
         * 
         * @return builder
         * 
         */
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }

        /**
         * @param roles A list of roles associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<UserRoleArgs>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles A list of roles associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<UserRoleArgs> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles A list of roles associated with the user.
         * 
         * @return builder
         * 
         */
        public Builder roles(UserRoleArgs... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status the status of the user. should be normally set to &#39;ok&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status the status of the user. should be normally set to &#39;ok&#39;.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param username the username generated for the user. This username can be used with the Openstack API.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username the username generated for the user. This username can be used with the Openstack API.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public UserState build() {
            return $;
        }
    }

}
