// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.ContainerRegistryPlanArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ContainerRegistryState extends com.pulumi.resources.ResourceArgs {

    public static final ContainerRegistryState Empty = new ContainerRegistryState();

    /**
     * Plan creation date
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Plan creation date
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Registry name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Registry name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Plan ID of the registry
     * 
     */
    @Import(name="planId")
    private @Nullable Output<String> planId;

    /**
     * @return Plan ID of the registry
     * 
     */
    public Optional<Output<String>> planId() {
        return Optional.ofNullable(this.planId);
    }

    /**
     * Plan of the registry
     * 
     */
    @Import(name="plans")
    private @Nullable Output<List<ContainerRegistryPlanArgs>> plans;

    /**
     * @return Plan of the registry
     * 
     */
    public Optional<Output<List<ContainerRegistryPlanArgs>>> plans() {
        return Optional.ofNullable(this.plans);
    }

    /**
     * Project ID of your registry
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Project ID of your registry
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Region of the registry
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the registry
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Current size of the registry (bytes)
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return Current size of the registry (bytes)
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * Registry status
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Registry status
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Registry last update date
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Registry last update date
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * Access url of the registry
     * 
     */
    @Import(name="url")
    private @Nullable Output<String> url;

    /**
     * @return Access url of the registry
     * 
     */
    public Optional<Output<String>> url() {
        return Optional.ofNullable(this.url);
    }

    /**
     * Version of your registry
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return Version of your registry
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private ContainerRegistryState() {}

    private ContainerRegistryState(ContainerRegistryState $) {
        this.createdAt = $.createdAt;
        this.name = $.name;
        this.planId = $.planId;
        this.plans = $.plans;
        this.projectId = $.projectId;
        this.region = $.region;
        this.serviceName = $.serviceName;
        this.size = $.size;
        this.status = $.status;
        this.updatedAt = $.updatedAt;
        this.url = $.url;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ContainerRegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ContainerRegistryState $;

        public Builder() {
            $ = new ContainerRegistryState();
        }

        public Builder(ContainerRegistryState defaults) {
            $ = new ContainerRegistryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Plan creation date
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Plan creation date
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param name Registry name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Registry name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param planId Plan ID of the registry
         * 
         * @return builder
         * 
         */
        public Builder planId(@Nullable Output<String> planId) {
            $.planId = planId;
            return this;
        }

        /**
         * @param planId Plan ID of the registry
         * 
         * @return builder
         * 
         */
        public Builder planId(String planId) {
            return planId(Output.of(planId));
        }

        /**
         * @param plans Plan of the registry
         * 
         * @return builder
         * 
         */
        public Builder plans(@Nullable Output<List<ContainerRegistryPlanArgs>> plans) {
            $.plans = plans;
            return this;
        }

        /**
         * @param plans Plan of the registry
         * 
         * @return builder
         * 
         */
        public Builder plans(List<ContainerRegistryPlanArgs> plans) {
            return plans(Output.of(plans));
        }

        /**
         * @param plans Plan of the registry
         * 
         * @return builder
         * 
         */
        public Builder plans(ContainerRegistryPlanArgs... plans) {
            return plans(List.of(plans));
        }

        /**
         * @param projectId Project ID of your registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID of your registry
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param region Region of the registry
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the registry
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param size Current size of the registry (bytes)
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Current size of the registry (bytes)
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param status Registry status
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Registry status
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param updatedAt Registry last update date
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Registry last update date
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param url Access url of the registry
         * 
         * @return builder
         * 
         */
        public Builder url(@Nullable Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url Access url of the registry
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        /**
         * @param version Version of your registry
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Version of your registry
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public ContainerRegistryState build() {
            return $;
        }
    }

}
