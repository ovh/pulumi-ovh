// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Vps.inputs;

import com.ovhcloud.pulumi.ovh.Vps.inputs.VpsIamArgs;
import com.ovhcloud.pulumi.ovh.Vps.inputs.VpsModelArgs;
import com.ovhcloud.pulumi.ovh.Vps.inputs.VpsOrderArgs;
import com.ovhcloud.pulumi.ovh.Vps.inputs.VpsPlanArgs;
import com.ovhcloud.pulumi.ovh.Vps.inputs.VpsPlanOptionArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpsState extends com.pulumi.resources.ResourceArgs {

    public static final VpsState Empty = new VpsState();

    /**
     * VPS cluster
     * 
     */
    @Import(name="cluster")
    private @Nullable Output<String> cluster;

    /**
     * @return VPS cluster
     * 
     */
    public Optional<Output<String>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    /**
     * Custom display name
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return Custom display name
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * IAM resource information
     * 
     */
    @Import(name="iam")
    private @Nullable Output<VpsIamArgs> iam;

    /**
     * @return IAM resource information
     * 
     */
    public Optional<Output<VpsIamArgs>> iam() {
        return Optional.ofNullable(this.iam);
    }

    /**
     * KVM keyboard layout on VPS Cloud
     * 
     */
    @Import(name="keymap")
    private @Nullable Output<String> keymap;

    /**
     * @return KVM keyboard layout on VPS Cloud
     * 
     */
    public Optional<Output<String>> keymap() {
        return Optional.ofNullable(this.keymap);
    }

    /**
     * RAM of this VPS
     * 
     */
    @Import(name="memoryLimit")
    private @Nullable Output<Double> memoryLimit;

    /**
     * @return RAM of this VPS
     * 
     */
    public Optional<Output<Double>> memoryLimit() {
        return Optional.ofNullable(this.memoryLimit);
    }

    /**
     * Structure describing characteristics of a VPS model
     * 
     */
    @Import(name="model")
    private @Nullable Output<VpsModelArgs> model;

    /**
     * @return Structure describing characteristics of a VPS model
     * 
     */
    public Optional<Output<VpsModelArgs>> model() {
        return Optional.ofNullable(this.model);
    }

    /**
     * IP blocks for OVH monitoring servers
     * 
     */
    @Import(name="monitoringIpBlocks")
    private @Nullable Output<List<String>> monitoringIpBlocks;

    /**
     * @return IP blocks for OVH monitoring servers
     * 
     */
    public Optional<Output<List<String>>> monitoringIpBlocks() {
        return Optional.ofNullable(this.monitoringIpBlocks);
    }

    /**
     * Name of the VPS
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the VPS
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * VPS netboot mode (local┃rescue)
     * 
     */
    @Import(name="netbootMode")
    private @Nullable Output<String> netbootMode;

    /**
     * @return VPS netboot mode (local┃rescue)
     * 
     */
    public Optional<Output<String>> netbootMode() {
        return Optional.ofNullable(this.netbootMode);
    }

    /**
     * All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
     * 
     */
    @Import(name="offerType")
    private @Nullable Output<String> offerType;

    /**
     * @return All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
     * 
     */
    public Optional<Output<String>> offerType() {
        return Optional.ofNullable(this.offerType);
    }

    /**
     * Details about an Order
     * 
     */
    @Import(name="order")
    private @Nullable Output<VpsOrderArgs> order;

    /**
     * @return Details about an Order
     * 
     */
    public Optional<Output<VpsOrderArgs>> order() {
        return Optional.ofNullable(this.order);
    }

    /**
     * OVHcloud Subsidiary. Country of OVHcloud legal entity you&#39;ll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&amp;branch=v1#get-/me)
     * 
     */
    @Import(name="ovhSubsidiary")
    private @Nullable Output<String> ovhSubsidiary;

    /**
     * @return OVHcloud Subsidiary. Country of OVHcloud legal entity you&#39;ll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&amp;branch=v1#get-/me)
     * 
     */
    public Optional<Output<String>> ovhSubsidiary() {
        return Optional.ofNullable(this.ovhSubsidiary);
    }

    /**
     * Product Plan to order
     * 
     */
    @Import(name="planOptions")
    private @Nullable Output<List<VpsPlanOptionArgs>> planOptions;

    /**
     * @return Product Plan to order
     * 
     */
    public Optional<Output<List<VpsPlanOptionArgs>>> planOptions() {
        return Optional.ofNullable(this.planOptions);
    }

    /**
     * Product Plan to order
     * 
     */
    @Import(name="plans")
    private @Nullable Output<List<VpsPlanArgs>> plans;

    /**
     * @return Product Plan to order
     * 
     */
    public Optional<Output<List<VpsPlanArgs>>> plans() {
        return Optional.ofNullable(this.plans);
    }

    /**
     * The internal name of your VPS offer
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The internal name of your VPS offer
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    @Import(name="slaMonitoring")
    private @Nullable Output<Boolean> slaMonitoring;

    public Optional<Output<Boolean>> slaMonitoring() {
        return Optional.ofNullable(this.slaMonitoring);
    }

    /**
     * State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Number of vcores
     * 
     */
    @Import(name="vcore")
    private @Nullable Output<Double> vcore;

    /**
     * @return Number of vcores
     * 
     */
    public Optional<Output<Double>> vcore() {
        return Optional.ofNullable(this.vcore);
    }

    /**
     * OpenStask region where the VPS is located
     * 
     */
    @Import(name="zone")
    private @Nullable Output<String> zone;

    /**
     * @return OpenStask region where the VPS is located
     * 
     */
    public Optional<Output<String>> zone() {
        return Optional.ofNullable(this.zone);
    }

    private VpsState() {}

    private VpsState(VpsState $) {
        this.cluster = $.cluster;
        this.displayName = $.displayName;
        this.iam = $.iam;
        this.keymap = $.keymap;
        this.memoryLimit = $.memoryLimit;
        this.model = $.model;
        this.monitoringIpBlocks = $.monitoringIpBlocks;
        this.name = $.name;
        this.netbootMode = $.netbootMode;
        this.offerType = $.offerType;
        this.order = $.order;
        this.ovhSubsidiary = $.ovhSubsidiary;
        this.planOptions = $.planOptions;
        this.plans = $.plans;
        this.serviceName = $.serviceName;
        this.slaMonitoring = $.slaMonitoring;
        this.state = $.state;
        this.vcore = $.vcore;
        this.zone = $.zone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpsState $;

        public Builder() {
            $ = new VpsState();
        }

        public Builder(VpsState defaults) {
            $ = new VpsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param cluster VPS cluster
         * 
         * @return builder
         * 
         */
        public Builder cluster(@Nullable Output<String> cluster) {
            $.cluster = cluster;
            return this;
        }

        /**
         * @param cluster VPS cluster
         * 
         * @return builder
         * 
         */
        public Builder cluster(String cluster) {
            return cluster(Output.of(cluster));
        }

        /**
         * @param displayName Custom display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Custom display name
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param iam IAM resource information
         * 
         * @return builder
         * 
         */
        public Builder iam(@Nullable Output<VpsIamArgs> iam) {
            $.iam = iam;
            return this;
        }

        /**
         * @param iam IAM resource information
         * 
         * @return builder
         * 
         */
        public Builder iam(VpsIamArgs iam) {
            return iam(Output.of(iam));
        }

        /**
         * @param keymap KVM keyboard layout on VPS Cloud
         * 
         * @return builder
         * 
         */
        public Builder keymap(@Nullable Output<String> keymap) {
            $.keymap = keymap;
            return this;
        }

        /**
         * @param keymap KVM keyboard layout on VPS Cloud
         * 
         * @return builder
         * 
         */
        public Builder keymap(String keymap) {
            return keymap(Output.of(keymap));
        }

        /**
         * @param memoryLimit RAM of this VPS
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(@Nullable Output<Double> memoryLimit) {
            $.memoryLimit = memoryLimit;
            return this;
        }

        /**
         * @param memoryLimit RAM of this VPS
         * 
         * @return builder
         * 
         */
        public Builder memoryLimit(Double memoryLimit) {
            return memoryLimit(Output.of(memoryLimit));
        }

        /**
         * @param model Structure describing characteristics of a VPS model
         * 
         * @return builder
         * 
         */
        public Builder model(@Nullable Output<VpsModelArgs> model) {
            $.model = model;
            return this;
        }

        /**
         * @param model Structure describing characteristics of a VPS model
         * 
         * @return builder
         * 
         */
        public Builder model(VpsModelArgs model) {
            return model(Output.of(model));
        }

        /**
         * @param monitoringIpBlocks IP blocks for OVH monitoring servers
         * 
         * @return builder
         * 
         */
        public Builder monitoringIpBlocks(@Nullable Output<List<String>> monitoringIpBlocks) {
            $.monitoringIpBlocks = monitoringIpBlocks;
            return this;
        }

        /**
         * @param monitoringIpBlocks IP blocks for OVH monitoring servers
         * 
         * @return builder
         * 
         */
        public Builder monitoringIpBlocks(List<String> monitoringIpBlocks) {
            return monitoringIpBlocks(Output.of(monitoringIpBlocks));
        }

        /**
         * @param monitoringIpBlocks IP blocks for OVH monitoring servers
         * 
         * @return builder
         * 
         */
        public Builder monitoringIpBlocks(String... monitoringIpBlocks) {
            return monitoringIpBlocks(List.of(monitoringIpBlocks));
        }

        /**
         * @param name Name of the VPS
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the VPS
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param netbootMode VPS netboot mode (local┃rescue)
         * 
         * @return builder
         * 
         */
        public Builder netbootMode(@Nullable Output<String> netbootMode) {
            $.netbootMode = netbootMode;
            return this;
        }

        /**
         * @param netbootMode VPS netboot mode (local┃rescue)
         * 
         * @return builder
         * 
         */
        public Builder netbootMode(String netbootMode) {
            return netbootMode(Output.of(netbootMode));
        }

        /**
         * @param offerType All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
         * 
         * @return builder
         * 
         */
        public Builder offerType(@Nullable Output<String> offerType) {
            $.offerType = offerType;
            return this;
        }

        /**
         * @param offerType All offers a VPS can have (beta-classic┃classic┃cloud┃cloudram┃game-classic┃lowlat┃ssd)
         * 
         * @return builder
         * 
         */
        public Builder offerType(String offerType) {
            return offerType(Output.of(offerType));
        }

        /**
         * @param order Details about an Order
         * 
         * @return builder
         * 
         */
        public Builder order(@Nullable Output<VpsOrderArgs> order) {
            $.order = order;
            return this;
        }

        /**
         * @param order Details about an Order
         * 
         * @return builder
         * 
         */
        public Builder order(VpsOrderArgs order) {
            return order(Output.of(order));
        }

        /**
         * @param ovhSubsidiary OVHcloud Subsidiary. Country of OVHcloud legal entity you&#39;ll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&amp;branch=v1#get-/me)
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(@Nullable Output<String> ovhSubsidiary) {
            $.ovhSubsidiary = ovhSubsidiary;
            return this;
        }

        /**
         * @param ovhSubsidiary OVHcloud Subsidiary. Country of OVHcloud legal entity you&#39;ll be billed by. List of supported subsidiaries available on API at [/1.0/me.json](https://eu.api.ovh.com/console-preview/?section=%2Fme&amp;branch=v1#get-/me)
         * 
         * @return builder
         * 
         */
        public Builder ovhSubsidiary(String ovhSubsidiary) {
            return ovhSubsidiary(Output.of(ovhSubsidiary));
        }

        /**
         * @param planOptions Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder planOptions(@Nullable Output<List<VpsPlanOptionArgs>> planOptions) {
            $.planOptions = planOptions;
            return this;
        }

        /**
         * @param planOptions Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder planOptions(List<VpsPlanOptionArgs> planOptions) {
            return planOptions(Output.of(planOptions));
        }

        /**
         * @param planOptions Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder planOptions(VpsPlanOptionArgs... planOptions) {
            return planOptions(List.of(planOptions));
        }

        /**
         * @param plans Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder plans(@Nullable Output<List<VpsPlanArgs>> plans) {
            $.plans = plans;
            return this;
        }

        /**
         * @param plans Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder plans(List<VpsPlanArgs> plans) {
            return plans(Output.of(plans));
        }

        /**
         * @param plans Product Plan to order
         * 
         * @return builder
         * 
         */
        public Builder plans(VpsPlanArgs... plans) {
            return plans(List.of(plans));
        }

        /**
         * @param serviceName The internal name of your VPS offer
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The internal name of your VPS offer
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder slaMonitoring(@Nullable Output<Boolean> slaMonitoring) {
            $.slaMonitoring = slaMonitoring;
            return this;
        }

        public Builder slaMonitoring(Boolean slaMonitoring) {
            return slaMonitoring(Output.of(slaMonitoring));
        }

        /**
         * @param state State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state State of the VPS (backuping┃installing┃maintenance┃rebooting┃rescued┃running┃stopped┃stopping┃upgrading)
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vcore Number of vcores
         * 
         * @return builder
         * 
         */
        public Builder vcore(@Nullable Output<Double> vcore) {
            $.vcore = vcore;
            return this;
        }

        /**
         * @param vcore Number of vcores
         * 
         * @return builder
         * 
         */
        public Builder vcore(Double vcore) {
            return vcore(Output.of(vcore));
        }

        /**
         * @param zone OpenStask region where the VPS is located
         * 
         * @return builder
         * 
         */
        public Builder zone(@Nullable Output<String> zone) {
            $.zone = zone;
            return this;
        }

        /**
         * @param zone OpenStask region where the VPS is located
         * 
         * @return builder
         * 
         */
        public Builder zone(String zone) {
            return zone(Output.of(zone));
        }

        public VpsState build() {
            return $;
        }
    }

}
