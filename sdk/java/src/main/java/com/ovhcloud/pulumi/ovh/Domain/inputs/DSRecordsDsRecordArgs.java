// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class DSRecordsDsRecordArgs extends com.pulumi.resources.ResourceArgs {

    public static final DSRecordsDsRecordArgs Empty = new DSRecordsDsRecordArgs();

    /**
     * The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
     * 
     */
    @Import(name="algorithm", required=true)
    private Output<String> algorithm;

    /**
     * @return The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
     * 
     */
    public Output<String> algorithm() {
        return this.algorithm;
    }

    /**
     * The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
     * 
     */
    @Import(name="flags", required=true)
    private Output<String> flags;

    /**
     * @return The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
     * 
     */
    public Output<String> flags() {
        return this.flags;
    }

    /**
     * The record base64 encoded public key
     * 
     */
    @Import(name="publicKey", required=true)
    private Output<String> publicKey;

    /**
     * @return The record base64 encoded public key
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }

    /**
     * The record tag
     * 
     */
    @Import(name="tag", required=true)
    private Output<Integer> tag;

    /**
     * @return The record tag
     * 
     */
    public Output<Integer> tag() {
        return this.tag;
    }

    private DSRecordsDsRecordArgs() {}

    private DSRecordsDsRecordArgs(DSRecordsDsRecordArgs $) {
        this.algorithm = $.algorithm;
        this.flags = $.flags;
        this.publicKey = $.publicKey;
        this.tag = $.tag;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DSRecordsDsRecordArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DSRecordsDsRecordArgs $;

        public Builder() {
            $ = new DSRecordsDsRecordArgs();
        }

        public Builder(DSRecordsDsRecordArgs defaults) {
            $ = new DSRecordsDsRecordArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param algorithm The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
         * 
         * @return builder
         * 
         */
        public Builder algorithm(Output<String> algorithm) {
            $.algorithm = algorithm;
            return this;
        }

        /**
         * @param algorithm The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
         * 
         * @return builder
         * 
         */
        public Builder algorithm(String algorithm) {
            return algorithm(Output.of(algorithm));
        }

        /**
         * @param flags The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
         * 
         * @return builder
         * 
         */
        public Builder flags(Output<String> flags) {
            $.flags = flags;
            return this;
        }

        /**
         * @param flags The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
         * 
         * @return builder
         * 
         */
        public Builder flags(String flags) {
            return flags(Output.of(flags));
        }

        /**
         * @param publicKey The record base64 encoded public key
         * 
         * @return builder
         * 
         */
        public Builder publicKey(Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey The record base64 encoded public key
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param tag The record tag
         * 
         * @return builder
         * 
         */
        public Builder tag(Output<Integer> tag) {
            $.tag = tag;
            return this;
        }

        /**
         * @param tag The record tag
         * 
         * @return builder
         * 
         */
        public Builder tag(Integer tag) {
            return tag(Output.of(tag));
        }

        public DSRecordsDsRecordArgs build() {
            if ($.algorithm == null) {
                throw new MissingRequiredPropertyException("DSRecordsDsRecordArgs", "algorithm");
            }
            if ($.flags == null) {
                throw new MissingRequiredPropertyException("DSRecordsDsRecordArgs", "flags");
            }
            if ($.publicKey == null) {
                throw new MissingRequiredPropertyException("DSRecordsDsRecordArgs", "publicKey");
            }
            if ($.tag == null) {
                throw new MissingRequiredPropertyException("DSRecordsDsRecordArgs", "tag");
            }
            return $;
        }
    }

}
