// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.OVHcloud.outputs;

import com.ovhcloud.pulumi.ovh.OVHcloud.outputs.ConnectIam;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class ConnectResult {
    /**
     * @return Service bandwidth
     * 
     */
    private String bandwidth;
    /**
     * @return Service description
     * 
     */
    private String description;
    /**
     * @return IAM resource information
     * 
     */
    private ConnectIam iam;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return List of interfaces linked to a service
     * 
     */
    private List<Double> interfaceLists;
    /**
     * @return Pop reference where the service is delivered
     * 
     */
    private String pop;
    /**
     * @return Port quantity
     * 
     */
    private String portQuantity;
    /**
     * @return Product name of the service
     * 
     */
    private String product;
    /**
     * @return Service provider
     * 
     */
    private String providerName;
    /**
     * @return Service name
     * 
     */
    private String serviceName;
    /**
     * @return Service status
     * 
     */
    private String status;
    /**
     * @return uuid of the Ovhcloud Connect service
     * 
     */
    private String uuid;
    /**
     * @return vrack linked to the service
     * 
     */
    private String vrack;

    private ConnectResult() {}
    /**
     * @return Service bandwidth
     * 
     */
    public String bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Service description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return IAM resource information
     * 
     */
    public ConnectIam iam() {
        return this.iam;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of interfaces linked to a service
     * 
     */
    public List<Double> interfaceLists() {
        return this.interfaceLists;
    }
    /**
     * @return Pop reference where the service is delivered
     * 
     */
    public String pop() {
        return this.pop;
    }
    /**
     * @return Port quantity
     * 
     */
    public String portQuantity() {
        return this.portQuantity;
    }
    /**
     * @return Product name of the service
     * 
     */
    public String product() {
        return this.product;
    }
    /**
     * @return Service provider
     * 
     */
    public String providerName() {
        return this.providerName;
    }
    /**
     * @return Service name
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Service status
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return uuid of the Ovhcloud Connect service
     * 
     */
    public String uuid() {
        return this.uuid;
    }
    /**
     * @return vrack linked to the service
     * 
     */
    public String vrack() {
        return this.vrack;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ConnectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bandwidth;
        private String description;
        private ConnectIam iam;
        private String id;
        private List<Double> interfaceLists;
        private String pop;
        private String portQuantity;
        private String product;
        private String providerName;
        private String serviceName;
        private String status;
        private String uuid;
        private String vrack;
        public Builder() {}
        public Builder(ConnectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.description = defaults.description;
    	      this.iam = defaults.iam;
    	      this.id = defaults.id;
    	      this.interfaceLists = defaults.interfaceLists;
    	      this.pop = defaults.pop;
    	      this.portQuantity = defaults.portQuantity;
    	      this.product = defaults.product;
    	      this.providerName = defaults.providerName;
    	      this.serviceName = defaults.serviceName;
    	      this.status = defaults.status;
    	      this.uuid = defaults.uuid;
    	      this.vrack = defaults.vrack;
        }

        @CustomType.Setter
        public Builder bandwidth(String bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder iam(ConnectIam iam) {
            if (iam == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "iam");
            }
            this.iam = iam;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceLists(List<Double> interfaceLists) {
            if (interfaceLists == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "interfaceLists");
            }
            this.interfaceLists = interfaceLists;
            return this;
        }
        public Builder interfaceLists(Double... interfaceLists) {
            return interfaceLists(List.of(interfaceLists));
        }
        @CustomType.Setter
        public Builder pop(String pop) {
            if (pop == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "pop");
            }
            this.pop = pop;
            return this;
        }
        @CustomType.Setter
        public Builder portQuantity(String portQuantity) {
            if (portQuantity == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "portQuantity");
            }
            this.portQuantity = portQuantity;
            return this;
        }
        @CustomType.Setter
        public Builder product(String product) {
            if (product == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "product");
            }
            this.product = product;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(String providerName) {
            if (providerName == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "providerName");
            }
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder uuid(String uuid) {
            if (uuid == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "uuid");
            }
            this.uuid = uuid;
            return this;
        }
        @CustomType.Setter
        public Builder vrack(String vrack) {
            if (vrack == null) {
              throw new MissingRequiredPropertyException("ConnectResult", "vrack");
            }
            this.vrack = vrack;
            return this;
        }
        public ConnectResult build() {
            final var _resultValue = new ConnectResult();
            _resultValue.bandwidth = bandwidth;
            _resultValue.description = description;
            _resultValue.iam = iam;
            _resultValue.id = id;
            _resultValue.interfaceLists = interfaceLists;
            _resultValue.pop = pop;
            _resultValue.portQuantity = portQuantity;
            _resultValue.product = product;
            _resultValue.providerName = providerName;
            _resultValue.serviceName = serviceName;
            _resultValue.status = status;
            _resultValue.uuid = uuid;
            _resultValue.vrack = vrack;
            return _resultValue;
        }
    }
}
