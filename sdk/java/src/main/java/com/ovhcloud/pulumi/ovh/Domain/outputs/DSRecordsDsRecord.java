// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class DSRecordsDsRecord {
    /**
     * @return The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
     * 
     */
    private String algorithm;
    /**
     * @return The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
     * 
     */
    private String flags;
    /**
     * @return The record base64 encoded public key
     * 
     */
    private String publicKey;
    /**
     * @return The record tag
     * 
     */
    private Integer tag;

    private DSRecordsDsRecord() {}
    /**
     * @return The record algorithm (`RSASHA1`, `RSASHA1_NSEC3_SHA1`, `RSASHA256`, `RSASHA512`, `ECDSAP256SHA256`, `ECDSAP384SHA384`, `ED25519`)
     * 
     */
    public String algorithm() {
        return this.algorithm;
    }
    /**
     * @return The record flag (`ZONE_SIGNING_KEY`, `KEY_SIGNING_KEY`)
     * 
     */
    public String flags() {
        return this.flags;
    }
    /**
     * @return The record base64 encoded public key
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return The record tag
     * 
     */
    public Integer tag() {
        return this.tag;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DSRecordsDsRecord defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String algorithm;
        private String flags;
        private String publicKey;
        private Integer tag;
        public Builder() {}
        public Builder(DSRecordsDsRecord defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.algorithm = defaults.algorithm;
    	      this.flags = defaults.flags;
    	      this.publicKey = defaults.publicKey;
    	      this.tag = defaults.tag;
        }

        @CustomType.Setter
        public Builder algorithm(String algorithm) {
            if (algorithm == null) {
              throw new MissingRequiredPropertyException("DSRecordsDsRecord", "algorithm");
            }
            this.algorithm = algorithm;
            return this;
        }
        @CustomType.Setter
        public Builder flags(String flags) {
            if (flags == null) {
              throw new MissingRequiredPropertyException("DSRecordsDsRecord", "flags");
            }
            this.flags = flags;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("DSRecordsDsRecord", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder tag(Integer tag) {
            if (tag == null) {
              throw new MissingRequiredPropertyException("DSRecordsDsRecord", "tag");
            }
            this.tag = tag;
            return this;
        }
        public DSRecordsDsRecord build() {
            final var _resultValue = new DSRecordsDsRecord();
            _resultValue.algorithm = algorithm;
            _resultValue.flags = flags;
            _resultValue.publicKey = publicKey;
            _resultValue.tag = tag;
            return _resultValue;
        }
    }
}
