// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Domain.outputs;

import com.ovhcloud.pulumi.ovh.Domain.outputs.NameCurrentStateDnsConfiguration;
import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NameCurrentState {
    /**
     * @return Domain additional states
     * 
     */
    private @Nullable List<String> additionalStates;
    /**
     * @return The domain DNS configuration
     * 
     */
    private @Nullable NameCurrentStateDnsConfiguration dnsConfiguration;
    /**
     * @return Extension of the domain name
     * 
     */
    private @Nullable String extension;
    /**
     * @return Domain main state
     * 
     */
    private @Nullable String mainState;
    /**
     * @return Domain name
     * 
     */
    private @Nullable String name;
    /**
     * @return Domain protection state
     * 
     */
    private @Nullable String protectionState;
    /**
     * @return Domain suspension state
     * 
     */
    private @Nullable String suspensionState;

    private NameCurrentState() {}
    /**
     * @return Domain additional states
     * 
     */
    public List<String> additionalStates() {
        return this.additionalStates == null ? List.of() : this.additionalStates;
    }
    /**
     * @return The domain DNS configuration
     * 
     */
    public Optional<NameCurrentStateDnsConfiguration> dnsConfiguration() {
        return Optional.ofNullable(this.dnsConfiguration);
    }
    /**
     * @return Extension of the domain name
     * 
     */
    public Optional<String> extension() {
        return Optional.ofNullable(this.extension);
    }
    /**
     * @return Domain main state
     * 
     */
    public Optional<String> mainState() {
        return Optional.ofNullable(this.mainState);
    }
    /**
     * @return Domain name
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Domain protection state
     * 
     */
    public Optional<String> protectionState() {
        return Optional.ofNullable(this.protectionState);
    }
    /**
     * @return Domain suspension state
     * 
     */
    public Optional<String> suspensionState() {
        return Optional.ofNullable(this.suspensionState);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NameCurrentState defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<String> additionalStates;
        private @Nullable NameCurrentStateDnsConfiguration dnsConfiguration;
        private @Nullable String extension;
        private @Nullable String mainState;
        private @Nullable String name;
        private @Nullable String protectionState;
        private @Nullable String suspensionState;
        public Builder() {}
        public Builder(NameCurrentState defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.additionalStates = defaults.additionalStates;
    	      this.dnsConfiguration = defaults.dnsConfiguration;
    	      this.extension = defaults.extension;
    	      this.mainState = defaults.mainState;
    	      this.name = defaults.name;
    	      this.protectionState = defaults.protectionState;
    	      this.suspensionState = defaults.suspensionState;
        }

        @CustomType.Setter
        public Builder additionalStates(@Nullable List<String> additionalStates) {

            this.additionalStates = additionalStates;
            return this;
        }
        public Builder additionalStates(String... additionalStates) {
            return additionalStates(List.of(additionalStates));
        }
        @CustomType.Setter
        public Builder dnsConfiguration(@Nullable NameCurrentStateDnsConfiguration dnsConfiguration) {

            this.dnsConfiguration = dnsConfiguration;
            return this;
        }
        @CustomType.Setter
        public Builder extension(@Nullable String extension) {

            this.extension = extension;
            return this;
        }
        @CustomType.Setter
        public Builder mainState(@Nullable String mainState) {

            this.mainState = mainState;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protectionState(@Nullable String protectionState) {

            this.protectionState = protectionState;
            return this;
        }
        @CustomType.Setter
        public Builder suspensionState(@Nullable String suspensionState) {

            this.suspensionState = suspensionState;
            return this;
        }
        public NameCurrentState build() {
            final var _resultValue = new NameCurrentState();
            _resultValue.additionalStates = additionalStates;
            _resultValue.dnsConfiguration = dnsConfiguration;
            _resultValue.extension = extension;
            _resultValue.mainState = mainState;
            _resultValue.name = name;
            _resultValue.protectionState = protectionState;
            _resultValue.suspensionState = suspensionState;
            return _resultValue;
        }
    }
}
