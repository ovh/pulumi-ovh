// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.StorageEncryptionArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.StorageReplicationArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.StorageVersioningArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StorageArgs extends com.pulumi.resources.ResourceArgs {

    public static final StorageArgs Empty = new StorageArgs();

    /**
     * Encryption configuration
     * 
     */
    @Import(name="encryption")
    private @Nullable Output<StorageEncryptionArgs> encryption;

    /**
     * @return Encryption configuration
     * 
     */
    public Optional<Output<StorageEncryptionArgs>> encryption() {
        return Optional.ofNullable(this.encryption);
    }

    /**
     * Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Double> limit;

    /**
     * @return Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    public Optional<Output<Double>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Key to start with when listing objects
     * 
     */
    @Import(name="marker")
    private @Nullable Output<String> marker;

    /**
     * @return Key to start with when listing objects
     * 
     */
    public Optional<Output<String>> marker() {
        return Optional.ofNullable(this.marker);
    }

    /**
     * Container name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Container name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Container owner user ID
     * 
     */
    @Import(name="ownerId")
    private @Nullable Output<Double> ownerId;

    /**
     * @return Container owner user ID
     * 
     */
    public Optional<Output<Double>> ownerId() {
        return Optional.ofNullable(this.ownerId);
    }

    /**
     * List objects whose key begins with this prefix
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return List objects whose key begins with this prefix
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName", required=true)
    private Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Output<String> regionName() {
        return this.regionName;
    }

    /**
     * Replication configuration
     * 
     */
    @Import(name="replication")
    private @Nullable Output<StorageReplicationArgs> replication;

    /**
     * @return Replication configuration
     * 
     */
    public Optional<Output<StorageReplicationArgs>> replication() {
        return Optional.ofNullable(this.replication);
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Versioning configuration
     * 
     */
    @Import(name="versioning")
    private @Nullable Output<StorageVersioningArgs> versioning;

    /**
     * @return Versioning configuration
     * 
     */
    public Optional<Output<StorageVersioningArgs>> versioning() {
        return Optional.ofNullable(this.versioning);
    }

    private StorageArgs() {}

    private StorageArgs(StorageArgs $) {
        this.encryption = $.encryption;
        this.limit = $.limit;
        this.marker = $.marker;
        this.name = $.name;
        this.ownerId = $.ownerId;
        this.prefix = $.prefix;
        this.regionName = $.regionName;
        this.replication = $.replication;
        this.serviceName = $.serviceName;
        this.versioning = $.versioning;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StorageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StorageArgs $;

        public Builder() {
            $ = new StorageArgs();
        }

        public Builder(StorageArgs defaults) {
            $ = new StorageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param encryption Encryption configuration
         * 
         * @return builder
         * 
         */
        public Builder encryption(@Nullable Output<StorageEncryptionArgs> encryption) {
            $.encryption = encryption;
            return this;
        }

        /**
         * @param encryption Encryption configuration
         * 
         * @return builder
         * 
         */
        public Builder encryption(StorageEncryptionArgs encryption) {
            return encryption(Output.of(encryption));
        }

        /**
         * @param limit Limit the number of objects returned (1000 maximum, defaults to 1000)
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Double> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Limit the number of objects returned (1000 maximum, defaults to 1000)
         * 
         * @return builder
         * 
         */
        public Builder limit(Double limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param marker Key to start with when listing objects
         * 
         * @return builder
         * 
         */
        public Builder marker(@Nullable Output<String> marker) {
            $.marker = marker;
            return this;
        }

        /**
         * @param marker Key to start with when listing objects
         * 
         * @return builder
         * 
         */
        public Builder marker(String marker) {
            return marker(Output.of(marker));
        }

        /**
         * @param name Container name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Container name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param ownerId Container owner user ID
         * 
         * @return builder
         * 
         */
        public Builder ownerId(@Nullable Output<Double> ownerId) {
            $.ownerId = ownerId;
            return this;
        }

        /**
         * @param ownerId Container owner user ID
         * 
         * @return builder
         * 
         */
        public Builder ownerId(Double ownerId) {
            return ownerId(Output.of(ownerId));
        }

        /**
         * @param prefix List objects whose key begins with this prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix List objects whose key begins with this prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param replication Replication configuration
         * 
         * @return builder
         * 
         */
        public Builder replication(@Nullable Output<StorageReplicationArgs> replication) {
            $.replication = replication;
            return this;
        }

        /**
         * @param replication Replication configuration
         * 
         * @return builder
         * 
         */
        public Builder replication(StorageReplicationArgs replication) {
            return replication(Output.of(replication));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param versioning Versioning configuration
         * 
         * @return builder
         * 
         */
        public Builder versioning(@Nullable Output<StorageVersioningArgs> versioning) {
            $.versioning = versioning;
            return this;
        }

        /**
         * @param versioning Versioning configuration
         * 
         * @return builder
         * 
         */
        public Builder versioning(StorageVersioningArgs versioning) {
            return versioning(Output.of(versioning));
        }

        public StorageArgs build() {
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("StorageArgs", "regionName");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("StorageArgs", "serviceName");
            }
            return $;
        }
    }

}
