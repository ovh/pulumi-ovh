// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerFloatingIpArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerListenerArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.LoadBalancerNetworkArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerState extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerState Empty = new LoadBalancerState();

    /**
     * The UTC date and timestamp when the resource was created
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return The UTC date and timestamp when the resource was created
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Description of the loadbalancer
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the loadbalancer
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Loadbalancer flavor id
     * 
     */
    @Import(name="flavorId")
    private @Nullable Output<String> flavorId;

    /**
     * @return Loadbalancer flavor id
     * 
     */
    public Optional<Output<String>> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }

    /**
     * Information about floating IP
     * 
     */
    @Import(name="floatingIp")
    private @Nullable Output<LoadBalancerFloatingIpArgs> floatingIp;

    /**
     * @return Information about floating IP
     * 
     */
    public Optional<Output<LoadBalancerFloatingIpArgs>> floatingIp() {
        return Optional.ofNullable(this.floatingIp);
    }

    /**
     * Listeners to create with the loadbalancer
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<LoadBalancerListenerArgs>> listeners;

    /**
     * @return Listeners to create with the loadbalancer
     * 
     */
    public Optional<Output<List<LoadBalancerListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * Name of the resource
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the resource
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network information to create the loadbalancer
     * 
     */
    @Import(name="network")
    private @Nullable Output<LoadBalancerNetworkArgs> network;

    /**
     * @return Network information to create the loadbalancer
     * 
     */
    public Optional<Output<LoadBalancerNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Operating status of the resource
     * 
     */
    @Import(name="operatingStatus")
    private @Nullable Output<String> operatingStatus;

    /**
     * @return Operating status of the resource
     * 
     */
    public Optional<Output<String>> operatingStatus() {
        return Optional.ofNullable(this.operatingStatus);
    }

    /**
     * Provisioning status of the resource
     * 
     */
    @Import(name="provisioningStatus")
    private @Nullable Output<String> provisioningStatus;

    /**
     * @return Provisioning status of the resource
     * 
     */
    public Optional<Output<String>> provisioningStatus() {
        return Optional.ofNullable(this.provisioningStatus);
    }

    /**
     * Region of the resource
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Region of the resource
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName")
    private @Nullable Output<String> regionName;

    /**
     * @return Region name
     * 
     */
    public Optional<Output<String>> regionName() {
        return Optional.ofNullable(this.regionName);
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return Service name
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * UTC date and timestamp when the resource was created
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return UTC date and timestamp when the resource was created
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * IP address of the Virtual IP
     * 
     */
    @Import(name="vipAddress")
    private @Nullable Output<String> vipAddress;

    /**
     * @return IP address of the Virtual IP
     * 
     */
    public Optional<Output<String>> vipAddress() {
        return Optional.ofNullable(this.vipAddress);
    }

    /**
     * Openstack ID of the network for the Virtual IP
     * 
     */
    @Import(name="vipNetworkId")
    private @Nullable Output<String> vipNetworkId;

    /**
     * @return Openstack ID of the network for the Virtual IP
     * 
     */
    public Optional<Output<String>> vipNetworkId() {
        return Optional.ofNullable(this.vipNetworkId);
    }

    /**
     * ID of the subnet for the Virtual IP
     * 
     */
    @Import(name="vipSubnetId")
    private @Nullable Output<String> vipSubnetId;

    /**
     * @return ID of the subnet for the Virtual IP
     * 
     */
    public Optional<Output<String>> vipSubnetId() {
        return Optional.ofNullable(this.vipSubnetId);
    }

    private LoadBalancerState() {}

    private LoadBalancerState(LoadBalancerState $) {
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.flavorId = $.flavorId;
        this.floatingIp = $.floatingIp;
        this.listeners = $.listeners;
        this.name = $.name;
        this.network = $.network;
        this.operatingStatus = $.operatingStatus;
        this.provisioningStatus = $.provisioningStatus;
        this.region = $.region;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
        this.updatedAt = $.updatedAt;
        this.vipAddress = $.vipAddress;
        this.vipNetworkId = $.vipNetworkId;
        this.vipSubnetId = $.vipSubnetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerState $;

        public Builder() {
            $ = new LoadBalancerState();
        }

        public Builder(LoadBalancerState defaults) {
            $ = new LoadBalancerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt The UTC date and timestamp when the resource was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt The UTC date and timestamp when the resource was created
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Description of the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param flavorId Loadbalancer flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(@Nullable Output<String> flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param flavorId Loadbalancer flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(String flavorId) {
            return flavorId(Output.of(flavorId));
        }

        /**
         * @param floatingIp Information about floating IP
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(@Nullable Output<LoadBalancerFloatingIpArgs> floatingIp) {
            $.floatingIp = floatingIp;
            return this;
        }

        /**
         * @param floatingIp Information about floating IP
         * 
         * @return builder
         * 
         */
        public Builder floatingIp(LoadBalancerFloatingIpArgs floatingIp) {
            return floatingIp(Output.of(floatingIp));
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<LoadBalancerListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<LoadBalancerListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners Listeners to create with the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder listeners(LoadBalancerListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param name Name of the resource
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Network information to create the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<LoadBalancerNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Network information to create the loadbalancer
         * 
         * @return builder
         * 
         */
        public Builder network(LoadBalancerNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param operatingStatus Operating status of the resource
         * 
         * @return builder
         * 
         */
        public Builder operatingStatus(@Nullable Output<String> operatingStatus) {
            $.operatingStatus = operatingStatus;
            return this;
        }

        /**
         * @param operatingStatus Operating status of the resource
         * 
         * @return builder
         * 
         */
        public Builder operatingStatus(String operatingStatus) {
            return operatingStatus(Output.of(operatingStatus));
        }

        /**
         * @param provisioningStatus Provisioning status of the resource
         * 
         * @return builder
         * 
         */
        public Builder provisioningStatus(@Nullable Output<String> provisioningStatus) {
            $.provisioningStatus = provisioningStatus;
            return this;
        }

        /**
         * @param provisioningStatus Provisioning status of the resource
         * 
         * @return builder
         * 
         */
        public Builder provisioningStatus(String provisioningStatus) {
            return provisioningStatus(Output.of(provisioningStatus));
        }

        /**
         * @param region Region of the resource
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Region of the resource
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(@Nullable Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param updatedAt UTC date and timestamp when the resource was created
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt UTC date and timestamp when the resource was created
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param vipAddress IP address of the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipAddress(@Nullable Output<String> vipAddress) {
            $.vipAddress = vipAddress;
            return this;
        }

        /**
         * @param vipAddress IP address of the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipAddress(String vipAddress) {
            return vipAddress(Output.of(vipAddress));
        }

        /**
         * @param vipNetworkId Openstack ID of the network for the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipNetworkId(@Nullable Output<String> vipNetworkId) {
            $.vipNetworkId = vipNetworkId;
            return this;
        }

        /**
         * @param vipNetworkId Openstack ID of the network for the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipNetworkId(String vipNetworkId) {
            return vipNetworkId(Output.of(vipNetworkId));
        }

        /**
         * @param vipSubnetId ID of the subnet for the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipSubnetId(@Nullable Output<String> vipSubnetId) {
            $.vipSubnetId = vipSubnetId;
            return this;
        }

        /**
         * @param vipSubnetId ID of the subnet for the Virtual IP
         * 
         * @return builder
         * 
         */
        public Builder vipSubnetId(String vipSubnetId) {
            return vipSubnetId(Output.of(vipSubnetId));
        }

        public LoadBalancerState build() {
            return $;
        }
    }

}
