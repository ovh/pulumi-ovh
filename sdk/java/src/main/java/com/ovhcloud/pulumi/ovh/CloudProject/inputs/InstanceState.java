// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceAddressArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceAttachedVolumeArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceAutoBackupArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceBootFromArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceFlavorArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceGroupArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceNetworkArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceSshKeyArgs;
import com.ovhcloud.pulumi.ovh.CloudProject.inputs.InstanceSshKeyCreateArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * Instance IP addresses
     * 
     */
    @Import(name="addresses")
    private @Nullable Output<List<InstanceAddressArgs>> addresses;

    /**
     * @return Instance IP addresses
     * 
     */
    public Optional<Output<List<InstanceAddressArgs>>> addresses() {
        return Optional.ofNullable(this.addresses);
    }

    /**
     * Volumes attached to the instance
     * 
     */
    @Import(name="attachedVolumes")
    private @Nullable Output<List<InstanceAttachedVolumeArgs>> attachedVolumes;

    /**
     * @return Volumes attached to the instance
     * 
     */
    public Optional<Output<List<InstanceAttachedVolumeArgs>>> attachedVolumes() {
        return Optional.ofNullable(this.attachedVolumes);
    }

    /**
     * Create an autobackup workflow after instance start up.
     * 
     */
    @Import(name="autoBackup")
    private @Nullable Output<InstanceAutoBackupArgs> autoBackup;

    /**
     * @return Create an autobackup workflow after instance start up.
     * 
     */
    public Optional<Output<InstanceAutoBackupArgs>> autoBackup() {
        return Optional.ofNullable(this.autoBackup);
    }

    /**
     * The availability zone where the instance will be created
     * 
     */
    @Import(name="availabilityZone")
    private @Nullable Output<String> availabilityZone;

    /**
     * @return The availability zone where the instance will be created
     * 
     */
    public Optional<Output<String>> availabilityZone() {
        return Optional.ofNullable(this.availabilityZone);
    }

    /**
     * Billing period - hourly or monthly
     * 
     */
    @Import(name="billingPeriod")
    private @Nullable Output<String> billingPeriod;

    /**
     * @return Billing period - hourly or monthly
     * 
     */
    public Optional<Output<String>> billingPeriod() {
        return Optional.ofNullable(this.billingPeriod);
    }

    /**
     * Boot the instance from an image or a volume
     * 
     */
    @Import(name="bootFrom")
    private @Nullable Output<InstanceBootFromArgs> bootFrom;

    /**
     * @return Boot the instance from an image or a volume
     * 
     */
    public Optional<Output<InstanceBootFromArgs>> bootFrom() {
        return Optional.ofNullable(this.bootFrom);
    }

    /**
     * Create multiple instances
     * 
     */
    @Import(name="bulk")
    private @Nullable Output<Integer> bulk;

    /**
     * @return Create multiple instances
     * 
     */
    public Optional<Output<Integer>> bulk() {
        return Optional.ofNullable(this.bulk);
    }

    /**
     * Flavor information
     * 
     */
    @Import(name="flavor")
    private @Nullable Output<InstanceFlavorArgs> flavor;

    /**
     * @return Flavor information
     * 
     */
    public Optional<Output<InstanceFlavorArgs>> flavor() {
        return Optional.ofNullable(this.flavor);
    }

    /**
     * Flavor id
     * 
     */
    @Import(name="flavorId")
    private @Nullable Output<String> flavorId;

    /**
     * @return Flavor id
     * 
     */
    public Optional<Output<String>> flavorId() {
        return Optional.ofNullable(this.flavorId);
    }

    /**
     * Flavor name
     * 
     */
    @Import(name="flavorName")
    private @Nullable Output<String> flavorName;

    /**
     * @return Flavor name
     * 
     */
    public Optional<Output<String>> flavorName() {
        return Optional.ofNullable(this.flavorName);
    }

    /**
     * Start instance in group
     * 
     */
    @Import(name="group")
    private @Nullable Output<InstanceGroupArgs> group;

    /**
     * @return Start instance in group
     * 
     */
    public Optional<Output<InstanceGroupArgs>> group() {
        return Optional.ofNullable(this.group);
    }

    /**
     * Image id
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return Image id
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * Instance name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Instance name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Create network interfaces
     * 
     */
    @Import(name="network")
    private @Nullable Output<InstanceNetworkArgs> network;

    /**
     * @return Create network interfaces
     * 
     */
    public Optional<Output<InstanceNetworkArgs>> network() {
        return Optional.ofNullable(this.network);
    }

    /**
     * Instance region
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Instance region
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Existing SSH Keypair
     * 
     */
    @Import(name="sshKey")
    private @Nullable Output<InstanceSshKeyArgs> sshKey;

    /**
     * @return Existing SSH Keypair
     * 
     */
    public Optional<Output<InstanceSshKeyArgs>> sshKey() {
        return Optional.ofNullable(this.sshKey);
    }

    /**
     * Add existing SSH Key pair into your Public Cloud project and link it to the instance
     * 
     */
    @Import(name="sshKeyCreate")
    private @Nullable Output<InstanceSshKeyCreateArgs> sshKeyCreate;

    /**
     * @return Add existing SSH Key pair into your Public Cloud project and link it to the instance
     * 
     */
    public Optional<Output<InstanceSshKeyCreateArgs>> sshKeyCreate() {
        return Optional.ofNullable(this.sshKeyCreate);
    }

    /**
     * Instance task state
     * 
     */
    @Import(name="taskState")
    private @Nullable Output<String> taskState;

    /**
     * @return Instance task state
     * 
     */
    public Optional<Output<String>> taskState() {
        return Optional.ofNullable(this.taskState);
    }

    /**
     * Configuration information or scripts to use upon launch
     * 
     */
    @Import(name="userData")
    private @Nullable Output<String> userData;

    /**
     * @return Configuration information or scripts to use upon launch
     * 
     */
    public Optional<Output<String>> userData() {
        return Optional.ofNullable(this.userData);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.addresses = $.addresses;
        this.attachedVolumes = $.attachedVolumes;
        this.autoBackup = $.autoBackup;
        this.availabilityZone = $.availabilityZone;
        this.billingPeriod = $.billingPeriod;
        this.bootFrom = $.bootFrom;
        this.bulk = $.bulk;
        this.flavor = $.flavor;
        this.flavorId = $.flavorId;
        this.flavorName = $.flavorName;
        this.group = $.group;
        this.imageId = $.imageId;
        this.name = $.name;
        this.network = $.network;
        this.region = $.region;
        this.serviceName = $.serviceName;
        this.sshKey = $.sshKey;
        this.sshKeyCreate = $.sshKeyCreate;
        this.taskState = $.taskState;
        this.userData = $.userData;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addresses Instance IP addresses
         * 
         * @return builder
         * 
         */
        public Builder addresses(@Nullable Output<List<InstanceAddressArgs>> addresses) {
            $.addresses = addresses;
            return this;
        }

        /**
         * @param addresses Instance IP addresses
         * 
         * @return builder
         * 
         */
        public Builder addresses(List<InstanceAddressArgs> addresses) {
            return addresses(Output.of(addresses));
        }

        /**
         * @param addresses Instance IP addresses
         * 
         * @return builder
         * 
         */
        public Builder addresses(InstanceAddressArgs... addresses) {
            return addresses(List.of(addresses));
        }

        /**
         * @param attachedVolumes Volumes attached to the instance
         * 
         * @return builder
         * 
         */
        public Builder attachedVolumes(@Nullable Output<List<InstanceAttachedVolumeArgs>> attachedVolumes) {
            $.attachedVolumes = attachedVolumes;
            return this;
        }

        /**
         * @param attachedVolumes Volumes attached to the instance
         * 
         * @return builder
         * 
         */
        public Builder attachedVolumes(List<InstanceAttachedVolumeArgs> attachedVolumes) {
            return attachedVolumes(Output.of(attachedVolumes));
        }

        /**
         * @param attachedVolumes Volumes attached to the instance
         * 
         * @return builder
         * 
         */
        public Builder attachedVolumes(InstanceAttachedVolumeArgs... attachedVolumes) {
            return attachedVolumes(List.of(attachedVolumes));
        }

        /**
         * @param autoBackup Create an autobackup workflow after instance start up.
         * 
         * @return builder
         * 
         */
        public Builder autoBackup(@Nullable Output<InstanceAutoBackupArgs> autoBackup) {
            $.autoBackup = autoBackup;
            return this;
        }

        /**
         * @param autoBackup Create an autobackup workflow after instance start up.
         * 
         * @return builder
         * 
         */
        public Builder autoBackup(InstanceAutoBackupArgs autoBackup) {
            return autoBackup(Output.of(autoBackup));
        }

        /**
         * @param availabilityZone The availability zone where the instance will be created
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(@Nullable Output<String> availabilityZone) {
            $.availabilityZone = availabilityZone;
            return this;
        }

        /**
         * @param availabilityZone The availability zone where the instance will be created
         * 
         * @return builder
         * 
         */
        public Builder availabilityZone(String availabilityZone) {
            return availabilityZone(Output.of(availabilityZone));
        }

        /**
         * @param billingPeriod Billing period - hourly or monthly
         * 
         * @return builder
         * 
         */
        public Builder billingPeriod(@Nullable Output<String> billingPeriod) {
            $.billingPeriod = billingPeriod;
            return this;
        }

        /**
         * @param billingPeriod Billing period - hourly or monthly
         * 
         * @return builder
         * 
         */
        public Builder billingPeriod(String billingPeriod) {
            return billingPeriod(Output.of(billingPeriod));
        }

        /**
         * @param bootFrom Boot the instance from an image or a volume
         * 
         * @return builder
         * 
         */
        public Builder bootFrom(@Nullable Output<InstanceBootFromArgs> bootFrom) {
            $.bootFrom = bootFrom;
            return this;
        }

        /**
         * @param bootFrom Boot the instance from an image or a volume
         * 
         * @return builder
         * 
         */
        public Builder bootFrom(InstanceBootFromArgs bootFrom) {
            return bootFrom(Output.of(bootFrom));
        }

        /**
         * @param bulk Create multiple instances
         * 
         * @return builder
         * 
         */
        public Builder bulk(@Nullable Output<Integer> bulk) {
            $.bulk = bulk;
            return this;
        }

        /**
         * @param bulk Create multiple instances
         * 
         * @return builder
         * 
         */
        public Builder bulk(Integer bulk) {
            return bulk(Output.of(bulk));
        }

        /**
         * @param flavor Flavor information
         * 
         * @return builder
         * 
         */
        public Builder flavor(@Nullable Output<InstanceFlavorArgs> flavor) {
            $.flavor = flavor;
            return this;
        }

        /**
         * @param flavor Flavor information
         * 
         * @return builder
         * 
         */
        public Builder flavor(InstanceFlavorArgs flavor) {
            return flavor(Output.of(flavor));
        }

        /**
         * @param flavorId Flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(@Nullable Output<String> flavorId) {
            $.flavorId = flavorId;
            return this;
        }

        /**
         * @param flavorId Flavor id
         * 
         * @return builder
         * 
         */
        public Builder flavorId(String flavorId) {
            return flavorId(Output.of(flavorId));
        }

        /**
         * @param flavorName Flavor name
         * 
         * @return builder
         * 
         */
        public Builder flavorName(@Nullable Output<String> flavorName) {
            $.flavorName = flavorName;
            return this;
        }

        /**
         * @param flavorName Flavor name
         * 
         * @return builder
         * 
         */
        public Builder flavorName(String flavorName) {
            return flavorName(Output.of(flavorName));
        }

        /**
         * @param group Start instance in group
         * 
         * @return builder
         * 
         */
        public Builder group(@Nullable Output<InstanceGroupArgs> group) {
            $.group = group;
            return this;
        }

        /**
         * @param group Start instance in group
         * 
         * @return builder
         * 
         */
        public Builder group(InstanceGroupArgs group) {
            return group(Output.of(group));
        }

        /**
         * @param imageId Image id
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId Image id
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param name Instance name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Instance name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param network Create network interfaces
         * 
         * @return builder
         * 
         */
        public Builder network(@Nullable Output<InstanceNetworkArgs> network) {
            $.network = network;
            return this;
        }

        /**
         * @param network Create network interfaces
         * 
         * @return builder
         * 
         */
        public Builder network(InstanceNetworkArgs network) {
            return network(Output.of(network));
        }

        /**
         * @param region Instance region
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Instance region
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param sshKey Existing SSH Keypair
         * 
         * @return builder
         * 
         */
        public Builder sshKey(@Nullable Output<InstanceSshKeyArgs> sshKey) {
            $.sshKey = sshKey;
            return this;
        }

        /**
         * @param sshKey Existing SSH Keypair
         * 
         * @return builder
         * 
         */
        public Builder sshKey(InstanceSshKeyArgs sshKey) {
            return sshKey(Output.of(sshKey));
        }

        /**
         * @param sshKeyCreate Add existing SSH Key pair into your Public Cloud project and link it to the instance
         * 
         * @return builder
         * 
         */
        public Builder sshKeyCreate(@Nullable Output<InstanceSshKeyCreateArgs> sshKeyCreate) {
            $.sshKeyCreate = sshKeyCreate;
            return this;
        }

        /**
         * @param sshKeyCreate Add existing SSH Key pair into your Public Cloud project and link it to the instance
         * 
         * @return builder
         * 
         */
        public Builder sshKeyCreate(InstanceSshKeyCreateArgs sshKeyCreate) {
            return sshKeyCreate(Output.of(sshKeyCreate));
        }

        /**
         * @param taskState Instance task state
         * 
         * @return builder
         * 
         */
        public Builder taskState(@Nullable Output<String> taskState) {
            $.taskState = taskState;
            return this;
        }

        /**
         * @param taskState Instance task state
         * 
         * @return builder
         * 
         */
        public Builder taskState(String taskState) {
            return taskState(Output.of(taskState));
        }

        /**
         * @param userData Configuration information or scripts to use upon launch
         * 
         * @return builder
         * 
         */
        public Builder userData(@Nullable Output<String> userData) {
            $.userData = userData;
            return this;
        }

        /**
         * @param userData Configuration information or scripts to use upon launch
         * 
         * @return builder
         * 
         */
        public Builder userData(String userData) {
            return userData(Output.of(userData));
        }

        public InstanceState build() {
            return $;
        }
    }

}
