// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.SavingsPlan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SavingsPlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final SavingsPlanArgs Empty = new SavingsPlanArgs();

    /**
     * Whether Savings Plan should be renewed at the end of the period (defaults to false)
     * 
     */
    @Import(name="autoRenewal")
    private @Nullable Output<Boolean> autoRenewal;

    /**
     * @return Whether Savings Plan should be renewed at the end of the period (defaults to false)
     * 
     */
    public Optional<Output<Boolean>> autoRenewal() {
        return Optional.ofNullable(this.autoRenewal);
    }

    /**
     * Custom display name, used in invoices
     * 
     */
    @Import(name="displayName", required=true)
    private Output<String> displayName;

    /**
     * @return Custom display name, used in invoices
     * 
     */
    public Output<String> displayName() {
        return this.displayName;
    }

    /**
     * Savings Plan flavor. The list of available flavors can be retrieved in the next section.
     * 
     */
    @Import(name="flavor", required=true)
    private Output<String> flavor;

    /**
     * @return Savings Plan flavor. The list of available flavors can be retrieved in the next section.
     * 
     */
    public Output<String> flavor() {
        return this.flavor;
    }

    /**
     * Periodicity of the Savings Plan
     * 
     */
    @Import(name="period", required=true)
    private Output<String> period;

    /**
     * @return Periodicity of the Savings Plan
     * 
     */
    public Output<String> period() {
        return this.period;
    }

    /**
     * ID of the public cloud project
     * 
     */
    @Import(name="serviceName", required=true)
    private Output<String> serviceName;

    /**
     * @return ID of the public cloud project
     * 
     */
    public Output<String> serviceName() {
        return this.serviceName;
    }

    /**
     * Size of the Savings Plan
     * 
     */
    @Import(name="size", required=true)
    private Output<Integer> size;

    /**
     * @return Size of the Savings Plan
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }

    private SavingsPlanArgs() {}

    private SavingsPlanArgs(SavingsPlanArgs $) {
        this.autoRenewal = $.autoRenewal;
        this.displayName = $.displayName;
        this.flavor = $.flavor;
        this.period = $.period;
        this.serviceName = $.serviceName;
        this.size = $.size;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SavingsPlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SavingsPlanArgs $;

        public Builder() {
            $ = new SavingsPlanArgs();
        }

        public Builder(SavingsPlanArgs defaults) {
            $ = new SavingsPlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoRenewal Whether Savings Plan should be renewed at the end of the period (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewal(@Nullable Output<Boolean> autoRenewal) {
            $.autoRenewal = autoRenewal;
            return this;
        }

        /**
         * @param autoRenewal Whether Savings Plan should be renewed at the end of the period (defaults to false)
         * 
         * @return builder
         * 
         */
        public Builder autoRenewal(Boolean autoRenewal) {
            return autoRenewal(Output.of(autoRenewal));
        }

        /**
         * @param displayName Custom display name, used in invoices
         * 
         * @return builder
         * 
         */
        public Builder displayName(Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName Custom display name, used in invoices
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param flavor Savings Plan flavor. The list of available flavors can be retrieved in the next section.
         * 
         * @return builder
         * 
         */
        public Builder flavor(Output<String> flavor) {
            $.flavor = flavor;
            return this;
        }

        /**
         * @param flavor Savings Plan flavor. The list of available flavors can be retrieved in the next section.
         * 
         * @return builder
         * 
         */
        public Builder flavor(String flavor) {
            return flavor(Output.of(flavor));
        }

        /**
         * @param period Periodicity of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder period(Output<String> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period Periodicity of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder period(String period) {
            return period(Output.of(period));
        }

        /**
         * @param serviceName ID of the public cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName ID of the public cloud project
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param size Size of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size of the Savings Plan
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        public SavingsPlanArgs build() {
            if ($.displayName == null) {
                throw new MissingRequiredPropertyException("SavingsPlanArgs", "displayName");
            }
            if ($.flavor == null) {
                throw new MissingRequiredPropertyException("SavingsPlanArgs", "flavor");
            }
            if ($.period == null) {
                throw new MissingRequiredPropertyException("SavingsPlanArgs", "period");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("SavingsPlanArgs", "serviceName");
            }
            if ($.size == null) {
                throw new MissingRequiredPropertyException("SavingsPlanArgs", "size");
            }
            return $;
        }
    }

}
