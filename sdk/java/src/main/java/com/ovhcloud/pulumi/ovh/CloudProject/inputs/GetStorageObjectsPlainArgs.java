// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProject.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStorageObjectsPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStorageObjectsPlainArgs Empty = new GetStorageObjectsPlainArgs();

    /**
     * Key to start with when listing objects
     * 
     */
    @Import(name="keyMarker")
    private @Nullable String keyMarker;

    /**
     * @return Key to start with when listing objects
     * 
     */
    public Optional<String> keyMarker() {
        return Optional.ofNullable(this.keyMarker);
    }

    /**
     * Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    @Import(name="limit")
    private @Nullable Double limit;

    /**
     * @return Limit the number of objects returned (1000 maximum, defaults to 1000)
     * 
     */
    public Optional<Double> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * Name
     * 
     */
    @Import(name="name", required=true)
    private String name;

    /**
     * @return Name
     * 
     */
    public String name() {
        return this.name;
    }

    /**
     * List objects whose key begins with this prefix
     * 
     */
    @Import(name="prefix")
    private @Nullable String prefix;

    /**
     * @return List objects whose key begins with this prefix
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Region name
     * 
     */
    @Import(name="regionName", required=true)
    private String regionName;

    /**
     * @return Region name
     * 
     */
    public String regionName() {
        return this.regionName;
    }

    /**
     * Service name
     * 
     */
    @Import(name="serviceName", required=true)
    private String serviceName;

    /**
     * @return Service name
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Version ID to start listing from
     * 
     */
    @Import(name="versionIdMarker")
    private @Nullable String versionIdMarker;

    /**
     * @return Version ID to start listing from
     * 
     */
    public Optional<String> versionIdMarker() {
        return Optional.ofNullable(this.versionIdMarker);
    }

    /**
     * List object versions
     * 
     */
    @Import(name="withVersions")
    private @Nullable Boolean withVersions;

    /**
     * @return List object versions
     * 
     */
    public Optional<Boolean> withVersions() {
        return Optional.ofNullable(this.withVersions);
    }

    private GetStorageObjectsPlainArgs() {}

    private GetStorageObjectsPlainArgs(GetStorageObjectsPlainArgs $) {
        this.keyMarker = $.keyMarker;
        this.limit = $.limit;
        this.name = $.name;
        this.prefix = $.prefix;
        this.regionName = $.regionName;
        this.serviceName = $.serviceName;
        this.versionIdMarker = $.versionIdMarker;
        this.withVersions = $.withVersions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStorageObjectsPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStorageObjectsPlainArgs $;

        public Builder() {
            $ = new GetStorageObjectsPlainArgs();
        }

        public Builder(GetStorageObjectsPlainArgs defaults) {
            $ = new GetStorageObjectsPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param keyMarker Key to start with when listing objects
         * 
         * @return builder
         * 
         */
        public Builder keyMarker(@Nullable String keyMarker) {
            $.keyMarker = keyMarker;
            return this;
        }

        /**
         * @param limit Limit the number of objects returned (1000 maximum, defaults to 1000)
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Double limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param name Name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            $.name = name;
            return this;
        }

        /**
         * @param prefix List objects whose key begins with this prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable String prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param regionName Region name
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param serviceName Service name
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param versionIdMarker Version ID to start listing from
         * 
         * @return builder
         * 
         */
        public Builder versionIdMarker(@Nullable String versionIdMarker) {
            $.versionIdMarker = versionIdMarker;
            return this;
        }

        /**
         * @param withVersions List object versions
         * 
         * @return builder
         * 
         */
        public Builder withVersions(@Nullable Boolean withVersions) {
            $.withVersions = withVersions;
            return this;
        }

        public GetStorageObjectsPlainArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("GetStorageObjectsPlainArgs", "name");
            }
            if ($.regionName == null) {
                throw new MissingRequiredPropertyException("GetStorageObjectsPlainArgs", "regionName");
            }
            if ($.serviceName == null) {
                throw new MissingRequiredPropertyException("GetStorageObjectsPlainArgs", "serviceName");
            }
            return $;
        }
    }

}
