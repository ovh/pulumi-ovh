// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.Ip.outputs;

import com.ovhcloud.pulumi.ovh.Ip.outputs.GetServiceRoutedTo;
import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceResult {
    /**
     * @return can be terminated
     * 
     */
    private Boolean canBeTerminated;
    /**
     * @return country
     * 
     */
    private String country;
    /**
     * @return Custom description on your ip
     * 
     */
    private String description;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return ip block
     * 
     */
    private String ip;
    /**
     * @return IP block organisation Id
     * 
     */
    private String organisationId;
    /**
     * @return Routage information
     * 
     */
    private List<GetServiceRoutedTo> routedTos;
    /**
     * @return Service where ip is routed to
     * 
     */
    private String serviceName;
    /**
     * @return Possible values for ip type ( &#34;cdn&#34;, &#34;cloud&#34;, &#34;dedicated&#34;, &#34;failover&#34;, &#34;hosted_ssl&#34;, &#34;housing&#34;, &#34;loadBalancing&#34;, &#34;mail&#34;, &#34;overthebox&#34;, &#34;pcc&#34;, &#34;pci&#34;, &#34;private&#34;, &#34;vpn&#34;, &#34;vps&#34;, &#34;vrack&#34;, &#34;xdsl&#34;)
     * 
     */
    private String type;

    private GetServiceResult() {}
    /**
     * @return can be terminated
     * 
     */
    public Boolean canBeTerminated() {
        return this.canBeTerminated;
    }
    /**
     * @return country
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return Custom description on your ip
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return ip block
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return IP block organisation Id
     * 
     */
    public String organisationId() {
        return this.organisationId;
    }
    /**
     * @return Routage information
     * 
     */
    public List<GetServiceRoutedTo> routedTos() {
        return this.routedTos;
    }
    /**
     * @return Service where ip is routed to
     * 
     */
    public String serviceName() {
        return this.serviceName;
    }
    /**
     * @return Possible values for ip type ( &#34;cdn&#34;, &#34;cloud&#34;, &#34;dedicated&#34;, &#34;failover&#34;, &#34;hosted_ssl&#34;, &#34;housing&#34;, &#34;loadBalancing&#34;, &#34;mail&#34;, &#34;overthebox&#34;, &#34;pcc&#34;, &#34;pci&#34;, &#34;private&#34;, &#34;vpn&#34;, &#34;vps&#34;, &#34;vrack&#34;, &#34;xdsl&#34;)
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean canBeTerminated;
        private String country;
        private String description;
        private String id;
        private String ip;
        private String organisationId;
        private List<GetServiceRoutedTo> routedTos;
        private String serviceName;
        private String type;
        public Builder() {}
        public Builder(GetServiceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.canBeTerminated = defaults.canBeTerminated;
    	      this.country = defaults.country;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.organisationId = defaults.organisationId;
    	      this.routedTos = defaults.routedTos;
    	      this.serviceName = defaults.serviceName;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder canBeTerminated(Boolean canBeTerminated) {
            if (canBeTerminated == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "canBeTerminated");
            }
            this.canBeTerminated = canBeTerminated;
            return this;
        }
        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder organisationId(String organisationId) {
            if (organisationId == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "organisationId");
            }
            this.organisationId = organisationId;
            return this;
        }
        @CustomType.Setter
        public Builder routedTos(List<GetServiceRoutedTo> routedTos) {
            if (routedTos == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "routedTos");
            }
            this.routedTos = routedTos;
            return this;
        }
        public Builder routedTos(GetServiceRoutedTo... routedTos) {
            return routedTos(List.of(routedTos));
        }
        @CustomType.Setter
        public Builder serviceName(String serviceName) {
            if (serviceName == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "serviceName");
            }
            this.serviceName = serviceName;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServiceResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetServiceResult build() {
            final var _resultValue = new GetServiceResult();
            _resultValue.canBeTerminated = canBeTerminated;
            _resultValue.country = country;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.ip = ip;
            _resultValue.organisationId = organisationId;
            _resultValue.routedTos = routedTos;
            _resultValue.serviceName = serviceName;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
