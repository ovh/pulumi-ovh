// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.ovhcloud.pulumi.ovh.CloudProjectDatabase.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MongoDbUserState extends com.pulumi.resources.ResourceArgs {

    public static final MongoDbUserState Empty = new MongoDbUserState();

    /**
     * Cluster ID.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return Cluster ID.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Date of the creation of the user.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date of the creation of the user.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Name of the user. A user named &#34;admin&#34; is mapped with already created admin{@literal @}admin user instead of creating a new user.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the user. A user named &#34;admin&#34; is mapped with already created admin{@literal @}admin user instead of creating a new user.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * (Sensitive) Password of the user.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return (Sensitive) Password of the user.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Arbitrary string to change to trigger a password update
     * 
     */
    @Import(name="passwordReset")
    private @Nullable Output<String> passwordReset;

    /**
     * @return Arbitrary string to change to trigger a password update
     * 
     */
    public Optional<Output<String>> passwordReset() {
        return Optional.ofNullable(this.passwordReset);
    }

    /**
     * Roles the user belongs to. Since version 0.37.0, the authentication database must be indicated for all roles. Available roles:
     * * `backup{@literal @}admin`
     * * `clusterAdmin{@literal @}admin`
     * * `clusterManager{@literal @}admin`
     * * `clusterMonitor{@literal @}admin`
     * * `dbAdmin{@literal @}(defined db)`
     * * `dbAdminAnyDatabase{@literal @}admin`
     * * `dbOwner{@literal @}(defined db)`
     * * `enableSharding{@literal @}(defined db)`
     * * `hostManager{@literal @}admin`
     * * `read{@literal @}(defined db)`
     * * `readAnyDatabase{@literal @}admin`
     * * `readWrite{@literal @}(defined db)`
     * * `readWriteAnyDatabase{@literal @}admin`
     * * `restore{@literal @}admin`
     * * `root{@literal @}admin`
     * * `userAdmin{@literal @}(defined db)`
     * * `userAdminAnyDatabase{@literal @}admin`
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Roles the user belongs to. Since version 0.37.0, the authentication database must be indicated for all roles. Available roles:
     * * `backup{@literal @}admin`
     * * `clusterAdmin{@literal @}admin`
     * * `clusterManager{@literal @}admin`
     * * `clusterMonitor{@literal @}admin`
     * * `dbAdmin{@literal @}(defined db)`
     * * `dbAdminAnyDatabase{@literal @}admin`
     * * `dbOwner{@literal @}(defined db)`
     * * `enableSharding{@literal @}(defined db)`
     * * `hostManager{@literal @}admin`
     * * `read{@literal @}(defined db)`
     * * `readAnyDatabase{@literal @}admin`
     * * `readWrite{@literal @}(defined db)`
     * * `readWriteAnyDatabase{@literal @}admin`
     * * `restore{@literal @}admin`
     * * `root{@literal @}admin`
     * * `userAdmin{@literal @}(defined db)`
     * * `userAdminAnyDatabase{@literal @}admin`
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    /**
     * @return The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
     * 
     */
    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    /**
     * Current status of the user.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current status of the user.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    private MongoDbUserState() {}

    private MongoDbUserState(MongoDbUserState $) {
        this.clusterId = $.clusterId;
        this.createdAt = $.createdAt;
        this.name = $.name;
        this.password = $.password;
        this.passwordReset = $.passwordReset;
        this.roles = $.roles;
        this.serviceName = $.serviceName;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongoDbUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongoDbUserState $;

        public Builder() {
            $ = new MongoDbUserState();
        }

        public Builder(MongoDbUserState defaults) {
            $ = new MongoDbUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId Cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param createdAt Date of the creation of the user.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date of the creation of the user.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param name Name of the user. A user named &#34;admin&#34; is mapped with already created admin{@literal @}admin user instead of creating a new user.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the user. A user named &#34;admin&#34; is mapped with already created admin{@literal @}admin user instead of creating a new user.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param password (Sensitive) Password of the user.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password (Sensitive) Password of the user.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordReset Arbitrary string to change to trigger a password update
         * 
         * @return builder
         * 
         */
        public Builder passwordReset(@Nullable Output<String> passwordReset) {
            $.passwordReset = passwordReset;
            return this;
        }

        /**
         * @param passwordReset Arbitrary string to change to trigger a password update
         * 
         * @return builder
         * 
         */
        public Builder passwordReset(String passwordReset) {
            return passwordReset(Output.of(passwordReset));
        }

        /**
         * @param roles Roles the user belongs to. Since version 0.37.0, the authentication database must be indicated for all roles. Available roles:
         * * `backup{@literal @}admin`
         * * `clusterAdmin{@literal @}admin`
         * * `clusterManager{@literal @}admin`
         * * `clusterMonitor{@literal @}admin`
         * * `dbAdmin{@literal @}(defined db)`
         * * `dbAdminAnyDatabase{@literal @}admin`
         * * `dbOwner{@literal @}(defined db)`
         * * `enableSharding{@literal @}(defined db)`
         * * `hostManager{@literal @}admin`
         * * `read{@literal @}(defined db)`
         * * `readAnyDatabase{@literal @}admin`
         * * `readWrite{@literal @}(defined db)`
         * * `readWriteAnyDatabase{@literal @}admin`
         * * `restore{@literal @}admin`
         * * `root{@literal @}admin`
         * * `userAdmin{@literal @}(defined db)`
         * * `userAdminAnyDatabase{@literal @}admin`
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Roles the user belongs to. Since version 0.37.0, the authentication database must be indicated for all roles. Available roles:
         * * `backup{@literal @}admin`
         * * `clusterAdmin{@literal @}admin`
         * * `clusterManager{@literal @}admin`
         * * `clusterMonitor{@literal @}admin`
         * * `dbAdmin{@literal @}(defined db)`
         * * `dbAdminAnyDatabase{@literal @}admin`
         * * `dbOwner{@literal @}(defined db)`
         * * `enableSharding{@literal @}(defined db)`
         * * `hostManager{@literal @}admin`
         * * `read{@literal @}(defined db)`
         * * `readAnyDatabase{@literal @}admin`
         * * `readWrite{@literal @}(defined db)`
         * * `readWriteAnyDatabase{@literal @}admin`
         * * `restore{@literal @}admin`
         * * `root{@literal @}admin`
         * * `userAdmin{@literal @}(defined db)`
         * * `userAdminAnyDatabase{@literal @}admin`
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Roles the user belongs to. Since version 0.37.0, the authentication database must be indicated for all roles. Available roles:
         * * `backup{@literal @}admin`
         * * `clusterAdmin{@literal @}admin`
         * * `clusterManager{@literal @}admin`
         * * `clusterMonitor{@literal @}admin`
         * * `dbAdmin{@literal @}(defined db)`
         * * `dbAdminAnyDatabase{@literal @}admin`
         * * `dbOwner{@literal @}(defined db)`
         * * `enableSharding{@literal @}(defined db)`
         * * `hostManager{@literal @}admin`
         * * `read{@literal @}(defined db)`
         * * `readAnyDatabase{@literal @}admin`
         * * `readWrite{@literal @}(defined db)`
         * * `readWriteAnyDatabase{@literal @}admin`
         * * `restore{@literal @}admin`
         * * `root{@literal @}admin`
         * * `userAdmin{@literal @}(defined db)`
         * * `userAdminAnyDatabase{@literal @}admin`
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        /**
         * @param serviceName The id of the public cloud project. If omitted, the `OVH_CLOUD_PROJECT_SERVICE` environment variable is used.
         * 
         * @return builder
         * 
         */
        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        /**
         * @param status Current status of the user.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current status of the user.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public MongoDbUserState build() {
            return $;
        }
    }

}
